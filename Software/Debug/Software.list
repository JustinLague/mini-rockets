
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08010188  08010188  00020188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010518  08010518  00030324  2**0
                  CONTENTS
  4 .ARM          00000008  08010518  08010518  00020518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010520  08010520  00030324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010520  08010520  00020520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010524  08010524  00020524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08010528  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030324  2**0
                  CONTENTS
 10 .bss          00006ca4  20000324  20000324  00030324  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006fc8  20006fc8  00030324  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002962b  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006556  00000000  00000000  0005997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b0  00000000  00000000  0005fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d98  00000000  00000000  00061f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e4d  00000000  00000000  00063d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ba48  00000000  00000000  0008cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7245  00000000  00000000  000b85b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018f7fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a44  00000000  00000000  0018f84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801016c 	.word	0x0801016c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	0801016c 	.word	0x0801016c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b974 	b.w	80010c4 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <initBarometerTask>:
	osMutexRobust,    				    	  // attr_bits
	NULL,                                     // memory for control block
	0U                                        // size for control block
};

void initBarometerTask(SPI_HandleTypeDef hspi1) {
 80010c8:	b084      	sub	sp, #16
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	f107 0c08 	add.w	ip, r7, #8
 80010d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	baro_hspi1 = hspi1;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <initBarometerTask+0x48>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2258      	movs	r2, #88	; 0x58
 80010e0:	4619      	mov	r1, r3
 80010e2:	f00e f911 	bl	800f308 <memcpy>

	barometre_mutex_id = osMutexNew(&Barometre_Mutex_attr);
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <initBarometerTask+0x4c>)
 80010e8:	f00a f881 	bl	800b1ee <osMutexNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <initBarometerTask+0x50>)
 80010f0:	6013      	str	r3, [r2, #0]

	osThreadNew(barometerTask, NULL, &barometerHeader_attr);
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <initBarometerTask+0x54>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <initBarometerTask+0x58>)
 80010f8:	f009 ffcc 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init barometer task\r\n");
 80010fc:	4909      	ldr	r1, [pc, #36]	; (8001124 <initBarometerTask+0x5c>)
 80010fe:	2000      	movs	r0, #0
 8001100:	f002 fb06 	bl	8003710 <SEGGER_RTT_WriteString>
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800110c:	b004      	add	sp, #16
 800110e:	4770      	bx	lr
 8001110:	20000370 	.word	0x20000370
 8001114:	08010390 	.word	0x08010390
 8001118:	200003c8 	.word	0x200003c8
 800111c:	0801036c 	.word	0x0801036c
 8001120:	08001129 	.word	0x08001129
 8001124:	08010198 	.word	0x08010198

08001128 <barometerTask>:

__NO_RETURN void barometerTask() {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	barometer_init(&barometer, SPI1_CS_ALTIMITER_GPIO_Port, SPI1_CS_ALTIMITER_Pin, &baro_hspi1);
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <barometerTask+0x3c>)
 800112e:	2208      	movs	r2, #8
 8001130:	490d      	ldr	r1, [pc, #52]	; (8001168 <barometerTask+0x40>)
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <barometerTask+0x44>)
 8001134:	f001 fc2e 	bl	8002994 <barometer_init>
	barometer_update(&barometer);
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <barometerTask+0x44>)
 800113a:	f001 fd59 	bl	8002bf0 <barometer_update>

	while(1) {
		osMutexAcquire(barometre_mutex_id, 0U);
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <barometerTask+0x48>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00a f8d8 	bl	800b2fa <osMutexAcquire>
			barometer_update(&barometer);
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <barometerTask+0x44>)
 800114c:	f001 fd50 	bl	8002bf0 <barometer_update>
		osMutexRelease(barometre_mutex_id);
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <barometerTask+0x48>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f00a f91b 	bl	800b390 <osMutexRelease>

		osDelay(2);
 800115a:	2002      	movs	r0, #2
 800115c:	f00a f82c 	bl	800b1b8 <osDelay>
		osMutexAcquire(barometre_mutex_id, 0U);
 8001160:	e7ed      	b.n	800113e <barometerTask+0x16>
 8001162:	bf00      	nop
 8001164:	20000370 	.word	0x20000370
 8001168:	40020000 	.word	0x40020000
 800116c:	20000340 	.word	0x20000340
 8001170:	200003c8 	.word	0x200003c8

08001174 <getPressure>:
	}
}

float getPressure() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	float pressure = 0.0;
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	607b      	str	r3, [r7, #4]

		osMutexAcquire(barometre_mutex_id, 0U);
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <getPressure+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00a f8b7 	bl	800b2fa <osMutexAcquire>
			pressure = barometer.pressure;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <getPressure+0x3c>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	607b      	str	r3, [r7, #4]
		osMutexRelease(barometre_mutex_id);
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <getPressure+0x38>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f00a f8fa 	bl	800b390 <osMutexRelease>

	return pressure;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	ee07 3a90 	vmov	s15, r3
}
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200003c8 	.word	0x200003c8
 80011b0:	20000340 	.word	0x20000340

080011b4 <initBuzzerTask>:
  .stack_size = 128
};

int iBuzzerMode = 3;

void initBuzzerTask() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	osThreadNew(buzzerTask, NULL, &buzzerHeader_attr);
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <initBuzzerTask+0x1c>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <initBuzzerTask+0x20>)
 80011be:	f009 ff69 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 80011c2:	4905      	ldr	r1, [pc, #20]	; (80011d8 <initBuzzerTask+0x24>)
 80011c4:	2000      	movs	r0, #0
 80011c6:	f002 faa3 	bl	8003710 <SEGGER_RTT_WriteString>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	080103a0 	.word	0x080103a0
 80011d4:	080011dd 	.word	0x080011dd
 80011d8:	080101b0 	.word	0x080101b0

080011dc <buzzerTask>:

__NO_RETURN void buzzerTask() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

	while(1) {

		switch(iBuzzerMode) {
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <buzzerTask+0xc0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d852      	bhi.n	800128e <buzzerTask+0xb2>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <buzzerTask+0x14>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001279 	.word	0x08001279
 80011f4:	08001251 	.word	0x08001251
 80011f8:	08001229 	.word	0x08001229
 80011fc:	08001201 	.word	0x08001201

			case BUZZER_TRIPLETICK:
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	4826      	ldr	r0, [pc, #152]	; (80012a0 <buzzerTask+0xc4>)
 8001208:	f002 fd9c 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f009 ffd2 	bl	800b1b8 <osDelay>
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <buzzerTask+0xc4>)
 800121c:	f002 fd92 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f009 ffc8 	bl	800b1b8 <osDelay>

			case BUZZER_DOUBLETICK:
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <buzzerTask+0xc4>)
 8001230:	f002 fd88 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f009 ffbe 	bl	800b1b8 <osDelay>
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <buzzerTask+0xc4>)
 8001244:	f002 fd7e 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f009 ffb4 	bl	800b1b8 <osDelay>

			case BUZZER_SINGLETICK:
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <buzzerTask+0xc4>)
 8001258:	f002 fd74 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f009 ffaa 	bl	800b1b8 <osDelay>
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <buzzerTask+0xc4>)
 800126c:	f002 fd6a 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(BEEP_LENGTH);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f009 ffa0 	bl	800b1b8 <osDelay>

			case BUZZER_IDLE:
			   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <buzzerTask+0xc4>)
 8001280:	f002 fd60 	bl	8003d44 <HAL_GPIO_WritePin>
			   osDelay(CYCLE_TIME);
 8001284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001288:	f009 ff96 	bl	800b1b8 <osDelay>
			   break;
 800128c:	e002      	b.n	8001294 <buzzerTask+0xb8>

			/* you can have any number of case statements */
			default : /* Optional */
			   iBuzzerMode = 0;
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <buzzerTask+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
			}

		osDelay(CYCLE_TIME - BEEP_LENGTH);
 8001294:	2000      	movs	r0, #0
 8001296:	f009 ff8f 	bl	800b1b8 <osDelay>
		switch(iBuzzerMode) {
 800129a:	e7a1      	b.n	80011e0 <buzzerTask+0x4>
 800129c:	20000000 	.word	0x20000000
 80012a0:	40020000 	.word	0x40020000

080012a4 <setBuzzerMode>:
	}
}

void setBuzzerMode(int _imode) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	iBuzzerMode = _imode;
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <setBuzzerMode+0x1c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000

080012c4 <initHeartbeatTask>:
  .priority = (osPriority_t) osPriorityIdle, //Set initial thread priority to high
  .stack_size = 128
};


void initHeartbeatTask() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	osThreadNew(heartbeatTask, NULL, &heartbeatHeader_attr);
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <initHeartbeatTask+0x1c>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <initHeartbeatTask+0x20>)
 80012ce:	f009 fee1 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init heartbeat task\r\n");
 80012d2:	4905      	ldr	r1, [pc, #20]	; (80012e8 <initHeartbeatTask+0x24>)
 80012d4:	2000      	movs	r0, #0
 80012d6:	f002 fa1b 	bl	8003710 <SEGGER_RTT_WriteString>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	080103c4 	.word	0x080103c4
 80012e4:	080012ed 	.word	0x080012ed
 80012e8:	080101c0 	.word	0x080101c0

080012ec <heartbeatTask>:

__NO_RETURN void heartbeatTask() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f009 ff61 	bl	800b1b8 <osDelay>
 80012f6:	e7fb      	b.n	80012f0 <heartbeatTask+0x4>

080012f8 <initIMUTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 128
};


void initIMUTask(SPI_HandleTypeDef hspi1) {
 80012f8:	b084      	sub	sp, #16
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	f107 0c08 	add.w	ip, r7, #8
 8001302:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadNew(IMUTask, NULL, &imuHeader_attr);
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <initIMUTask+0x2c>)
 8001308:	2100      	movs	r1, #0
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <initIMUTask+0x30>)
 800130c:	f009 fec2 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 8001310:	4906      	ldr	r1, [pc, #24]	; (800132c <initIMUTask+0x34>)
 8001312:	2000      	movs	r0, #0
 8001314:	f002 f9fc 	bl	8003710 <SEGGER_RTT_WriteString>
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001320:	b004      	add	sp, #16
 8001322:	4770      	bx	lr
 8001324:	080103e8 	.word	0x080103e8
 8001328:	08001331 	.word	0x08001331
 800132c:	080101d8 	.word	0x080101d8

08001330 <IMUTask>:

__NO_RETURN void IMUTask() {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8001334:	200a      	movs	r0, #10
 8001336:	f009 ff3f 	bl	800b1b8 <osDelay>
 800133a:	e7fb      	b.n	8001334 <IMUTask+0x4>

0800133c <initMainTask>:
//Calibration stuff
#define BUFFER_SIZE 20
buffer_t callibration_buf;
float buf_receive_data[BUFFER_SIZE];

void initMainTask() {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	osThreadNew(mainTask, NULL, &mainHeader_attr);
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <initMainTask+0x1c>)
 8001342:	2100      	movs	r1, #0
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <initMainTask+0x20>)
 8001346:	f009 fea5 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init main task\r\n");
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <initMainTask+0x24>)
 800134c:	2000      	movs	r0, #0
 800134e:	f002 f9df 	bl	8003710 <SEGGER_RTT_WriteString>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	0801040c 	.word	0x0801040c
 800135c:	08001365 	.word	0x08001365
 8001360:	080101e8 	.word	0x080101e8

08001364 <mainTask>:

__NO_RETURN void mainTask() {
 8001364:	b580      	push	{r7, lr}
 8001366:	b092      	sub	sp, #72	; 0x48
 8001368:	af00      	add	r7, sp, #0

	setBuzzerMode(BUZZER_SINGLETICK);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ff9a 	bl	80012a4 <setBuzzerMode>

	uint32_t launch_tick = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
	rocketdata_t rocketdata;
	rocket_state myRocketState = INITIALISATION;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	rocket_state previous_myRocketState = INITIALISATION;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	rocketDataInit(&rocketdata);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f8c8 	bl	8001518 <rocketDataInit>

	while (1) {
		rocketDataUpdate(&rocketdata);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f932 	bl	80015f4 <rocketDataUpdate>

		previous_myRocketState = myRocketState;
 8001390:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

		switch (myRocketState) {
 8001398:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800139c:	2b0c      	cmp	r3, #12
 800139e:	f200 809a 	bhi.w	80014d6 <mainTask+0x172>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <mainTask+0x44>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080013f5 	.word	0x080013f5
 80013b0:	080014d7 	.word	0x080014d7
 80013b4:	08001417 	.word	0x08001417
 80013b8:	080014d7 	.word	0x080014d7
 80013bc:	08001447 	.word	0x08001447
 80013c0:	080014d7 	.word	0x080014d7
 80013c4:	080014d7 	.word	0x080014d7
 80013c8:	08001465 	.word	0x08001465
 80013cc:	080014d7 	.word	0x080014d7
 80013d0:	08001489 	.word	0x08001489
 80013d4:	080014ad 	.word	0x080014ad
 80013d8:	080014cd 	.word	0x080014cd

			case INITIALISATION:

				SEGGER_RTT_WriteString(0, "State: INITIALISATION \r\n");
 80013dc:	4945      	ldr	r1, [pc, #276]	; (80014f4 <mainTask+0x190>)
 80013de:	2000      	movs	r0, #0
 80013e0:	f002 f996 	bl	8003710 <SEGGER_RTT_WriteString>

				rocketDataCalibrate(&rocketdata);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f8c4 	bl	8001574 <rocketDataCalibrate>
				myRocketState = STANDBY_ON_PAD;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				break;
 80013f2:	e07b      	b.n	80014ec <mainTask+0x188>

			case STANDBY_ON_PAD:

				if (rocketdata.altimeter_agl_altitude > FLIGHT_ALTITUDE_TRIGGER) {
 80013f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80014f8 <mainTask+0x194>
 80013fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	dc00      	bgt.n	8001408 <mainTask+0xa4>
					launch_tick = HAL_GetTick();
					myRocketState = POWERED_ASCENT;
				}

				break;
 8001406:	e071      	b.n	80014ec <mainTask+0x188>
					launch_tick = HAL_GetTick();
 8001408:	f002 f9cc 	bl	80037a4 <HAL_GetTick>
 800140c:	6478      	str	r0, [r7, #68]	; 0x44
					myRocketState = POWERED_ASCENT;
 800140e:	2303      	movs	r3, #3
 8001410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8001414:	e06a      	b.n	80014ec <mainTask+0x188>

			case POWERED_ASCENT:

				SEGGER_RTT_WriteString(0, "State: POWERED_ASCENT \r\n");
 8001416:	4939      	ldr	r1, [pc, #228]	; (80014fc <mainTask+0x198>)
 8001418:	2000      	movs	r0, #0
 800141a:	f002 f979 	bl	8003710 <SEGGER_RTT_WriteString>

				// Engine in burnout when acceleration below 0
				if ((HAL_GetTick() - launch_tick) > ULTRASONIC_DELAY_MS && rocketdata.altimeter_acceleration < 0) {
 800141e:	f002 f9c1 	bl	80037a4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800142c:	d95b      	bls.n	80014e6 <mainTask+0x182>
 800142e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d400      	bmi.n	800143e <mainTask+0xda>
					myRocketState = COASTING_ASCENT;
				}

				break;
 800143c:	e053      	b.n	80014e6 <mainTask+0x182>
					myRocketState = COASTING_ASCENT;
 800143e:	2305      	movs	r3, #5
 8001440:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8001444:	e04f      	b.n	80014e6 <mainTask+0x182>

			case COASTING_ASCENT:

				SEGGER_RTT_WriteString(0, "State: COASTING_ASCENT \r\n");
 8001446:	492e      	ldr	r1, [pc, #184]	; (8001500 <mainTask+0x19c>)
 8001448:	2000      	movs	r0, #0
 800144a:	f002 f961 	bl	8003710 <SEGGER_RTT_WriteString>

				if (apogeeDetection(&rocketdata) == 1) {
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f925 	bl	80016a0 <apogeeDetection>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d146      	bne.n	80014ea <mainTask+0x186>

					myRocketState = DROGUE_DESCENT;
 800145c:	2308      	movs	r3, #8
 800145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				}

				break;
 8001462:	e042      	b.n	80014ea <mainTask+0x186>

			case DROGUE_DESCENT:

				SEGGER_RTT_WriteString(0, "State: DROGUE_DESCENT \r\n");
 8001464:	4927      	ldr	r1, [pc, #156]	; (8001504 <mainTask+0x1a0>)
 8001466:	2000      	movs	r0, #0
 8001468:	f002 f952 	bl	8003710 <SEGGER_RTT_WriteString>

				if (rocketdata.altimeter_agl_altitude < MAIN_EJECTION_ALTITUDE) {
 800146c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001470:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80014f8 <mainTask+0x194>
 8001474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d400      	bmi.n	8001480 <mainTask+0x11c>
					myRocketState = MAIN_DESCENT;
				}

				break;
 800147e:	e035      	b.n	80014ec <mainTask+0x188>
					myRocketState = MAIN_DESCENT;
 8001480:	230a      	movs	r3, #10
 8001482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8001486:	e031      	b.n	80014ec <mainTask+0x188>

			case MAIN_DESCENT:

				SEGGER_RTT_WriteString(0, "State: MAIN_DESCENT \r\n");
 8001488:	491f      	ldr	r1, [pc, #124]	; (8001508 <mainTask+0x1a4>)
 800148a:	2000      	movs	r0, #0
 800148c:	f002 f940 	bl	8003710 <SEGGER_RTT_WriteString>

				//lorsque la fusee atteint le meme threshold que pour le flight mode
				if (rocketdata.altimeter_agl_altitude < FLIGHT_ALTITUDE_TRIGGER) {
 8001490:	edd7 7a08 	vldr	s15, [r7, #32]
 8001494:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80014f8 <mainTask+0x194>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d400      	bmi.n	80014a4 <mainTask+0x140>
					myRocketState = LANDING;
				}
				break;
 80014a2:	e023      	b.n	80014ec <mainTask+0x188>
					myRocketState = LANDING;
 80014a4:	230b      	movs	r3, #11
 80014a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80014aa:	e01f      	b.n	80014ec <mainTask+0x188>

			case LANDING:

				SEGGER_RTT_WriteString(0, "State: LANDING \r\n");
 80014ac:	4917      	ldr	r1, [pc, #92]	; (800150c <mainTask+0x1a8>)
 80014ae:	2000      	movs	r0, #0
 80014b0:	f002 f92e 	bl	8003710 <SEGGER_RTT_WriteString>

				//lorsque la vitesse n'est plus negative,
				if (rocketdata.altimeter_velocity > 0) {
 80014b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	dc00      	bgt.n	80014c4 <mainTask+0x160>
					myRocketState = RECOVERY;
				}
				break;
 80014c2:	e013      	b.n	80014ec <mainTask+0x188>
					myRocketState = RECOVERY;
 80014c4:	230c      	movs	r3, #12
 80014c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80014ca:	e00f      	b.n	80014ec <mainTask+0x188>

			case RECOVERY:

				SEGGER_RTT_WriteString(0, "State: RECOVERY \r\n");
 80014cc:	4910      	ldr	r1, [pc, #64]	; (8001510 <mainTask+0x1ac>)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f002 f91e 	bl	8003710 <SEGGER_RTT_WriteString>

				break;
 80014d4:	e00a      	b.n	80014ec <mainTask+0x188>

			default:

				SEGGER_RTT_WriteString(0, "State: DEFAULT \r\n");
 80014d6:	490f      	ldr	r1, [pc, #60]	; (8001514 <mainTask+0x1b0>)
 80014d8:	2000      	movs	r0, #0
 80014da:	f002 f919 	bl	8003710 <SEGGER_RTT_WriteString>

				myRocketState = INITIALISATION;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80014e4:	e002      	b.n	80014ec <mainTask+0x188>
				break;
 80014e6:	bf00      	nop
 80014e8:	e000      	b.n	80014ec <mainTask+0x188>
				break;
 80014ea:	bf00      	nop

		if (previous_myRocketState != myRocketState) {
			//TODO: LOG THIS IN MEMORY SOMEHOW
		}

		osDelay(APP_ALTITUDE_CYCLE_MS);
 80014ec:	2014      	movs	r0, #20
 80014ee:	f009 fe63 	bl	800b1b8 <osDelay>
		rocketDataUpdate(&rocketdata);
 80014f2:	e749      	b.n	8001388 <mainTask+0x24>
 80014f4:	080101fc 	.word	0x080101fc
 80014f8:	43fa0000 	.word	0x43fa0000
 80014fc:	08010218 	.word	0x08010218
 8001500:	08010234 	.word	0x08010234
 8001504:	08010250 	.word	0x08010250
 8001508:	0801026c 	.word	0x0801026c
 800150c:	08010284 	.word	0x08010284
 8001510:	08010298 	.word	0x08010298
 8001514:	080102ac 	.word	0x080102ac

08001518 <rocketDataInit>:
	}
}

void rocketDataInit(rocketdata_t *_rocketdata) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
		kalman_init(&(_rocketdata->kalman));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fcaf 	bl	8002e86 <kalman_init>

		_rocketdata->altimeter_ground_altitude = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
		_rocketdata->altimeter_agl_altitude = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
		_rocketdata->altimeter_acceleration = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
		_rocketdata->altimeter_velocity = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	621a      	str	r2, [r3, #32]

		_rocketdata->imu_acceleration = 0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
		_rocketdata->imu_velocity = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
		_rocketdata->imu_angular_rate = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30

		_rocketdata->last_update = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
		_rocketdata->calibrated = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <rocketDataCalibrate>:


// Set the MSL altitude
void rocketDataCalibrate(rocketdata_t *_rocketdata) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	buffer_new(&callibration_buf, buf_receive_data, BUFFER_SIZE);
 800157c:	2214      	movs	r2, #20
 800157e:	491b      	ldr	r1, [pc, #108]	; (80015ec <rocketDataCalibrate+0x78>)
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <rocketDataCalibrate+0x7c>)
 8001582:	f001 fc3d 	bl	8002e00 <buffer_new>

	float err = 0.0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]

	while (!_rocketdata->calibrated) {
 800158c:	e024      	b.n	80015d8 <rocketDataCalibrate+0x64>

		osDelay(CALIBRATION_DELAY_MS);
 800158e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001592:	f009 fe11 	bl	800b1b8 <osDelay>
 		rocketDataUpdate(_rocketdata);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f82c 	bl	80015f4 <rocketDataUpdate>
		_rocketdata->altimeter_ground_altitude = _rocketdata->kalman.altitude;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]

		buffer_push(&callibration_buf, _rocketdata->altimeter_ground_altitude);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <rocketDataCalibrate+0x7c>)
 80015b0:	f001 fc3e 	bl	8002e30 <buffer_push>

		//Small check to be sure this is the real ground altitude.
		err = getVariance(&callibration_buf);
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <rocketDataCalibrate+0x7c>)
 80015b6:	f000 f8e5 	bl	8001784 <getVariance>
 80015ba:	ed87 0a03 	vstr	s0, [r7, #12]
		if (err < 2.0) {
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d400      	bmi.n	80015d2 <rocketDataCalibrate+0x5e>
 80015d0:	e002      	b.n	80015d8 <rocketDataCalibrate+0x64>
			_rocketdata->calibrated = 1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
	while (!_rocketdata->calibrated) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0d6      	beq.n	800158e <rocketDataCalibrate+0x1a>
		}
	}
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200003dc 	.word	0x200003dc
 80015f0:	200003cc 	.word	0x200003cc

080015f4 <rocketDataUpdate>:

// Get new altitude, velocity and acceleration from the barometer and kalman filter
void rocketDataUpdate(rocketdata_t *_rocketdata) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	ed2d 8b02 	vpush	{d8}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
		/* Kalman filtering */
		float pressure = getPressure();
 8001600:	f7ff fdb8 	bl	8001174 <getPressure>
 8001604:	ed87 0a03 	vstr	s0, [r7, #12]

		kalman_update(&(_rocketdata->kalman), pressure_to_altitude(pressure), 0, (HAL_GetTick() - _rocketdata->last_update) / 1000.0f);
 8001608:	687c      	ldr	r4, [r7, #4]
 800160a:	ed97 0a03 	vldr	s0, [r7, #12]
 800160e:	f001 fbbf 	bl	8002d90 <pressure_to_altitude>
 8001612:	eeb0 8a40 	vmov.f32	s16, s0
 8001616:	f002 f8c5 	bl	80037a4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001698 <rocketDataUpdate+0xa4>
 800162e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001632:	eeb0 1a47 	vmov.f32	s2, s14
 8001636:	eddf 0a19 	vldr	s1, [pc, #100]	; 800169c <rocketDataUpdate+0xa8>
 800163a:	eeb0 0a48 	vmov.f32	s0, s16
 800163e:	4620      	mov	r0, r4
 8001640:	f001 fc42 	bl	8002ec8 <kalman_update>
		_rocketdata->last_update = HAL_GetTick();
 8001644:	f002 f8ae 	bl	80037a4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	635a      	str	r2, [r3, #52]	; 0x34

		_rocketdata->altimeter_agl_altitude= _rocketdata->kalman.altitude - _rocketdata->altimeter_ground_altitude;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a02 	vldr	s14, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a06 	vldr	s15, [r3, #24]
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edc3 7a07 	vstr	s15, [r3, #28]
		_rocketdata->altimeter_acceleration = _rocketdata->kalman.acceleration;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
		_rocketdata->altimeter_velocity = _rocketdata->kalman.velocity;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	621a      	str	r2, [r3, #32]

		_rocketdata->imu_acceleration = /*something*/ 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
		_rocketdata->imu_velocity = /*something*/ 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
		_rocketdata->imu_angular_rate = /*something*/ 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30

		//find a way to pass this data to memory
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	ecbd 8b02 	vpop	{d8}
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	447a0000 	.word	0x447a0000
 800169c:	00000000 	.word	0x00000000

080016a0 <apogeeDetection>:

// Calculate apogee detection
int apogeeDetection(rocketdata_t *_rocket_data) {
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

	int Apogee_Estimation = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
	//estimation de l'apogee
	//n,est valide qu'en coasting ascent
	// s(apogee) = s0 - 0.5 * v^2 / a
	Apogee_Estimation = _rocket_data->altimeter_agl_altitude - 0.5 * (_rocket_data->altimeter_velocity) * (_rocket_data->altimeter_velocity) / _rocket_data->altimeter_acceleration;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fef8 	bl	80004a8 <__aeabi_f2d>
 80016b8:	4604      	mov	r4, r0
 80016ba:	460d      	mov	r5, r1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fef1 	bl	80004a8 <__aeabi_f2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <apogeeDetection+0xdc>)
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4690      	mov	r8, r2
 80016d6:	4699      	mov	r9, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fee3 	bl	80004a8 <__aeabi_f2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4640      	mov	r0, r8
 80016e8:	4649      	mov	r1, r9
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4690      	mov	r8, r2
 80016f4:	4699      	mov	r9, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fed4 	bl	80004a8 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4640      	mov	r0, r8
 8001706:	4649      	mov	r1, r9
 8001708:	f7ff f850 	bl	80007ac <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fd68 	bl	80001e8 <__aeabi_dsub>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9ca 	bl	8000ab8 <__aeabi_d2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]

	//essaie pour contr� le sonic boom sans le delais
	//estime l'altitude de l'apogee et si la difference est trop grande
	//on annule le projet tu suite
	if (_rocket_data->altimeter_agl_altitude - Apogee_Estimation < 500) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	ed93 7a07 	vldr	s14, [r3, #28]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001780 <apogeeDetection+0xe0>
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d511      	bpl.n	800176e <apogeeDetection+0xce>
		//test supplementaire, l'acceleration se doit d'etre negative...
		if (_rocket_data->altimeter_acceleration < 0) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	d509      	bpl.n	800176e <apogeeDetection+0xce>
			//lorsque la vitesse est negative, cest l'apogee
			if (_rocket_data->altimeter_velocity < 0) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d501      	bpl.n	800176e <apogeeDetection+0xce>
				//Apogee_Altitude = _kalman.altitude;
				return 1;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <apogeeDetection+0xd0>
			}
		}
	}

	return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800177a:	bf00      	nop
 800177c:	3fe00000 	.word	0x3fe00000
 8001780:	43fa0000 	.word	0x43fa0000

08001784 <getVariance>:

float getVariance(buffer_t* callibration_buf) {
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	float moyenne = 0, somme = 0, variance = 0;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
	int i = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]

	for (i = 0 ; i < BUFFER_SIZE ; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e00f      	b.n	80017c8 <getVariance+0x44>
		  somme += callibration_buf->data[i];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 0 ; i < BUFFER_SIZE ; i++) {
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b13      	cmp	r3, #19
 80017cc:	ddec      	ble.n	80017a8 <getVariance+0x24>
	}

	moyenne = somme / BUFFER_SIZE;
 80017ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80017d2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	edc7 7a02 	vstr	s15, [r7, #8]

	for (i = 0 ; i < BUFFER_SIZE ; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e020      	b.n	8001826 <getVariance+0xa2>
		  variance += (moyenne - callibration_buf->data[i]) * (moyenne - callibration_buf->data[i]);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80017f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	edd7 6a02 	vldr	s13, [r7, #8]
 800180c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001814:	ed97 7a04 	vldr	s14, [r7, #16]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (i = 0 ; i < BUFFER_SIZE ; i++) {
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b13      	cmp	r3, #19
 800182a:	dddb      	ble.n	80017e4 <getVariance+0x60>
	}

	return variance / BUFFER_SIZE;
 800182c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001830:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001838:	eef0 7a66 	vmov.f32	s15, s13
}
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <initMemoryTask>:
};

SPI_HandleTypeDef memory_hspi2;
memory_t* memory;

void initMemoryTask(SPI_HandleTypeDef hspi2) {
 800184c:	b084      	sub	sp, #16
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
 8001852:	f107 0c08 	add.w	ip, r7, #8
 8001856:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memory_hspi2 = hspi2;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <initMemoryTask+0x3c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	2258      	movs	r2, #88	; 0x58
 8001864:	4619      	mov	r1, r3
 8001866:	f00d fd4f 	bl	800f308 <memcpy>

	osThreadNew(memoryTask, NULL, &memoryHeader_attr);
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <initMemoryTask+0x40>)
 800186c:	2100      	movs	r1, #0
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <initMemoryTask+0x44>)
 8001870:	f009 fc10 	bl	800b094 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init Memory task\r\n");
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <initMemoryTask+0x48>)
 8001876:	2000      	movs	r0, #0
 8001878:	f001 ff4a 	bl	8003710 <SEGGER_RTT_WriteString>
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001884:	b004      	add	sp, #16
 8001886:	4770      	bx	lr
 8001888:	2000042c 	.word	0x2000042c
 800188c:	08010430 	.word	0x08010430
 8001890:	08001899 	.word	0x08001899
 8001894:	080102c0 	.word	0x080102c0

08001898 <memoryTask>:

__NO_RETURN void memoryTask() {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	//TODO: THIS SHOULD WORK ON STM32F405
	//memory_init(memory, SPI2_CS_MEMORY_GPIO_Port, SPI2_CS_MEMORY_Pin, &memory_hspi2);

	memory_init(&memory, TEST_F446_DEV_BOARD_SPI2_GPIO_Port, TEST_F446_DEV_BOARD_SPI2_Pin, &memory_hspi2);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <memoryTask+0x28>)
 800189e:	2202      	movs	r2, #2
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <memoryTask+0x2c>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <memoryTask+0x30>)
 80018a4:	f001 fcd0 	bl	8003248 <memory_init>

	//TODO: trouver un moyen d'aller chercher l'information dans _rocketdata surement juste caller une fonction, ensuite doit parser les floats en array de bytes

	while(1) {

		if(memory->initialized != 0) {
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <memoryTask+0x30>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	7bdb      	ldrb	r3, [r3, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <memoryTask+0x22>
			continue;
		}

		osDelay(20);
 80018b2:	2014      	movs	r0, #20
 80018b4:	f009 fc80 	bl	800b1b8 <osDelay>
 80018b8:	e7f6      	b.n	80018a8 <memoryTask+0x10>
			continue;
 80018ba:	bf00      	nop
		if(memory->initialized != 0) {
 80018bc:	e7f4      	b.n	80018a8 <memoryTask+0x10>
 80018be:	bf00      	nop
 80018c0:	2000042c 	.word	0x2000042c
 80018c4:	40020400 	.word	0x40020400
 80018c8:	20000484 	.word	0x20000484

080018cc <initUSBTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 128
};


void initUSBTask() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	osThreadId_t usb_id = osThreadNew(USBTask, NULL, &usbHeader_attr);
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <initUSBTask+0x24>)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <initUSBTask+0x28>)
 80018d8:	f009 fbdc 	bl	800b094 <osThreadNew>
 80018dc:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init usb task\r\n");
 80018de:	4906      	ldr	r1, [pc, #24]	; (80018f8 <initUSBTask+0x2c>)
 80018e0:	2000      	movs	r0, #0
 80018e2:	f001 ff15 	bl	8003710 <SEGGER_RTT_WriteString>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08010454 	.word	0x08010454
 80018f4:	080018fd 	.word	0x080018fd
 80018f8:	080102d4 	.word	0x080102d4

080018fc <USBTask>:

__NO_RETURN void USBTask() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8001900:	200a      	movs	r0, #10
 8001902:	f009 fc59 	bl	800b1b8 <osDelay>
 8001906:	e7fb      	b.n	8001900 <USBTask+0x4>

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b093      	sub	sp, #76	; 0x4c
 800190c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f001 ff13 	bl	8003738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f84b 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 f947 	bl	8001ba8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800191a:	f000 f8d9 	bl	8001ad0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800191e:	f000 f90d 	bl	8001b3c <MX_SPI2_Init>
  MX_RTC_Init();
 8001922:	f000 f8af 	bl	8001a84 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001926:	f009 fb6b 	bl	800b000 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <main+0x90>)
 800192c:	2100      	movs	r1, #0
 800192e:	481b      	ldr	r0, [pc, #108]	; (800199c <main+0x94>)
 8001930:	f009 fbb0 	bl	800b094 <osThreadNew>
 8001934:	4603      	mov	r3, r0
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <main+0x98>)
 8001938:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initBarometerTask(hspi1);
 800193a:	4c1a      	ldr	r4, [pc, #104]	; (80019a4 <main+0x9c>)
 800193c:	4668      	mov	r0, sp
 800193e:	f104 0310 	add.w	r3, r4, #16
 8001942:	2248      	movs	r2, #72	; 0x48
 8001944:	4619      	mov	r1, r3
 8001946:	f00d fcdf 	bl	800f308 <memcpy>
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	f7ff fbbb 	bl	80010c8 <initBarometerTask>
  initBuzzerTask();
 8001952:	f7ff fc2f 	bl	80011b4 <initBuzzerTask>
  initHeartbeatTask();
 8001956:	f7ff fcb5 	bl	80012c4 <initHeartbeatTask>
  initIMUTask(hspi1);
 800195a:	4c12      	ldr	r4, [pc, #72]	; (80019a4 <main+0x9c>)
 800195c:	4668      	mov	r0, sp
 800195e:	f104 0310 	add.w	r3, r4, #16
 8001962:	2248      	movs	r2, #72	; 0x48
 8001964:	4619      	mov	r1, r3
 8001966:	f00d fccf 	bl	800f308 <memcpy>
 800196a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800196e:	f7ff fcc3 	bl	80012f8 <initIMUTask>
  initMainTask();
 8001972:	f7ff fce3 	bl	800133c <initMainTask>
  initMemoryTask(hspi2);
 8001976:	4c0c      	ldr	r4, [pc, #48]	; (80019a8 <main+0xa0>)
 8001978:	4668      	mov	r0, sp
 800197a:	f104 0310 	add.w	r3, r4, #16
 800197e:	2248      	movs	r2, #72	; 0x48
 8001980:	4619      	mov	r1, r3
 8001982:	f00d fcc1 	bl	800f308 <memcpy>
 8001986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800198a:	f7ff ff5f 	bl	800184c <initMemoryTask>
  initUSBTask();
 800198e:	f7ff ff9d 	bl	80018cc <initUSBTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001992:	f009 fb59 	bl	800b048 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001996:	e7fe      	b.n	8001996 <main+0x8e>
 8001998:	08010478 	.word	0x08010478
 800199c:	08001d25 	.word	0x08001d25
 80019a0:	20000558 	.word	0x20000558
 80019a4:	200004a8 	.word	0x200004a8
 80019a8:	20000500 	.word	0x20000500

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	; 0x50
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2230      	movs	r2, #48	; 0x30
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00d fcb2 	bl	800f324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <SystemClock_Config+0xd0>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <SystemClock_Config+0xd0>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <SystemClock_Config+0xd0>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <SystemClock_Config+0xd4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <SystemClock_Config+0xd4>)
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <SystemClock_Config+0xd4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a08:	2309      	movs	r3, #9
 8001a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a12:	2301      	movs	r3, #1
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a20:	2319      	movs	r3, #25
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc1a 	bl	8005270 <HAL_RCC_OscConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a42:	f000 f98b 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a46:	230f      	movs	r3, #15
 8001a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2105      	movs	r1, #5
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fe7b 	bl	8005760 <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a70:	f000 f974 	bl	8001d5c <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3750      	adds	r7, #80	; 0x50
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <MX_RTC_Init+0x48>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001a96:	227f      	movs	r2, #127	; 0x7f
 8001a98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_RTC_Init+0x44>)
 8001ab4:	f004 f934 	bl	8005d20 <HAL_RTC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001abe:	f000 f94d 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000488 	.word	0x20000488
 8001acc:	40002800 	.word	0x40002800

08001ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <MX_SPI1_Init+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b22:	f004 f9f7 	bl	8005f14 <HAL_SPI_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f000 f916 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200004a8 	.word	0x200004a8
 8001b38:	40013000 	.word	0x40013000

08001b3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <MX_SPI2_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b88:	220a      	movs	r2, #10
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_SPI2_Init+0x64>)
 8001b8e:	f004 f9c1 	bl	8005f14 <HAL_SPI_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b98:	f000 f8e0 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000500 	.word	0x20000500
 8001ba4:	40003800 	.word	0x40003800

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b45      	ldr	r3, [pc, #276]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a36      	ldr	r2, [pc, #216]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <MX_GPIO_Init+0x168>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f248 0118 	movw	r1, #32792	; 0x8018
 8001c50:	4830      	ldr	r0, [pc, #192]	; (8001d14 <MX_GPIO_Init+0x16c>)
 8001c52:	f002 f877 	bl	8003d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8001c5c:	482e      	ldr	r0, [pc, #184]	; (8001d18 <MX_GPIO_Init+0x170>)
 8001c5e:	f002 f871 	bl	8003d44 <HAL_GPIO_WritePin>
                          |LED_4_Pin|SENSE_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_F446_DEV_BOARD_SPI2_Pin|SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin
 8001c62:	2200      	movs	r2, #0
 8001c64:	f64e 0102 	movw	r1, #59394	; 0xe802
 8001c68:	482c      	ldr	r0, [pc, #176]	; (8001d1c <MX_GPIO_Init+0x174>)
 8001c6a:	f002 f86b 	bl	8003d44 <HAL_GPIO_WritePin>
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_1_GPIO_Port, FIRE_1_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	482b      	ldr	r0, [pc, #172]	; (8001d20 <MX_GPIO_Init+0x178>)
 8001c74:	f002 f866 	bl	8003d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_ALTIMITER_Pin SPI1_CS_IMU_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin;
 8001c78:	f248 0318 	movw	r3, #32792	; 0x8018
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4820      	ldr	r0, [pc, #128]	; (8001d14 <MX_GPIO_Init+0x16c>)
 8001c92:	f001 febb 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin SENSE_2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8001c96:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8001c9a:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|SENSE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	481a      	ldr	r0, [pc, #104]	; (8001d18 <MX_GPIO_Init+0x170>)
 8001cb0:	f001 feac 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_F446_DEV_BOARD_SPI2_Pin SPI2_CS_MEMORY_Pin HOLD_Pin CS_Pin
                           LED_1_Pin */
  GPIO_InitStruct.Pin = TEST_F446_DEV_BOARD_SPI2_Pin|SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin
 8001cb4:	f64e 0302 	movw	r3, #59394	; 0xe802
 8001cb8:	617b      	str	r3, [r7, #20]
                          |LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <MX_GPIO_Init+0x174>)
 8001cce:	f001 fe9d 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : FIRE_2_Pin SENSE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_2_Pin|SENSE_1_Pin;
 8001cd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x170>)
 8001ce8:	f001 fe90 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_1_Pin;
 8001cec:	2304      	movs	r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FIRE_1_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_GPIO_Init+0x178>)
 8001d04:	f001 fe82 	bl	8003a0c <HAL_GPIO_Init>

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020c00 	.word	0x40020c00

08001d24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001d2c:	f00c fdce 	bl	800e8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f009 fa41 	bl	800b1b8 <osDelay>
 8001d36:	e7fb      	b.n	8001d30 <StartDefaultTask+0xc>

08001d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d4a:	f001 fd17 	bl	800377c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40001000 	.word	0x40001000

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_MspInit+0x54>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_MspInit+0x54>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_MspInit+0x54>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_MspInit+0x54>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_MspInit+0x54>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_MspInit+0x54>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	210f      	movs	r1, #15
 8001daa:	f06f 0001 	mvn.w	r0, #1
 8001dae:	f001 fde1 	bl	8003974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RTC_MspInit+0x4c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001de0:	2302      	movs	r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 feb4 	bl	8005b5c <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001dfa:	f7ff ffaf 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RTC_MspInit+0x50>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40002800 	.word	0x40002800
 8001e10:	42470e3c 	.word	0x42470e3c

08001e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_SPI_MspInit+0x134>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e6e:	23e0      	movs	r3, #224	; 0xe0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4831      	ldr	r0, [pc, #196]	; (8001f50 <HAL_SPI_MspInit+0x13c>)
 8001e8a:	f001 fdbf 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e8e:	e057      	b.n	8001f40 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <HAL_SPI_MspInit+0x140>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d152      	bne.n	8001f40 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_SPI_MspInit+0x138>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eee:	230c      	movs	r3, #12
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <HAL_SPI_MspInit+0x144>)
 8001f0a:	f001 fd7f 	bl	8003a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f20:	2305      	movs	r3, #5
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <HAL_SPI_MspInit+0x148>)
 8001f2c:	f001 fd6e 	bl	8003a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	2024      	movs	r0, #36	; 0x24
 8001f36:	f001 fd1d 	bl	8003974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f3a:	2024      	movs	r0, #36	; 0x24
 8001f3c:	f001 fd36 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40003800 	.word	0x40003800
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	2036      	movs	r0, #54	; 0x36
 8001f76:	f001 fcfd 	bl	8003974 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f7a:	2036      	movs	r0, #54	; 0x36
 8001f7c:	f001 fd16 	bl	80039ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_InitTick+0xa4>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_InitTick+0xa4>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_InitTick+0xa4>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f9c:	f107 0210 	add.w	r2, r7, #16
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fda6 	bl	8005af8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fac:	f003 fd90 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_InitTick+0xa8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_InitTick+0xac>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_InitTick+0xb0>)
 8001fc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_InitTick+0xac>)
 8001fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_InitTick+0xac>)
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_InitTick+0xac>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_InitTick+0xac>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <HAL_InitTick+0xac>)
 8001fe6:	f005 f94a 	bl	800727e <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <HAL_InitTick+0xac>)
 8001ff2:	f005 f99d 	bl	8007330 <HAL_TIM_Base_Start_IT>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	431bde83 	.word	0x431bde83
 800200c:	2000055c 	.word	0x2000055c
 8002010:	40001000 	.word	0x40001000

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <SPI2_IRQHandler+0x10>)
 8002046:	f004 fd0f 	bl	8006a68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000500 	.word	0x20000500

08002054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <TIM6_DAC_IRQHandler+0x10>)
 800205a:	f005 f9d9 	bl	8007410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000055c 	.word	0x2000055c

08002068 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <OTG_FS_IRQHandler+0x10>)
 800206e:	f001 ffd2 	bl	8004016 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000689c 	.word	0x2000689c

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020a6:	490e      	ldr	r1, [pc, #56]	; (80020e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020bc:	4c0b      	ldr	r4, [pc, #44]	; (80020ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ca:	f7ff ffd7 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ce:	f00d f8f7 	bl	800f2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d2:	f7ff fc19 	bl	8001908 <main>
  bx  lr    
 80020d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 80020e4:	08010528 	.word	0x08010528
  ldr r2, =_sbss
 80020e8:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 80020ec:	20006fc8 	.word	0x20006fc8

080020f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC_IRQHandler>

080020f2 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b091      	sub	sp, #68	; 0x44
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	885b      	ldrh	r3, [r3, #2]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef ARM_MATH_CM0_FAMILY

    /* Loop unrolling */
    blkCnt = numSamples >> 2u;
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(blkCnt > 0u)
 8002126:	e052      	b.n	80021ce <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8002128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8002134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 800213a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800213e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8002150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002156:	ed97 7a07 	vldr	s14, [r7, #28]
 800215a:	edd7 7a05 	vldr	s15, [r7, #20]
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	3304      	adds	r3, #4
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 800217a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8002186:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800218a:	edd7 7a08 	vldr	s15, [r7, #32]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002196:	ed97 7a07 	vldr	s14, [r7, #28]
 800219a:	edd7 7a05 	vldr	s15, [r7, #20]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	3308      	adds	r3, #8
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	330c      	adds	r3, #12
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4u;
 80021b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b8:	3310      	adds	r3, #16
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4u;
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	3310      	adds	r3, #16
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4u;
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	3310      	adds	r3, #16
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	3b01      	subs	r3, #1
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
    while(blkCnt > 0u)
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1a9      	bne.n	8002128 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4u;
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while(blkCnt > 0u)
 80021dc:	e013      	b.n	8002206 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80021de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e0:	1d1a      	adds	r2, r3, #4
 80021e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021e4:	ed93 7a00 	vldr	s14, [r3]
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	1d1a      	adds	r2, r3, #4
 80021f6:	637a      	str	r2, [r7, #52]	; 0x34
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	3b01      	subs	r3, #1
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
    while(blkCnt > 0u)
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e8      	bne.n	80021de <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8002212:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8002216:	4618      	mov	r0, r3
 8002218:	3744      	adds	r7, #68	; 0x44
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8002222:	b480      	push	{r7}
 8002224:	b09b      	sub	sp, #108	; 0x6c
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	885b      	ldrh	r3, [r3, #2]
 8002242:	61bb      	str	r3, [r7, #24]
#ifndef ARM_MATH_CM0_FAMILY
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0u, j, loopCnt, k, l;      /* loop counters */
 800224a:	2300      	movs	r3, #0
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).    
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).    
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
 8002256:	e029      	b.n	80022ac <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 8002260:	e008      	b.n	8002274 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8002262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002264:	1d1a      	adds	r2, r3, #4
 8002266:	65ba      	str	r2, [r7, #88]	; 0x58
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
        j--;
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	3b01      	subs	r3, #1
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f3      	bne.n	8002262 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 800227a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800227c:	1d1a      	adds	r2, r3, #4
 800227e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002280:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002284:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
 8002286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002288:	3b01      	subs	r3, #1
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 800228c:	e008      	b.n	80022a0 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 800228e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	65ba      	str	r2, [r7, #88]	; 0x58
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
        j--;
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	3b01      	subs	r3, #1
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f3      	bne.n	800228e <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a8:	3b01      	subs	r3, #1
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(rowCnt > 0u)
 80022ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1d2      	bne.n	8002258 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.    
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28

    while(loopCnt > 0u)
 80022ba:	e1aa      	b.n	8002612 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,    
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points    
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022c8:	4413      	add	r3, r2
 80022ca:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points    
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	4413      	add	r3, r2
 80022da:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 80022dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
 80022ec:	e036      	b.n	800235c <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 80022ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	dd10      	ble.n	8002320 <arm_mat_inverse_f32+0xfe>
 80022fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d503      	bpl.n	800231a <arm_mat_inverse_f32+0xf8>
 8002312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	e016      	b.n	8002348 <arm_mat_inverse_f32+0x126>
 800231a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800231e:	e013      	b.n	8002348 <arm_mat_inverse_f32+0x126>
 8002320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eef1 7a67 	vneg.f32	s15, s15
 800232a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d505      	bpl.n	8002344 <arm_mat_inverse_f32+0x122>
 8002338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	eef1 7a67 	vneg.f32	s15, s15
 8002342:	e001      	b.n	8002348 <arm_mat_inverse_f32+0x126>
 8002344:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002348:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002352:	4413      	add	r3, r2
 8002354:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8002356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002358:	3301      	adds	r3, #1
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
 800235c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3c4      	bcc.n	80022ee <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if(maxC == 0.0f)
 8002364:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d102      	bne.n	8002378 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 8002372:	f06f 0304 	mvn.w	r3, #4
 8002376:	e186      	b.n	8002686 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1u;
 800237c:	2301      	movs	r3, #1
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      /* Check if the pivot element is the most significant of the column */
      if( (in > 0.0f ? in : -in) != maxC)
 8002380:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	dd02      	ble.n	8002394 <arm_mat_inverse_f32+0x172>
 800238e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002392:	e003      	b.n	800239c <arm_mat_inverse_f32+0x17a>
 8002394:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002398:	eef1 7a67 	vneg.f32	s15, s15
 800239c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023a0:	eef4 7a47 	vcmp.f32	s15, s14
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d069      	beq.n	800247e <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1u);
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40

        while(i > 0u)
 80023b4:	e060      	b.n	8002478 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c2:	4413      	add	r3, r2
 80023c4:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d2:	4413      	add	r3, r2
 80023d4:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to    
           * replace in the rows below */
          if((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	dd03      	ble.n	80023ee <arm_mat_inverse_f32+0x1cc>
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	e004      	b.n	80023f8 <arm_mat_inverse_f32+0x1d6>
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eef1 7a67 	vneg.f32	s15, s15
 80023f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023fc:	eef4 7a47 	vcmp.f32	s15, s14
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	d132      	bne.n	800246c <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns    
             * to the right of the pilot element */
            j = numCols - l;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	637b      	str	r3, [r7, #52]	; 0x34

            while(j > 0u)
 800240e:	e010      	b.n	8002432 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8002416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002418:	1d1a      	adds	r2, r3, #4
 800241a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800241c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8002422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002424:	1d1a      	adds	r2, r3, #4
 8002426:	663a      	str	r2, [r7, #96]	; 0x60
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	3b01      	subs	r3, #1
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
            while(j > 0u)
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1eb      	bne.n	8002410 <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	637b      	str	r3, [r7, #52]	; 0x34

            while(j > 0u)
 800243c:	e010      	b.n	8002460 <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800243e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	657a      	str	r2, [r7, #84]	; 0x54
 800244a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 8002450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002452:	1d1a      	adds	r2, r3, #4
 8002454:	65ba      	str	r2, [r7, #88]	; 0x58
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	3b01      	subs	r3, #1
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
            while(j > 0u)
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1eb      	bne.n	800243e <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1u;
 8002466:	2301      	movs	r3, #1
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 800246a:	e008      	b.n	800247e <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3301      	adds	r3, #1
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	3b01      	subs	r3, #1
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
        while(i > 0u)
 8002478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d19b      	bne.n	80023b6 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if((flag != 1u) && (in == 0.0f))
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	2b01      	cmp	r3, #1
 8002482:	d009      	beq.n	8002498 <arm_mat_inverse_f32+0x276>
 8002484:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002488:	eef5 7a40 	vcmp.f32	s15, #0.0
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d102      	bne.n	8002498 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 8002492:	f06f 0304 	mvn.w	r3, #4
 8002496:	e0f6      	b.n	8002686 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024a4:	4413      	add	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns    
       * to the right of the pilot element */
      j = (numCols - l);
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34

      while(j > 0u)
 80024ce:	e010      	b.n	80024f2 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix    
         * by the pivot element */
        in1 = *pInT1;
 80024d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 80024d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d8:	1d1a      	adds	r2, r3, #4
 80024da:	663a      	str	r2, [r7, #96]	; 0x60
 80024dc:	edd7 6a02 	vldr	s13, [r7, #8]
 80024e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80024e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e8:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	3b01      	subs	r3, #1
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1eb      	bne.n	80024d0 <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34

      while(j > 0u)
 80024fc:	e010      	b.n	8002520 <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix    
         * by the pivot element */
        in1 = *pInT2;
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8002504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	65fa      	str	r2, [r7, #92]	; 0x5c
 800250a:	edd7 6a02 	vldr	s13, [r7, #8]
 800250e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	3b01      	subs	r3, #1
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
      while(j > 0u)
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1eb      	bne.n	80024fe <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i    
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8002526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002528:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0u;
 800252e:	2300      	movs	r3, #0
 8002530:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c

      while(k > 0u)
 8002536:	e060      	b.n	80025fa <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if(i == l)
 8002538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	429a      	cmp	r2, r3
 800253e:	d10c      	bne.n	800255a <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,    
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800254a:	4413      	add	r3, r2
 800254c:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002554:	4413      	add	r3, r2
 8002556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002558:	e044      	b.n	80025e4 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 800255a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,    
             to replace the elements in the input matrix */
          j = (numCols - l);
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	637b      	str	r3, [r7, #52]	; 0x34

          while(j > 0u)
 8002570:	e017      	b.n	80025a2 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row    
               and a multiple of the reference row  */
            in1 = *pInT1;
 8002572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8002578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257a:	1d1a      	adds	r2, r3, #4
 800257c:	653a      	str	r2, [r7, #80]	; 0x50
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258c:	1d1a      	adds	r2, r3, #4
 800258e:	663a      	str	r2, [r7, #96]	; 0x60
 8002590:	ed97 7a02 	vldr	s14, [r7, #8]
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	3b01      	subs	r3, #1
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
          while(j > 0u)
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e4      	bne.n	8002572 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to    
             replace the elements in the destination matrix */
          j = numCols;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34

          while(j > 0u)
 80025ac:	e017      	b.n	80025de <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row    
               and a multiple of the reference row  */
            in1 = *pInT2;
 80025ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	1d1a      	adds	r2, r3, #4
 80025b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c8:	1d1a      	adds	r2, r3, #4
 80025ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	3b01      	subs	r3, #1
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
          while(j > 0u)
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e4      	bne.n	80025ae <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025ea:	4413      	add	r3, r2
 80025ec:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	3b01      	subs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	3301      	adds	r3, #1
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
      while(k > 0u)
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d19b      	bne.n	8002538 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8002600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002602:	3304      	adds	r3, #4
 8002604:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	3b01      	subs	r3, #1
 800260a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	3301      	adds	r3, #1
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    while(loopCnt > 0u)
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f ae51 	bne.w	80022bc <arm_mat_inverse_f32+0x9a>


#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if((flag != 1u) && (in == 0.0f))
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	2b01      	cmp	r3, #1
 8002624:	d02d      	beq.n	8002682 <arm_mat_inverse_f32+0x460>
 8002626:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800262a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d126      	bne.n	8002682 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
 800263e:	e00d      	b.n	800265c <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8002640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002646:	4413      	add	r3, r2
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d10a      	bne.n	800266c <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8002656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002658:	3301      	adds	r3, #1
 800265a:	643b      	str	r3, [r7, #64]	; 0x40
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002666:	429a      	cmp	r2, r3
 8002668:	d3ea      	bcc.n	8002640 <arm_mat_inverse_f32+0x41e>
 800266a:	e000      	b.n	800266e <arm_mat_inverse_f32+0x44c>
            break;
 800266c:	bf00      	nop
      }
      
      if (i == numRows * numCols)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002678:	429a      	cmp	r2, r3
 800267a:	d102      	bne.n	8002682 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 800267c:	23fb      	movs	r3, #251	; 0xfb
 800267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8002682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002686:	4618      	mov	r0, r3
 8002688:	376c      	adds	r7, #108	; 0x6c
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8002692:	b480      	push	{r7}
 8002694:	b095      	sub	sp, #84	; 0x54
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	885b      	ldrh	r3, [r3, #2]
 80026c0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	885b      	ldrh	r3, [r3, #2]
 80026c6:	84fb      	strh	r3, [r7, #38]	; 0x26
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
 80026c8:	2300      	movs	r3, #0
 80026ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80026cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 80026d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	4413      	add	r3, r2
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 80026da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026dc:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set    
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0u;
 80026e4:	2300      	movs	r3, #0
 80026e6:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 80026ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2u;
 80026f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while(colCnt > 0u)
 80026f8:	e061      	b.n	80027be <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 80026fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8002700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002706:	4413      	add	r3, r2
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8002716:	ed97 7a07 	vldr	s14, [r7, #28]
 800271a:	edd7 7a08 	vldr	s15, [r7, #32]
 800271e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002722:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 800272e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8002734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800273a:	4413      	add	r3, r2
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 800273e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002742:	edd7 7a05 	vldr	s15, [r7, #20]
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 800275c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002762:	4413      	add	r3, r2
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8002766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8002772:	ed97 7a07 	vldr	s14, [r7, #28]
 8002776:	edd7 7a08 	vldr	s15, [r7, #32]
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8002790:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002796:	4413      	add	r3, r2
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 800279a:	ed97 7a06 	vldr	s14, [r7, #24]
 800279e:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4u;
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	3310      	adds	r3, #16
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 80027b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027ba:	3b01      	subs	r3, #1
 80027bc:	867b      	strh	r3, [r7, #50]	; 0x32
        while(colCnt > 0u)
 80027be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d19a      	bne.n	80026fa <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.    
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4u;
 80027c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	867b      	strh	r3, [r7, #50]	; 0x32

        while(colCnt > 0u)
 80027cc:	e017      	b.n	80027fe <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 80027ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d0:	1d1a      	adds	r2, r3, #4
 80027d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027d4:	ed93 7a00 	vldr	s14, [r3]
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80027e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 80027ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f4:	4413      	add	r3, r2
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 80027f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027fa:	3b01      	subs	r3, #1
 80027fc:	867b      	strh	r3, [r7, #50]	; 0x32
        while(colCnt > 0u)
 80027fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e4      	bne.n	80027ce <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	643a      	str	r2, [r7, #64]	; 0x40
 800280a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280c:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 800280e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002810:	3301      	adds	r3, #1
 8002812:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8002820:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002822:	3b01      	subs	r3, #1
 8002824:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while(col > 0u);
 8002826:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f af5d 	bne.w	80026e8 <arm_mat_mult_f32+0x56>
      } while(col > 0u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 800282e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002832:	4413      	add	r3, r2
 8002834:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8002836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800283c:	4413      	add	r3, r2
 800283e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8002840:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002842:	3b01      	subs	r3, #1
 8002844:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while(row > 0u);
 8002846:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	f47f af41 	bne.w	80026d0 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8002854:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8002858:	4618      	mov	r0, r3
 800285a:	3754      	adds	r7, #84	; 0x54
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8002864:	b480      	push	{r7}
 8002866:	b091      	sub	sp, #68	; 0x44
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	885b      	ldrh	r3, [r3, #2]
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifndef ARM_MATH_CM0_FAMILY

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2u;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(blkCnt > 0u)
 8002898:	e052      	b.n	8002940 <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 800289a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 80028a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 80028ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80028b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 80028c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d4:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	3304      	adds	r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 80028ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 80028f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80028fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002904:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8002908:	ed97 7a07 	vldr	s14, [r7, #28]
 800290c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002914:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	3308      	adds	r3, #8
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	330c      	adds	r3, #12
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4u;
 8002928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292a:	3310      	adds	r3, #16
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4u;
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	3310      	adds	r3, #16
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4u;
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	3310      	adds	r3, #16
 8002938:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3b01      	subs	r3, #1
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
    while(blkCnt > 0u)
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1a9      	bne.n	800289a <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4u;
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while(blkCnt > 0u)
 800294e:	e013      	b.n	8002978 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	1d1a      	adds	r2, r3, #4
 8002954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002956:	ed93 7a00 	vldr	s14, [r3]
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	1d1a      	adds	r2, r3, #4
 8002968:	637a      	str	r2, [r7, #52]	; 0x34
 800296a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	3b01      	subs	r3, #1
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
    while(blkCnt > 0u)
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e8      	bne.n	8002950 <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8002984:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8002988:	4618      	mov	r0, r3
 800298a:	3744      	adds	r7, #68	; 0x44
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <barometer_init>:
/** Initialize the barometer struct
 *
 * @param[in]  barometer  A pointer to an allocated barometer struct
 */
void barometer_init(barometer_t *barometer, GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	80fb      	strh	r3, [r7, #6]
    uint32_t i = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

    //initialise the barometer parameters
    barometer->initialized = 0;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
    barometer->port = port;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	601a      	str	r2, [r3, #0]
    barometer->pin = pin;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	809a      	strh	r2, [r3, #4]
    barometer->spi = spi;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	609a      	str	r2, [r3, #8]
    barometer->pressure = 0;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    barometer->temperature = 0;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset the barometer
    barometer_reset(barometer);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f821 	bl	8002a18 <barometer_reset>

    // Read the calibration coefficient
    for (i = 0; i < 6; i++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e012      	b.n	8002a02 <barometer_init+0x6e>
        barometer->calibration[i] = barometer_read_prom(barometer, i + 1);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4619      	mov	r1, r3
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f844 	bl	8002a74 <barometer_read_prom>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4619      	mov	r1, r3
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3302      	adds	r3, #2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	6059      	str	r1, [r3, #4]
    for (i = 0; i < 6; i++) {
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d9e9      	bls.n	80029dc <barometer_init+0x48>
    }

    //set the handle to initialised
    barometer->initialized = 1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <barometer_reset>:
/** Send the RESET command to the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_reset(barometer_t *barometer)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    uint8_t tx[3] = { BAROMETER_RESET_COMMAND, 0x00, 0x00 };
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <barometer_reset+0x58>)
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	8019      	strh	r1, [r3, #0]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	0c12      	lsrs	r2, r2, #16
 8002a30:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f001 f981 	bl	8003d44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(barometer->spi, tx, 1, 10);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6898      	ldr	r0, [r3, #8]
 8002a46:	f107 010c 	add.w	r1, r7, #12
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f003 faea 	bl	8006026 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	889b      	ldrh	r3, [r3, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f001 f971 	bl	8003d44 <HAL_GPIO_WritePin>

    osDelay(5);
 8002a62:	2005      	movs	r0, #5
 8002a64:	f008 fba8 	bl	800b1b8 <osDelay>
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	080102f0 	.word	0x080102f0

08002a74 <barometer_read_prom>:
 * @param[in]  coef_num   Coefficient number index to be received.
 *
 * @return the coefficient number for the given index
 */
static uint16_t barometer_read_prom(barometer_t *barometer, uint8_t coefficient)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[3] = { ((uint8_t) (PROM_READ_COMMAND + coefficient * 2)), 0, 0 };
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	3350      	adds	r3, #80	; 0x50
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	733b      	strb	r3, [r7, #12]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	737b      	strb	r3, [r7, #13]
 8002a90:	2300      	movs	r3, #0
 8002a92:	73bb      	strb	r3, [r7, #14]
    uint8_t rx[3] = { 0 };
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <barometer_read_prom+0x7c>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	813b      	strh	r3, [r7, #8]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	889b      	ldrh	r3, [r3, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f001 f94b 	bl	8003d44 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(barometer->spi, tx, rx, (uint16_t) sizeof(tx), 1000);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6898      	ldr	r0, [r3, #8]
 8002ab2:	f107 0208 	add.w	r2, r7, #8
 8002ab6:	f107 010c 	add.w	r1, r7, #12
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f003 fcfd 	bl	80064c0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	889b      	ldrh	r3, [r3, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f001 f937 	bl	8003d44 <HAL_GPIO_WritePin>

    return (rx[1] << 8) + rx[2];
 8002ad6:	7a7b      	ldrb	r3, [r7, #9]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	7abb      	ldrb	r3, [r7, #10]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b29b      	uxth	r3, r3
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	080102f4 	.word	0x080102f4

08002af4 <barometer_read_data>:
 * @param[in]  cmd        Determines the timeout to be applied
 *
 * @return a 32-bit value
 */
static uint32_t barometer_read_data(barometer_t *barometer, uint8_t cmd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
    uint8_t rx[10] = { 0 };
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	809a      	strh	r2, [r3, #4]
    uint8_t tx = CMD_ADC_CONV + cmd;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	3340      	adds	r3, #64	; 0x40
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	72fb      	strb	r3, [r7, #11]

    // Pull CS low to initiate communication
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	889b      	ldrh	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	4619      	mov	r1, r3
 8002b22:	f001 f90f 	bl	8003d44 <HAL_GPIO_WritePin>

    // Send conversion command
    HAL_SPI_Transmit(barometer->spi, &tx, 1, 10);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6898      	ldr	r0, [r3, #8]
 8002b2a:	f107 010b 	add.w	r1, r7, #11
 8002b2e:	230a      	movs	r3, #10
 8002b30:	2201      	movs	r2, #1
 8002b32:	f003 fa78 	bl	8006026 <HAL_SPI_Transmit>

    // Wait necessary conversion time, which depends on the specific command
    switch (cmd & 0x0F) {
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d829      	bhi.n	8002b94 <barometer_read_data+0xa0>
 8002b40:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <barometer_read_data+0x54>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002b95 	.word	0x08002b95
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b95 	.word	0x08002b95
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b95 	.word	0x08002b95
 8002b60:	08002b85 	.word	0x08002b85
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002b8d 	.word	0x08002b8d
        case CMD_ADC_256:
            //delay = 900us
            osDelay(1);
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f008 fb23 	bl	800b1b8 <osDelay>
            break;
 8002b72:	e00f      	b.n	8002b94 <barometer_read_data+0xa0>
        case CMD_ADC_512:
            //delay = 3ms;
            osDelay(3);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f008 fb1f 	bl	800b1b8 <osDelay>
            break;
 8002b7a:	e00b      	b.n	8002b94 <barometer_read_data+0xa0>
        case CMD_ADC_1024:
            //delay = 4ms;
            osDelay(4);
 8002b7c:	2004      	movs	r0, #4
 8002b7e:	f008 fb1b 	bl	800b1b8 <osDelay>
            break;
 8002b82:	e007      	b.n	8002b94 <barometer_read_data+0xa0>
        case CMD_ADC_2048:
            //delay = 6ms;
            osDelay(6);
 8002b84:	2006      	movs	r0, #6
 8002b86:	f008 fb17 	bl	800b1b8 <osDelay>
            break;
 8002b8a:	e003      	b.n	8002b94 <barometer_read_data+0xa0>
        case CMD_ADC_4096:
            //delay = 10ms;
            osDelay(10);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f008 fb13 	bl	800b1b8 <osDelay>
            break;
 8002b92:	bf00      	nop
    }

    // Pull CS high to finish the conversion
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	889b      	ldrh	r3, [r3, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f001 f8d0 	bl	8003d44 <HAL_GPIO_WritePin>
    osDelay(10);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f008 fb07 	bl	800b1b8 <osDelay>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	889b      	ldrh	r3, [r3, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f001 f8c5 	bl	8003d44 <HAL_GPIO_WritePin>

    // Receive the data after the conversion
    HAL_SPI_Receive(barometer->spi, rx, 4, 10);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6898      	ldr	r0, [r3, #8]
 8002bbe:	f107 010c 	add.w	r1, r7, #12
 8002bc2:	230a      	movs	r3, #10
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	f003 fb6a 	bl	800629e <HAL_SPI_Receive>

    // Pull CS high after read
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	889b      	ldrh	r3, [r3, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f001 f8b5 	bl	8003d44 <HAL_GPIO_WritePin>

    // First byte is not data
    return (rx[1] << 16) | (rx[2] << 8) | rx[3];
 8002bda:	7b7b      	ldrb	r3, [r7, #13]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	4313      	orrs	r3, r2
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	4313      	orrs	r3, r2
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <barometer_update>:
/** Update the pressure and temperature value from the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_update(barometer_t *barometer)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b09c      	sub	sp, #112	; 0x70
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t delta_temperature;
    int64_t offset, sensitivity;
    float new_pressure;

    // See the chip (MS5607) datasheet for more information on these conversions
    raw_pressure = barometer_read_data(barometer, CMD_ADC_D1 + CMD_ADC_1024);
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002bfe:	f7ff ff79 	bl	8002af4 <barometer_read_data>
 8002c02:	66f8      	str	r0, [r7, #108]	; 0x6c
    raw_temperature = barometer_read_data(barometer,  CMD_ADC_D2 + CMD_ADC_1024);
 8002c04:	2114      	movs	r1, #20
 8002c06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c08:	f7ff ff74 	bl	8002af4 <barometer_read_data>
 8002c0c:	66b8      	str	r0, [r7, #104]	; 0x68

    // dT = D2 - C5 * 2⁸
    // TEMP = 2000 + dT * C6 / 2²³
    delta_temperature = raw_temperature - (barometer->calibration[4] << 8);
 8002c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	667b      	str	r3, [r7, #100]	; 0x64
    barometer->temperature = (2000 + (delta_temperature * barometer->calibration[5] >> 23)) / 100.0f;
 8002c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	0ddb      	lsrs	r3, r3, #23
 8002c26:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c32:	eddf 6a55 	vldr	s13, [pc, #340]	; 8002d88 <barometer_update+0x198>
 8002c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // OFF = = C2 * 2¹⁷ + (C4 * dT ) / 2⁶
    // SENS = C1 * 2 + (C3 * dT ) / 2⁷
    // PRESSURE = (D1 * SENS / 2²¹ - OFF) / 2¹⁵
    offset = (((int64_t)barometer->calibration[1]) << 17) + (barometer->calibration[3] * delta_temperature >> 6);
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2200      	movs	r2, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
 8002c48:	637a      	str	r2, [r7, #52]	; 0x34
 8002c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002c4e:	460b      	mov	r3, r1
 8002c50:	0bdb      	lsrs	r3, r3, #15
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	460b      	mov	r3, r1
 8002c56:	045b      	lsls	r3, r3, #17
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c72:	4602      	mov	r2, r0
 8002c74:	189b      	adds	r3, r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c86:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    sensitivity = (((int64_t)barometer->calibration[0]) << 16) + (barometer->calibration[2] * delta_temperature >> 7);
 8002c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	627a      	str	r2, [r7, #36]	; 0x24
 8002c94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	09db      	lsrs	r3, r3, #7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    //Spike detection to prevent early destruction of the rocket.
    new_pressure = (((raw_pressure * sensitivity >> 21) - offset) >> 15);
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	617a      	str	r2, [r7, #20]
 8002cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce0:	465a      	mov	r2, fp
 8002ce2:	fb02 f203 	mul.w	r2, r2, r3
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	4651      	mov	r1, sl
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	fba2 4501 	umull	r4, r5, r2, r1
 8002cf8:	442b      	add	r3, r5
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	0d62      	lsrs	r2, r4, #21
 8002d06:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 8002d0a:	156b      	asrs	r3, r5, #21
 8002d0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d10:	ebb2 0800 	subs.w	r8, r2, r0
 8002d14:	eb63 0901 	sbc.w	r9, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 8002d24:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 8002d28:	ea4f 33e9 	mov.w	r3, r9, asr #15
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fe f80a 	bl	8000d48 <__aeabi_l2f>
 8002d34:	4603      	mov	r3, r0
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(barometer->pressure > 0) {
 8002d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	dd16      	ble.n	8002d76 <barometer_update+0x186>
    	barometer->pressure = fabs(new_pressure - barometer->pressure) > SPIKE_DETECTION_THRESHOLD ? barometer->pressure : new_pressure;
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	eef0 7ae7 	vabs.f32	s15, s15
 8002d5a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002d8c <barometer_update+0x19c>
 8002d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	dd02      	ble.n	8002d6e <barometer_update+0x17e>
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	e000      	b.n	8002d70 <barometer_update+0x180>
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d72:	6253      	str	r3, [r2, #36]	; 0x24
    } else {
    	barometer->pressure = new_pressure;
    }
}
 8002d74:	e002      	b.n	8002d7c <barometer_update+0x18c>
    	barometer->pressure = new_pressure;
 8002d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d7c:	bf00      	nop
 8002d7e:	3770      	adds	r7, #112	; 0x70
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	42c80000 	.word	0x42c80000
 8002d8c:	47c35000 	.word	0x47c35000

08002d90 <pressure_to_altitude>:
 * @return the altitude in meters
 *
 * @note uses the NOAA formula, adpated for meters and simplified with my TI
 */
float pressure_to_altitude(float pressure)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	ed87 0a01 	vstr	s0, [r7, #4]
    return 44307.693f - 4942.781f * pow(pressure, 0.190284);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fb84 	bl	80004a8 <__aeabi_f2d>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002de8 <pressure_to_altitude+0x58>
 8002da8:	ec43 2b10 	vmov	d0, r2, r3
 8002dac:	f00c fac2 	bl	800f334 <pow>
 8002db0:	ec51 0b10 	vmov	r0, r1, d0
 8002db4:	a30e      	add	r3, pc, #56	; (adr r3, 8002df0 <pressure_to_altitude+0x60>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fbcd 	bl	8000558 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	a10d      	add	r1, pc, #52	; (adr r1, 8002df8 <pressure_to_altitude+0x68>)
 8002dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dc8:	f7fd fa0e 	bl	80001e8 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd fe98 	bl	8000b08 <__aeabi_d2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	ee07 3a90 	vmov	s15, r3
}
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	e279dd3c 	.word	0xe279dd3c
 8002dec:	3fc85b39 	.word	0x3fc85b39
 8002df0:	e0000000 	.word	0xe0000000
 8002df4:	40b34ec7 	.word	0x40b34ec7
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	40e5a276 	.word	0x40e5a276

08002e00 <buffer_new>:
 * @return     :	none
 *
 * @Deprecated, use BUFFER_NEW macro
 */
void buffer_new(buffer_t *buffer, float *data, uint32_t size)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
    buffer->idx_in = 0;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    buffer->idx_out = 0;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    buffer->data = data;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	601a      	str	r2, [r3, #0]
    buffer->size = size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <buffer_push>:
 * 				 	float ch			Data to push
 *
 * @return     :	int32_t				Number of elements in the buffer after the push
 */
void buffer_push(buffer_t *buffer, float ch)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	ed87 0a00 	vstr	s0, [r7]
    // Check if buffer is full
    if(buffer->idx_in == buffer->size) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d102      	bne.n	8002e4e <buffer_push+0x1e>
    	buffer->idx_in = 0;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
    }

	// Push data into the buffer and adjust count and indexer
	buffer->data[buffer->idx_in++] = ch;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	1c58      	adds	r0, r3, #1
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	6048      	str	r0, [r1, #4]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	601a      	str	r2, [r3, #0]
	buffer->idx_in %= buffer->size;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e70:	fb01 f202 	mul.w	r2, r1, r2
 8002e74:	1a9a      	subs	r2, r3, r2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <kalman_init>:

/** Initialize Kalman structure 
 * 
 * @param  kalmann  pointer to allocated kalman struct
 */
void kalman_init(kalman_t *kalman) {
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
    kalman->acceleration = 0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
    kalman->altitude = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    kalman->velocity = 0;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
    kalman->raw_acceleration = 0;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    kalman->raw_altitude = 0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]

    kalman->initialized = 1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	615a      	str	r2, [r3, #20]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <kalman_update>:

/**
 */
void kalman_update(kalman_t *kalman, float altitude, float acceleration, float dt)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0ae      	sub	sp, #184	; 0xb8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ed4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ed8:	ed87 1a00 	vstr	s2, [r7]
    uint32_t loop_counter = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t convergence = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    float temp1_3x1[2] = { 0 };
 8002ee8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
    arm_matrix_instance_f32 temp1_3x1_f32 = { .numCols = 1, .numRows = 3, .pData = temp1_3x1 };
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002efe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    float temp1_3x3[9] = { 0 };
 8002f06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f0a:	2224      	movs	r2, #36	; 0x24
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f00c fa08 	bl	800f324 <memset>
    arm_matrix_instance_f32 temp1_3x3_f32 = { .numCols = 3, .numRows = 3, .pData = temp1_3x3 };
 8002f14:	2303      	movs	r3, #3
 8002f16:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8002f20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f24:	66fb      	str	r3, [r7, #108]	; 0x6c

    float temp2_3x3[9] = { 0 };
 8002f26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00c f9f8 	bl	800f324 <memset>
    arm_matrix_instance_f32 temp2_3x3_f32 = { .numCols = 3, .numRows = 3, .pData = temp2_3x3 };
 8002f34:	2303      	movs	r3, #3
 8002f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002f38:	2303      	movs	r3, #3
 8002f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002f3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40

    float temp1_1x3[3] = { 0 };
 8002f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
    arm_matrix_instance_f32 temp1_1x3_f32 = { .numCols = 3, .numRows = 1, .pData = temp1_1x3 };
 8002f4e:	2301      	movs	r3, #1
 8002f50:	853b      	strh	r3, [r7, #40]	; 0x28
 8002f52:	2303      	movs	r3, #3
 8002f54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    float temp1_1x1[1] = { 0 };
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    arm_matrix_instance_f32 temp1_1x1_f32 = { .numCols = 1, .numRows = 1, .pData = temp1_1x1 };
 8002f62:	2301      	movs	r3, #1
 8002f64:	83bb      	strh	r3, [r7, #28]
 8002f66:	2301      	movs	r3, #1
 8002f68:	83fb      	strh	r3, [r7, #30]
 8002f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6e:	623b      	str	r3, [r7, #32]

    float temp2_1x1[1] = { 0 };
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    arm_matrix_instance_f32 temp2_1x1_f32 = { .numCols = 1, .numRows = 1, .pData = temp2_1x1 };
 8002f76:	2301      	movs	r3, #1
 8002f78:	823b      	strh	r3, [r7, #16]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	827b      	strh	r3, [r7, #18]
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	617b      	str	r3, [r7, #20]

    for (int i = X1_f32.numRows * X1_f32.numCols - 1; i >= 0; i--) {
 8002f84:	4b98      	ldr	r3, [pc, #608]	; (80031e8 <kalman_update+0x320>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b97      	ldr	r3, [pc, #604]	; (80031e8 <kalman_update+0x320>)
 8002f8c:	885b      	ldrh	r3, [r3, #2]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f98:	e010      	b.n	8002fbc <kalman_update+0xf4>
        X_past[i] = X1[i];
 8002f9a:	4a94      	ldr	r2, [pc, #592]	; (80031ec <kalman_update+0x324>)
 8002f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4992      	ldr	r1, [pc, #584]	; (80031f0 <kalman_update+0x328>)
 8002fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	601a      	str	r2, [r3, #0]
    for (int i = X1_f32.numRows * X1_f32.numCols - 1; i >= 0; i--) {
 8002fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	daea      	bge.n	8002f9a <kalman_update+0xd2>
    }

    for (int i = P1_f32.numRows * P1_f32.numCols - 1; i >= 0; i--) {
 8002fc4:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <kalman_update+0x32c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <kalman_update+0x32c>)
 8002fcc:	885b      	ldrh	r3, [r3, #2]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fd8:	e010      	b.n	8002ffc <kalman_update+0x134>
        P_past[i] = P1[i];
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <kalman_update+0x330>)
 8002fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4985      	ldr	r1, [pc, #532]	; (80031fc <kalman_update+0x334>)
 8002fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	601a      	str	r2, [r3, #0]
    for (int i = P1_f32.numRows * P1_f32.numCols - 1; i >= 0; i--) {
 8002ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003000:	2b00      	cmp	r3, #0
 8003002:	daea      	bge.n	8002fda <kalman_update+0x112>
    }

    Z[0] = altitude;
 8003004:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <kalman_update+0x338>)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6013      	str	r3, [r2, #0]

    do {
        // Predicted state, a priori estimate
        // x(k|k-1) = A * x(k-1|k-1)
        arm_mat_mult_f32(&A_f32, &X_past_f32, &X0_f32);
 800300a:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <kalman_update+0x33c>)
 800300c:	497e      	ldr	r1, [pc, #504]	; (8003208 <kalman_update+0x340>)
 800300e:	487f      	ldr	r0, [pc, #508]	; (800320c <kalman_update+0x344>)
 8003010:	f7ff fb3f 	bl	8002692 <arm_mat_mult_f32>

        // Predicted covariance, a priori estimate
        // P(k|k-1) = A * P(k-1|k-1) * A' + Q
        arm_mat_mult_f32(&A_f32, &P_past_f32, &temp1_3x3_f32);
 8003014:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003018:	461a      	mov	r2, r3
 800301a:	497d      	ldr	r1, [pc, #500]	; (8003210 <kalman_update+0x348>)
 800301c:	487b      	ldr	r0, [pc, #492]	; (800320c <kalman_update+0x344>)
 800301e:	f7ff fb38 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_mult_f32(&temp1_3x3_f32, &A_t_f32, &temp2_3x3_f32);
 8003022:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003026:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800302a:	497a      	ldr	r1, [pc, #488]	; (8003214 <kalman_update+0x34c>)
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fb30 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_add_f32(&temp2_3x3_f32, &Q_f32, &P0_f32);
 8003032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003036:	4a78      	ldr	r2, [pc, #480]	; (8003218 <kalman_update+0x350>)
 8003038:	4978      	ldr	r1, [pc, #480]	; (800321c <kalman_update+0x354>)
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f859 	bl	80020f2 <arm_mat_add_f32>

        // Innovation (or measurement residual)
        // y = Z - H * x(k|k-1)
        arm_mat_mult_f32(&H_f32, &X0_f32, &temp1_1x1_f32);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	461a      	mov	r2, r3
 8003046:	496f      	ldr	r1, [pc, #444]	; (8003204 <kalman_update+0x33c>)
 8003048:	4875      	ldr	r0, [pc, #468]	; (8003220 <kalman_update+0x358>)
 800304a:	f7ff fb22 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_sub_f32(&Z_f32, &temp1_1x1_f32, &Y_f32);
 800304e:	f107 031c 	add.w	r3, r7, #28
 8003052:	4a74      	ldr	r2, [pc, #464]	; (8003224 <kalman_update+0x35c>)
 8003054:	4619      	mov	r1, r3
 8003056:	4874      	ldr	r0, [pc, #464]	; (8003228 <kalman_update+0x360>)
 8003058:	f7ff fc04 	bl	8002864 <arm_mat_sub_f32>

        // Innovation (or residual) covariance
        // S = H * P(k|k-1) * H' + R
        arm_mat_mult_f32(&H_f32, &P0_f32, &temp1_1x3_f32);
 800305c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003060:	461a      	mov	r2, r3
 8003062:	496d      	ldr	r1, [pc, #436]	; (8003218 <kalman_update+0x350>)
 8003064:	486e      	ldr	r0, [pc, #440]	; (8003220 <kalman_update+0x358>)
 8003066:	f7ff fb14 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_mult_f32(&temp1_1x3_f32, &H_t_f32, &temp1_1x1_f32);
 800306a:	f107 021c 	add.w	r2, r7, #28
 800306e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003072:	496e      	ldr	r1, [pc, #440]	; (800322c <kalman_update+0x364>)
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb0c 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_add_f32(&temp1_1x1_f32, &R_f32, &temp2_1x1_f32);
 800307a:	f107 0210 	add.w	r2, r7, #16
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	496b      	ldr	r1, [pc, #428]	; (8003230 <kalman_update+0x368>)
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f834 	bl	80020f2 <arm_mat_add_f32>

        // Optimal Kalman gain
        // K = P(k|k-1) * H' * S^-1
        arm_mat_inverse_f32(&temp2_1x1_f32, &temp1_1x1_f32);
 800308a:	f107 021c 	add.w	r2, r7, #28
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f8c4 	bl	8002222 <arm_mat_inverse_f32>
        arm_mat_mult_f32(&P0_f32, &H_t_f32, &temp1_3x1_f32);
 800309a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800309e:	461a      	mov	r2, r3
 80030a0:	4962      	ldr	r1, [pc, #392]	; (800322c <kalman_update+0x364>)
 80030a2:	485d      	ldr	r0, [pc, #372]	; (8003218 <kalman_update+0x350>)
 80030a4:	f7ff faf5 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_mult_f32(&temp1_3x1_f32, &temp1_1x1_f32, &K_f32);
 80030a8:	f107 011c 	add.w	r1, r7, #28
 80030ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030b0:	4a60      	ldr	r2, [pc, #384]	; (8003234 <kalman_update+0x36c>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff faed 	bl	8002692 <arm_mat_mult_f32>

        // Updated (a posteriori) state estimate
        // X(k|k) = x(k|k-1) + K * y
        arm_mat_mult_f32(&K_f32, &Y_f32, &temp1_3x1_f32);
 80030b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030bc:	461a      	mov	r2, r3
 80030be:	4959      	ldr	r1, [pc, #356]	; (8003224 <kalman_update+0x35c>)
 80030c0:	485c      	ldr	r0, [pc, #368]	; (8003234 <kalman_update+0x36c>)
 80030c2:	f7ff fae6 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_add_f32(&X0_f32, &temp1_3x1_f32, &X1_f32);
 80030c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030ca:	4a47      	ldr	r2, [pc, #284]	; (80031e8 <kalman_update+0x320>)
 80030cc:	4619      	mov	r1, r3
 80030ce:	484d      	ldr	r0, [pc, #308]	; (8003204 <kalman_update+0x33c>)
 80030d0:	f7ff f80f 	bl	80020f2 <arm_mat_add_f32>

        // Updated (a posteriori) estimate covariance
        // P(k|k) = (I - K * H) * P(k|k-1)
        arm_mat_mult_f32(&K_f32, &H_f32, &temp1_3x3_f32);
 80030d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030d8:	461a      	mov	r2, r3
 80030da:	4951      	ldr	r1, [pc, #324]	; (8003220 <kalman_update+0x358>)
 80030dc:	4855      	ldr	r0, [pc, #340]	; (8003234 <kalman_update+0x36c>)
 80030de:	f7ff fad8 	bl	8002692 <arm_mat_mult_f32>
        arm_mat_sub_f32(&I_3x3_f32, &temp1_3x3_f32, &temp2_3x3_f32);
 80030e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030ea:	4619      	mov	r1, r3
 80030ec:	4852      	ldr	r0, [pc, #328]	; (8003238 <kalman_update+0x370>)
 80030ee:	f7ff fbb9 	bl	8002864 <arm_mat_sub_f32>
        arm_mat_mult_f32(&temp2_3x3_f32, &P0_f32, &P1_f32);
 80030f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <kalman_update+0x32c>)
 80030f8:	4947      	ldr	r1, [pc, #284]	; (8003218 <kalman_update+0x350>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fac9 	bl	8002692 <arm_mat_mult_f32>

        for (int i = K_last_f32.numRows * K_last_f32.numCols - 1; i >= 0; i--) {
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <kalman_update+0x374>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b4d      	ldr	r3, [pc, #308]	; (800323c <kalman_update+0x374>)
 8003108:	885b      	ldrh	r3, [r3, #2]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003114:	e03f      	b.n	8003196 <kalman_update+0x2ce>
            if ((K[i] - K_last[i]) / K_last[i] < CONVERGENCE_PRECISION) {
 8003116:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <kalman_update+0x378>)
 8003118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	ed93 7a00 	vldr	s14, [r3]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <kalman_update+0x37c>)
 8003126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003136:	4a43      	ldr	r2, [pc, #268]	; (8003244 <kalman_update+0x37c>)
 8003138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003148:	ee16 0a90 	vmov	r0, s13
 800314c:	f7fd f9ac 	bl	80004a8 <__aeabi_f2d>
 8003150:	a323      	add	r3, pc, #140	; (adr r3, 80031e0 <kalman_update+0x318>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fc71 	bl	8000a3c <__aeabi_dcmplt>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <kalman_update+0x2a6>
                convergence &= 1;
 8003160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800316c:	e002      	b.n	8003174 <kalman_update+0x2ac>
            } else {
                convergence = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }
            K_last[i] = K[i];
 8003174:	4a32      	ldr	r2, [pc, #200]	; (8003240 <kalman_update+0x378>)
 8003176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4930      	ldr	r1, [pc, #192]	; (8003244 <kalman_update+0x37c>)
 8003182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	601a      	str	r2, [r3, #0]
        for (int i = K_last_f32.numRows * K_last_f32.numCols - 1; i >= 0; i--) {
 800318c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003190:	3b01      	subs	r3, #1
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319a:	2b00      	cmp	r3, #0
 800319c:	dabb      	bge.n	8003116 <kalman_update+0x24e>
        }

        loop_counter++;
 800319e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a2:	3301      	adds	r3, #1
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    } while (convergence == 0 && loop_counter < CONVERGENCE_TIMEOUT);
 80031a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <kalman_update+0x2f2>
 80031b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b4:	2b63      	cmp	r3, #99	; 0x63
 80031b6:	f67f af28 	bls.w	800300a <kalman_update+0x142>

    //update handle values
    kalman->altitude = X1[0];
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <kalman_update+0x324>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	609a      	str	r2, [r3, #8]
    kalman->velocity = X1[1];
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <kalman_update+0x324>)
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	60da      	str	r2, [r3, #12]
    kalman->acceleration = X1[2];
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <kalman_update+0x324>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	611a      	str	r2, [r3, #16]
}
 80031d2:	bf00      	nop
 80031d4:	37b8      	adds	r7, #184	; 0xb8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w
 80031e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80031e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80031e8:	2000016c 	.word	0x2000016c
 80031ec:	20000160 	.word	0x20000160
 80031f0:	20000174 	.word	0x20000174
 80031f4:	200000f0 	.word	0x200000f0
 80031f8:	200000cc 	.word	0x200000cc
 80031fc:	200000f8 	.word	0x200000f8
 8003200:	200005a4 	.word	0x200005a4
 8003204:	20000158 	.word	0x20000158
 8003208:	20000180 	.word	0x20000180
 800320c:	2000006c 	.word	0x2000006c
 8003210:	2000011c 	.word	0x2000011c
 8003214:	20000098 	.word	0x20000098
 8003218:	200000c4 	.word	0x200000c4
 800321c:	080104cc 	.word	0x080104cc
 8003220:	080104b4 	.word	0x080104b4
 8003224:	20000190 	.word	0x20000190
 8003228:	20000188 	.word	0x20000188
 800322c:	080104bc 	.word	0x080104bc
 8003230:	080104c4 	.word	0x080104c4
 8003234:	20000130 	.word	0x20000130
 8003238:	200001bc 	.word	0x200001bc
 800323c:	20000144 	.word	0x20000144
 8003240:	20000124 	.word	0x20000124
 8003244:	20000138 	.word	0x20000138

08003248 <memory_init>:
SPI_HandleTypeDef memory_spi;

osSemaphoreId_t received_read_data;


void memory_init(memory_t* memory, GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	80fb      	strh	r3, [r7, #6]

	memory->pin = pin;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	809a      	strh	r2, [r3, #4]
	memory->port = port;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	601a      	str	r2, [r3, #0]
	memory->spi = spi;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	609a      	str	r2, [r3, #8]
	memory->current_memory[0] = 0x00;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	731a      	strb	r2, [r3, #12]
	memory->current_memory[1] = 0x00;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	735a      	strb	r2, [r3, #13]
	memory->current_memory[2] = 0x00;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	739a      	strb	r2, [r3, #14]
	memory->initialized = 0;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	73da      	strb	r2, [r3, #15]

	received_read_data = osSemaphoreNew(1, 0, NULL);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2001      	movs	r0, #1
 8003288:	f008 f8bf 	bl	800b40a <osSemaphoreNew>
 800328c:	4603      	mov	r3, r0
 800328e:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <memory_init+0x60>)
 8003290:	6013      	str	r3, [r2, #0]

	finding_start_memory(memory);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f80a 	bl	80032ac <finding_start_memory>

	memory->initialized = 1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	73da      	strb	r2, [r3, #15]
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200005ac 	.word	0x200005ac

080032ac <finding_start_memory>:

void finding_start_memory(memory_t* memory) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b096      	sub	sp, #88	; 0x58
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	uint8_t tx[5] = { HS_READ_CMD, 0x00, 0x00, 0x00 };
 80032b4:	4a26      	ldr	r2, [pc, #152]	; (8003350 <finding_start_memory+0xa4>)
 80032b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032be:	6018      	str	r0, [r3, #0]
 80032c0:	3304      	adds	r3, #4
 80032c2:	7019      	strb	r1, [r3, #0]
	uint8_t rx[64];

	uint8_t continue_reading = 1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t increment_counter = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	653b      	str	r3, [r7, #80]	; 0x50

	HAL_GPIO_WritePin(memory->port, memory->pin, GPIO_PIN_RESET);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	889b      	ldrh	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	f000 fd33 	bl	8003d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(memory->spi, tx, 1, 100);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6898      	ldr	r0, [r3, #8]
 80032e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80032e6:	2364      	movs	r3, #100	; 0x64
 80032e8:	2201      	movs	r2, #1
 80032ea:	f002 fe9c 	bl	8006026 <HAL_SPI_Transmit>

	//might need hold here need to test if I dont skip some bits when reading the whole 64 bits

	while(continue_reading) {
 80032ee:	e01a      	b.n	8003326 <finding_start_memory+0x7a>
		HAL_SPI_Receive_IT(memory->spi, rx, 64);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f107 0108 	add.w	r1, r7, #8
 80032f8:	2240      	movs	r2, #64	; 0x40
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fa82 	bl	8006804 <HAL_SPI_Receive_IT>
		osSemaphoreAcquire(received_read_data, osWaitForever);
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <finding_start_memory+0xa8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	4618      	mov	r0, r3
 800330a:	f008 f907 	bl	800b51c <osSemaphoreAcquire>

		increment_counter++;
 800330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003310:	3301      	adds	r3, #1
 8003312:	653b      	str	r3, [r7, #80]	; 0x50

		if((rx[0] | JUSTIN_ID) != JUSTIN_ID) {
 8003314:	7a3b      	ldrb	r3, [r7, #8]
 8003316:	f063 0355 	orn	r3, r3, #85	; 0x55
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2baa      	cmp	r3, #170	; 0xaa
 800331e:	d002      	beq.n	8003326 <finding_start_memory+0x7a>
			continue_reading = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(continue_reading) {
 8003326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e0      	bne.n	80032f0 <finding_start_memory+0x44>
		}
	}

	HAL_GPIO_WritePin(memory->port, memory->pin, GPIO_PIN_SET);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	889b      	ldrh	r3, [r3, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	4619      	mov	r1, r3
 800333a:	f000 fd03 	bl	8003d44 <HAL_GPIO_WritePin>

	increment_memory(memory, increment_counter);
 800333e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f809 	bl	8003358 <increment_memory>
}
 8003346:	bf00      	nop
 8003348:	3758      	adds	r7, #88	; 0x58
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	080102f8 	.word	0x080102f8
 8003354:	200005ac 	.word	0x200005ac

08003358 <increment_memory>:
	write_disable(memory);
	read_status_register(memory);
}


void increment_memory(memory_t* memory, uint32_t increment_counter) {
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	uint32_t memory_address = (memory->current_memory[0] << 16) + (memory->current_memory[1] << 8) + memory->current_memory[2];
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7b1b      	ldrb	r3, [r3, #12]
 8003366:	041a      	lsls	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7b5b      	ldrb	r3, [r3, #13]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	4413      	add	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	7b92      	ldrb	r2, [r2, #14]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

	memory_address += (512 * increment_counter);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

	memory->current_memory[0] = (memory_address >> 16) & 0xFF;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	731a      	strb	r2, [r3, #12]
	memory->current_memory[1] = (memory_address >> 8) & 0xFF;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b2da      	uxtb	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	735a      	strb	r2, [r3, #13]
	memory->current_memory[2] = (memory_address >> 0) & 0xFF;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	739a      	strb	r2, [r3, #14]

	//maybe ajouter un check pour s'assurer qu'on depasse pas la memoire
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_SPI_RxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi) {

}

// Interrupt Rx
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(received_read_data);
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_SPI_RxCpltCallback+0x1c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f008 f901 	bl	800b5c0 <osSemaphoreRelease>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200005ac 	.word	0x200005ac

080033cc <HAL_SPI_TxRxCpltCallback>:

// Interrupt TxRx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi) {
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <_DoInit+0xa0>)
 80033e8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80033ea:	22a8      	movs	r2, #168	; 0xa8
 80033ec:	2100      	movs	r1, #0
 80033ee:	6838      	ldr	r0, [r7, #0]
 80033f0:	f00b ff98 	bl	800f324 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2203      	movs	r2, #3
 80033f8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2203      	movs	r2, #3
 80033fe:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <_DoInit+0xa4>)
 8003404:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <_DoInit+0xa8>)
 800340a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003412:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <_DoInit+0xa4>)
 800342a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <_DoInit+0xac>)
 8003430:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800344a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	e00c      	b.n	800346e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1c3 030f 	rsb	r3, r3, #15
 800345a:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <_DoInit+0xb0>)
 800345c:	5cd1      	ldrb	r1, [r2, r3]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	460a      	mov	r2, r1
 8003466:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3301      	adds	r3, #1
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d9ef      	bls.n	8003454 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003474:	f3bf 8f5f 	dmb	sy
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	200005b0 	.word	0x200005b0
 8003484:	08010300 	.word	0x08010300
 8003488:	20000658 	.word	0x20000658
 800348c:	20000a58 	.word	0x20000a58
 8003490:	080104d4 	.word	0x080104d4

08003494 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d905      	bls.n	80034c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	e007      	b.n	80034d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	1acb      	subs	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3b01      	subs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4293      	cmp	r3, r2
 80034e0:	bf28      	it	cs
 80034e2:	4613      	movcs	r3, r2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bf28      	it	cs
 80034ee:	4613      	movcs	r3, r2
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80034fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	6978      	ldr	r0, [r7, #20]
 8003502:	f00b ff01 	bl	800f308 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003506:	6a3a      	ldr	r2, [r7, #32]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	4413      	add	r3, r2
 800350c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	4413      	add	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	4413      	add	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	d101      	bne.n	8003534 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003534:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1b2      	bne.n	80034aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003544:	6a3b      	ldr	r3, [r7, #32]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d911      	bls.n	8003596 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	6938      	ldr	r0, [r7, #16]
 8003582:	f00b fec1 	bl	800f308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003586:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003594:	e01f      	b.n	80035d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	6938      	ldr	r0, [r7, #16]
 80035aa:	f00b fead 	bl	800f308 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4619      	mov	r1, r3
 80035c6:	6938      	ldr	r0, [r7, #16]
 80035c8:	f00b fe9e 	bl	800f308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80035cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	60da      	str	r2, [r3, #12]
}
 80035d6:	bf00      	nop
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80035de:	b480      	push	{r7}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d808      	bhi.n	800360c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad2      	subs	r2, r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	3b01      	subs	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e004      	b.n	8003616 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003616:	697b      	ldr	r3, [r7, #20]
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d029      	beq.n	80036a2 <SEGGER_RTT_WriteNoLock+0x7e>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d82e      	bhi.n	80036b0 <SEGGER_RTT_WriteNoLock+0x8c>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <SEGGER_RTT_WriteNoLock+0x38>
 8003656:	2b01      	cmp	r3, #1
 8003658:	d013      	beq.n	8003682 <SEGGER_RTT_WriteNoLock+0x5e>
 800365a:	e029      	b.n	80036b0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800365c:	6978      	ldr	r0, [r7, #20]
 800365e:	f7ff ffbe 	bl	80035de <_GetAvailWriteSpace>
 8003662:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d202      	bcs.n	8003672 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003670:	e021      	b.n	80036b6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff67 	bl	800354e <_WriteNoCheck>
    break;
 8003680:	e019      	b.n	80036b6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ffab 	bl	80035de <_GetAvailWriteSpace>
 8003688:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4293      	cmp	r3, r2
 8003690:	bf28      	it	cs
 8003692:	4613      	movcs	r3, r2
 8003694:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f7ff ff57 	bl	800354e <_WriteNoCheck>
    break;
 80036a0:	e009      	b.n	80036b6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7ff fef4 	bl	8003494 <_WriteBlocking>
 80036ac:	61f8      	str	r0, [r7, #28]
    break;
 80036ae:	e002      	b.n	80036b6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
    break;
 80036b4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80036b6:	69fb      	ldr	r3, [r7, #28]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200005b0 	.word	0x200005b0

080036c4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <SEGGER_RTT_Write+0x48>)
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <SEGGER_RTT_Write+0x1e>
 80036de:	f7ff fe7f 	bl	80033e0 <_DoInit>
  SEGGER_RTT_LOCK();
 80036e2:	f3ef 8311 	mrs	r3, BASEPRI
 80036e6:	f04f 0120 	mov.w	r1, #32
 80036ea:	f381 8811 	msr	BASEPRI, r1
 80036ee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff ff95 	bl	8003624 <SEGGER_RTT_WriteNoLock>
 80036fa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003702:	697b      	ldr	r3, [r7, #20]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200005b0 	.word	0x200005b0

08003710 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f7fc fd58 	bl	80001d0 <strlen>
 8003720:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffcc 	bl	80036c4 <SEGGER_RTT_Write>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_Init+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <HAL_Init+0x40>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_Init+0x40>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_Init+0x40>)
 800374e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_Init+0x40>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_Init+0x40>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003760:	2003      	movs	r0, #3
 8003762:	f000 f8fc 	bl	800395e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003766:	200f      	movs	r0, #15
 8003768:	f7fe fbfa 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800376c:	f7fe fafc 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00

0800377c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_IncTick+0x20>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_IncTick+0x24>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4413      	add	r3, r2
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_IncTick+0x24>)
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200001c8 	.word	0x200001c8
 80037a0:	20000a68 	.word	0x20000a68

080037a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return uwTick;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_GetTick+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000a68 	.word	0x20000a68

080037bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff ffee 	bl	80037a4 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d005      	beq.n	80037e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_Delay+0x44>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037e2:	bf00      	nop
 80037e4:	f7ff ffde 	bl	80037a4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d8f7      	bhi.n	80037e4 <HAL_Delay+0x28>
  {
  }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200001c8 	.word	0x200001c8

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff4c 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003986:	f7ff ff61 	bl	800384c <__NVIC_GetPriorityGrouping>
 800398a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7ff ffb1 	bl	80038f8 <NVIC_EncodePriority>
 8003996:	4602      	mov	r2, r0
 8003998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff80 	bl	80038a4 <__NVIC_SetPriority>
}
 80039a4:	bf00      	nop
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff54 	bl	8003868 <__NVIC_EnableIRQ>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00c      	b.n	8003a00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2205      	movs	r2, #5
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	e16b      	b.n	8003d00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a28:	2201      	movs	r2, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	f040 815a 	bne.w	8003cfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d005      	beq.n	8003a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d130      	bne.n	8003ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 0201 	and.w	r2, r3, #1
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d017      	beq.n	8003afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d123      	bne.n	8003b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	08da      	lsrs	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3208      	adds	r2, #8
 8003b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80b4 	beq.w	8003cfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <HAL_GPIO_Init+0x30c>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <HAL_GPIO_Init+0x30c>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <HAL_GPIO_Init+0x30c>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bae:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <HAL_GPIO_Init+0x310>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_GPIO_Init+0x314>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02b      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_GPIO_Init+0x318>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d025      	beq.n	8003c2e <HAL_GPIO_Init+0x222>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_GPIO_Init+0x31c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <HAL_GPIO_Init+0x21e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <HAL_GPIO_Init+0x320>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d019      	beq.n	8003c26 <HAL_GPIO_Init+0x21a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	; (8003d30 <HAL_GPIO_Init+0x324>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_Init+0x216>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <HAL_GPIO_Init+0x328>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00d      	beq.n	8003c1e <HAL_GPIO_Init+0x212>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4c      	ldr	r2, [pc, #304]	; (8003d38 <HAL_GPIO_Init+0x32c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <HAL_GPIO_Init+0x20e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_GPIO_Init+0x330>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_GPIO_Init+0x20a>
 8003c12:	2307      	movs	r3, #7
 8003c14:	e00e      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c16:	2308      	movs	r3, #8
 8003c18:	e00c      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	e00a      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c1e:	2305      	movs	r3, #5
 8003c20:	e008      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c26:	2303      	movs	r3, #3
 8003c28:	e004      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c32:	2300      	movs	r3, #0
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c44:	4935      	ldr	r1, [pc, #212]	; (8003d1c <HAL_GPIO_Init+0x310>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c76:	4a32      	ldr	r2, [pc, #200]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c7c:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca0:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <HAL_GPIO_Init+0x334>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	f67f ae90 	bls.w	8003a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	40020c00 	.word	0x40020c00
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40021400 	.word	0x40021400
 8003d38:	40021800 	.word	0x40021800
 8003d3c:	40021c00 	.word	0x40021c00
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
 8003d50:	4613      	mov	r3, r2
 8003d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d54:	787b      	ldrb	r3, [r7, #1]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d60:	e003      	b.n	8003d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	041a      	lsls	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	619a      	str	r2, [r3, #24]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d78:	b08f      	sub	sp, #60	; 0x3c
 8003d7a:	af0a      	add	r7, sp, #40	; 0x28
 8003d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e10f      	b.n	8003fa8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f00a ff72 	bl	800ec8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 fe1b 	bl	8007a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	687e      	ldr	r6, [r7, #4]
 8003dd4:	466d      	mov	r5, sp
 8003dd6:	f106 0410 	add.w	r4, r6, #16
 8003dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dea:	1d33      	adds	r3, r6, #4
 8003dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	f003 fcf2 	bl	80077d8 <USB_CoreInit>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0d0      	b.n	8003fa8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 fe09 	bl	8007a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e04a      	b.n	8003eae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	333d      	adds	r3, #61	; 0x3d
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	333c      	adds	r3, #60	; 0x3c
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	b298      	uxth	r0, r3
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3344      	adds	r3, #68	; 0x44
 8003e54:	4602      	mov	r2, r0
 8003e56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3340      	adds	r3, #64	; 0x40
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3348      	adds	r3, #72	; 0x48
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334c      	adds	r3, #76	; 0x4c
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3354      	adds	r3, #84	; 0x54
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3af      	bcc.n	8003e18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
 8003ebc:	e044      	b.n	8003f48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3b5      	bcc.n	8003ebe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	687e      	ldr	r6, [r7, #4]
 8003f5a:	466d      	mov	r5, sp
 8003f5c:	f106 0410 	add.w	r4, r6, #16
 8003f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f70:	1d33      	adds	r3, r6, #4
 8003f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f74:	6838      	ldr	r0, [r7, #0]
 8003f76:	f003 fda1 	bl	8007abc <USB_DevInit>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e00d      	b.n	8003fa8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 fef0 	bl	8008d86 <USB_DevDisconnect>

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_PCD_Start+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e020      	b.n	800400e <HAL_PCD_Start+0x5e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d109      	bne.n	8003ff0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d005      	beq.n	8003ff0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f003 fcf3 	bl	80079e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f004 fea0 	bl	8008d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004016:	b590      	push	{r4, r7, lr}
 8004018:	b08d      	sub	sp, #52	; 0x34
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f004 ff5e 	bl	8008eee <USB_GetMode>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 848a 	bne.w	800494e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f004 fec2 	bl	8008dc8 <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8480 	beq.w	800494c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f004 feaf 	bl	8008dc8 <USB_ReadInterrupts>
 800406a:	4603      	mov	r3, r0
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d107      	bne.n	8004084 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f002 0202 	and.w	r2, r2, #2
 8004082:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f004 fe9d 	bl	8008dc8 <USB_ReadInterrupts>
 800408e:	4603      	mov	r3, r0
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d161      	bne.n	800415c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0210 	bic.w	r2, r2, #16
 80040a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	0c5b      	lsrs	r3, r3, #17
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d124      	bne.n	800411e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d035      	beq.n	800414c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6a38      	ldr	r0, [r7, #32]
 80040f4:	f004 fcd4 	bl	8008aa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004104:	441a      	add	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6a1a      	ldr	r2, [r3, #32]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004116:	441a      	add	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
 800411c:	e016      	b.n	800414c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	0c5b      	lsrs	r3, r3, #17
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	2b06      	cmp	r3, #6
 8004128:	d110      	bne.n	800414c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004130:	2208      	movs	r2, #8
 8004132:	4619      	mov	r1, r3
 8004134:	6a38      	ldr	r0, [r7, #32]
 8004136:	f004 fcb3 	bl	8008aa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004146:	441a      	add	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0210 	orr.w	r2, r2, #16
 800415a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f004 fe31 	bl	8008dc8 <USB_ReadInterrupts>
 8004166:	4603      	mov	r3, r0
 8004168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004170:	f040 80a7 	bne.w	80042c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f004 fe36 	bl	8008dee <USB_ReadDevAllOutEpInterrupt>
 8004182:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004184:	e099      	b.n	80042ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 808e 	beq.w	80042ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f004 fe5a 	bl	8008e56 <USB_ReadDevOutEPInterrupt>
 80041a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00c      	beq.n	80041c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	461a      	mov	r2, r3
 80041bc:	2301      	movs	r3, #1
 80041be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fec2 	bl	8004f4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	2308      	movs	r3, #8
 80041e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 ff98 	bl	800511c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2310      	movs	r3, #16
 8004206:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d030      	beq.n	8004274 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d109      	bne.n	8004232 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004230:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	3304      	adds	r3, #4
 8004246:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	78db      	ldrb	r3, [r3, #3]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d108      	bne.n	8004262 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f00a fe1b 	bl	800ee98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	2302      	movs	r3, #2
 8004272:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	461a      	mov	r2, r3
 800428c:	2320      	movs	r3, #32
 800428e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	461a      	mov	r2, r3
 80042a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	3301      	adds	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f af62 	bne.w	8004186 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f004 fd7e 	bl	8008dc8 <USB_ReadInterrupts>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042d6:	f040 80db 	bne.w	8004490 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 fd9f 	bl	8008e22 <USB_ReadDevAllInEpInterrupt>
 80042e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042ea:	e0cd      	b.n	8004488 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80c2 	beq.w	800447c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fdc5 	bl	8008e92 <USB_ReadDevInEPInterrupt>
 8004308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d057      	beq.n	80043c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	2201      	movs	r2, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	69f9      	ldr	r1, [r7, #28]
 8004330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004334:	4013      	ands	r3, r2
 8004336:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	2301      	movs	r3, #1
 8004348:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d132      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	334c      	adds	r3, #76	; 0x4c
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4403      	add	r3, r0
 8004372:	3348      	adds	r3, #72	; 0x48
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4419      	add	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4403      	add	r3, r0
 8004386:	334c      	adds	r3, #76	; 0x4c
 8004388:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d113      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x3a2>
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3354      	adds	r3, #84	; 0x54
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043b0:	461a      	mov	r2, r3
 80043b2:	2101      	movs	r1, #1
 80043b4:	f004 fdcc 	bl	8008f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f00a fce5 	bl	800ed8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	461a      	mov	r2, r3
 80043dc:	2308      	movs	r3, #8
 80043de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f6:	461a      	mov	r2, r3
 80043f8:	2310      	movs	r3, #16
 80043fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	461a      	mov	r2, r3
 8004414:	2340      	movs	r3, #64	; 0x40
 8004416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d023      	beq.n	800446a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004424:	6a38      	ldr	r0, [r7, #32]
 8004426:	f003 fcad 	bl	8007d84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3338      	adds	r3, #56	; 0x38
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d108      	bne.n	8004458 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2200      	movs	r2, #0
 800444a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f00a fd32 	bl	800eebc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	461a      	mov	r2, r3
 8004466:	2302      	movs	r3, #2
 8004468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fcdb 	bl	8004e32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	3301      	adds	r3, #1
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	f47f af2e 	bne.w	80042ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f004 fc97 	bl	8008dc8 <USB_ReadInterrupts>
 800449a:	4603      	mov	r3, r0
 800449c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a4:	d122      	bne.n	80044ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044cc:	2100      	movs	r1, #0
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fec2 	bl	8005258 <HAL_PCDEx_LPM_Callback>
 80044d4:	e002      	b.n	80044dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f00a fcd0 	bl	800ee7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fc69 	bl	8008dc8 <USB_ReadInterrupts>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004500:	d112      	bne.n	8004528 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f00a fc8c 	bl	800ee30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004526:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f004 fc4b 	bl	8008dc8 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	f040 80b7 	bne.w	80046ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2110      	movs	r1, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fc12 	bl	8007d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004560:	2300      	movs	r3, #0
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004564:	e046      	b.n	80045f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	461a      	mov	r2, r3
 8004574:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004578:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004598:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	3301      	adds	r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3b3      	bcc.n	8004566 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004610:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462a:	f043 030b 	orr.w	r3, r3, #11
 800462e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004640:	f043 030b 	orr.w	r3, r3, #11
 8004644:	6453      	str	r3, [r2, #68]	; 0x44
 8004646:	e015      	b.n	8004674 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800465a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800465e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466e:	f043 030b 	orr.w	r3, r3, #11
 8004672:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004682:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004686:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004698:	461a      	mov	r2, r3
 800469a:	f004 fc59 	bl	8008f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f004 fb88 	bl	8008dc8 <USB_ReadInterrupts>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d124      	bne.n	800470e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f004 fc1e 	bl	8008f0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f003 fbd3 	bl	8007e7e <USB_GetDevSpeed>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681c      	ldr	r4, [r3, #0]
 80046e4:	f001 f9e8 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	4620      	mov	r0, r4
 80046f4:	f003 f8d2 	bl	800789c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f00a fb70 	bl	800edde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800470c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f004 fb58 	bl	8008dc8 <USB_ReadInterrupts>
 8004718:	4603      	mov	r3, r0
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b08      	cmp	r3, #8
 8004720:	d10a      	bne.n	8004738 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f00a fb4d 	bl	800edc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f002 0208 	and.w	r2, r2, #8
 8004736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f004 fb43 	bl	8008dc8 <USB_ReadInterrupts>
 8004742:	4603      	mov	r3, r0
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d122      	bne.n	8004792 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004758:	2301      	movs	r3, #1
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	e014      	b.n	8004788 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d105      	bne.n	8004782 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb27 	bl	8004dd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	3301      	adds	r3, #1
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	429a      	cmp	r2, r3
 8004790:	d3e5      	bcc.n	800475e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f004 fb16 	bl	8008dc8 <USB_ReadInterrupts>
 800479c:	4603      	mov	r3, r0
 800479e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a6:	d13b      	bne.n	8004820 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a8:	2301      	movs	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e02b      	b.n	8004806 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3340      	adds	r3, #64	; 0x40
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d115      	bne.n	8004800 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da12      	bge.n	8004800 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	333f      	adds	r3, #63	; 0x3f
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fae8 	bl	8004dd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	3301      	adds	r3, #1
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	429a      	cmp	r2, r3
 800480e:	d3ce      	bcc.n	80047ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800481e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f004 facf 	bl	8008dc8 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004834:	d155      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004836:	2301      	movs	r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e045      	b.n	80048c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d12e      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004864:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	da2b      	bge.n	80048c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004876:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800487a:	429a      	cmp	r2, r3
 800487c:	d121      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048be:	6053      	str	r3, [r2, #4]
            break;
 80048c0:	e007      	b.n	80048d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3b4      	bcc.n	800483c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 fa6e 	bl	8008dc8 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d10a      	bne.n	800490e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f00a faf1 	bl	800eee0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800490c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f004 fa58 	bl	8008dc8 <USB_ReadInterrupts>
 8004918:	4603      	mov	r3, r0
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d115      	bne.n	800494e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f00a fae1 	bl	800eefc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e000      	b.n	800494e <HAL_PCD_IRQHandler+0x938>
      return;
 800494c:	bf00      	nop
    }
  }
}
 800494e:	3734      	adds	r7, #52	; 0x34
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}

08004954 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_PCD_SetAddress+0x1a>
 800496a:	2302      	movs	r3, #2
 800496c:	e013      	b.n	8004996 <HAL_PCD_SetAddress+0x42>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f004 f9b6 	bl	8008cf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	4608      	mov	r0, r1
 80049a8:	4611      	mov	r1, r2
 80049aa:	461a      	mov	r2, r3
 80049ac:	4603      	mov	r3, r0
 80049ae:	70fb      	strb	r3, [r7, #3]
 80049b0:	460b      	mov	r3, r1
 80049b2:	803b      	strh	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da0f      	bge.n	80049e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3338      	adds	r3, #56	; 0x38
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	705a      	strb	r2, [r3, #1]
 80049e2:	e00f      	b.n	8004a04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a10:	883a      	ldrh	r2, [r7, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	78ba      	ldrb	r2, [r7, #2]
 8004a1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a2e:	78bb      	ldrb	r3, [r7, #2]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d102      	bne.n	8004a3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_PCD_EP_Open+0xaa>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e00e      	b.n	8004a66 <HAL_PCD_EP_Open+0xc8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f003 fa36 	bl	8007ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a64:	7afb      	ldrb	r3, [r7, #11]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da0f      	bge.n	8004aa2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 020f 	and.w	r2, r3, #15
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	3338      	adds	r3, #56	; 0x38
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	3304      	adds	r3, #4
 8004a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	705a      	strb	r2, [r3, #1]
 8004aa0:	e00f      	b.n	8004ac2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3304      	adds	r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_PCD_EP_Close+0x6e>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e00e      	b.n	8004afa <HAL_PCD_EP_Close+0x8c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 fa74 	bl	8007fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	3304      	adds	r3, #4
 8004b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b44:	7afb      	ldrb	r3, [r7, #11]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d102      	bne.n	8004b5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	f003 fd53 	bl	8008620 <USB_EP0StartXfer>
 8004b7a:	e008      	b.n	8004b8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6979      	ldr	r1, [r7, #20]
 8004b8a:	f003 fb01 	bl	8008190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd8:	7afb      	ldrb	r3, [r7, #11]
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	3338      	adds	r3, #56	; 0x38
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2201      	movs	r2, #1
 8004c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c08:	7afb      	ldrb	r3, [r7, #11]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	f003 fcf1 	bl	8008620 <USB_EP0StartXfer>
 8004c3e:	e008      	b.n	8004c52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	f003 fa9f 	bl	8008190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d901      	bls.n	8004c7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e050      	b.n	8004d1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da0f      	bge.n	8004ca2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3338      	adds	r3, #56	; 0x38
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	3304      	adds	r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	705a      	strb	r2, [r3, #1]
 8004ca0:	e00d      	b.n	8004cbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_PCD_EP_SetStall+0x82>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e01e      	b.n	8004d1c <HAL_PCD_EP_SetStall+0xc0>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f003 ff2f 	bl	8008b50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	b2d9      	uxtb	r1, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f004 f91f 	bl	8008f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d901      	bls.n	8004d42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e042      	b.n	8004dc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da0f      	bge.n	8004d6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3338      	adds	r3, #56	; 0x38
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3304      	adds	r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	705a      	strb	r2, [r3, #1]
 8004d68:	e00f      	b.n	8004d8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_PCD_EP_ClrStall+0x86>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e00e      	b.n	8004dc8 <HAL_PCD_EP_ClrStall+0xa4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f003 ff37 	bl	8008c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da0c      	bge.n	8004dfe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e00c      	b.n	8004e18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 fd56 	bl	80088d0 <USB_EPStopXfer>
 8004e24:	4603      	mov	r3, r0
 8004e26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e28:	7afb      	ldrb	r3, [r7, #11]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b08a      	sub	sp, #40	; 0x28
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	3338      	adds	r3, #56	; 0x38
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4413      	add	r3, r2
 8004e56:	3304      	adds	r3, #4
 8004e58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d901      	bls.n	8004e6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06c      	b.n	8004f44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d902      	bls.n	8004e86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3303      	adds	r3, #3
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e8e:	e02b      	b.n	8004ee8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d902      	bls.n	8004eac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3303      	adds	r3, #3
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6919      	ldr	r1, [r3, #16]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4603      	mov	r3, r0
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f003 fdaa 	bl	8008a24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d809      	bhi.n	8004f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d203      	bcs.n	8004f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1be      	bne.n	8004e90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d811      	bhi.n	8004f42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2201      	movs	r2, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	6939      	ldr	r1, [r7, #16]
 8004f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3e:	4013      	ands	r3, r2
 8004f40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	333c      	adds	r3, #60	; 0x3c
 8004f64:	3304      	adds	r3, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d17b      	bne.n	800507a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4a61      	ldr	r2, [pc, #388]	; (8005114 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	f240 80b9 	bls.w	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80b3 	beq.w	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	e0a7      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	6093      	str	r3, [r2, #8]
 8004fd4:	e098      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8093 	bne.w	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4a4b      	ldr	r2, [pc, #300]	; (8005114 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d90f      	bls.n	800500a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	461a      	mov	r2, r3
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	6093      	str	r3, [r2, #8]
 8005008:	e07e      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	4413      	add	r3, r2
 800501c:	3304      	adds	r3, #4
 800501e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	0159      	lsls	r1, r3, #5
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	440b      	add	r3, r1
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d114      	bne.n	800506c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005054:	461a      	mov	r2, r3
 8005056:	2101      	movs	r1, #1
 8005058:	f003 ff7a 	bl	8008f50 <USB_EP0_OutStart>
 800505c:	e006      	b.n	800506c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	441a      	add	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f009 fe70 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
 8005078:	e046      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	4a26      	ldr	r2, [pc, #152]	; (8005118 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d124      	bne.n	80050cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	461a      	mov	r2, r3
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	6093      	str	r3, [r2, #8]
 80050a0:	e032      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	461a      	mov	r2, r3
 80050ba:	2320      	movs	r3, #32
 80050bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f009 fe47 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
 80050ca:	e01d      	b.n	8005108 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d114      	bne.n	80050fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050f4:	461a      	mov	r2, r3
 80050f6:	2100      	movs	r1, #0
 80050f8:	f003 ff2a 	bl	8008f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f009 fe28 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	4f54300a 	.word	0x4f54300a
 8005118:	4f54310a 	.word	0x4f54310a

0800511c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	333c      	adds	r3, #60	; 0x3c
 8005134:	3304      	adds	r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d90e      	bls.n	8005170 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f009 fddf 	bl	800ed34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d90c      	bls.n	8005198 <PCD_EP_OutSetupPacket_int+0x7c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d108      	bne.n	8005198 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005190:	461a      	mov	r2, r3
 8005192:	2101      	movs	r1, #1
 8005194:	f003 fedc 	bl	8008f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	4f54300a 	.word	0x4f54300a

080051a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
 80051b4:	4613      	mov	r3, r2
 80051b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051c6:	883b      	ldrh	r3, [r7, #0]
 80051c8:	0419      	lsls	r1, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
 80051d4:	e028      	b.n	8005228 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	e00d      	b.n	8005206 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	3340      	adds	r3, #64	; 0x40
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	3301      	adds	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	7bfa      	ldrb	r2, [r7, #15]
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	3b01      	subs	r3, #1
 800520c:	429a      	cmp	r2, r3
 800520e:	d3ec      	bcc.n	80051ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005210:	883b      	ldrh	r3, [r7, #0]
 8005212:	0418      	lsls	r0, r3, #16
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	3b01      	subs	r3, #1
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	4302      	orrs	r2, r0
 8005220:	3340      	adds	r3, #64	; 0x40
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e267      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b82      	ldr	r3, [pc, #520]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b7e      	ldr	r3, [pc, #504]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x108>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e242      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x74>
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x98>
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6f      	ldr	r2, [pc, #444]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6d      	ldr	r3, [pc, #436]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6c      	ldr	r2, [pc, #432]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 8005308:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fe fa3c 	bl	80037a4 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005330:	f7fe fa38 	bl	80037a4 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e207      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xc0>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fe fa28 	bl	80037a4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fe fa24 	bl	80037a4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1f3      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b51      	ldr	r3, [pc, #324]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0xe8>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c7      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fe f9dd 	bl	80037a4 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fe f9d9 	bl	80037a4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a8      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4925      	ldr	r1, [pc, #148]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fe f9bc 	bl	80037a4 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005430:	f7fe f9b8 	bl	80037a4 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e187      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d036      	beq.n	80054c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fe f99c 	bl	80037a4 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005470:	f7fe f998 	bl	80037a4 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e167      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x200>
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fe f985 	bl	80037a4 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549e:	f7fe f981 	bl	80037a4 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d907      	bls.n	80054bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e150      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b88      	ldr	r3, [pc, #544]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8097 	beq.w	8005604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b7d      	ldr	r3, [pc, #500]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b7a      	ldr	r3, [pc, #488]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b74      	ldr	r3, [pc, #464]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fe f941 	bl	80037a4 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fe f93d 	bl	80037a4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e10c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x2ea>
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a63      	ldr	r2, [pc, #396]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	e01c      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x30c>
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a5e      	ldr	r2, [pc, #376]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	4b5c      	ldr	r3, [pc, #368]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a5b      	ldr	r2, [pc, #364]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	4b55      	ldr	r3, [pc, #340]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fe f902 	bl	80037a4 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fe f8fe 	bl	80037a4 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0cb      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCC_OscConfig+0x334>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fe f8ec 	bl	80037a4 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fe f8e8 	bl	80037a4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	; 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0b5      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ee      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a1 	beq.w	8005750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b08      	cmp	r3, #8
 8005618:	d05c      	beq.n	80056d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d141      	bne.n	80056a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fe f8bc 	bl	80037a4 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005630:	f7fe f8b8 	bl	80037a4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e087      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	491b      	ldr	r1, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fe f891 	bl	80037a4 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005686:	f7fe f88d 	bl	80037a4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x416>
 80056a4:	e054      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe f87a 	bl	80037a4 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fe f876 	bl	80037a4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e045      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x444>
 80056d2:	e03d      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e038      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <HAL_RCC_OscConfig+0x4ec>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d028      	beq.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d121      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0cc      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b68      	ldr	r3, [pc, #416]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d90c      	bls.n	800579c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d044      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d119      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581a:	2b03      	cmp	r3, #3
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b3f      	ldr	r3, [pc, #252]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e067      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4934      	ldr	r1, [pc, #208]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fd ffa8 	bl	80037a4 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fd ffa4 	bl	80037a4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20c      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc fb2a 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00
 800591c:	40023800 	.word	0x40023800
 8005920:	0801049c 	.word	0x0801049c
 8005924:	20000004 	.word	0x20000004
 8005928:	200001c4 	.word	0x200001c4

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b090      	sub	sp, #64	; 0x40
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
 8005938:	2300      	movs	r3, #0
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800593c:	2300      	movs	r3, #0
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 80a1 	bhi.w	8005a98 <HAL_RCC_GetSysClockFreq+0x16c>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x34>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x3a>
 800595e:	e09b      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b53      	ldr	r3, [pc, #332]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005964:	e09b      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800596a:	e098      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596c:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	4b4d      	ldr	r3, [pc, #308]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d028      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	627a      	str	r2, [r7, #36]	; 0x24
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005994:	2100      	movs	r1, #0
 8005996:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005998:	fb03 f201 	mul.w	r2, r3, r1
 800599c:	2300      	movs	r3, #0
 800599e:	fb00 f303 	mul.w	r3, r0, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	4a43      	ldr	r2, [pc, #268]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059a6:	fba0 1202 	umull	r1, r2, r0, r2
 80059aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ac:	460a      	mov	r2, r1
 80059ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80059b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b2:	4413      	add	r3, r2
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	2200      	movs	r2, #0
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	61fa      	str	r2, [r7, #28]
 80059be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059c6:	f7fb f9fd 	bl	8000dc4 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4613      	mov	r3, r2
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d2:	e053      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d4:	4b35      	ldr	r3, [pc, #212]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	099b      	lsrs	r3, r3, #6
 80059da:	2200      	movs	r2, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	617a      	str	r2, [r7, #20]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059e6:	f04f 0b00 	mov.w	fp, #0
 80059ea:	4652      	mov	r2, sl
 80059ec:	465b      	mov	r3, fp
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	0159      	lsls	r1, r3, #5
 80059f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fc:	0150      	lsls	r0, r2, #5
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	ebb2 080a 	subs.w	r8, r2, sl
 8005a06:	eb63 090b 	sbc.w	r9, r3, fp
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a1e:	ebb2 0408 	subs.w	r4, r2, r8
 8005a22:	eb63 0509 	sbc.w	r5, r3, r9
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	00eb      	lsls	r3, r5, #3
 8005a30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a34:	00e2      	lsls	r2, r4, #3
 8005a36:	4614      	mov	r4, r2
 8005a38:	461d      	mov	r5, r3
 8005a3a:	eb14 030a 	adds.w	r3, r4, sl
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	eb45 030b 	adc.w	r3, r5, fp
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a52:	4629      	mov	r1, r5
 8005a54:	028b      	lsls	r3, r1, #10
 8005a56:	4621      	mov	r1, r4
 8005a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	028a      	lsls	r2, r1, #10
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	2200      	movs	r2, #0
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	60fa      	str	r2, [r7, #12]
 8005a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a70:	f7fb f9a8 	bl	8000dc4 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_GetSysClockFreq+0x180>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	3301      	adds	r3, #1
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3740      	adds	r7, #64	; 0x40
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00f42400 	.word	0x00f42400
 8005ab4:	017d7840 	.word	0x017d7840

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005abc:	4b03      	ldr	r3, [pc, #12]	; (8005acc <HAL_RCC_GetHCLKFreq+0x14>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000004 	.word	0x20000004

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff fff0 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0a9b      	lsrs	r3, r3, #10
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	; (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	080104ac 	.word	0x080104ac

08005af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	220f      	movs	r2, #15
 8005b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <HAL_RCC_GetClockConfig+0x5c>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0203 	and.w	r2, r3, #3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <HAL_RCC_GetClockConfig+0x5c>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b20:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <HAL_RCC_GetClockConfig+0x5c>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <HAL_RCC_GetClockConfig+0x5c>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	08db      	lsrs	r3, r3, #3
 8005b32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCC_GetClockConfig+0x60>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0207 	and.w	r2, r3, #7
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	601a      	str	r2, [r3, #0]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40023c00 	.word	0x40023c00

08005b5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d035      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b84:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b8a:	f7fd fe0b 	bl	80037a4 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b92:	f7fd fe07 	bl	80037a4 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e0b0      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ba4:	4b5b      	ldr	r3, [pc, #364]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f0      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	019a      	lsls	r2, r3, #6
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	071b      	lsls	r3, r3, #28
 8005bbc:	4955      	ldr	r1, [pc, #340]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bc4:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bca:	f7fd fdeb 	bl	80037a4 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bd2:	f7fd fde7 	bl	80037a4 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e090      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be4:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8083 	beq.w	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4b44      	ldr	r3, [pc, #272]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	4a43      	ldr	r2, [pc, #268]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0e:	4b41      	ldr	r3, [pc, #260]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3e      	ldr	r2, [pc, #248]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c26:	f7fd fdbd 	bl	80037a4 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c2e:	f7fd fdb9 	bl	80037a4 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e062      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c40:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02f      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d028      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c6a:	4b2a      	ldr	r3, [pc, #168]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c74:	4b29      	ldr	r3, [pc, #164]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7a:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c80:	4a24      	ldr	r2, [pc, #144]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c86:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d114      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c92:	f7fd fd87 	bl	80037a4 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9a:	f7fd fd83 	bl	80037a4 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e02a      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ee      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc8:	d10d      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cde:	490d      	ldr	r1, [pc, #52]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	608b      	str	r3, [r1, #8]
 8005ce4:	e005      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cf0:	6093      	str	r3, [r2, #8]
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfe:	4905      	ldr	r1, [pc, #20]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	42470068 	.word	0x42470068
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40007000 	.word	0x40007000
 8005d1c:	42470e40 	.word	0x42470e40

08005d20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e066      	b.n	8005e04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7f5b      	ldrb	r3, [r3, #29]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f83a 	bl	8001dc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	22ca      	movs	r2, #202	; 0xca
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2253      	movs	r2, #83	; 0x53
 8005d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f87a 	bl	8005e5c <RTC_EnterInitMode>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d12c      	bne.n	8005dcc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6899      	ldr	r1, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68d2      	ldr	r2, [r2, #12]
 8005dac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6919      	ldr	r1, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	041a      	lsls	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f881 	bl	8005eca <RTC_ExitInitMode>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d113      	bne.n	8005dfa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	22ff      	movs	r2, #255	; 0xff
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e28:	f7fd fcbc 	bl	80037a4 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e2e:	e009      	b.n	8005e44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e30:	f7fd fcb8 	bl	80037a4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3e:	d901      	bls.n	8005e44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e007      	b.n	8005e54 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ee      	beq.n	8005e30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d122      	bne.n	8005ec0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8a:	f7fd fc8b 	bl	80037a4 <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e90:	e00c      	b.n	8005eac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e92:	f7fd fc87 	bl	80037a4 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea0:	d904      	bls.n	8005eac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <RTC_EnterInitMode+0x64>
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d1e8      	bne.n	8005e92 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff89 	bl	8005e0c <HAL_RTC_WaitForSynchro>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e07b      	b.n	800601e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d009      	beq.n	8005f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	61da      	str	r2, [r3, #28]
 8005f3e:	e005      	b.n	8005f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb ff54 	bl	8001e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	ea42 0103 	orr.w	r1, r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0104 	and.w	r1, r3, #4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0210 	and.w	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800600c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b088      	sub	sp, #32
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_SPI_Transmit+0x22>
 8006044:	2302      	movs	r3, #2
 8006046:	e126      	b.n	8006296 <HAL_SPI_Transmit+0x270>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006050:	f7fd fba8 	bl	80037a4 <HAL_GetTick>
 8006054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d002      	beq.n	800606c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006066:	2302      	movs	r3, #2
 8006068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800606a:	e10b      	b.n	8006284 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0x52>
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800607c:	e102      	b.n	8006284 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2203      	movs	r2, #3
 8006082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	88fa      	ldrh	r2, [r7, #6]
 8006096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c4:	d10f      	bne.n	80060e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	d007      	beq.n	8006104 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610c:	d14b      	bne.n	80061a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SPI_Transmit+0xf6>
 8006116:	8afb      	ldrh	r3, [r7, #22]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d13e      	bne.n	800619a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	1c9a      	adds	r2, r3, #2
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006140:	e02b      	b.n	800619a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d112      	bne.n	8006176 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	86da      	strh	r2, [r3, #54]	; 0x36
 8006174:	e011      	b.n	800619a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006176:	f7fd fb15 	bl	80037a4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d803      	bhi.n	800618e <HAL_SPI_Transmit+0x168>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d102      	bne.n	8006194 <HAL_SPI_Transmit+0x16e>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006198:	e074      	b.n	8006284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ce      	bne.n	8006142 <HAL_SPI_Transmit+0x11c>
 80061a4:	e04c      	b.n	8006240 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Transmit+0x18e>
 80061ae:	8afb      	ldrh	r3, [r7, #22]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d140      	bne.n	8006236 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061da:	e02c      	b.n	8006236 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d113      	bne.n	8006212 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006210:	e011      	b.n	8006236 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006212:	f7fd fac7 	bl	80037a4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d803      	bhi.n	800622a <HAL_SPI_Transmit+0x204>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d102      	bne.n	8006230 <HAL_SPI_Transmit+0x20a>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006234:	e026      	b.n	8006284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1cd      	bne.n	80061dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 ff25 	bl	8007094 <SPI_EndRxTxTransaction>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e000      	b.n	8006284 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006294:	7ffb      	ldrb	r3, [r7, #31]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af02      	add	r7, sp, #8
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d112      	bne.n	80062e2 <HAL_SPI_Receive+0x44>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10e      	bne.n	80062e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2204      	movs	r2, #4
 80062c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4613      	mov	r3, r2
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f8f1 	bl	80064c0 <HAL_SPI_TransmitReceive>
 80062de:	4603      	mov	r3, r0
 80062e0:	e0ea      	b.n	80064b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_Receive+0x52>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0e3      	b.n	80064b8 <HAL_SPI_Receive+0x21a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062f8:	f7fd fa54 	bl	80037a4 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b01      	cmp	r3, #1
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800630a:	2302      	movs	r3, #2
 800630c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800630e:	e0ca      	b.n	80064a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_Receive+0x7e>
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006320:	e0c1      	b.n	80064a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2204      	movs	r2, #4
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006368:	d10f      	bne.n	800638a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d007      	beq.n	80063a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d162      	bne.n	8006476 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063b0:	e02e      	b.n	8006410 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d115      	bne.n	80063ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f103 020c 	add.w	r2, r3, #12
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	7812      	ldrb	r2, [r2, #0]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ea:	e011      	b.n	8006410 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ec:	f7fd f9da 	bl	80037a4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d803      	bhi.n	8006404 <HAL_SPI_Receive+0x166>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <HAL_SPI_Receive+0x16c>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800640e:	e04a      	b.n	80064a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1cb      	bne.n	80063b2 <HAL_SPI_Receive+0x114>
 800641a:	e031      	b.n	8006480 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d113      	bne.n	8006452 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	b292      	uxth	r2, r2
 8006436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006450:	e011      	b.n	8006476 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006452:	f7fd f9a7 	bl	80037a4 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d803      	bhi.n	800646a <HAL_SPI_Receive+0x1cc>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d102      	bne.n	8006470 <HAL_SPI_Receive+0x1d2>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006474:	e017      	b.n	80064a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1cd      	bne.n	800641c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fd9f 	bl	8006fc8 <SPI_EndRxTransaction>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
 80064a2:	e000      	b.n	80064a6 <HAL_SPI_Receive+0x208>
  }

error :
 80064a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	; 0x30
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ce:	2301      	movs	r3, #1
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x26>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e18a      	b.n	80067fc <HAL_SPI_TransmitReceive+0x33c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ee:	f7fd f959 	bl	80037a4 <HAL_GetTick>
 80064f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800650c:	2b01      	cmp	r3, #1
 800650e:	d00f      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x70>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006516:	d107      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x68>
 8006520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006524:	2b04      	cmp	r3, #4
 8006526:	d003      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800652e:	e15b      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x82>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x82>
 800653c:	887b      	ldrh	r3, [r7, #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006548:	e14e      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b04      	cmp	r3, #4
 8006554:	d003      	beq.n	800655e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2205      	movs	r2, #5
 800655a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	887a      	ldrh	r2, [r7, #2]
 800656e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	887a      	ldrh	r2, [r7, #2]
 8006580:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	887a      	ldrh	r2, [r7, #2]
 8006586:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d007      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ba:	d178      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x10a>
 80065c4:	8b7b      	ldrh	r3, [r7, #26]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d166      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ee:	e053      	b.n	8006698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d11b      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x176>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d016      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x176>
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d113      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	1c9a      	adds	r2, r3, #2
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d119      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x1b8>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d014      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	b292      	uxth	r2, r2
 800665a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	1c9a      	adds	r2, r3, #2
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006674:	2301      	movs	r3, #1
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006678:	f7fd f894 	bl	80037a4 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006684:	429a      	cmp	r2, r3
 8006686:	d807      	bhi.n	8006698 <HAL_SPI_TransmitReceive+0x1d8>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d003      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006696:	e0a7      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1a6      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x130>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1a1      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x130>
 80066ac:	e07c      	b.n	80067a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_TransmitReceive+0x1fc>
 80066b6:	8b7b      	ldrh	r3, [r7, #26]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d16b      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e2:	e057      	b.n	8006794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d11c      	bne.n	800672c <HAL_SPI_TransmitReceive+0x26c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d017      	beq.n	800672c <HAL_SPI_TransmitReceive+0x26c>
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d114      	bne.n	800672c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d119      	bne.n	800676e <HAL_SPI_TransmitReceive+0x2ae>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d014      	beq.n	800676e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800676a:	2301      	movs	r3, #1
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800676e:	f7fd f819 	bl	80037a4 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800677a:	429a      	cmp	r2, r3
 800677c:	d803      	bhi.n	8006786 <HAL_SPI_TransmitReceive+0x2c6>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d102      	bne.n	800678c <HAL_SPI_TransmitReceive+0x2cc>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006792:	e029      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1a2      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x224>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d19d      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 fc71 	bl	8007094 <SPI_EndRxTxTransaction>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067c4:	e010      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	e000      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3730      	adds	r7, #48	; 0x30
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d110      	bne.n	8006840 <HAL_SPI_Receive_IT+0x3c>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d10b      	bne.n	8006840 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2204      	movs	r2, #4
 800682c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f882 	bl	8006940 <HAL_SPI_TransmitReceive_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	e076      	b.n	800692e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_SPI_Receive_IT+0x4a>
 800684a:	2302      	movs	r3, #2
 800684c:	e06f      	b.n	800692e <HAL_SPI_Receive_IT+0x12a>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b01      	cmp	r3, #1
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006862:	2302      	movs	r3, #2
 8006864:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006866:	e05d      	b.n	8006924 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Receive_IT+0x70>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006878:	e054      	b.n	8006924 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2204      	movs	r2, #4
 800687e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <HAL_SPI_Receive_IT+0x134>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
 80068c0:	e002      	b.n	80068c8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <HAL_SPI_Receive_IT+0x138>)
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d10f      	bne.n	80068f2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006900:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d008      	beq.n	8006922 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	e000      	b.n	8006924 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8006922:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	08006e71 	.word	0x08006e71
 800693c:	08006e27 	.word	0x08006e27

08006940 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_SPI_TransmitReceive_IT+0x20>
 800695c:	2302      	movs	r3, #2
 800695e:	e075      	b.n	8006a4c <HAL_SPI_TransmitReceive_IT+0x10c>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800696e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006976:	7dbb      	ldrb	r3, [r7, #22]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d00d      	beq.n	8006998 <HAL_SPI_TransmitReceive_IT+0x58>
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006982:	d106      	bne.n	8006992 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <HAL_SPI_TransmitReceive_IT+0x52>
 800698c:	7dbb      	ldrb	r3, [r7, #22]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d002      	beq.n	8006998 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006992:	2302      	movs	r3, #2
 8006994:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006996:	e054      	b.n	8006a42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_SPI_TransmitReceive_IT+0x6a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_SPI_TransmitReceive_IT+0x6a>
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069ae:	e048      	b.n	8006a42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d003      	beq.n	80069c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2205      	movs	r2, #5
 80069c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	887a      	ldrh	r2, [r7, #2]
 80069da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	887a      	ldrh	r2, [r7, #2]
 80069e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	887a      	ldrh	r2, [r7, #2]
 80069ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <HAL_SPI_TransmitReceive_IT+0x118>)
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
 8006a02:	e005      	b.n	8006a10 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_SPI_TransmitReceive_IT+0x120>)
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_SPI_TransmitReceive_IT+0x124>)
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d008      	beq.n	8006a40 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e000      	b.n	8006a42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8006a40:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	08006d69 	.word	0x08006d69
 8006a5c:	08006dc9 	.word	0x08006dc9
 8006a60:	08006ca5 	.word	0x08006ca5
 8006a64:	08006d09 	.word	0x08006d09

08006a68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10f      	bne.n	8006aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	099b      	lsrs	r3, r3, #6
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
    return;
 8006aaa:	e0d7      	b.n	8006c5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_SPI_IRQHandler+0x66>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	09db      	lsrs	r3, r3, #7
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
    return;
 8006acc:	e0c6      	b.n	8006c5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10c      	bne.n	8006af4 <HAL_SPI_IRQHandler+0x8c>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	099b      	lsrs	r3, r3, #6
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80b4 	beq.w	8006c5c <HAL_SPI_IRQHandler+0x1f4>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80ad 	beq.w	8006c5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	099b      	lsrs	r3, r3, #6
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d023      	beq.n	8006b56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d011      	beq.n	8006b3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	e00b      	b.n	8006b56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	693b      	ldr	r3, [r7, #16]
        return;
 8006b54:	e082      	b.n	8006c5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d014      	beq.n	8006b8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f043 0201 	orr.w	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f043 0208 	orr.w	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d04f      	beq.n	8006c5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_SPI_IRQHandler+0x17e>
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d034      	beq.n	8006c50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0203 	bic.w	r2, r2, #3
 8006bf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c02:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_SPI_IRQHandler+0x1fc>)
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fc fedc 	bl	80039c8 <HAL_DMA_Abort_IT>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2e:	4a0d      	ldr	r2, [pc, #52]	; (8006c64 <HAL_SPI_IRQHandler+0x1fc>)
 8006c30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fc fec6 	bl	80039c8 <HAL_DMA_Abort_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c4e:	e003      	b.n	8006c58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f809 	bl	8006c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c56:	e000      	b.n	8006c5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c58:	bf00      	nop
    return;
 8006c5a:	bf00      	nop
  }
}
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	08006c7d 	.word	0x08006c7d

08006c68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff ffe6 	bl	8006c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f103 020c 	add.w	r2, r3, #12
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa0c 	bl	8007118 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10f      	bne.n	8006d60 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9dc 	bl	8007118 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	b292      	uxth	r2, r2
 8006d7c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	1c9a      	adds	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10f      	bne.n	8006dc0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9ac 	bl	8007118 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10f      	bne.n	8006e1e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e0c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f97d 	bl	8007118 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f103 020c 	add.w	r2, r3, #12
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9cc 	bl	8007200 <SPI_CloseRx_ISR>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	b292      	uxth	r2, r2
 8006e84:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	1c9a      	adds	r2, r3, #2
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f9a9 	bl	8007200 <SPI_CloseRx_ISR>
  }
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ec8:	f7fc fc6c 	bl	80037a4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ed8:	f7fc fc64 	bl	80037a4 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	015b      	lsls	r3, r3, #5
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	e054      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d050      	beq.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef8:	f7fc fc54 	bl	80037a4 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d902      	bls.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13d      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f26:	d111      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	d004      	beq.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d107      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f54:	d10f      	bne.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e017      	b.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d19b      	bne.n	8006ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000004 	.word	0x20000004

08006fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fdc:	d111      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d004      	beq.n	8006ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff0:	d107      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700a:	d12a      	bne.n	8007062 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007014:	d012      	beq.n	800703c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff ff49 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02d      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e026      	b.n	800708a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	2101      	movs	r1, #1
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff36 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e013      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	2101      	movs	r1, #1
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff23 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e000      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070a0:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <SPI_EndRxTxTransaction+0x7c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <SPI_EndRxTxTransaction+0x80>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	0d5b      	lsrs	r3, r3, #21
 80070ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070be:	d112      	bne.n	80070e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fef4 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d016      	beq.n	8007104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f043 0220 	orr.w	r2, r3, #32
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00f      	b.n	8007106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d0f2      	beq.n	80070e6 <SPI_EndRxTxTransaction+0x52>
 8007100:	e000      	b.n	8007104 <SPI_EndRxTxTransaction+0x70>
        break;
 8007102:	bf00      	nop
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000004 	.word	0x20000004
 8007114:	165e9f81 	.word	0x165e9f81

08007118 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007120:	4b35      	ldr	r3, [pc, #212]	; (80071f8 <SPI_CloseRxTx_ISR+0xe0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a35      	ldr	r2, [pc, #212]	; (80071fc <SPI_CloseRxTx_ISR+0xe4>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	0a5b      	lsrs	r3, r3, #9
 800712c:	2264      	movs	r2, #100	; 0x64
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007134:	f7fc fb36 	bl	80037a4 <HAL_GetTick>
 8007138:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0220 	bic.w	r2, r2, #32
 8007148:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800715c:	e009      	b.n	8007172 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	3b01      	subs	r3, #1
 8007162:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0eb      	beq.n	800714a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	2164      	movs	r1, #100	; 0x64
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ff8c 	bl	8007094 <SPI_EndRxTxTransaction>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	f043 0220 	orr.w	r2, r3, #32
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d115      	bne.n	80071e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d107      	bne.n	80071d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fc f8ef 	bl	80033ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80071ce:	e00e      	b.n	80071ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fc f8f7 	bl	80033cc <HAL_SPI_TxRxCpltCallback>
}
 80071de:	e006      	b.n	80071ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fd3d 	bl	8006c68 <HAL_SPI_ErrorCallback>
}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000004 	.word	0x20000004
 80071fc:	057619f1 	.word	0x057619f1

08007200 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007216:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007218:	f7fc fac4 	bl	80037a4 <HAL_GetTick>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	2164      	movs	r1, #100	; 0x64
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fed0 	bl	8006fc8 <SPI_EndRxTransaction>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fc f89f 	bl	80033ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800726e:	e002      	b.n	8007276 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fcf9 	bl	8006c68 <HAL_SPI_ErrorCallback>
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e041      	b.n	8007314 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d106      	bne.n	80072aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f839 	bl	800731c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f000 f9d7 	bl	8007670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d001      	beq.n	8007348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e04e      	b.n	80073e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a23      	ldr	r2, [pc, #140]	; (80073f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d022      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007372:	d01d      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1f      	ldr	r2, [pc, #124]	; (80073f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d018      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <HAL_TIM_Base_Start_IT+0xd0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00e      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <HAL_TIM_Base_Start_IT+0xd4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d009      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a19      	ldr	r2, [pc, #100]	; (8007408 <HAL_TIM_Base_Start_IT+0xd8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d004      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x80>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_TIM_Base_Start_IT+0xdc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d111      	bne.n	80073d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d010      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d2:	e007      	b.n	80073e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40010400 	.word	0x40010400
 8007408:	40014000 	.word	0x40014000
 800740c:	40001800 	.word	0x40001800

08007410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b02      	cmp	r3, #2
 8007424:	d122      	bne.n	800746c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b02      	cmp	r3, #2
 8007432:	d11b      	bne.n	800746c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0202 	mvn.w	r2, #2
 800743c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8ee 	bl	8007634 <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8e0 	bl	8007620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f8f1 	bl	8007648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	2b04      	cmp	r3, #4
 8007478:	d122      	bne.n	80074c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b04      	cmp	r3, #4
 8007486:	d11b      	bne.n	80074c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0204 	mvn.w	r2, #4
 8007490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8c4 	bl	8007634 <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8b6 	bl	8007620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8c7 	bl	8007648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d122      	bne.n	8007514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d11b      	bne.n	8007514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0208 	mvn.w	r2, #8
 80074e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2204      	movs	r2, #4
 80074ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f89a 	bl	8007634 <HAL_TIM_IC_CaptureCallback>
 8007500:	e005      	b.n	800750e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f88c 	bl	8007620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f89d 	bl	8007648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0310 	and.w	r3, r3, #16
 800751e:	2b10      	cmp	r3, #16
 8007520:	d122      	bne.n	8007568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d11b      	bne.n	8007568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0210 	mvn.w	r2, #16
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2208      	movs	r2, #8
 800753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f870 	bl	8007634 <HAL_TIM_IC_CaptureCallback>
 8007554:	e005      	b.n	8007562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f862 	bl	8007620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f873 	bl	8007648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d10e      	bne.n	8007594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d107      	bne.n	8007594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0201 	mvn.w	r2, #1
 800758c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fbd2 	bl	8001d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d10e      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d107      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f902 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d10e      	bne.n	80075ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d107      	bne.n	80075ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f838 	bl	800765c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d10e      	bne.n	8007618 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d107      	bne.n	8007618 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0220 	mvn.w	r2, #32
 8007610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f8cc 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a40      	ldr	r2, [pc, #256]	; (8007784 <TIM_Base_SetConfig+0x114>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d013      	beq.n	80076b0 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768e:	d00f      	beq.n	80076b0 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a3d      	ldr	r2, [pc, #244]	; (8007788 <TIM_Base_SetConfig+0x118>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00b      	beq.n	80076b0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3c      	ldr	r2, [pc, #240]	; (800778c <TIM_Base_SetConfig+0x11c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3b      	ldr	r2, [pc, #236]	; (8007790 <TIM_Base_SetConfig+0x120>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3a      	ldr	r2, [pc, #232]	; (8007794 <TIM_Base_SetConfig+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d108      	bne.n	80076c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2f      	ldr	r2, [pc, #188]	; (8007784 <TIM_Base_SetConfig+0x114>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d02b      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d0:	d027      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2c      	ldr	r2, [pc, #176]	; (8007788 <TIM_Base_SetConfig+0x118>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d023      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2b      	ldr	r2, [pc, #172]	; (800778c <TIM_Base_SetConfig+0x11c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d01f      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2a      	ldr	r2, [pc, #168]	; (8007790 <TIM_Base_SetConfig+0x120>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01b      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a29      	ldr	r2, [pc, #164]	; (8007794 <TIM_Base_SetConfig+0x124>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d017      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a28      	ldr	r2, [pc, #160]	; (8007798 <TIM_Base_SetConfig+0x128>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a27      	ldr	r2, [pc, #156]	; (800779c <TIM_Base_SetConfig+0x12c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00f      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <TIM_Base_SetConfig+0x130>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a25      	ldr	r2, [pc, #148]	; (80077a4 <TIM_Base_SetConfig+0x134>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d007      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a24      	ldr	r2, [pc, #144]	; (80077a8 <TIM_Base_SetConfig+0x138>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a23      	ldr	r2, [pc, #140]	; (80077ac <TIM_Base_SetConfig+0x13c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d108      	bne.n	8007734 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <TIM_Base_SetConfig+0x114>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_Base_SetConfig+0xf8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a0c      	ldr	r2, [pc, #48]	; (8007794 <TIM_Base_SetConfig+0x124>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	615a      	str	r2, [r3, #20]
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40010000 	.word	0x40010000
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40010400 	.word	0x40010400
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800
 80077a4:	40001800 	.word	0x40001800
 80077a8:	40001c00 	.word	0x40001c00
 80077ac:	40002000 	.word	0x40002000

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d8:	b084      	sub	sp, #16
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	f107 001c 	add.w	r0, r7, #28
 80077e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d122      	bne.n	8007836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d105      	bne.n	800782a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fbee 	bl	800900c <USB_CoreReset>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e01a      	b.n	800786c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fbe2 	bl	800900c <USB_CoreReset>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800784c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
 800785e:	e005      	b.n	800786c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10b      	bne.n	800788a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f043 0206 	orr.w	r2, r3, #6
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f043 0220 	orr.w	r2, r3, #32
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007896:	b004      	add	sp, #16
 8007898:	4770      	bx	lr
	...

0800789c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d165      	bne.n	800797c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <USB_SetTurnaroundTime+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d906      	bls.n	80078c6 <USB_SetTurnaroundTime+0x2a>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a40      	ldr	r2, [pc, #256]	; (80079bc <USB_SetTurnaroundTime+0x120>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d202      	bcs.n	80078c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078c0:	230f      	movs	r3, #15
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e062      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <USB_SetTurnaroundTime+0x120>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d306      	bcc.n	80078dc <USB_SetTurnaroundTime+0x40>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <USB_SetTurnaroundTime+0x124>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d202      	bcs.n	80078dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078d6:	230e      	movs	r3, #14
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	e057      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4a38      	ldr	r2, [pc, #224]	; (80079c0 <USB_SetTurnaroundTime+0x124>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d306      	bcc.n	80078f2 <USB_SetTurnaroundTime+0x56>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a37      	ldr	r2, [pc, #220]	; (80079c4 <USB_SetTurnaroundTime+0x128>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d202      	bcs.n	80078f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078ec:	230d      	movs	r3, #13
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e04c      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4a33      	ldr	r2, [pc, #204]	; (80079c4 <USB_SetTurnaroundTime+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d306      	bcc.n	8007908 <USB_SetTurnaroundTime+0x6c>
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a32      	ldr	r2, [pc, #200]	; (80079c8 <USB_SetTurnaroundTime+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d802      	bhi.n	8007908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007902:	230c      	movs	r3, #12
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e041      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4a2f      	ldr	r2, [pc, #188]	; (80079c8 <USB_SetTurnaroundTime+0x12c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d906      	bls.n	800791e <USB_SetTurnaroundTime+0x82>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a2e      	ldr	r2, [pc, #184]	; (80079cc <USB_SetTurnaroundTime+0x130>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d802      	bhi.n	800791e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007918:	230b      	movs	r3, #11
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e036      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4a2a      	ldr	r2, [pc, #168]	; (80079cc <USB_SetTurnaroundTime+0x130>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d906      	bls.n	8007934 <USB_SetTurnaroundTime+0x98>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a29      	ldr	r2, [pc, #164]	; (80079d0 <USB_SetTurnaroundTime+0x134>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d802      	bhi.n	8007934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800792e:	230a      	movs	r3, #10
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	e02b      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <USB_SetTurnaroundTime+0x134>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d906      	bls.n	800794a <USB_SetTurnaroundTime+0xae>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <USB_SetTurnaroundTime+0x138>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d202      	bcs.n	800794a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007944:	2309      	movs	r3, #9
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e020      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <USB_SetTurnaroundTime+0x138>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d306      	bcc.n	8007960 <USB_SetTurnaroundTime+0xc4>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <USB_SetTurnaroundTime+0x13c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d802      	bhi.n	8007960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800795a:	2308      	movs	r3, #8
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e015      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <USB_SetTurnaroundTime+0x13c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d906      	bls.n	8007976 <USB_SetTurnaroundTime+0xda>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <USB_SetTurnaroundTime+0x140>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d202      	bcs.n	8007976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007970:	2307      	movs	r3, #7
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e00a      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007976:	2306      	movs	r3, #6
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e007      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007982:	2309      	movs	r3, #9
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e001      	b.n	800798c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007988:	2309      	movs	r3, #9
 800798a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	00d8acbf 	.word	0x00d8acbf
 80079bc:	00e4e1c0 	.word	0x00e4e1c0
 80079c0:	00f42400 	.word	0x00f42400
 80079c4:	01067380 	.word	0x01067380
 80079c8:	011a499f 	.word	0x011a499f
 80079cc:	01312cff 	.word	0x01312cff
 80079d0:	014ca43f 	.word	0x014ca43f
 80079d4:	016e3600 	.word	0x016e3600
 80079d8:	01a6ab1f 	.word	0x01a6ab1f
 80079dc:	01e84800 	.word	0x01e84800

080079e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f043 0201 	orr.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d115      	bne.n	8007a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a52:	2001      	movs	r0, #1
 8007a54:	f7fb feb2 	bl	80037bc <HAL_Delay>
      ms++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fa45 	bl	8008eee <USB_GetMode>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d01e      	beq.n	8007aa8 <USB_SetCurrentMode+0x84>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b31      	cmp	r3, #49	; 0x31
 8007a6e:	d9f0      	bls.n	8007a52 <USB_SetCurrentMode+0x2e>
 8007a70:	e01a      	b.n	8007aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7fb fe99 	bl	80037bc <HAL_Delay>
      ms++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fa2c 	bl	8008eee <USB_GetMode>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USB_SetCurrentMode+0x84>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b31      	cmp	r3, #49	; 0x31
 8007aa0:	d9f0      	bls.n	8007a84 <USB_SetCurrentMode+0x60>
 8007aa2:	e001      	b.n	8007aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e005      	b.n	8007ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b32      	cmp	r3, #50	; 0x32
 8007aac:	d101      	bne.n	8007ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007abc:	b084      	sub	sp, #16
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e009      	b.n	8007af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3340      	adds	r3, #64	; 0x40
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3301      	adds	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b0e      	cmp	r3, #14
 8007af4:	d9f2      	bls.n	8007adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11c      	bne.n	8007b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b0a:	f043 0302 	orr.w	r3, r3, #2
 8007b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
 8007b34:	e00b      	b.n	8007b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b54:	461a      	mov	r2, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b60:	4619      	mov	r1, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	461a      	mov	r2, r3
 8007b6a:	680b      	ldr	r3, [r1, #0]
 8007b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10c      	bne.n	8007b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f965 	bl	8007e4c <USB_SetDevSpeed>
 8007b82:	e008      	b.n	8007b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b84:	2101      	movs	r1, #1
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f960 	bl	8007e4c <USB_SetDevSpeed>
 8007b8c:	e003      	b.n	8007b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b8e:	2103      	movs	r1, #3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f95b 	bl	8007e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b96:	2110      	movs	r1, #16
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8f3 	bl	8007d84 <USB_FlushTxFifo>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f91f 	bl	8007dec <USB_FlushRxFifo>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	e043      	b.n	8007c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf8:	d118      	bne.n	8007c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	e013      	b.n	8007c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c22:	461a      	mov	r2, r3
 8007c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	e008      	b.n	8007c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c38:	461a      	mov	r2, r3
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	3301      	adds	r3, #1
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d3b7      	bcc.n	8007be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	e043      	b.n	8007d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c8e:	d118      	bne.n	8007cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e013      	b.n	8007cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	e008      	b.n	8007cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d3b7      	bcc.n	8007c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d105      	bne.n	8007d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f043 0210 	orr.w	r2, r3, #16
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <USB_DevInit+0x2c4>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f043 0208 	orr.w	r2, r3, #8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d107      	bne.n	8007d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d68:	f043 0304 	orr.w	r3, r3, #4
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d7c:	b004      	add	sp, #16
 8007d7e:	4770      	bx	lr
 8007d80:	803c3800 	.word	0x803c3800

08007d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <USB_FlushTxFifo+0x64>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d901      	bls.n	8007da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e01b      	b.n	8007ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	daf2      	bge.n	8007d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	019b      	lsls	r3, r3, #6
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4a08      	ldr	r2, [pc, #32]	; (8007de8 <USB_FlushTxFifo+0x64>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e006      	b.n	8007ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d0f0      	beq.n	8007dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	00030d40 	.word	0x00030d40

08007dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a11      	ldr	r2, [pc, #68]	; (8007e48 <USB_FlushRxFifo+0x5c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d901      	bls.n	8007e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e018      	b.n	8007e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	daf2      	bge.n	8007df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2210      	movs	r2, #16
 8007e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a08      	ldr	r2, [pc, #32]	; (8007e48 <USB_FlushRxFifo+0x5c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d901      	bls.n	8007e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e006      	b.n	8007e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d0f0      	beq.n	8007e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	00030d40 	.word	0x00030d40

08007e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0306 	and.w	r3, r3, #6
 8007e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]
 8007ea2:	e00a      	b.n	8007eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d002      	beq.n	8007eb0 <USB_GetDevSpeed+0x32>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b06      	cmp	r3, #6
 8007eae:	d102      	bne.n	8007eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	75fb      	strb	r3, [r7, #23]
 8007eb4:	e001      	b.n	8007eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007eb6:	230f      	movs	r3, #15
 8007eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d13a      	bne.n	8007f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	69da      	ldr	r2, [r3, #28]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	68f9      	ldr	r1, [r7, #12]
 8007efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d155      	bne.n	8007fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f40:	4313      	orrs	r3, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	e036      	b.n	8007fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	69da      	ldr	r2, [r3, #28]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d11a      	bne.n	8007fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d161      	bne.n	80080b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800800a:	d11f      	bne.n	800804c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	440a      	add	r2, r1
 8008022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800802a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2101      	movs	r1, #1
 800805e:	fa01 f303 	lsl.w	r3, r1, r3
 8008062:	b29b      	uxth	r3, r3
 8008064:	43db      	mvns	r3, r3
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800806c:	4013      	ands	r3, r2
 800806e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	2101      	movs	r1, #1
 8008082:	fa01 f303 	lsl.w	r3, r1, r3
 8008086:	b29b      	uxth	r3, r3
 8008088:	43db      	mvns	r3, r3
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008090:	4013      	ands	r3, r2
 8008092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	0159      	lsls	r1, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	440b      	add	r3, r1
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	4619      	mov	r1, r3
 80080b0:	4b35      	ldr	r3, [pc, #212]	; (8008188 <USB_DeactivateEndpoint+0x1b0>)
 80080b2:	4013      	ands	r3, r2
 80080b4:	600b      	str	r3, [r1, #0]
 80080b6:	e060      	b.n	800817a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ce:	d11f      	bne.n	8008110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800810a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800810e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 030f 	and.w	r3, r3, #15
 8008120:	2101      	movs	r1, #1
 8008122:	fa01 f303 	lsl.w	r3, r1, r3
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	43db      	mvns	r3, r3
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008130:	4013      	ands	r3, r2
 8008132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813a:	69da      	ldr	r2, [r3, #28]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	2101      	movs	r1, #1
 8008146:	fa01 f303 	lsl.w	r3, r1, r3
 800814a:	041b      	lsls	r3, r3, #16
 800814c:	43db      	mvns	r3, r3
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008154:	4013      	ands	r3, r2
 8008156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	0159      	lsls	r1, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	440b      	add	r3, r1
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	4619      	mov	r1, r3
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <USB_DeactivateEndpoint+0x1b4>)
 8008176:	4013      	ands	r3, r2
 8008178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	ec337800 	.word	0xec337800
 800818c:	eff37800 	.word	0xeff37800

08008190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af02      	add	r7, sp, #8
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	4613      	mov	r3, r2
 800819c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f040 815c 	bne.w	800846a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d132      	bne.n	8008220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008218:	0cdb      	lsrs	r3, r3, #19
 800821a:	04db      	lsls	r3, r3, #19
 800821c:	6113      	str	r3, [r2, #16]
 800821e:	e074      	b.n	800830a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823a:	0cdb      	lsrs	r3, r3, #19
 800823c:	04db      	lsls	r3, r3, #19
 800823e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800825e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6999      	ldr	r1, [r3, #24]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	440b      	add	r3, r1
 800827c:	1e59      	subs	r1, r3, #1
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	fbb1 f3f3 	udiv	r3, r1, r3
 8008286:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008288:	4b9d      	ldr	r3, [pc, #628]	; (8008500 <USB_EPStartXfer+0x370>)
 800828a:	400b      	ands	r3, r1
 800828c:	69b9      	ldr	r1, [r7, #24]
 800828e:	0148      	lsls	r0, r1, #5
 8008290:	69f9      	ldr	r1, [r7, #28]
 8008292:	4401      	add	r1, r0
 8008294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008298:	4313      	orrs	r3, r2
 800829a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b2:	69b9      	ldr	r1, [r7, #24]
 80082b4:	0148      	lsls	r0, r1, #5
 80082b6:	69f9      	ldr	r1, [r7, #28]
 80082b8:	4401      	add	r1, r0
 80082ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082be:	4313      	orrs	r3, r2
 80082c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	791b      	ldrb	r3, [r3, #4]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d11f      	bne.n	800830a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d14b      	bne.n	80083a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	791b      	ldrb	r3, [r3, #4]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d128      	bne.n	8008386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d110      	bne.n	8008366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	0151      	lsls	r1, r2, #5
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	440a      	add	r2, r1
 800835a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	e00f      	b.n	8008386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	440a      	add	r2, r1
 800839c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	e133      	b.n	8008610 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d015      	beq.n	80083fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 811b 	beq.w	8008610 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	2101      	movs	r1, #1
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	69f9      	ldr	r1, [r7, #28]
 80083f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f6:	4313      	orrs	r3, r2
 80083f8:	634b      	str	r3, [r1, #52]	; 0x34
 80083fa:	e109      	b.n	8008610 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d110      	bne.n	800842e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e00f      	b.n	800844e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	0151      	lsls	r1, r2, #5
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	440a      	add	r2, r1
 8008444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800844c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6919      	ldr	r1, [r3, #16]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	b298      	uxth	r0, r3
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4603      	mov	r3, r0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fade 	bl	8008a24 <USB_WritePacket>
 8008468:	e0d2      	b.n	8008610 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008484:	0cdb      	lsrs	r3, r3, #19
 8008486:	04db      	lsls	r3, r3, #19
 8008488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d126      	bne.n	8008504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c2:	691a      	ldr	r2, [r3, #16]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084cc:	69b9      	ldr	r1, [r7, #24]
 80084ce:	0148      	lsls	r0, r1, #5
 80084d0:	69f9      	ldr	r1, [r7, #28]
 80084d2:	4401      	add	r1, r0
 80084d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084d8:	4313      	orrs	r3, r2
 80084da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084fa:	6113      	str	r3, [r2, #16]
 80084fc:	e03a      	b.n	8008574 <USB_EPStartXfer+0x3e4>
 80084fe:	bf00      	nop
 8008500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	4413      	add	r3, r2
 800850e:	1e5a      	subs	r2, r3, #1
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	fbb2 f3f3 	udiv	r3, r2, r3
 8008518:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	8afa      	ldrh	r2, [r7, #22]
 8008520:	fb03 f202 	mul.w	r2, r3, r2
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	8afb      	ldrh	r3, [r7, #22]
 8008538:	04d9      	lsls	r1, r3, #19
 800853a:	4b38      	ldr	r3, [pc, #224]	; (800861c <USB_EPStartXfer+0x48c>)
 800853c:	400b      	ands	r3, r1
 800853e:	69b9      	ldr	r1, [r7, #24]
 8008540:	0148      	lsls	r0, r1, #5
 8008542:	69f9      	ldr	r1, [r7, #28]
 8008544:	4401      	add	r1, r0
 8008546:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800854a:	4313      	orrs	r3, r2
 800854c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008564:	69b9      	ldr	r1, [r7, #24]
 8008566:	0148      	lsls	r0, r1, #5
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	4401      	add	r1, r0
 800856c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008570:	4313      	orrs	r3, r2
 8008572:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10d      	bne.n	8008596 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	6919      	ldr	r1, [r3, #16]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	460a      	mov	r2, r1
 8008594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d128      	bne.n	80085f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d110      	bne.n	80085d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	e00f      	b.n	80085f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800860e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	1ff80000 	.word	0x1ff80000

08008620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b01      	cmp	r3, #1
 800863e:	f040 80ce 	bne.w	80087de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d132      	bne.n	80086b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800866c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800868c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a8:	0cdb      	lsrs	r3, r3, #19
 80086aa:	04db      	lsls	r3, r3, #19
 80086ac:	6113      	str	r3, [r2, #16]
 80086ae:	e04e      	b.n	800874e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ca:	0cdb      	lsrs	r3, r3, #19
 80086cc:	04db      	lsls	r3, r3, #19
 80086ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d903      	bls.n	8008708 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873e:	6939      	ldr	r1, [r7, #16]
 8008740:	0148      	lsls	r0, r1, #5
 8008742:	6979      	ldr	r1, [r7, #20]
 8008744:	4401      	add	r1, r0
 8008746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800874a:	4313      	orrs	r3, r2
 800874c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d11e      	bne.n	8008792 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d009      	beq.n	8008770 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	461a      	mov	r2, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	e097      	b.n	80088c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8083 	beq.w	80088c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	2101      	movs	r1, #1
 80087ce:	fa01 f303 	lsl.w	r3, r1, r3
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087d8:	4313      	orrs	r3, r2
 80087da:	634b      	str	r3, [r1, #52]	; 0x34
 80087dc:	e071      	b.n	80088c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f8:	0cdb      	lsrs	r3, r3, #19
 80087fa:	04db      	lsls	r3, r3, #19
 80087fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800881c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008870:	6939      	ldr	r1, [r7, #16]
 8008872:	0148      	lsls	r0, r1, #5
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	4401      	add	r1, r0
 8008878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800887c:	4313      	orrs	r3, r2
 800887e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d10d      	bne.n	80088a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6919      	ldr	r1, [r3, #16]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	460a      	mov	r2, r1
 80088a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	0151      	lsls	r1, r2, #5
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	440a      	add	r2, r1
 80088b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d14a      	bne.n	8008984 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008906:	f040 8086 	bne.w	8008a16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800892c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	440a      	add	r2, r1
 8008948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f242 7210 	movw	r2, #10000	; 0x2710
 800895e:	4293      	cmp	r3, r2
 8008960:	d902      	bls.n	8008968 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
          break;
 8008966:	e056      	b.n	8008a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800897c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008980:	d0e7      	beq.n	8008952 <USB_EPStopXfer+0x82>
 8008982:	e048      	b.n	8008a16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800899c:	d13b      	bne.n	8008a16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	0151      	lsls	r1, r2, #5
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	440a      	add	r2, r1
 80089b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	0151      	lsls	r1, r2, #5
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	440a      	add	r2, r1
 80089dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d902      	bls.n	80089fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
          break;
 80089fa:	e00c      	b.n	8008a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a14:	d0e7      	beq.n	80089e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	460b      	mov	r3, r1
 8008a34:	71fb      	strb	r3, [r7, #7]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d123      	bne.n	8008a92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a4a:	88bb      	ldrh	r3, [r7, #4]
 8008a4c:	3303      	adds	r3, #3
 8008a4e:	089b      	lsrs	r3, r3, #2
 8008a50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a52:	2300      	movs	r3, #0
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e018      	b.n	8008a8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	031a      	lsls	r2, r3, #12
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a64:	461a      	mov	r2, r3
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	3301      	adds	r3, #1
 8008a76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	3301      	adds	r3, #1
 8008a82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	3301      	adds	r3, #1
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d3e2      	bcc.n	8008a58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3724      	adds	r7, #36	; 0x24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b08b      	sub	sp, #44	; 0x2c
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	089b      	lsrs	r3, r3, #2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	623b      	str	r3, [r7, #32]
 8008aca:	e014      	b.n	8008af6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	3301      	adds	r3, #1
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	3301      	adds	r3, #1
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	3301      	adds	r3, #1
 8008af4:	623b      	str	r3, [r7, #32]
 8008af6:	6a3a      	ldr	r2, [r7, #32]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d3e6      	bcc.n	8008acc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008afe:	8bfb      	ldrh	r3, [r7, #30]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01e      	beq.n	8008b42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f107 0310 	add.w	r3, r7, #16
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	fa22 f303 	lsr.w	r3, r2, r3
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	701a      	strb	r2, [r3, #0]
      i++;
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	3301      	adds	r3, #1
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b36:	8bfb      	ldrh	r3, [r7, #30]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b3c:	8bfb      	ldrh	r3, [r7, #30]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1ea      	bne.n	8008b18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	372c      	adds	r7, #44	; 0x2c
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d12c      	bne.n	8008bc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	db12      	blt.n	8008ba4 <USB_EPSetStall+0x54>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00f      	beq.n	8008ba4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	0151      	lsls	r1, r2, #5
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	440a      	add	r2, r1
 8008b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	0151      	lsls	r1, r2, #5
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	440a      	add	r2, r1
 8008bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	e02b      	b.n	8008c1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	db12      	blt.n	8008bfe <USB_EPSetStall+0xae>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d128      	bne.n	8008c9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	791b      	ldrb	r3, [r3, #4]
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d003      	beq.n	8008c78 <USB_EPClearStall+0x4c>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d138      	bne.n	8008cea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	e027      	b.n	8008cea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	791b      	ldrb	r3, [r3, #4]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d003      	beq.n	8008cca <USB_EPClearStall+0x9e>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d10f      	bne.n	8008cea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d32:	4313      	orrs	r3, r2
 8008d34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d72:	f023 0302 	bic.w	r3, r3, #2
 8008d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008da0:	f023 0303 	bic.w	r3, r3, #3
 8008da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db4:	f043 0302 	orr.w	r3, r3, #2
 8008db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	0c1b      	lsrs	r3, r3, #16
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	4013      	ands	r3, r2
 8008e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	b29b      	uxth	r3, r3
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	4013      	ands	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e84:	68bb      	ldr	r3, [r7, #8]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b087      	sub	sp, #28
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	01db      	lsls	r3, r3, #7
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	4013      	ands	r3, r2
 8008ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f003 0301 	and.w	r3, r3, #1
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f28:	f023 0307 	bic.w	r3, r3, #7
 8008f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	333c      	adds	r3, #60	; 0x3c
 8008f66:	3304      	adds	r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4a26      	ldr	r2, [pc, #152]	; (8009008 <USB_EP0_OutStart+0xb8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d90a      	bls.n	8008f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f84:	d101      	bne.n	8008f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e037      	b.n	8008ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	461a      	mov	r2, r3
 8008f92:	2300      	movs	r3, #0
 8008f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb8:	f043 0318 	orr.w	r3, r3, #24
 8008fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fd2:	7afb      	ldrb	r3, [r7, #11]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d10f      	bne.n	8008ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	4f54300a 	.word	0x4f54300a

0800900c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4a13      	ldr	r2, [pc, #76]	; (8009070 <USB_CoreReset+0x64>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d901      	bls.n	800902a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e01b      	b.n	8009062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	daf2      	bge.n	8009018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f043 0201 	orr.w	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3301      	adds	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4a09      	ldr	r2, [pc, #36]	; (8009070 <USB_CoreReset+0x64>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d901      	bls.n	8009054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e006      	b.n	8009062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b01      	cmp	r3, #1
 800905e:	d0f0      	beq.n	8009042 <USB_CoreReset+0x36>

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	00030d40 	.word	0x00030d40

08009074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009080:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009084:	f006 f8d2 	bl	800f22c <USBD_static_malloc>
 8009088:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d109      	bne.n	80090a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	32b0      	adds	r2, #176	; 0xb0
 800909a:	2100      	movs	r1, #0
 800909c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090a0:	2302      	movs	r3, #2
 80090a2:	e0d4      	b.n	800924e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80090a8:	2100      	movs	r1, #0
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f006 f93a 	bl	800f324 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	32b0      	adds	r2, #176	; 0xb0
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32b0      	adds	r2, #176	; 0xb0
 80090ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7c1b      	ldrb	r3, [r3, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d138      	bne.n	800914e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80090dc:	4b5e      	ldr	r3, [pc, #376]	; (8009258 <USBD_CDC_Init+0x1e4>)
 80090de:	7819      	ldrb	r1, [r3, #0]
 80090e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e4:	2202      	movs	r2, #2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f005 ff7d 	bl	800efe6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090ec:	4b5a      	ldr	r3, [pc, #360]	; (8009258 <USBD_CDC_Init+0x1e4>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	f003 020f 	and.w	r2, r3, #15
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	3324      	adds	r3, #36	; 0x24
 8009102:	2201      	movs	r2, #1
 8009104:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009106:	4b55      	ldr	r3, [pc, #340]	; (800925c <USBD_CDC_Init+0x1e8>)
 8009108:	7819      	ldrb	r1, [r3, #0]
 800910a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800910e:	2202      	movs	r2, #2
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f005 ff68 	bl	800efe6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009116:	4b51      	ldr	r3, [pc, #324]	; (800925c <USBD_CDC_Init+0x1e8>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800912e:	2201      	movs	r2, #1
 8009130:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009132:	4b4b      	ldr	r3, [pc, #300]	; (8009260 <USBD_CDC_Init+0x1ec>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	3326      	adds	r3, #38	; 0x26
 8009148:	2210      	movs	r2, #16
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	e035      	b.n	80091ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800914e:	4b42      	ldr	r3, [pc, #264]	; (8009258 <USBD_CDC_Init+0x1e4>)
 8009150:	7819      	ldrb	r1, [r3, #0]
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	2202      	movs	r2, #2
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f005 ff45 	bl	800efe6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800915c:	4b3e      	ldr	r3, [pc, #248]	; (8009258 <USBD_CDC_Init+0x1e4>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3324      	adds	r3, #36	; 0x24
 8009172:	2201      	movs	r2, #1
 8009174:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009176:	4b39      	ldr	r3, [pc, #228]	; (800925c <USBD_CDC_Init+0x1e8>)
 8009178:	7819      	ldrb	r1, [r3, #0]
 800917a:	2340      	movs	r3, #64	; 0x40
 800917c:	2202      	movs	r2, #2
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f005 ff31 	bl	800efe6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009184:	4b35      	ldr	r3, [pc, #212]	; (800925c <USBD_CDC_Init+0x1e8>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800919c:	2201      	movs	r2, #1
 800919e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091a0:	4b2f      	ldr	r3, [pc, #188]	; (8009260 <USBD_CDC_Init+0x1ec>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	3326      	adds	r3, #38	; 0x26
 80091b6:	2210      	movs	r2, #16
 80091b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091ba:	4b29      	ldr	r3, [pc, #164]	; (8009260 <USBD_CDC_Init+0x1ec>)
 80091bc:	7819      	ldrb	r1, [r3, #0]
 80091be:	2308      	movs	r3, #8
 80091c0:	2203      	movs	r2, #3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f005 ff0f 	bl	800efe6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <USBD_CDC_Init+0x1ec>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 020f 	and.w	r2, r3, #15
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	3324      	adds	r3, #36	; 0x24
 80091de:	2201      	movs	r2, #1
 80091e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	33b0      	adds	r3, #176	; 0xb0
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009218:	2302      	movs	r3, #2
 800921a:	e018      	b.n	800924e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7c1b      	ldrb	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009224:	4b0d      	ldr	r3, [pc, #52]	; (800925c <USBD_CDC_Init+0x1e8>)
 8009226:	7819      	ldrb	r1, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800922e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f005 ffc6 	bl	800f1c4 <USBD_LL_PrepareReceive>
 8009238:	e008      	b.n	800924c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800923a:	4b08      	ldr	r3, [pc, #32]	; (800925c <USBD_CDC_Init+0x1e8>)
 800923c:	7819      	ldrb	r1, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f005 ffbc 	bl	800f1c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20000253 	.word	0x20000253
 800925c:	20000254 	.word	0x20000254
 8009260:	20000255 	.word	0x20000255

08009264 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009270:	4b3a      	ldr	r3, [pc, #232]	; (800935c <USBD_CDC_DeInit+0xf8>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f005 fedb 	bl	800f032 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800927c:	4b37      	ldr	r3, [pc, #220]	; (800935c <USBD_CDC_DeInit+0xf8>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 020f 	and.w	r2, r3, #15
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	3324      	adds	r3, #36	; 0x24
 8009292:	2200      	movs	r2, #0
 8009294:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009296:	4b32      	ldr	r3, [pc, #200]	; (8009360 <USBD_CDC_DeInit+0xfc>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f005 fec8 	bl	800f032 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092a2:	4b2f      	ldr	r3, [pc, #188]	; (8009360 <USBD_CDC_DeInit+0xfc>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f003 020f 	and.w	r2, r3, #15
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092ba:	2200      	movs	r2, #0
 80092bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80092be:	4b29      	ldr	r3, [pc, #164]	; (8009364 <USBD_CDC_DeInit+0x100>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f005 feb4 	bl	800f032 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <USBD_CDC_DeInit+0x100>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 020f 	and.w	r2, r3, #15
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	2200      	movs	r2, #0
 80092e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80092e4:	4b1f      	ldr	r3, [pc, #124]	; (8009364 <USBD_CDC_DeInit+0x100>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 020f 	and.w	r2, r3, #15
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	3326      	adds	r3, #38	; 0x26
 80092fa:	2200      	movs	r2, #0
 80092fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32b0      	adds	r2, #176	; 0xb0
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d01f      	beq.n	8009350 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	33b0      	adds	r3, #176	; 0xb0
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32b0      	adds	r2, #176	; 0xb0
 800932e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009332:	4618      	mov	r0, r3
 8009334:	f005 ff88 	bl	800f248 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	32b0      	adds	r2, #176	; 0xb0
 8009342:	2100      	movs	r1, #0
 8009344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000253 	.word	0x20000253
 8009360:	20000254 	.word	0x20000254
 8009364:	20000255 	.word	0x20000255

08009368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	32b0      	adds	r2, #176	; 0xb0
 800937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009380:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	e0bf      	b.n	8009518 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d050      	beq.n	8009446 <USBD_CDC_Setup+0xde>
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	f040 80af 	bne.w	8009508 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	88db      	ldrh	r3, [r3, #6]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d03a      	beq.n	8009428 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	b25b      	sxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	da1b      	bge.n	80093f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	33b0      	adds	r3, #176	; 0xb0
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80093d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	88d2      	ldrh	r2, [r2, #6]
 80093d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b07      	cmp	r3, #7
 80093e0:	bf28      	it	cs
 80093e2:	2307      	movcs	r3, #7
 80093e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	89fa      	ldrh	r2, [r7, #14]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fd43 	bl	800ae78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80093f2:	e090      	b.n	8009516 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	785a      	ldrb	r2, [r3, #1]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	88db      	ldrh	r3, [r3, #6]
 8009402:	2b3f      	cmp	r3, #63	; 0x3f
 8009404:	d803      	bhi.n	800940e <USBD_CDC_Setup+0xa6>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	88db      	ldrh	r3, [r3, #6]
 800940a:	b2da      	uxtb	r2, r3
 800940c:	e000      	b.n	8009410 <USBD_CDC_Setup+0xa8>
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009416:	6939      	ldr	r1, [r7, #16]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800941e:	461a      	mov	r2, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 fd55 	bl	800aed0 <USBD_CtlPrepareRx>
      break;
 8009426:	e076      	b.n	8009516 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	33b0      	adds	r3, #176	; 0xb0
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	7850      	ldrb	r0, [r2, #1]
 800943e:	2200      	movs	r2, #0
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	4798      	blx	r3
      break;
 8009444:	e067      	b.n	8009516 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b0b      	cmp	r3, #11
 800944c:	d851      	bhi.n	80094f2 <USBD_CDC_Setup+0x18a>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <USBD_CDC_Setup+0xec>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009485 	.word	0x08009485
 8009458:	08009501 	.word	0x08009501
 800945c:	080094f3 	.word	0x080094f3
 8009460:	080094f3 	.word	0x080094f3
 8009464:	080094f3 	.word	0x080094f3
 8009468:	080094f3 	.word	0x080094f3
 800946c:	080094f3 	.word	0x080094f3
 8009470:	080094f3 	.word	0x080094f3
 8009474:	080094f3 	.word	0x080094f3
 8009478:	080094f3 	.word	0x080094f3
 800947c:	080094af 	.word	0x080094af
 8009480:	080094d9 	.word	0x080094d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b03      	cmp	r3, #3
 800948e:	d107      	bne.n	80094a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009490:	f107 030a 	add.w	r3, r7, #10
 8009494:	2202      	movs	r2, #2
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 fced 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800949e:	e032      	b.n	8009506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fc77 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	75fb      	strb	r3, [r7, #23]
          break;
 80094ac:	e02b      	b.n	8009506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d107      	bne.n	80094ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094ba:	f107 030d 	add.w	r3, r7, #13
 80094be:	2201      	movs	r2, #1
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fcd8 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094c8:	e01d      	b.n	8009506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 fc62 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	75fb      	strb	r3, [r7, #23]
          break;
 80094d6:	e016      	b.n	8009506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d00f      	beq.n	8009504 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 fc55 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094f0:	e008      	b.n	8009504 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 fc4e 	bl	800ad96 <USBD_CtlError>
          ret = USBD_FAIL;
 80094fa:	2303      	movs	r3, #3
 80094fc:	75fb      	strb	r3, [r7, #23]
          break;
 80094fe:	e002      	b.n	8009506 <USBD_CDC_Setup+0x19e>
          break;
 8009500:	bf00      	nop
 8009502:	e008      	b.n	8009516 <USBD_CDC_Setup+0x1ae>
          break;
 8009504:	bf00      	nop
      }
      break;
 8009506:	e006      	b.n	8009516 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fc43 	bl	800ad96 <USBD_CtlError>
      ret = USBD_FAIL;
 8009510:	2303      	movs	r3, #3
 8009512:	75fb      	strb	r3, [r7, #23]
      break;
 8009514:	bf00      	nop
  }

  return (uint8_t)ret;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	32b0      	adds	r2, #176	; 0xb0
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	e065      	b.n	8009616 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	32b0      	adds	r2, #176	; 0xb0
 8009554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009558:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	f003 020f 	and.w	r2, r3, #15
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	3318      	adds	r3, #24
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d02f      	beq.n	80095d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	f003 020f 	and.w	r2, r3, #15
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3318      	adds	r3, #24
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	f003 010f 	and.w	r1, r3, #15
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	460b      	mov	r3, r1
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	440b      	add	r3, r1
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4403      	add	r3, r0
 800959c:	3348      	adds	r3, #72	; 0x48
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d112      	bne.n	80095d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	3318      	adds	r3, #24
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095c6:	78f9      	ldrb	r1, [r7, #3]
 80095c8:	2300      	movs	r3, #0
 80095ca:	2200      	movs	r2, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f005 fdd8 	bl	800f182 <USBD_LL_Transmit>
 80095d2:	e01f      	b.n	8009614 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	33b0      	adds	r3, #176	; 0xb0
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d010      	beq.n	8009614 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	33b0      	adds	r3, #176	; 0xb0
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	32b0      	adds	r2, #176	; 0xb0
 8009634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009638:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	32b0      	adds	r2, #176	; 0xb0
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	e01a      	b.n	8009686 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f005 fdd6 	bl	800f206 <USBD_LL_GetRxDataSize>
 800965a:	4602      	mov	r2, r0
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	33b0      	adds	r3, #176	; 0xb0
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009680:	4611      	mov	r1, r2
 8009682:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	32b0      	adds	r2, #176	; 0xb0
 80096a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e025      	b.n	80096fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	33b0      	adds	r3, #176	; 0xb0
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d01a      	beq.n	80096fa <USBD_CDC_EP0_RxReady+0x6c>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096ca:	2bff      	cmp	r3, #255	; 0xff
 80096cc:	d015      	beq.n	80096fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	33b0      	adds	r3, #176	; 0xb0
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80096e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096ee:	b292      	uxth	r2, r2
 80096f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	22ff      	movs	r2, #255	; 0xff
 80096f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800970c:	2182      	movs	r1, #130	; 0x82
 800970e:	4818      	ldr	r0, [pc, #96]	; (8009770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009710:	f000 fd09 	bl	800a126 <USBD_GetEpDesc>
 8009714:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009716:	2101      	movs	r1, #1
 8009718:	4815      	ldr	r0, [pc, #84]	; (8009770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800971a:	f000 fd04 	bl	800a126 <USBD_GetEpDesc>
 800971e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009720:	2181      	movs	r1, #129	; 0x81
 8009722:	4813      	ldr	r0, [pc, #76]	; (8009770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009724:	f000 fcff 	bl	800a126 <USBD_GetEpDesc>
 8009728:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2210      	movs	r2, #16
 8009734:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d006      	beq.n	800974a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2200      	movs	r2, #0
 8009740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009744:	711a      	strb	r2, [r3, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d006      	beq.n	800975e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	711a      	strb	r2, [r3, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2243      	movs	r2, #67	; 0x43
 8009762:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000210 	.word	0x20000210

08009774 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800977c:	2182      	movs	r1, #130	; 0x82
 800977e:	4818      	ldr	r0, [pc, #96]	; (80097e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009780:	f000 fcd1 	bl	800a126 <USBD_GetEpDesc>
 8009784:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009786:	2101      	movs	r1, #1
 8009788:	4815      	ldr	r0, [pc, #84]	; (80097e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800978a:	f000 fccc 	bl	800a126 <USBD_GetEpDesc>
 800978e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009790:	2181      	movs	r1, #129	; 0x81
 8009792:	4813      	ldr	r0, [pc, #76]	; (80097e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009794:	f000 fcc7 	bl	800a126 <USBD_GetEpDesc>
 8009798:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2210      	movs	r2, #16
 80097a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d006      	beq.n	80097ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2200      	movs	r2, #0
 80097b0:	711a      	strb	r2, [r3, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f042 0202 	orr.w	r2, r2, #2
 80097b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d006      	beq.n	80097ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	711a      	strb	r2, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f042 0202 	orr.w	r2, r2, #2
 80097cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2243      	movs	r2, #67	; 0x43
 80097d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000210 	.word	0x20000210

080097e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097ec:	2182      	movs	r1, #130	; 0x82
 80097ee:	4818      	ldr	r0, [pc, #96]	; (8009850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097f0:	f000 fc99 	bl	800a126 <USBD_GetEpDesc>
 80097f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097f6:	2101      	movs	r1, #1
 80097f8:	4815      	ldr	r0, [pc, #84]	; (8009850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097fa:	f000 fc94 	bl	800a126 <USBD_GetEpDesc>
 80097fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009800:	2181      	movs	r1, #129	; 0x81
 8009802:	4813      	ldr	r0, [pc, #76]	; (8009850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009804:	f000 fc8f 	bl	800a126 <USBD_GetEpDesc>
 8009808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2210      	movs	r2, #16
 8009814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d006      	beq.n	800982a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2200      	movs	r2, #0
 8009820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009824:	711a      	strb	r2, [r3, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009838:	711a      	strb	r2, [r3, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2243      	movs	r2, #67	; 0x43
 8009842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000210 	.word	0x20000210

08009854 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220a      	movs	r2, #10
 8009860:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009862:	4b03      	ldr	r3, [pc, #12]	; (8009870 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	200001cc 	.word	0x200001cc

08009874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	e009      	b.n	800989c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	33b0      	adds	r3, #176	; 0xb0
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	32b0      	adds	r2, #176	; 0xb0
 80098be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e008      	b.n	80098e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	32b0      	adds	r2, #176	; 0xb0
 8009900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009904:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800990c:	2303      	movs	r3, #3
 800990e:	e004      	b.n	800991a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32b0      	adds	r2, #176	; 0xb0
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	32b0      	adds	r2, #176	; 0xb0
 800994a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009952:	2303      	movs	r3, #3
 8009954:	e018      	b.n	8009988 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7c1b      	ldrb	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <USBD_CDC_ReceivePacket+0x68>)
 8009960:	7819      	ldrb	r1, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f005 fc29 	bl	800f1c4 <USBD_LL_PrepareReceive>
 8009972:	e008      	b.n	8009986 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <USBD_CDC_ReceivePacket+0x68>)
 8009976:	7819      	ldrb	r1, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f005 fc1f 	bl	800f1c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20000254 	.word	0x20000254

08009994 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e01f      	b.n	80099ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	79fa      	ldrb	r2, [r7, #7]
 80099de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f005 fa99 	bl	800ef18 <USBD_LL_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e025      	b.n	8009a58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	32ae      	adds	r2, #174	; 0xae
 8009a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00f      	beq.n	8009a48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	; 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	f107 020e 	add.w	r2, r7, #14
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4798      	blx	r3
 8009a40:	4602      	mov	r2, r0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f005 faa1 	bl	800efb0 <USBD_LL_Start>
 8009a6e:	4603      	mov	r3, r0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d009      	beq.n	8009abc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	4798      	blx	r3
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	78fa      	ldrb	r2, [r7, #3]
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 f908 	bl	800ad22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b20:	461a      	mov	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d01a      	beq.n	8009b6c <USBD_LL_SetupStage+0x72>
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d822      	bhi.n	8009b80 <USBD_LL_SetupStage+0x86>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <USBD_LL_SetupStage+0x4a>
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d00a      	beq.n	8009b58 <USBD_LL_SetupStage+0x5e>
 8009b42:	e01d      	b.n	8009b80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fb5f 	bl	800a210 <USBD_StdDevReq>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]
      break;
 8009b56:	e020      	b.n	8009b9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fbc7 	bl	800a2f4 <USBD_StdItfReq>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6a:	e016      	b.n	8009b9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fc29 	bl	800a3cc <USBD_StdEPReq>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7e:	e00c      	b.n	8009b9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f005 fa6e 	bl	800f070 <USBD_LL_StallEP>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
      break;
 8009b98:	bf00      	nop
  }

  return ret;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	460b      	mov	r3, r1
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d16e      	bne.n	8009c9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009bc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	f040 8098 	bne.w	8009d00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d913      	bls.n	8009c04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	bf28      	it	cs
 8009bf6:	4613      	movcs	r3, r2
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f001 f984 	bl	800af0a <USBD_CtlContinueRx>
 8009c02:	e07d      	b.n	8009d00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c0a:	f003 031f 	and.w	r3, r3, #31
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d014      	beq.n	8009c3c <USBD_LL_DataOutStage+0x98>
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d81d      	bhi.n	8009c52 <USBD_LL_DataOutStage+0xae>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <USBD_LL_DataOutStage+0x7c>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d003      	beq.n	8009c26 <USBD_LL_DataOutStage+0x82>
 8009c1e:	e018      	b.n	8009c52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	75bb      	strb	r3, [r7, #22]
            break;
 8009c24:	e018      	b.n	8009c58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 fa5e 	bl	800a0f2 <USBD_CoreFindIF>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75bb      	strb	r3, [r7, #22]
            break;
 8009c3a:	e00d      	b.n	8009c58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fa60 	bl	800a10c <USBD_CoreFindEP>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75bb      	strb	r3, [r7, #22]
            break;
 8009c50:	e002      	b.n	8009c58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	75bb      	strb	r3, [r7, #22]
            break;
 8009c56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c58:	7dbb      	ldrb	r3, [r7, #22]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d119      	bne.n	8009c92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d113      	bne.n	8009c92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009c6a:	7dba      	ldrb	r2, [r7, #22]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	32ae      	adds	r2, #174	; 0xae
 8009c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c7a:	7dba      	ldrb	r2, [r7, #22]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c82:	7dba      	ldrb	r2, [r7, #22]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	32ae      	adds	r2, #174	; 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f001 f94a 	bl	800af2c <USBD_CtlSendStatus>
 8009c98:	e032      	b.n	8009d00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fa31 	bl	800a10c <USBD_CoreFindEP>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cae:	7dbb      	ldrb	r3, [r7, #22]
 8009cb0:	2bff      	cmp	r3, #255	; 0xff
 8009cb2:	d025      	beq.n	8009d00 <USBD_LL_DataOutStage+0x15c>
 8009cb4:	7dbb      	ldrb	r3, [r7, #22]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d122      	bne.n	8009d00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d117      	bne.n	8009cf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009cc6:	7dba      	ldrb	r2, [r7, #22]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	32ae      	adds	r2, #174	; 0xae
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00f      	beq.n	8009cf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009cd6:	7dba      	ldrb	r2, [r7, #22]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009cde:	7dba      	ldrb	r2, [r7, #22]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	32ae      	adds	r2, #174	; 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	7afa      	ldrb	r2, [r7, #11]
 8009cec:	4611      	mov	r1, r2
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	e000      	b.n	8009d02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b086      	sub	sp, #24
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	460b      	mov	r3, r1
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d16f      	bne.n	8009dfe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3314      	adds	r3, #20
 8009d22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d15a      	bne.n	8009de4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d914      	bls.n	8009d64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	1ad2      	subs	r2, r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f001 f8ac 	bl	800aeae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d56:	2300      	movs	r3, #0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f005 fa31 	bl	800f1c4 <USBD_LL_PrepareReceive>
 8009d62:	e03f      	b.n	8009de4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d11c      	bne.n	8009daa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d316      	bcc.n	8009daa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d20f      	bcs.n	8009daa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f001 f88d 	bl	800aeae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f005 fa0e 	bl	800f1c4 <USBD_LL_PrepareReceive>
 8009da8:	e01c      	b.n	8009de4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d10f      	bne.n	8009dd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f005 f949 	bl	800f070 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f001 f8b7 	bl	800af52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d03a      	beq.n	8009e64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fe42 	bl	8009a78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009dfc:	e032      	b.n	8009e64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	4619      	mov	r1, r3
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f97f 	bl	800a10c <USBD_CoreFindEP>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	2bff      	cmp	r3, #255	; 0xff
 8009e16:	d025      	beq.n	8009e64 <USBD_LL_DataInStage+0x15a>
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d122      	bne.n	8009e64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d11c      	bne.n	8009e64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e2a:	7dfa      	ldrb	r2, [r7, #23]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	32ae      	adds	r2, #174	; 0xae
 8009e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d014      	beq.n	8009e64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009e3a:	7dfa      	ldrb	r2, [r7, #23]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009e42:	7dfa      	ldrb	r2, [r7, #23]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	32ae      	adds	r2, #174	; 0xae
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	7afa      	ldrb	r2, [r7, #11]
 8009e50:	4611      	mov	r1, r2
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	4798      	blx	r3
 8009e56:	4603      	mov	r3, r0
 8009e58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e5a:	7dbb      	ldrb	r3, [r7, #22]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009e60:	7dbb      	ldrb	r3, [r7, #22]
 8009e62:	e000      	b.n	8009e66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d014      	beq.n	8009ed4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00e      	beq.n	8009ed4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6852      	ldr	r2, [r2, #4]
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	4798      	blx	r3
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f005 f883 	bl	800efe6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2240      	movs	r2, #64	; 0x40
 8009eec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2180      	movs	r1, #128	; 0x80
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f005 f875 	bl	800efe6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2240      	movs	r2, #64	; 0x40
 8009f06:	621a      	str	r2, [r3, #32]

  return ret;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d106      	bne.n	8009f80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d110      	bne.n	8009fc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	69db      	ldr	r3, [r3, #28]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e01c      	b.n	800a02a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d115      	bne.n	800a028 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	32ae      	adds	r2, #174	; 0xae
 800a006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	32ae      	adds	r2, #174	; 0xae
 800a01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	32ae      	adds	r2, #174	; 0xae
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	e01c      	b.n	800a08e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d115      	bne.n	800a08c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	32ae      	adds	r2, #174	; 0xae
 800a06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	32ae      	adds	r2, #174	; 0xae
 800a07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4611      	mov	r1, r2
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	6852      	ldr	r2, [r2, #4]
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	4611      	mov	r1, r2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a118:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d920      	bls.n	800a190 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a156:	e013      	b.n	800a180 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a158:	f107 030a 	add.w	r3, r7, #10
 800a15c:	4619      	mov	r1, r3
 800a15e:	6978      	ldr	r0, [r7, #20]
 800a160:	f000 f81b 	bl	800a19a <USBD_GetNextDesc>
 800a164:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d108      	bne.n	800a180 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	789b      	ldrb	r3, [r3, #2]
 800a176:	78fa      	ldrb	r2, [r7, #3]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d008      	beq.n	800a18e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	885b      	ldrh	r3, [r3, #2]
 800a184:	b29a      	uxth	r2, r3
 800a186:	897b      	ldrh	r3, [r7, #10]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d8e5      	bhi.n	800a158 <USBD_GetEpDesc+0x32>
 800a18c:	e000      	b.n	800a190 <USBD_GetEpDesc+0x6a>
          break;
 800a18e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a190:	693b      	ldr	r3, [r7, #16]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1f2:	8a3b      	ldrh	r3, [r7, #16]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	b21a      	sxth	r2, r3
 800a1f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	b21b      	sxth	r3, r3
 800a200:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a202:	89fb      	ldrh	r3, [r7, #14]
}
 800a204:	4618      	mov	r0, r3
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d005      	beq.n	800a236 <USBD_StdDevReq+0x26>
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	d857      	bhi.n	800a2de <USBD_StdDevReq+0xce>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00f      	beq.n	800a252 <USBD_StdDevReq+0x42>
 800a232:	2b20      	cmp	r3, #32
 800a234:	d153      	bne.n	800a2de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	32ae      	adds	r2, #174	; 0xae
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
      break;
 800a250:	e04a      	b.n	800a2e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	2b09      	cmp	r3, #9
 800a258:	d83b      	bhi.n	800a2d2 <USBD_StdDevReq+0xc2>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USBD_StdDevReq+0x50>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a2c9 	.word	0x0800a2c9
 800a268:	0800a2d3 	.word	0x0800a2d3
 800a26c:	0800a2bf 	.word	0x0800a2bf
 800a270:	0800a2d3 	.word	0x0800a2d3
 800a274:	0800a293 	.word	0x0800a293
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a2d3 	.word	0x0800a2d3
 800a280:	0800a2ab 	.word	0x0800a2ab
 800a284:	0800a29d 	.word	0x0800a29d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa3c 	bl	800a708 <USBD_GetDescriptor>
          break;
 800a290:	e024      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fba1 	bl	800a9dc <USBD_SetAddress>
          break;
 800a29a:	e01f      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fbe0 	bl	800aa64 <USBD_SetConfig>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
          break;
 800a2a8:	e018      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fc83 	bl	800abb8 <USBD_GetConfig>
          break;
 800a2b2:	e013      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fcb4 	bl	800ac24 <USBD_GetStatus>
          break;
 800a2bc:	e00e      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fce3 	bl	800ac8c <USBD_SetFeature>
          break;
 800a2c6:	e009      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fd07 	bl	800acde <USBD_ClrFeature>
          break;
 800a2d0:	e004      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fd5e 	bl	800ad96 <USBD_CtlError>
          break;
 800a2da:	bf00      	nop
      }
      break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fd58 	bl	800ad96 <USBD_CtlError>
      break;
 800a2e6:	bf00      	nop
  }

  return ret;
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d005      	beq.n	800a31a <USBD_StdItfReq+0x26>
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d852      	bhi.n	800a3b8 <USBD_StdItfReq+0xc4>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <USBD_StdItfReq+0x26>
 800a316:	2b20      	cmp	r3, #32
 800a318:	d14e      	bne.n	800a3b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a320:	b2db      	uxtb	r3, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	2b02      	cmp	r3, #2
 800a326:	d840      	bhi.n	800a3aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	889b      	ldrh	r3, [r3, #4]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d836      	bhi.n	800a3a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	889b      	ldrh	r3, [r3, #4]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fed9 	bl	800a0f2 <USBD_CoreFindIF>
 800a340:	4603      	mov	r3, r0
 800a342:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	d01d      	beq.n	800a386 <USBD_StdItfReq+0x92>
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11a      	bne.n	800a386 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a350:	7bba      	ldrb	r2, [r7, #14]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	32ae      	adds	r2, #174	; 0xae
 800a356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00f      	beq.n	800a380 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a360:	7bba      	ldrb	r2, [r7, #14]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a368:	7bba      	ldrb	r2, [r7, #14]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32ae      	adds	r2, #174	; 0xae
 800a36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a37e:	e004      	b.n	800a38a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a384:	e001      	b.n	800a38a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a386:	2303      	movs	r3, #3
 800a388:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	88db      	ldrh	r3, [r3, #6]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <USBD_StdItfReq+0xc0>
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10d      	bne.n	800a3b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fdc7 	bl	800af2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a39e:	e009      	b.n	800a3b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fcf7 	bl	800ad96 <USBD_CtlError>
          break;
 800a3a8:	e004      	b.n	800a3b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fcf2 	bl	800ad96 <USBD_CtlError>
          break;
 800a3b2:	e000      	b.n	800a3b6 <USBD_StdItfReq+0xc2>
          break;
 800a3b4:	bf00      	nop
      }
      break;
 800a3b6:	e004      	b.n	800a3c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fceb 	bl	800ad96 <USBD_CtlError>
      break;
 800a3c0:	bf00      	nop
  }

  return ret;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	889b      	ldrh	r3, [r3, #4]
 800a3de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3e8:	2b40      	cmp	r3, #64	; 0x40
 800a3ea:	d007      	beq.n	800a3fc <USBD_StdEPReq+0x30>
 800a3ec:	2b40      	cmp	r3, #64	; 0x40
 800a3ee:	f200 817f 	bhi.w	800a6f0 <USBD_StdEPReq+0x324>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02a      	beq.n	800a44c <USBD_StdEPReq+0x80>
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	f040 817a 	bne.w	800a6f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7ff fe83 	bl	800a10c <USBD_CoreFindEP>
 800a406:	4603      	mov	r3, r0
 800a408:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a40a:	7b7b      	ldrb	r3, [r7, #13]
 800a40c:	2bff      	cmp	r3, #255	; 0xff
 800a40e:	f000 8174 	beq.w	800a6fa <USBD_StdEPReq+0x32e>
 800a412:	7b7b      	ldrb	r3, [r7, #13]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 8170 	bne.w	800a6fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a41a:	7b7a      	ldrb	r2, [r7, #13]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a422:	7b7a      	ldrb	r2, [r7, #13]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	32ae      	adds	r2, #174	; 0xae
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 8163 	beq.w	800a6fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a434:	7b7a      	ldrb	r2, [r7, #13]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	; 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a44a:	e156      	b.n	800a6fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d008      	beq.n	800a466 <USBD_StdEPReq+0x9a>
 800a454:	2b03      	cmp	r3, #3
 800a456:	f300 8145 	bgt.w	800a6e4 <USBD_StdEPReq+0x318>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 809b 	beq.w	800a596 <USBD_StdEPReq+0x1ca>
 800a460:	2b01      	cmp	r3, #1
 800a462:	d03c      	beq.n	800a4de <USBD_StdEPReq+0x112>
 800a464:	e13e      	b.n	800a6e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d002      	beq.n	800a478 <USBD_StdEPReq+0xac>
 800a472:	2b03      	cmp	r3, #3
 800a474:	d016      	beq.n	800a4a4 <USBD_StdEPReq+0xd8>
 800a476:	e02c      	b.n	800a4d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00d      	beq.n	800a49a <USBD_StdEPReq+0xce>
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	2b80      	cmp	r3, #128	; 0x80
 800a482:	d00a      	beq.n	800a49a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f004 fdf1 	bl	800f070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a48e:	2180      	movs	r1, #128	; 0x80
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f004 fded 	bl	800f070 <USBD_LL_StallEP>
 800a496:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a498:	e020      	b.n	800a4dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fc7a 	bl	800ad96 <USBD_CtlError>
              break;
 800a4a2:	e01b      	b.n	800a4dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	885b      	ldrh	r3, [r3, #2]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10e      	bne.n	800a4ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <USBD_StdEPReq+0xfe>
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b80      	cmp	r3, #128	; 0x80
 800a4b6:	d008      	beq.n	800a4ca <USBD_StdEPReq+0xfe>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	88db      	ldrh	r3, [r3, #6]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d104      	bne.n	800a4ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f004 fdd3 	bl	800f070 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd2e 	bl	800af2c <USBD_CtlSendStatus>

              break;
 800a4d0:	e004      	b.n	800a4dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fc5e 	bl	800ad96 <USBD_CtlError>
              break;
 800a4da:	bf00      	nop
          }
          break;
 800a4dc:	e107      	b.n	800a6ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d002      	beq.n	800a4f0 <USBD_StdEPReq+0x124>
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d016      	beq.n	800a51c <USBD_StdEPReq+0x150>
 800a4ee:	e04b      	b.n	800a588 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00d      	beq.n	800a512 <USBD_StdEPReq+0x146>
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b80      	cmp	r3, #128	; 0x80
 800a4fa:	d00a      	beq.n	800a512 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f004 fdb5 	bl	800f070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a506:	2180      	movs	r1, #128	; 0x80
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f004 fdb1 	bl	800f070 <USBD_LL_StallEP>
 800a50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a510:	e040      	b.n	800a594 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fc3e 	bl	800ad96 <USBD_CtlError>
              break;
 800a51a:	e03b      	b.n	800a594 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	885b      	ldrh	r3, [r3, #2]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d136      	bne.n	800a592 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d004      	beq.n	800a538 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f004 fdbb 	bl	800f0ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fcf7 	bl	800af2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fde2 	bl	800a10c <USBD_CoreFindEP>
 800a548:	4603      	mov	r3, r0
 800a54a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a54c:	7b7b      	ldrb	r3, [r7, #13]
 800a54e:	2bff      	cmp	r3, #255	; 0xff
 800a550:	d01f      	beq.n	800a592 <USBD_StdEPReq+0x1c6>
 800a552:	7b7b      	ldrb	r3, [r7, #13]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d11c      	bne.n	800a592 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a558:	7b7a      	ldrb	r2, [r7, #13]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a560:	7b7a      	ldrb	r2, [r7, #13]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32ae      	adds	r2, #174	; 0xae
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a570:	7b7a      	ldrb	r2, [r7, #13]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	32ae      	adds	r2, #174	; 0xae
 800a576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
 800a582:	4603      	mov	r3, r0
 800a584:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a586:	e004      	b.n	800a592 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc03 	bl	800ad96 <USBD_CtlError>
              break;
 800a590:	e000      	b.n	800a594 <USBD_StdEPReq+0x1c8>
              break;
 800a592:	bf00      	nop
          }
          break;
 800a594:	e0ab      	b.n	800a6ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d002      	beq.n	800a5a8 <USBD_StdEPReq+0x1dc>
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d032      	beq.n	800a60c <USBD_StdEPReq+0x240>
 800a5a6:	e097      	b.n	800a6d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <USBD_StdEPReq+0x1f2>
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b80      	cmp	r3, #128	; 0x80
 800a5b2:	d004      	beq.n	800a5be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fbed 	bl	800ad96 <USBD_CtlError>
                break;
 800a5bc:	e091      	b.n	800a6e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da0b      	bge.n	800a5de <USBD_StdEPReq+0x212>
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	3310      	adds	r3, #16
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3304      	adds	r3, #4
 800a5dc:	e00b      	b.n	800a5f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2202      	movs	r2, #2
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fc37 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a60a:	e06a      	b.n	800a6e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a60c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a610:	2b00      	cmp	r3, #0
 800a612:	da11      	bge.n	800a638 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	f003 020f 	and.w	r2, r3, #15
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d117      	bne.n	800a65e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fbb0 	bl	800ad96 <USBD_CtlError>
                  break;
 800a636:	e054      	b.n	800a6e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	f003 020f 	and.w	r2, r3, #15
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb9d 	bl	800ad96 <USBD_CtlError>
                  break;
 800a65c:	e041      	b.n	800a6e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a65e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	da0b      	bge.n	800a67e <USBD_StdEPReq+0x2b2>
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	3310      	adds	r3, #16
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	3304      	adds	r3, #4
 800a67c:	e00b      	b.n	800a696 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	4413      	add	r3, r2
 800a694:	3304      	adds	r3, #4
 800a696:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <USBD_StdEPReq+0x2d8>
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	2b80      	cmp	r3, #128	; 0x80
 800a6a2:	d103      	bne.n	800a6ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e00e      	b.n	800a6ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f004 fd1b 	bl	800f0ec <USBD_LL_IsStallEP>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fbd1 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a6d6:	e004      	b.n	800a6e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fb5b 	bl	800ad96 <USBD_CtlError>
              break;
 800a6e0:	bf00      	nop
          }
          break;
 800a6e2:	e004      	b.n	800a6ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fb55 	bl	800ad96 <USBD_CtlError>
          break;
 800a6ec:	bf00      	nop
      }
      break;
 800a6ee:	e005      	b.n	800a6fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb4f 	bl	800ad96 <USBD_CtlError>
      break;
 800a6f8:	e000      	b.n	800a6fc <USBD_StdEPReq+0x330>
      break;
 800a6fa:	bf00      	nop
  }

  return ret;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	2b06      	cmp	r3, #6
 800a72a:	f200 8128 	bhi.w	800a97e <USBD_GetDescriptor+0x276>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <USBD_GetDescriptor+0x2c>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a751 	.word	0x0800a751
 800a738:	0800a769 	.word	0x0800a769
 800a73c:	0800a7a9 	.word	0x0800a7a9
 800a740:	0800a97f 	.word	0x0800a97f
 800a744:	0800a97f 	.word	0x0800a97f
 800a748:	0800a91f 	.word	0x0800a91f
 800a74c:	0800a94b 	.word	0x0800a94b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	7c12      	ldrb	r2, [r2, #16]
 800a75c:	f107 0108 	add.w	r1, r7, #8
 800a760:	4610      	mov	r0, r2
 800a762:	4798      	blx	r3
 800a764:	60f8      	str	r0, [r7, #12]
      break;
 800a766:	e112      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	7c1b      	ldrb	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10d      	bne.n	800a78c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	f107 0208 	add.w	r2, r7, #8
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	2202      	movs	r2, #2
 800a788:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a78a:	e100      	b.n	800a98e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	f107 0208 	add.w	r2, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	701a      	strb	r2, [r3, #0]
      break;
 800a7a6:	e0f2      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	885b      	ldrh	r3, [r3, #2]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	f200 80ac 	bhi.w	800a90c <USBD_GetDescriptor+0x204>
 800a7b4:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <USBD_GetDescriptor+0xb4>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a7d5 	.word	0x0800a7d5
 800a7c0:	0800a809 	.word	0x0800a809
 800a7c4:	0800a83d 	.word	0x0800a83d
 800a7c8:	0800a871 	.word	0x0800a871
 800a7cc:	0800a8a5 	.word	0x0800a8a5
 800a7d0:	0800a8d9 	.word	0x0800a8d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e091      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 facb 	bl	800ad96 <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e089      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e077      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fab1 	bl	800ad96 <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e06f      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e05d      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa97 	bl	800ad96 <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e055      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a892:	e043      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa7d 	bl	800ad96 <USBD_CtlError>
            err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a2:	e03b      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	7c12      	ldrb	r2, [r2, #16]
 800a8bc:	f107 0108 	add.w	r1, r7, #8
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4798      	blx	r3
 800a8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c6:	e029      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa63 	bl	800ad96 <USBD_CtlError>
            err++;
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8d6:	e021      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	7c12      	ldrb	r2, [r2, #16]
 800a8f0:	f107 0108 	add.w	r1, r7, #8
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4798      	blx	r3
 800a8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8fa:	e00f      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fa49 	bl	800ad96 <USBD_CtlError>
            err++;
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	3301      	adds	r3, #1
 800a908:	72fb      	strb	r3, [r7, #11]
          break;
 800a90a:	e007      	b.n	800a91c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa41 	bl	800ad96 <USBD_CtlError>
          err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a91a:	bf00      	nop
      }
      break;
 800a91c:	e037      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	7c1b      	ldrb	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92e:	f107 0208 	add.w	r2, r7, #8
 800a932:	4610      	mov	r0, r2
 800a934:	4798      	blx	r3
 800a936:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a938:	e029      	b.n	800a98e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa2a 	bl	800ad96 <USBD_CtlError>
        err++;
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	3301      	adds	r3, #1
 800a946:	72fb      	strb	r3, [r7, #11]
      break;
 800a948:	e021      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7c1b      	ldrb	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10d      	bne.n	800a96e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	f107 0208 	add.w	r2, r7, #8
 800a95e:	4610      	mov	r0, r2
 800a960:	4798      	blx	r3
 800a962:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3301      	adds	r3, #1
 800a968:	2207      	movs	r2, #7
 800a96a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a96c:	e00f      	b.n	800a98e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fa10 	bl	800ad96 <USBD_CtlError>
        err++;
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	3301      	adds	r3, #1
 800a97a:	72fb      	strb	r3, [r7, #11]
      break;
 800a97c:	e007      	b.n	800a98e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa08 	bl	800ad96 <USBD_CtlError>
      err++;
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	3301      	adds	r3, #1
 800a98a:	72fb      	strb	r3, [r7, #11]
      break;
 800a98c:	bf00      	nop
  }

  if (err != 0U)
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d11e      	bne.n	800a9d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	88db      	ldrh	r3, [r3, #6]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d016      	beq.n	800a9ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a99c:	893b      	ldrh	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00e      	beq.n	800a9c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	88da      	ldrh	r2, [r3, #6]
 800a9a6:	893b      	ldrh	r3, [r7, #8]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	bf28      	it	cs
 800a9ac:	4613      	movcs	r3, r2
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9b2:	893b      	ldrh	r3, [r7, #8]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	68f9      	ldr	r1, [r7, #12]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa5d 	bl	800ae78 <USBD_CtlSendData>
 800a9be:	e009      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f9e7 	bl	800ad96 <USBD_CtlError>
 800a9c8:	e004      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 faae 	bl	800af2c <USBD_CtlSendStatus>
 800a9d0:	e000      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    return;
 800a9d2:	bf00      	nop
  }
}
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop

0800a9dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d131      	bne.n	800aa52 <USBD_SetAddress+0x76>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	88db      	ldrh	r3, [r3, #6]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d12d      	bne.n	800aa52 <USBD_SetAddress+0x76>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a9fc:	d829      	bhi.n	800aa52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d104      	bne.n	800aa20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9bc 	bl	800ad96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1e:	e01d      	b.n	800aa5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7bfa      	ldrb	r2, [r7, #15]
 800aa24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f004 fb89 	bl	800f144 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa7a 	bl	800af2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d004      	beq.n	800aa48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa46:	e009      	b.n	800aa5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa50:	e004      	b.n	800aa5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f99e 	bl	800ad96 <USBD_CtlError>
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	885b      	ldrh	r3, [r3, #2]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	4b4e      	ldr	r3, [pc, #312]	; (800abb4 <USBD_SetConfig+0x150>)
 800aa7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa7c:	4b4d      	ldr	r3, [pc, #308]	; (800abb4 <USBD_SetConfig+0x150>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d905      	bls.n	800aa90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f985 	bl	800ad96 <USBD_CtlError>
    return USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e08c      	b.n	800abaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d002      	beq.n	800aaa2 <USBD_SetConfig+0x3e>
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d029      	beq.n	800aaf4 <USBD_SetConfig+0x90>
 800aaa0:	e075      	b.n	800ab8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aaa2:	4b44      	ldr	r3, [pc, #272]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d020      	beq.n	800aaec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aaaa:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aab4:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <USBD_SetConfig+0x150>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fe ffe7 	bl	8009a8e <USBD_SetClassConfig>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f962 	bl	800ad96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2202      	movs	r2, #2
 800aad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aada:	e065      	b.n	800aba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fa25 	bl	800af2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2203      	movs	r2, #3
 800aae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aaea:	e05d      	b.n	800aba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa1d 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800aaf2:	e059      	b.n	800aba8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aaf4:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d112      	bne.n	800ab22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab04:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7fe ffd6 	bl	8009ac6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fa06 	bl	800af2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab20:	e042      	b.n	800aba8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab22:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d02a      	beq.n	800ab86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7fe ffc4 	bl	8009ac6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab3e:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7fe ff9d 	bl	8009a8e <USBD_SetClassConfig>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00f      	beq.n	800ab7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f918 	bl	800ad96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7fe ffa9 	bl	8009ac6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab7c:	e014      	b.n	800aba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f9d4 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800ab84:	e010      	b.n	800aba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9d0 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800ab8c:	e00c      	b.n	800aba8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f900 	bl	800ad96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab96:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fe ff92 	bl	8009ac6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	73fb      	strb	r3, [r7, #15]
      break;
 800aba6:	bf00      	nop
  }

  return ret;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20000a6c 	.word	0x20000a6c

0800abb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	88db      	ldrh	r3, [r3, #6]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d004      	beq.n	800abd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f8e2 	bl	800ad96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abd2:	e023      	b.n	800ac1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	dc02      	bgt.n	800abe6 <USBD_GetConfig+0x2e>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dc03      	bgt.n	800abec <USBD_GetConfig+0x34>
 800abe4:	e015      	b.n	800ac12 <USBD_GetConfig+0x5a>
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d00b      	beq.n	800ac02 <USBD_GetConfig+0x4a>
 800abea:	e012      	b.n	800ac12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3308      	adds	r3, #8
 800abf6:	2201      	movs	r2, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f93c 	bl	800ae78 <USBD_CtlSendData>
        break;
 800ac00:	e00c      	b.n	800ac1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3304      	adds	r3, #4
 800ac06:	2201      	movs	r2, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f934 	bl	800ae78 <USBD_CtlSendData>
        break;
 800ac10:	e004      	b.n	800ac1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f8be 	bl	800ad96 <USBD_CtlError>
        break;
 800ac1a:	bf00      	nop
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d81e      	bhi.n	800ac7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	88db      	ldrh	r3, [r3, #6]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d004      	beq.n	800ac4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f8a5 	bl	800ad96 <USBD_CtlError>
        break;
 800ac4c:	e01a      	b.n	800ac84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f043 0202 	orr.w	r2, r3, #2
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	2202      	movs	r2, #2
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f900 	bl	800ae78 <USBD_CtlSendData>
      break;
 800ac78:	e004      	b.n	800ac84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f88a 	bl	800ad96 <USBD_CtlError>
      break;
 800ac82:	bf00      	nop
  }
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	885b      	ldrh	r3, [r3, #2]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d107      	bne.n	800acae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f940 	bl	800af2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acac:	e013      	b.n	800acd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d10b      	bne.n	800acce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	889b      	ldrh	r3, [r3, #4]
 800acba:	0a1b      	lsrs	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f930 	bl	800af2c <USBD_CtlSendStatus>
}
 800accc:	e003      	b.n	800acd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f860 	bl	800ad96 <USBD_CtlError>
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	3b01      	subs	r3, #1
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d80b      	bhi.n	800ad0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	885b      	ldrh	r3, [r3, #2]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d10c      	bne.n	800ad18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f910 	bl	800af2c <USBD_CtlSendStatus>
      }
      break;
 800ad0c:	e004      	b.n	800ad18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f840 	bl	800ad96 <USBD_CtlError>
      break;
 800ad16:	e000      	b.n	800ad1a <USBD_ClrFeature+0x3c>
      break;
 800ad18:	bf00      	nop
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff fa41 	bl	800a1d4 <SWAPBYTE>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fa34 	bl	800a1d4 <SWAPBYTE>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff fa27 	bl	800a1d4 <SWAPBYTE>
 800ad86:	4603      	mov	r3, r0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	80da      	strh	r2, [r3, #6]
}
 800ad8e:	bf00      	nop
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada0:	2180      	movs	r1, #128	; 0x80
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f004 f964 	bl	800f070 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f004 f960 	bl	800f070 <USBD_LL_StallEP>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d036      	beq.n	800ae3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800add2:	6938      	ldr	r0, [r7, #16]
 800add4:	f000 f836 	bl	800ae44 <USBD_GetLen>
 800add8:	4603      	mov	r3, r0
 800adda:	3301      	adds	r3, #1
 800addc:	b29b      	uxth	r3, r3
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	4413      	add	r3, r2
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	3301      	adds	r3, #1
 800adf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	4413      	add	r3, r2
 800adfe:	2203      	movs	r2, #3
 800ae00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	3301      	adds	r3, #1
 800ae06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae08:	e013      	b.n	800ae32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	4413      	add	r3, r2
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	613b      	str	r3, [r7, #16]
    idx++;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	4413      	add	r3, r2
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e7      	bne.n	800ae0a <USBD_GetString+0x52>
 800ae3a:	e000      	b.n	800ae3e <USBD_GetString+0x86>
    return;
 800ae3c:	bf00      	nop
  }
}
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae54:	e005      	b.n	800ae62 <USBD_GetLen+0x1e>
  {
    len++;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1f5      	bne.n	800ae56 <USBD_GetLen+0x12>
  }

  return len;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f004 f96f 	bl	800f182 <USBD_LL_Transmit>

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	2100      	movs	r1, #0
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f004 f95e 	bl	800f182 <USBD_LL_Transmit>

  return USBD_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2203      	movs	r2, #3
 800aee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	2100      	movs	r1, #0
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f004 f962 	bl	800f1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	2100      	movs	r1, #0
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f004 f951 	bl	800f1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2204      	movs	r2, #4
 800af38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af3c:	2300      	movs	r3, #0
 800af3e:	2200      	movs	r2, #0
 800af40:	2100      	movs	r1, #0
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f004 f91d 	bl	800f182 <USBD_LL_Transmit>

  return USBD_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2205      	movs	r2, #5
 800af5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af62:	2300      	movs	r3, #0
 800af64:	2200      	movs	r2, #0
 800af66:	2100      	movs	r1, #0
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f004 f92b 	bl	800f1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <__NVIC_SetPriority>:
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	db0a      	blt.n	800afa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	490c      	ldr	r1, [pc, #48]	; (800afc4 <__NVIC_SetPriority+0x4c>)
 800af92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af96:	0112      	lsls	r2, r2, #4
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	440b      	add	r3, r1
 800af9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afa0:	e00a      	b.n	800afb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	4908      	ldr	r1, [pc, #32]	; (800afc8 <__NVIC_SetPriority+0x50>)
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	3b04      	subs	r3, #4
 800afb0:	0112      	lsls	r2, r2, #4
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	440b      	add	r3, r1
 800afb6:	761a      	strb	r2, [r3, #24]
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	e000e100 	.word	0xe000e100
 800afc8:	e000ed00 	.word	0xe000ed00

0800afcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afd0:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <SysTick_Handler+0x1c>)
 800afd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afd4:	f002 fb12 	bl	800d5fc <xTaskGetSchedulerState>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d001      	beq.n	800afe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afde:	f003 f9fb 	bl	800e3d8 <xPortSysTickHandler>
  }
}
 800afe2:	bf00      	nop
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	e000e010 	.word	0xe000e010

0800afec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aff0:	2100      	movs	r1, #0
 800aff2:	f06f 0004 	mvn.w	r0, #4
 800aff6:	f7ff ffbf 	bl	800af78 <__NVIC_SetPriority>
#endif
}
 800affa:	bf00      	nop
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b006:	f3ef 8305 	mrs	r3, IPSR
 800b00a:	603b      	str	r3, [r7, #0]
  return(result);
 800b00c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b012:	f06f 0305 	mvn.w	r3, #5
 800b016:	607b      	str	r3, [r7, #4]
 800b018:	e00c      	b.n	800b034 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <osKernelInitialize+0x44>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b022:	4b08      	ldr	r3, [pc, #32]	; (800b044 <osKernelInitialize+0x44>)
 800b024:	2201      	movs	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b028:	2300      	movs	r3, #0
 800b02a:	607b      	str	r3, [r7, #4]
 800b02c:	e002      	b.n	800b034 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b034:	687b      	ldr	r3, [r7, #4]
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20000a70 	.word	0x20000a70

0800b048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b04e:	f3ef 8305 	mrs	r3, IPSR
 800b052:	603b      	str	r3, [r7, #0]
  return(result);
 800b054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b05a:	f06f 0305 	mvn.w	r3, #5
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	e010      	b.n	800b084 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <osKernelStart+0x48>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d109      	bne.n	800b07e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b06a:	f7ff ffbf 	bl	800afec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b06e:	4b08      	ldr	r3, [pc, #32]	; (800b090 <osKernelStart+0x48>)
 800b070:	2202      	movs	r2, #2
 800b072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b074:	f001 fe6a 	bl	800cd4c <vTaskStartScheduler>
      stat = osOK;
 800b078:	2300      	movs	r3, #0
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	e002      	b.n	800b084 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b084:	687b      	ldr	r3, [r7, #4]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000a70 	.word	0x20000a70

0800b094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b094:	b580      	push	{r7, lr}
 800b096:	b08e      	sub	sp, #56	; 0x38
 800b098:	af04      	add	r7, sp, #16
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a4:	f3ef 8305 	mrs	r3, IPSR
 800b0a8:	617b      	str	r3, [r7, #20]
  return(result);
 800b0aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d17e      	bne.n	800b1ae <osThreadNew+0x11a>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d07b      	beq.n	800b1ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b0b6:	2380      	movs	r3, #128	; 0x80
 800b0b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0ba:	2318      	movs	r3, #24
 800b0bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d045      	beq.n	800b15a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <osThreadNew+0x48>
        name = attr->name;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d008      	beq.n	800b102 <osThreadNew+0x6e>
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b38      	cmp	r3, #56	; 0x38
 800b0f4:	d805      	bhi.n	800b102 <osThreadNew+0x6e>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <osThreadNew+0x72>
        return (NULL);
 800b102:	2300      	movs	r3, #0
 800b104:	e054      	b.n	800b1b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	089b      	lsrs	r3, r3, #2
 800b114:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00e      	beq.n	800b13c <osThreadNew+0xa8>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	2b5b      	cmp	r3, #91	; 0x5b
 800b124:	d90a      	bls.n	800b13c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d006      	beq.n	800b13c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <osThreadNew+0xa8>
        mem = 1;
 800b136:	2301      	movs	r3, #1
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	e010      	b.n	800b15e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10c      	bne.n	800b15e <osThreadNew+0xca>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d108      	bne.n	800b15e <osThreadNew+0xca>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d104      	bne.n	800b15e <osThreadNew+0xca>
          mem = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e001      	b.n	800b15e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d110      	bne.n	800b186 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b16c:	9202      	str	r2, [sp, #8]
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6a3a      	ldr	r2, [r7, #32]
 800b178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f001 fc10 	bl	800c9a0 <xTaskCreateStatic>
 800b180:	4603      	mov	r3, r0
 800b182:	613b      	str	r3, [r7, #16]
 800b184:	e013      	b.n	800b1ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d110      	bne.n	800b1ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	b29a      	uxth	r2, r3
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f001 fc5b 	bl	800ca5a <xTaskCreate>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d001      	beq.n	800b1ae <osThreadNew+0x11a>
            hTask = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1ae:	693b      	ldr	r3, [r7, #16]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3728      	adds	r7, #40	; 0x28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c0:	f3ef 8305 	mrs	r3, IPSR
 800b1c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <osDelay+0x1c>
    stat = osErrorISR;
 800b1cc:	f06f 0305 	mvn.w	r3, #5
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	e007      	b.n	800b1e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f001 fd80 	bl	800cce4 <vTaskDelay>
    }
  }

  return (stat);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b088      	sub	sp, #32
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fa:	f3ef 8305 	mrs	r3, IPSR
 800b1fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800b200:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b202:	2b00      	cmp	r3, #0
 800b204:	d174      	bne.n	800b2f0 <osMutexNew+0x102>
    if (attr != NULL) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	61bb      	str	r3, [r7, #24]
 800b212:	e001      	b.n	800b218 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <osMutexNew+0x3a>
      rmtx = 1U;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e001      	b.n	800b22c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d15c      	bne.n	800b2f0 <osMutexNew+0x102>
      mem = -1;
 800b236:	f04f 33ff 	mov.w	r3, #4294967295
 800b23a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d015      	beq.n	800b26e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <osMutexNew+0x6a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	2b4f      	cmp	r3, #79	; 0x4f
 800b250:	d902      	bls.n	800b258 <osMutexNew+0x6a>
          mem = 1;
 800b252:	2301      	movs	r3, #1
 800b254:	613b      	str	r3, [r7, #16]
 800b256:	e00c      	b.n	800b272 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <osMutexNew+0x84>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <osMutexNew+0x84>
            mem = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	e001      	b.n	800b272 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d112      	bne.n	800b29e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d007      	beq.n	800b28e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	4619      	mov	r1, r3
 800b284:	2004      	movs	r0, #4
 800b286:	f000 fc36 	bl	800baf6 <xQueueCreateMutexStatic>
 800b28a:	61f8      	str	r0, [r7, #28]
 800b28c:	e016      	b.n	800b2bc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	4619      	mov	r1, r3
 800b294:	2001      	movs	r0, #1
 800b296:	f000 fc2e 	bl	800baf6 <xQueueCreateMutexStatic>
 800b29a:	61f8      	str	r0, [r7, #28]
 800b29c:	e00e      	b.n	800b2bc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b2aa:	2004      	movs	r0, #4
 800b2ac:	f000 fc0b 	bl	800bac6 <xQueueCreateMutex>
 800b2b0:	61f8      	str	r0, [r7, #28]
 800b2b2:	e003      	b.n	800b2bc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	f000 fc06 	bl	800bac6 <xQueueCreateMutex>
 800b2ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00c      	beq.n	800b2dc <osMutexNew+0xee>
        if (attr != NULL) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <osMutexNew+0xe2>
          name = attr->name;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e001      	b.n	800b2d4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b2d4:	68f9      	ldr	r1, [r7, #12]
 800b2d6:	69f8      	ldr	r0, [r7, #28]
 800b2d8:	f001 fada 	bl	800c890 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d006      	beq.n	800b2f0 <osMutexNew+0x102>
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	f043 0301 	orr.w	r3, r3, #1
 800b2ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f023 0301 	bic.w	r3, r3, #1
 800b30a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b318:	f3ef 8305 	mrs	r3, IPSR
 800b31c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b31e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b320:	2b00      	cmp	r3, #0
 800b322:	d003      	beq.n	800b32c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b324:	f06f 0305 	mvn.w	r3, #5
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	e02c      	b.n	800b386 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d103      	bne.n	800b33a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b332:	f06f 0303 	mvn.w	r3, #3
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e025      	b.n	800b386 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d011      	beq.n	800b364 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6938      	ldr	r0, [r7, #16]
 800b344:	f000 fc26 	bl	800bb94 <xQueueTakeMutexRecursive>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d01b      	beq.n	800b386 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d003      	beq.n	800b35c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b354:	f06f 0301 	mvn.w	r3, #1
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	e014      	b.n	800b386 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b35c:	f06f 0302 	mvn.w	r3, #2
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e010      	b.n	800b386 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6938      	ldr	r0, [r7, #16]
 800b368:	f000 ffba 	bl	800c2e0 <xQueueSemaphoreTake>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d009      	beq.n	800b386 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d003      	beq.n	800b380 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b378:	f06f 0301 	mvn.w	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e002      	b.n	800b386 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b380:	f06f 0302 	mvn.w	r3, #2
 800b384:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b386:	697b      	ldr	r3, [r7, #20]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f023 0301 	bic.w	r3, r3, #1
 800b39e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ac:	f3ef 8305 	mrs	r3, IPSR
 800b3b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b3b8:	f06f 0305 	mvn.w	r3, #5
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	e01f      	b.n	800b400 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b3c6:	f06f 0303 	mvn.w	r3, #3
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	e018      	b.n	800b400 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d009      	beq.n	800b3e8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b3d4:	6938      	ldr	r0, [r7, #16]
 800b3d6:	f000 fba9 	bl	800bb2c <xQueueGiveMutexRecursive>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d00f      	beq.n	800b400 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b3e0:	f06f 0302 	mvn.w	r3, #2
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e00b      	b.n	800b400 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f000 fc70 	bl	800bcd4 <xQueueGenericSend>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d002      	beq.n	800b400 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b3fa:	f06f 0302 	mvn.w	r3, #2
 800b3fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b400:	697b      	ldr	r3, [r7, #20]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b08a      	sub	sp, #40	; 0x28
 800b40e:	af02      	add	r7, sp, #8
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b41a:	f3ef 8305 	mrs	r3, IPSR
 800b41e:	613b      	str	r3, [r7, #16]
  return(result);
 800b420:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b422:	2b00      	cmp	r3, #0
 800b424:	d175      	bne.n	800b512 <osSemaphoreNew+0x108>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d072      	beq.n	800b512 <osSemaphoreNew+0x108>
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	429a      	cmp	r2, r3
 800b432:	d86e      	bhi.n	800b512 <osSemaphoreNew+0x108>
    mem = -1;
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d015      	beq.n	800b46c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <osSemaphoreNew+0x4c>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	2b4f      	cmp	r3, #79	; 0x4f
 800b44e:	d902      	bls.n	800b456 <osSemaphoreNew+0x4c>
        mem = 1;
 800b450:	2301      	movs	r3, #1
 800b452:	61bb      	str	r3, [r7, #24]
 800b454:	e00c      	b.n	800b470 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d108      	bne.n	800b470 <osSemaphoreNew+0x66>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d104      	bne.n	800b470 <osSemaphoreNew+0x66>
          mem = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	e001      	b.n	800b470 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d04c      	beq.n	800b512 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d128      	bne.n	800b4d0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d10a      	bne.n	800b49a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2203      	movs	r2, #3
 800b48a:	9200      	str	r2, [sp, #0]
 800b48c:	2200      	movs	r2, #0
 800b48e:	2100      	movs	r1, #0
 800b490:	2001      	movs	r0, #1
 800b492:	f000 fa29 	bl	800b8e8 <xQueueGenericCreateStatic>
 800b496:	61f8      	str	r0, [r7, #28]
 800b498:	e005      	b.n	800b4a6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b49a:	2203      	movs	r2, #3
 800b49c:	2100      	movs	r1, #0
 800b49e:	2001      	movs	r0, #1
 800b4a0:	f000 fa9a 	bl	800b9d8 <xQueueGenericCreate>
 800b4a4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d022      	beq.n	800b4f2 <osSemaphoreNew+0xe8>
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d01f      	beq.n	800b4f2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	69f8      	ldr	r0, [r7, #28]
 800b4ba:	f000 fc0b 	bl	800bcd4 <xQueueGenericSend>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d016      	beq.n	800b4f2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b4c4:	69f8      	ldr	r0, [r7, #28]
 800b4c6:	f001 f897 	bl	800c5f8 <vQueueDelete>
            hSemaphore = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61fb      	str	r3, [r7, #28]
 800b4ce:	e010      	b.n	800b4f2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d108      	bne.n	800b4e8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 fb8e 	bl	800bc00 <xQueueCreateCountingSemaphoreStatic>
 800b4e4:	61f8      	str	r0, [r7, #28]
 800b4e6:	e004      	b.n	800b4f2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 fbbf 	bl	800bc6e <xQueueCreateCountingSemaphore>
 800b4f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00c      	beq.n	800b512 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e001      	b.n	800b50a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b50a:	6979      	ldr	r1, [r7, #20]
 800b50c:	69f8      	ldr	r0, [r7, #28]
 800b50e:	f001 f9bf 	bl	800c890 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b512:	69fb      	ldr	r3, [r7, #28]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3720      	adds	r7, #32
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b534:	f06f 0303 	mvn.w	r3, #3
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e039      	b.n	800b5b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b53c:	f3ef 8305 	mrs	r3, IPSR
 800b540:	60fb      	str	r3, [r7, #12]
  return(result);
 800b542:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b544:	2b00      	cmp	r3, #0
 800b546:	d022      	beq.n	800b58e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b54e:	f06f 0303 	mvn.w	r3, #3
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	e02c      	b.n	800b5b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b55a:	f107 0308 	add.w	r3, r7, #8
 800b55e:	461a      	mov	r2, r3
 800b560:	2100      	movs	r1, #0
 800b562:	6938      	ldr	r0, [r7, #16]
 800b564:	f000 ffc8 	bl	800c4f8 <xQueueReceiveFromISR>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d003      	beq.n	800b576 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b56e:	f06f 0302 	mvn.w	r3, #2
 800b572:	617b      	str	r3, [r7, #20]
 800b574:	e01c      	b.n	800b5b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d019      	beq.n	800b5b0 <osSemaphoreAcquire+0x94>
 800b57c:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <osSemaphoreAcquire+0xa0>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	e010      	b.n	800b5b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6938      	ldr	r0, [r7, #16]
 800b592:	f000 fea5 	bl	800c2e0 <xQueueSemaphoreTake>
 800b596:	4603      	mov	r3, r0
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d009      	beq.n	800b5b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b5a2:	f06f 0301 	mvn.w	r3, #1
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e002      	b.n	800b5b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b5aa:	f06f 0302 	mvn.w	r3, #2
 800b5ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b5b0:	697b      	ldr	r3, [r7, #20]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b5d6:	f06f 0303 	mvn.w	r3, #3
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e02c      	b.n	800b638 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5de:	f3ef 8305 	mrs	r3, IPSR
 800b5e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01a      	beq.n	800b620 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5ee:	f107 0308 	add.w	r3, r7, #8
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6938      	ldr	r0, [r7, #16]
 800b5f6:	f000 fd06 	bl	800c006 <xQueueGiveFromISR>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d003      	beq.n	800b608 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b600:	f06f 0302 	mvn.w	r3, #2
 800b604:	617b      	str	r3, [r7, #20]
 800b606:	e017      	b.n	800b638 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d014      	beq.n	800b638 <osSemaphoreRelease+0x78>
 800b60e:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <osSemaphoreRelease+0x84>)
 800b610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	e00b      	b.n	800b638 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b620:	2300      	movs	r3, #0
 800b622:	2200      	movs	r2, #0
 800b624:	2100      	movs	r1, #0
 800b626:	6938      	ldr	r0, [r7, #16]
 800b628:	f000 fb54 	bl	800bcd4 <xQueueGenericSend>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d002      	beq.n	800b638 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b632:	f06f 0302 	mvn.w	r3, #2
 800b636:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b638:	697b      	ldr	r3, [r7, #20]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	e000ed04 	.word	0xe000ed04

0800b648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4a07      	ldr	r2, [pc, #28]	; (800b674 <vApplicationGetIdleTaskMemory+0x2c>)
 800b658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	4a06      	ldr	r2, [pc, #24]	; (800b678 <vApplicationGetIdleTaskMemory+0x30>)
 800b65e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	601a      	str	r2, [r3, #0]
}
 800b666:	bf00      	nop
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000a74 	.word	0x20000a74
 800b678:	20000ad0 	.word	0x20000ad0

0800b67c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4a07      	ldr	r2, [pc, #28]	; (800b6a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b68c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	4a06      	ldr	r2, [pc, #24]	; (800b6ac <vApplicationGetTimerTaskMemory+0x30>)
 800b692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b69a:	601a      	str	r2, [r3, #0]
}
 800b69c:	bf00      	nop
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	20000cd0 	.word	0x20000cd0
 800b6ac:	20000d2c 	.word	0x20000d2c

0800b6b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f103 0208 	add.w	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f103 0208 	add.w	r2, r3, #8
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f103 0208 	add.w	r2, r3, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b70a:	b480      	push	{r7}
 800b70c:	b085      	sub	sp, #20
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
}
 800b746:	bf00      	nop
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b768:	d103      	bne.n	800b772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e00c      	b.n	800b78c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3308      	adds	r3, #8
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e002      	b.n	800b780 <vListInsert+0x2e>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d2f6      	bcs.n	800b77a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	6892      	ldr	r2, [r2, #8]
 800b7da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	6852      	ldr	r2, [r2, #4]
 800b7e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d103      	bne.n	800b7f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	1e5a      	subs	r2, r3, #1
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b842:	f002 fd37 	bl	800e2b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b852:	fb01 f303 	mul.w	r3, r1, r3
 800b856:	441a      	add	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b872:	3b01      	subs	r3, #1
 800b874:	68f9      	ldr	r1, [r7, #12]
 800b876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b878:	fb01 f303 	mul.w	r3, r1, r3
 800b87c:	441a      	add	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	22ff      	movs	r2, #255	; 0xff
 800b886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	22ff      	movs	r2, #255	; 0xff
 800b88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d114      	bne.n	800b8c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01a      	beq.n	800b8d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3310      	adds	r3, #16
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 fcdb 	bl	800d260 <xTaskRemoveFromEventList>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d012      	beq.n	800b8d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8b0:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <xQueueGenericReset+0xcc>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	e009      	b.n	800b8d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3310      	adds	r3, #16
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff fef2 	bl	800b6b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3324      	adds	r3, #36	; 0x24
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff feed 	bl	800b6b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8d6:	f002 fd1d 	bl	800e314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8da:	2301      	movs	r3, #1
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	e000ed04 	.word	0xe000ed04

0800b8e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08e      	sub	sp, #56	; 0x38
 800b8ec:	af02      	add	r7, sp, #8
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10a      	bne.n	800b92e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <xQueueGenericCreateStatic+0x52>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <xQueueGenericCreateStatic+0x56>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <xQueueGenericCreateStatic+0x58>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	623b      	str	r3, [r7, #32]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d102      	bne.n	800b966 <xQueueGenericCreateStatic+0x7e>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <xQueueGenericCreateStatic+0x82>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericCreateStatic+0x84>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	61fb      	str	r3, [r7, #28]
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b986:	2350      	movs	r3, #80	; 0x50
 800b988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b50      	cmp	r3, #80	; 0x50
 800b98e:	d00a      	beq.n	800b9a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	61bb      	str	r3, [r7, #24]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00d      	beq.n	800b9ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f83f 	bl	800ba4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3730      	adds	r7, #48	; 0x30
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	613b      	str	r3, [r7, #16]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	fb02 f303 	mul.w	r3, r2, r3
 800ba0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	3350      	adds	r3, #80	; 0x50
 800ba10:	4618      	mov	r0, r3
 800ba12:	f002 fd71 	bl	800e4f8 <pvPortMalloc>
 800ba16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d011      	beq.n	800ba42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	3350      	adds	r3, #80	; 0x50
 800ba26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	4613      	mov	r3, r2
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f805 	bl	800ba4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba42:	69bb      	ldr	r3, [r7, #24]
	}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3720      	adds	r7, #32
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
 800ba58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d103      	bne.n	800ba68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	e002      	b.n	800ba6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	69b8      	ldr	r0, [r7, #24]
 800ba7e:	f7ff fecb 	bl	800b818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bab2:	2300      	movs	r3, #0
 800bab4:	2200      	movs	r2, #0
 800bab6:	2100      	movs	r1, #0
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f90b 	bl	800bcd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b086      	sub	sp, #24
 800baca:	af00      	add	r7, sp, #0
 800bacc:	4603      	mov	r3, r0
 800bace:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	2300      	movs	r3, #0
 800bad6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	461a      	mov	r2, r3
 800badc:	6939      	ldr	r1, [r7, #16]
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f7ff ff7a 	bl	800b9d8 <xQueueGenericCreate>
 800bae4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff ffd3 	bl	800ba92 <prvInitialiseMutex>

		return xNewQueue;
 800baec:	68fb      	ldr	r3, [r7, #12]
	}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b088      	sub	sp, #32
 800bafa:	af02      	add	r7, sp, #8
 800bafc:	4603      	mov	r3, r0
 800bafe:	6039      	str	r1, [r7, #0]
 800bb00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb02:	2301      	movs	r3, #1
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2200      	movs	r2, #0
 800bb12:	6939      	ldr	r1, [r7, #16]
 800bb14:	6978      	ldr	r0, [r7, #20]
 800bb16:	f7ff fee7 	bl	800b8e8 <xQueueGenericCreateStatic>
 800bb1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7ff ffb8 	bl	800ba92 <prvInitialiseMutex>

		return xNewQueue;
 800bb22:	68fb      	ldr	r3, [r7, #12]
	}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10a      	bne.n	800bb54 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	60fb      	str	r3, [r7, #12]
}
 800bb50:	bf00      	nop
 800bb52:	e7fe      	b.n	800bb52 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	689c      	ldr	r4, [r3, #8]
 800bb58:	f001 fd40 	bl	800d5dc <xTaskGetCurrentTaskHandle>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	d111      	bne.n	800bb86 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	1e5a      	subs	r2, r3, #1
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d105      	bne.n	800bb80 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bb74:	2300      	movs	r3, #0
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6938      	ldr	r0, [r7, #16]
 800bb7c:	f000 f8aa 	bl	800bcd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e001      	b.n	800bb8a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bb8a:	697b      	ldr	r3, [r7, #20]
	}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd90      	pop	{r4, r7, pc}

0800bb94 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bb94:	b590      	push	{r4, r7, lr}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60fb      	str	r3, [r7, #12]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	689c      	ldr	r4, [r3, #8]
 800bbc2:	f001 fd0b 	bl	800d5dc <xTaskGetCurrentTaskHandle>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	429c      	cmp	r4, r3
 800bbca:	d107      	bne.n	800bbdc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	e00c      	b.n	800bbf6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6938      	ldr	r0, [r7, #16]
 800bbe0:	f000 fb7e 	bl	800c2e0 <xQueueSemaphoreTake>
 800bbe4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bbf6:	697b      	ldr	r3, [r7, #20]
	}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd90      	pop	{r4, r7, pc}

0800bc00 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08a      	sub	sp, #40	; 0x28
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	61bb      	str	r3, [r7, #24]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d90a      	bls.n	800bc46 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	617b      	str	r3, [r7, #20]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc46:	2302      	movs	r3, #2
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7ff fe49 	bl	800b8e8 <xQueueGenericCreateStatic>
 800bc56:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc64:	69fb      	ldr	r3, [r7, #28]
	}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b086      	sub	sp, #24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10a      	bne.n	800bc94 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	613b      	str	r3, [r7, #16]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d90a      	bls.n	800bcb2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	60fb      	str	r3, [r7, #12]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7ff fe8e 	bl	800b9d8 <xQueueGenericCreate>
 800bcbc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d002      	beq.n	800bcca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcca:	697b      	ldr	r3, [r7, #20]
	}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b08e      	sub	sp, #56	; 0x38
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bce2:	2300      	movs	r3, #0
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <xQueueGenericSend+0x32>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d103      	bne.n	800bd14 <xQueueGenericSend+0x40>
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d101      	bne.n	800bd18 <xQueueGenericSend+0x44>
 800bd14:	2301      	movs	r3, #1
 800bd16:	e000      	b.n	800bd1a <xQueueGenericSend+0x46>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10a      	bne.n	800bd34 <xQueueGenericSend+0x60>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd30:	bf00      	nop
 800bd32:	e7fe      	b.n	800bd32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d103      	bne.n	800bd42 <xQueueGenericSend+0x6e>
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <xQueueGenericSend+0x72>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e000      	b.n	800bd48 <xQueueGenericSend+0x74>
 800bd46:	2300      	movs	r3, #0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xQueueGenericSend+0x8e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	623b      	str	r3, [r7, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd62:	f001 fc4b 	bl	800d5fc <xTaskGetSchedulerState>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <xQueueGenericSend+0x9e>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <xQueueGenericSend+0xa2>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e000      	b.n	800bd78 <xQueueGenericSend+0xa4>
 800bd76:	2300      	movs	r3, #0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <xQueueGenericSend+0xbe>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	61fb      	str	r3, [r7, #28]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd92:	f002 fa8f 	bl	800e2b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d302      	bcc.n	800bda8 <xQueueGenericSend+0xd4>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d129      	bne.n	800bdfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	68b9      	ldr	r1, [r7, #8]
 800bdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdae:	f000 fc5e 	bl	800c66e <prvCopyDataToQueue>
 800bdb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	3324      	adds	r3, #36	; 0x24
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 fa4d 	bl	800d260 <xTaskRemoveFromEventList>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d013      	beq.n	800bdf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bdcc:	4b3f      	ldr	r3, [pc, #252]	; (800becc <xQueueGenericSend+0x1f8>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	e00a      	b.n	800bdf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bde4:	4b39      	ldr	r3, [pc, #228]	; (800becc <xQueueGenericSend+0x1f8>)
 800bde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdf4:	f002 fa8e 	bl	800e314 <vPortExitCritical>
				return pdPASS;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e063      	b.n	800bec4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d103      	bne.n	800be0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be02:	f002 fa87 	bl	800e314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be06:	2300      	movs	r3, #0
 800be08:	e05c      	b.n	800bec4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be10:	f107 0314 	add.w	r3, r7, #20
 800be14:	4618      	mov	r0, r3
 800be16:	f001 fa87 	bl	800d328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be1a:	2301      	movs	r3, #1
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be1e:	f002 fa79 	bl	800e314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be22:	f000 fff9 	bl	800ce18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be26:	f002 fa45 	bl	800e2b4 <vPortEnterCritical>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be30:	b25b      	sxtb	r3, r3
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be36:	d103      	bne.n	800be40 <xQueueGenericSend+0x16c>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be46:	b25b      	sxtb	r3, r3
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d103      	bne.n	800be56 <xQueueGenericSend+0x182>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be56:	f002 fa5d 	bl	800e314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be5a:	1d3a      	adds	r2, r7, #4
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f001 fa76 	bl	800d354 <xTaskCheckForTimeOut>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d124      	bne.n	800beb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be70:	f000 fcf5 	bl	800c85e <prvIsQueueFull>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d018      	beq.n	800beac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	3310      	adds	r3, #16
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f001 f99c 	bl	800d1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8a:	f000 fc80 	bl	800c78e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be8e:	f000 ffd1 	bl	800ce34 <xTaskResumeAll>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	f47f af7c 	bne.w	800bd92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be9a:	4b0c      	ldr	r3, [pc, #48]	; (800becc <xQueueGenericSend+0x1f8>)
 800be9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	e772      	b.n	800bd92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800beac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beae:	f000 fc6e 	bl	800c78e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beb2:	f000 ffbf 	bl	800ce34 <xTaskResumeAll>
 800beb6:	e76c      	b.n	800bd92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800beb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beba:	f000 fc68 	bl	800c78e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bebe:	f000 ffb9 	bl	800ce34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3738      	adds	r7, #56	; 0x38
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	e000ed04 	.word	0xe000ed04

0800bed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b090      	sub	sp, #64	; 0x40
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10a      	bne.n	800befe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800befa:	bf00      	nop
 800befc:	e7fe      	b.n	800befc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d103      	bne.n	800bf0c <xQueueGenericSendFromISR+0x3c>
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <xQueueGenericSendFromISR+0x40>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <xQueueGenericSendFromISR+0x42>
 800bf10:	2300      	movs	r3, #0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d103      	bne.n	800bf3a <xQueueGenericSendFromISR+0x6a>
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <xQueueGenericSendFromISR+0x6e>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <xQueueGenericSendFromISR+0x70>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	623b      	str	r3, [r7, #32]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf5a:	f002 fa8d 	bl	800e478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf5e:	f3ef 8211 	mrs	r2, BASEPRI
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61fa      	str	r2, [r7, #28]
 800bf74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <xQueueGenericSendFromISR+0xbc>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d12f      	bne.n	800bfec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfa2:	f000 fb64 	bl	800c66e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d112      	bne.n	800bfd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d016      	beq.n	800bfe6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	3324      	adds	r3, #36	; 0x24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 f94f 	bl	800d260 <xTaskRemoveFromEventList>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00e      	beq.n	800bfe6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00b      	beq.n	800bfe6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	e007      	b.n	800bfe6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfda:	3301      	adds	r3, #1
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	b25a      	sxtb	r2, r3
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bfea:	e001      	b.n	800bff0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bffa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3740      	adds	r7, #64	; 0x40
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b08e      	sub	sp, #56	; 0x38
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10a      	bne.n	800c030 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	623b      	str	r3, [r7, #32]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <xQueueGiveFromISR+0x48>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	61fb      	str	r3, [r7, #28]
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d103      	bne.n	800c05e <xQueueGiveFromISR+0x58>
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <xQueueGiveFromISR+0x5c>
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <xQueueGiveFromISR+0x5e>
 800c062:	2300      	movs	r3, #0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10a      	bne.n	800c07e <xQueueGiveFromISR+0x78>
	__asm volatile
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	f383 8811 	msr	BASEPRI, r3
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	61bb      	str	r3, [r7, #24]
}
 800c07a:	bf00      	nop
 800c07c:	e7fe      	b.n	800c07c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c07e:	f002 f9fb 	bl	800e478 <vPortValidateInterruptPriority>
	__asm volatile
 800c082:	f3ef 8211 	mrs	r2, BASEPRI
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	617a      	str	r2, [r7, #20]
 800c098:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c09a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d22b      	bcs.n	800c106 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d112      	bne.n	800c0f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d016      	beq.n	800c100 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	3324      	adds	r3, #36	; 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 f8c2 	bl	800d260 <xTaskRemoveFromEventList>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00e      	beq.n	800c100 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	e007      	b.n	800c100 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	b25a      	sxtb	r2, r3
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c100:	2301      	movs	r3, #1
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	e001      	b.n	800c10a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c106:	2300      	movs	r3, #0
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f383 8811 	msr	BASEPRI, r3
}
 800c114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3738      	adds	r7, #56	; 0x38
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08c      	sub	sp, #48	; 0x30
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <xQueueReceive+0x30>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	623b      	str	r3, [r7, #32]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <xQueueReceive+0x3e>
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <xQueueReceive+0x42>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <xQueueReceive+0x44>
 800c162:	2300      	movs	r3, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <xQueueReceive+0x5e>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61fb      	str	r3, [r7, #28]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c17e:	f001 fa3d 	bl	800d5fc <xTaskGetSchedulerState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <xQueueReceive+0x6e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <xQueueReceive+0x72>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <xQueueReceive+0x74>
 800c192:	2300      	movs	r3, #0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10a      	bne.n	800c1ae <xQueueReceive+0x8e>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	61bb      	str	r3, [r7, #24]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ae:	f002 f881 	bl	800e2b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01f      	beq.n	800c1fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c2:	f000 fabe 	bl	800c742 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	1e5a      	subs	r2, r3, #1
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00f      	beq.n	800c1f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	3310      	adds	r3, #16
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 f840 	bl	800d260 <xTaskRemoveFromEventList>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1e6:	4b3d      	ldr	r3, [pc, #244]	; (800c2dc <xQueueReceive+0x1bc>)
 800c1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1f6:	f002 f88d 	bl	800e314 <vPortExitCritical>
				return pdPASS;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e069      	b.n	800c2d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c204:	f002 f886 	bl	800e314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c208:	2300      	movs	r3, #0
 800c20a:	e062      	b.n	800c2d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c212:	f107 0310 	add.w	r3, r7, #16
 800c216:	4618      	mov	r0, r3
 800c218:	f001 f886 	bl	800d328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c220:	f002 f878 	bl	800e314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c224:	f000 fdf8 	bl	800ce18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c228:	f002 f844 	bl	800e2b4 <vPortEnterCritical>
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d103      	bne.n	800c242 <xQueueReceive+0x122>
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24e:	d103      	bne.n	800c258 <xQueueReceive+0x138>
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c258:	f002 f85c 	bl	800e314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c25c:	1d3a      	adds	r2, r7, #4
 800c25e:	f107 0310 	add.w	r3, r7, #16
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f001 f875 	bl	800d354 <xTaskCheckForTimeOut>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d123      	bne.n	800c2b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c272:	f000 fade 	bl	800c832 <prvIsQueueEmpty>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d017      	beq.n	800c2ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f000 ff9b 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28c:	f000 fa7f 	bl	800c78e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c290:	f000 fdd0 	bl	800ce34 <xTaskResumeAll>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d189      	bne.n	800c1ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <xQueueReceive+0x1bc>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	e780      	b.n	800c1ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ae:	f000 fa6e 	bl	800c78e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2b2:	f000 fdbf 	bl	800ce34 <xTaskResumeAll>
 800c2b6:	e77a      	b.n	800c1ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ba:	f000 fa68 	bl	800c78e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2be:	f000 fdb9 	bl	800ce34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c4:	f000 fab5 	bl	800c832 <prvIsQueueEmpty>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f43f af6f 	beq.w	800c1ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3730      	adds	r7, #48	; 0x30
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	e000ed04 	.word	0xe000ed04

0800c2e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08e      	sub	sp, #56	; 0x38
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	623b      	str	r3, [r7, #32]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	61fb      	str	r3, [r7, #28]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c330:	f001 f964 	bl	800d5fc <xTaskGetSchedulerState>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <xQueueSemaphoreTake+0x60>
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <xQueueSemaphoreTake+0x64>
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <xQueueSemaphoreTake+0x66>
 800c344:	2300      	movs	r3, #0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	61bb      	str	r3, [r7, #24]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c360:	f001 ffa8 	bl	800e2b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d024      	beq.n	800c3ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c380:	f001 fab2 	bl	800d8e8 <pvTaskIncrementMutexHeldCount>
 800c384:	4602      	mov	r2, r0
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	3310      	adds	r3, #16
 800c396:	4618      	mov	r0, r3
 800c398:	f000 ff62 	bl	800d260 <xTaskRemoveFromEventList>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d007      	beq.n	800c3b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3a2:	4b54      	ldr	r3, [pc, #336]	; (800c4f4 <xQueueSemaphoreTake+0x214>)
 800c3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3b2:	f001 ffaf 	bl	800e314 <vPortExitCritical>
				return pdPASS;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e097      	b.n	800c4ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d111      	bne.n	800c3e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	617b      	str	r3, [r7, #20]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3dc:	f001 ff9a 	bl	800e314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e082      	b.n	800c4ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 ff9a 	bl	800d328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3f8:	f001 ff8c 	bl	800e314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3fc:	f000 fd0c 	bl	800ce18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c400:	f001 ff58 	bl	800e2b4 <vPortEnterCritical>
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d103      	bne.n	800c41a <xQueueSemaphoreTake+0x13a>
 800c412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c420:	b25b      	sxtb	r3, r3
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d103      	bne.n	800c430 <xQueueSemaphoreTake+0x150>
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c430:	f001 ff70 	bl	800e314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c434:	463a      	mov	r2, r7
 800c436:	f107 030c 	add.w	r3, r7, #12
 800c43a:	4611      	mov	r1, r2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 ff89 	bl	800d354 <xTaskCheckForTimeOut>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d132      	bne.n	800c4ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c44a:	f000 f9f2 	bl	800c832 <prvIsQueueEmpty>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d026      	beq.n	800c4a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c45c:	f001 ff2a 	bl	800e2b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	4618      	mov	r0, r3
 800c466:	f001 f8e7 	bl	800d638 <xTaskPriorityInherit>
 800c46a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c46c:	f001 ff52 	bl	800e314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	3324      	adds	r3, #36	; 0x24
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fea1 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f000 f985 	bl	800c78e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c484:	f000 fcd6 	bl	800ce34 <xTaskResumeAll>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f47f af68 	bne.w	800c360 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c490:	4b18      	ldr	r3, [pc, #96]	; (800c4f4 <xQueueSemaphoreTake+0x214>)
 800c492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	e75e      	b.n	800c360 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4a4:	f000 f973 	bl	800c78e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4a8:	f000 fcc4 	bl	800ce34 <xTaskResumeAll>
 800c4ac:	e758      	b.n	800c360 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b0:	f000 f96d 	bl	800c78e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4b4:	f000 fcbe 	bl	800ce34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ba:	f000 f9ba 	bl	800c832 <prvIsQueueEmpty>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f43f af4d 	beq.w	800c360 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c4cc:	f001 fef2 	bl	800e2b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d2:	f000 f8b4 	bl	800c63e <prvGetDisinheritPriorityAfterTimeout>
 800c4d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 f980 	bl	800d7e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4e4:	f001 ff16 	bl	800e314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3738      	adds	r7, #56	; 0x38
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b08e      	sub	sp, #56	; 0x38
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	623b      	str	r3, [r7, #32]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d103      	bne.n	800c532 <xQueueReceiveFromISR+0x3a>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <xQueueReceiveFromISR+0x3e>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <xQueueReceiveFromISR+0x40>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	61fb      	str	r3, [r7, #28]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c552:	f001 ff91 	bl	800e478 <vPortValidateInterruptPriority>
	__asm volatile
 800c556:	f3ef 8211 	mrs	r2, BASEPRI
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	61ba      	str	r2, [r7, #24]
 800c56c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c56e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d02f      	beq.n	800c5de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c588:	68b9      	ldr	r1, [r7, #8]
 800c58a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c58c:	f000 f8d9 	bl	800c742 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c592:	1e5a      	subs	r2, r3, #1
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a0:	d112      	bne.n	800c5c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d016      	beq.n	800c5d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	3310      	adds	r3, #16
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fe56 	bl	800d260 <xTaskRemoveFromEventList>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00e      	beq.n	800c5d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00b      	beq.n	800c5d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	e007      	b.n	800c5d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	b25a      	sxtb	r2, r3
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	637b      	str	r3, [r7, #52]	; 0x34
 800c5dc:	e001      	b.n	800c5e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	f383 8811 	msr	BASEPRI, r3
}
 800c5ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3738      	adds	r7, #56	; 0x38
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10a      	bne.n	800c620 <vQueueDelete+0x28>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	60bb      	str	r3, [r7, #8]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 f95f 	bl	800c8e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f002 f82d 	bl	800e690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c63e:	b480      	push	{r7}
 800c640:	b085      	sub	sp, #20
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	e001      	b.n	800c660 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c660:	68fb      	ldr	r3, [r7, #12]
	}
 800c662:	4618      	mov	r0, r3
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b086      	sub	sp, #24
 800c672:	af00      	add	r7, sp, #0
 800c674:	60f8      	str	r0, [r7, #12]
 800c676:	60b9      	str	r1, [r7, #8]
 800c678:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c682:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10d      	bne.n	800c6a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d14d      	bne.n	800c730 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4618      	mov	r0, r3
 800c69a:	f001 f835 	bl	800d708 <xTaskPriorityDisinherit>
 800c69e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	609a      	str	r2, [r3, #8]
 800c6a6:	e043      	b.n	800c730 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d119      	bne.n	800c6e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6858      	ldr	r0, [r3, #4]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	68b9      	ldr	r1, [r7, #8]
 800c6ba:	f002 fe25 	bl	800f308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c6:	441a      	add	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d32b      	bcc.n	800c730 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	605a      	str	r2, [r3, #4]
 800c6e0:	e026      	b.n	800c730 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68d8      	ldr	r0, [r3, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	f002 fe0b 	bl	800f308 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	425b      	negs	r3, r3
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d207      	bcs.n	800c71e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	689a      	ldr	r2, [r3, #8]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c716:	425b      	negs	r3, r3
 800c718:	441a      	add	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d105      	bne.n	800c730 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c738:	697b      	ldr	r3, [r7, #20]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c750:	2b00      	cmp	r3, #0
 800c752:	d018      	beq.n	800c786 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	68da      	ldr	r2, [r3, #12]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75c:	441a      	add	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d303      	bcc.n	800c776 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68d9      	ldr	r1, [r3, #12]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77e:	461a      	mov	r2, r3
 800c780:	6838      	ldr	r0, [r7, #0]
 800c782:	f002 fdc1 	bl	800f308 <memcpy>
	}
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c796:	f001 fd8d 	bl	800e2b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7a2:	e011      	b.n	800c7c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d012      	beq.n	800c7d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3324      	adds	r3, #36	; 0x24
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 fd55 	bl	800d260 <xTaskRemoveFromEventList>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7bc:	f000 fe2c 	bl	800d418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dce9      	bgt.n	800c7a4 <prvUnlockQueue+0x16>
 800c7d0:	e000      	b.n	800c7d4 <prvUnlockQueue+0x46>
					break;
 800c7d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	22ff      	movs	r2, #255	; 0xff
 800c7d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7dc:	f001 fd9a 	bl	800e314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7e0:	f001 fd68 	bl	800e2b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ec:	e011      	b.n	800c812 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d012      	beq.n	800c81c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3310      	adds	r3, #16
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 fd30 	bl	800d260 <xTaskRemoveFromEventList>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c806:	f000 fe07 	bl	800d418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c816:	2b00      	cmp	r3, #0
 800c818:	dce9      	bgt.n	800c7ee <prvUnlockQueue+0x60>
 800c81a:	e000      	b.n	800c81e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c81c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	22ff      	movs	r2, #255	; 0xff
 800c822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c826:	f001 fd75 	bl	800e314 <vPortExitCritical>
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c83a:	f001 fd3b 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c846:	2301      	movs	r3, #1
 800c848:	60fb      	str	r3, [r7, #12]
 800c84a:	e001      	b.n	800c850 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c84c:	2300      	movs	r3, #0
 800c84e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c850:	f001 fd60 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800c854:	68fb      	ldr	r3, [r7, #12]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c866:	f001 fd25 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c872:	429a      	cmp	r2, r3
 800c874:	d102      	bne.n	800c87c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c876:	2301      	movs	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	e001      	b.n	800c880 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c880:	f001 fd48 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800c884:	68fb      	ldr	r3, [r7, #12]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
	...

0800c890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e014      	b.n	800c8ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8a0:	4a0f      	ldr	r2, [pc, #60]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10b      	bne.n	800c8c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8ac:	490c      	ldr	r1, [pc, #48]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4413      	add	r3, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8c2:	e006      	b.n	800c8d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b07      	cmp	r3, #7
 800c8ce:	d9e7      	bls.n	800c8a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	2000112c 	.word	0x2000112c

0800c8e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	e016      	b.n	800c920 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8f2:	4a10      	ldr	r2, [pc, #64]	; (800c934 <vQueueUnregisterQueue+0x50>)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	4413      	add	r3, r2
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d10b      	bne.n	800c91a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c902:	4a0c      	ldr	r2, [pc, #48]	; (800c934 <vQueueUnregisterQueue+0x50>)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2100      	movs	r1, #0
 800c908:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c90c:	4a09      	ldr	r2, [pc, #36]	; (800c934 <vQueueUnregisterQueue+0x50>)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	4413      	add	r3, r2
 800c914:	2200      	movs	r2, #0
 800c916:	605a      	str	r2, [r3, #4]
				break;
 800c918:	e006      	b.n	800c928 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3301      	adds	r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b07      	cmp	r3, #7
 800c924:	d9e5      	bls.n	800c8f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c926:	bf00      	nop
 800c928:	bf00      	nop
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	2000112c 	.word	0x2000112c

0800c938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c948:	f001 fcb4 	bl	800e2b4 <vPortEnterCritical>
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c952:	b25b      	sxtb	r3, r3
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c958:	d103      	bne.n	800c962 <vQueueWaitForMessageRestricted+0x2a>
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96e:	d103      	bne.n	800c978 <vQueueWaitForMessageRestricted+0x40>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c978:	f001 fccc 	bl	800e314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	3324      	adds	r3, #36	; 0x24
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fc3b 	bl	800d208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c992:	6978      	ldr	r0, [r7, #20]
 800c994:	f7ff fefb 	bl	800c78e <prvUnlockQueue>
	}
 800c998:	bf00      	nop
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08e      	sub	sp, #56	; 0x38
 800c9a4:	af04      	add	r7, sp, #16
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	623b      	str	r3, [r7, #32]
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10a      	bne.n	800c9e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	61fb      	str	r3, [r7, #28]
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9e6:	235c      	movs	r3, #92	; 0x5c
 800c9e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2b5c      	cmp	r3, #92	; 0x5c
 800c9ee:	d00a      	beq.n	800ca06 <xTaskCreateStatic+0x66>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	61bb      	str	r3, [r7, #24]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d01e      	beq.n	800ca4c <xTaskCreateStatic+0xac>
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d01b      	beq.n	800ca4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	2202      	movs	r2, #2
 800ca22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca26:	2300      	movs	r3, #0
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	9302      	str	r3, [sp, #8]
 800ca2e:	f107 0314 	add.w	r3, r7, #20
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f000 f850 	bl	800cae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca46:	f000 f8dd 	bl	800cc04 <prvAddNewTaskToReadyList>
 800ca4a:	e001      	b.n	800ca50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca50:	697b      	ldr	r3, [r7, #20]
	}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3728      	adds	r7, #40	; 0x28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b08c      	sub	sp, #48	; 0x30
 800ca5e:	af04      	add	r7, sp, #16
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	4613      	mov	r3, r2
 800ca68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca6a:	88fb      	ldrh	r3, [r7, #6]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f001 fd42 	bl	800e4f8 <pvPortMalloc>
 800ca74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00e      	beq.n	800ca9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca7c:	205c      	movs	r0, #92	; 0x5c
 800ca7e:	f001 fd3b 	bl	800e4f8 <pvPortMalloc>
 800ca82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ca90:	e005      	b.n	800ca9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca92:	6978      	ldr	r0, [r7, #20]
 800ca94:	f001 fdfc 	bl	800e690 <vPortFree>
 800ca98:	e001      	b.n	800ca9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d017      	beq.n	800cad4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800caac:	88fa      	ldrh	r2, [r7, #6]
 800caae:	2300      	movs	r3, #0
 800cab0:	9303      	str	r3, [sp, #12]
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	9302      	str	r3, [sp, #8]
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 f80e 	bl	800cae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cac8:	69f8      	ldr	r0, [r7, #28]
 800caca:	f000 f89b 	bl	800cc04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cace:	2301      	movs	r3, #1
 800cad0:	61bb      	str	r3, [r7, #24]
 800cad2:	e002      	b.n	800cada <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cada:	69bb      	ldr	r3, [r7, #24]
	}
 800cadc:	4618      	mov	r0, r3
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	461a      	mov	r2, r3
 800cafc:	21a5      	movs	r1, #165	; 0xa5
 800cafe:	f002 fc11 	bl	800f324 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	f023 0307 	bic.w	r3, r3, #7
 800cb1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	617b      	str	r3, [r7, #20]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d01f      	beq.n	800cb82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	e012      	b.n	800cb6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	7819      	ldrb	r1, [r3, #0]
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	4413      	add	r3, r2
 800cb56:	3334      	adds	r3, #52	; 0x34
 800cb58:	460a      	mov	r2, r1
 800cb5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	4413      	add	r3, r2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d006      	beq.n	800cb76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	61fb      	str	r3, [r7, #28]
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	2b0f      	cmp	r3, #15
 800cb72:	d9e9      	bls.n	800cb48 <prvInitialiseNewTask+0x64>
 800cb74:	e000      	b.n	800cb78 <prvInitialiseNewTask+0x94>
			{
				break;
 800cb76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb80:	e003      	b.n	800cb8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	2b37      	cmp	r3, #55	; 0x37
 800cb8e:	d901      	bls.n	800cb94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb90:	2337      	movs	r3, #55	; 0x37
 800cb92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	2200      	movs	r2, #0
 800cba4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fda0 	bl	800b6f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	3318      	adds	r3, #24
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fd9b 	bl	800b6f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	68f9      	ldr	r1, [r7, #12]
 800cbe2:	69b8      	ldr	r0, [r7, #24]
 800cbe4:	f001 fa36 	bl	800e054 <pxPortInitialiseStack>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbfa:	bf00      	nop
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc0c:	f001 fb52 	bl	800e2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc10:	4b2d      	ldr	r3, [pc, #180]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	4a2c      	ldr	r2, [pc, #176]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc1a:	4b2c      	ldr	r3, [pc, #176]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d109      	bne.n	800cc36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc28:	4b27      	ldr	r3, [pc, #156]	; (800ccc8 <prvAddNewTaskToReadyList+0xc4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d110      	bne.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc30:	f000 fc16 	bl	800d460 <prvInitialiseTaskLists>
 800cc34:	e00d      	b.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc36:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <prvAddNewTaskToReadyList+0xcc>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc3e:	4b23      	ldr	r3, [pc, #140]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d802      	bhi.n	800cc52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc4c:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc52:	4b20      	ldr	r3, [pc, #128]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3301      	adds	r3, #1
 800cc58:	4a1e      	ldr	r2, [pc, #120]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc5c:	4b1d      	ldr	r3, [pc, #116]	; (800ccd4 <prvAddNewTaskToReadyList+0xd0>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc68:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <prvAddNewTaskToReadyList+0xd4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d903      	bls.n	800cc78 <prvAddNewTaskToReadyList+0x74>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	4a18      	ldr	r2, [pc, #96]	; (800ccd8 <prvAddNewTaskToReadyList+0xd4>)
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4a15      	ldr	r2, [pc, #84]	; (800ccdc <prvAddNewTaskToReadyList+0xd8>)
 800cc86:	441a      	add	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe fd3b 	bl	800b70a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc94:	f001 fb3e 	bl	800e314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc98:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <prvAddNewTaskToReadyList+0xcc>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00e      	beq.n	800ccbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <prvAddNewTaskToReadyList+0xc8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d207      	bcs.n	800ccbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccae:	4b0c      	ldr	r3, [pc, #48]	; (800cce0 <prvAddNewTaskToReadyList+0xdc>)
 800ccb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20001640 	.word	0x20001640
 800cccc:	2000116c 	.word	0x2000116c
 800ccd0:	2000164c 	.word	0x2000164c
 800ccd4:	2000165c 	.word	0x2000165c
 800ccd8:	20001648 	.word	0x20001648
 800ccdc:	20001170 	.word	0x20001170
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccec:	2300      	movs	r3, #0
 800ccee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d017      	beq.n	800cd26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccf6:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <vTaskDelay+0x60>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <vTaskDelay+0x30>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	60bb      	str	r3, [r7, #8]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd14:	f000 f880 	bl	800ce18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd18:	2100      	movs	r1, #0
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fdf8 	bl	800d910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd20:	f000 f888 	bl	800ce34 <xTaskResumeAll>
 800cd24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d107      	bne.n	800cd3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <vTaskDelay+0x64>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd3c:	bf00      	nop
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20001668 	.word	0x20001668
 800cd48:	e000ed04 	.word	0xe000ed04

0800cd4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08a      	sub	sp, #40	; 0x28
 800cd50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	1d39      	adds	r1, r7, #4
 800cd5e:	f107 0308 	add.w	r3, r7, #8
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe fc70 	bl	800b648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	9202      	str	r2, [sp, #8]
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	2300      	movs	r3, #0
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	2300      	movs	r3, #0
 800cd78:	460a      	mov	r2, r1
 800cd7a:	4921      	ldr	r1, [pc, #132]	; (800ce00 <vTaskStartScheduler+0xb4>)
 800cd7c:	4821      	ldr	r0, [pc, #132]	; (800ce04 <vTaskStartScheduler+0xb8>)
 800cd7e:	f7ff fe0f 	bl	800c9a0 <xTaskCreateStatic>
 800cd82:	4603      	mov	r3, r0
 800cd84:	4a20      	ldr	r2, [pc, #128]	; (800ce08 <vTaskStartScheduler+0xbc>)
 800cd86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd88:	4b1f      	ldr	r3, [pc, #124]	; (800ce08 <vTaskStartScheduler+0xbc>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd90:	2301      	movs	r3, #1
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	e001      	b.n	800cd9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d102      	bne.n	800cda6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cda0:	f000 fe0a 	bl	800d9b8 <xTimerCreateTimerTask>
 800cda4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d116      	bne.n	800cdda <vTaskStartScheduler+0x8e>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	613b      	str	r3, [r7, #16]
}
 800cdbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdc0:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <vTaskStartScheduler+0xc0>)
 800cdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdc8:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <vTaskStartScheduler+0xc4>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdce:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <vTaskStartScheduler+0xc8>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdd4:	f001 f9cc 	bl	800e170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdd8:	e00e      	b.n	800cdf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde0:	d10a      	bne.n	800cdf8 <vTaskStartScheduler+0xac>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	60fb      	str	r3, [r7, #12]
}
 800cdf4:	bf00      	nop
 800cdf6:	e7fe      	b.n	800cdf6 <vTaskStartScheduler+0xaa>
}
 800cdf8:	bf00      	nop
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	0801030c 	.word	0x0801030c
 800ce04:	0800d431 	.word	0x0800d431
 800ce08:	20001664 	.word	0x20001664
 800ce0c:	20001660 	.word	0x20001660
 800ce10:	2000164c 	.word	0x2000164c
 800ce14:	20001644 	.word	0x20001644

0800ce18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce1c:	4b04      	ldr	r3, [pc, #16]	; (800ce30 <vTaskSuspendAll+0x18>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	3301      	adds	r3, #1
 800ce22:	4a03      	ldr	r2, [pc, #12]	; (800ce30 <vTaskSuspendAll+0x18>)
 800ce24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce26:	bf00      	nop
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	20001668 	.word	0x20001668

0800ce34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce42:	4b42      	ldr	r3, [pc, #264]	; (800cf4c <xTaskResumeAll+0x118>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10a      	bne.n	800ce60 <xTaskResumeAll+0x2c>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	603b      	str	r3, [r7, #0]
}
 800ce5c:	bf00      	nop
 800ce5e:	e7fe      	b.n	800ce5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce60:	f001 fa28 	bl	800e2b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce64:	4b39      	ldr	r3, [pc, #228]	; (800cf4c <xTaskResumeAll+0x118>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	4a38      	ldr	r2, [pc, #224]	; (800cf4c <xTaskResumeAll+0x118>)
 800ce6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce6e:	4b37      	ldr	r3, [pc, #220]	; (800cf4c <xTaskResumeAll+0x118>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d162      	bne.n	800cf3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce76:	4b36      	ldr	r3, [pc, #216]	; (800cf50 <xTaskResumeAll+0x11c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d05e      	beq.n	800cf3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce7e:	e02f      	b.n	800cee0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce80:	4b34      	ldr	r3, [pc, #208]	; (800cf54 <xTaskResumeAll+0x120>)
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3318      	adds	r3, #24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fc99 	bl	800b7c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fc94 	bl	800b7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	4b2d      	ldr	r3, [pc, #180]	; (800cf58 <xTaskResumeAll+0x124>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d903      	bls.n	800ceb0 <xTaskResumeAll+0x7c>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	4a2a      	ldr	r2, [pc, #168]	; (800cf58 <xTaskResumeAll+0x124>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4a27      	ldr	r2, [pc, #156]	; (800cf5c <xTaskResumeAll+0x128>)
 800cebe:	441a      	add	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe fc1f 	bl	800b70a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	4b23      	ldr	r3, [pc, #140]	; (800cf60 <xTaskResumeAll+0x12c>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d302      	bcc.n	800cee0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ceda:	4b22      	ldr	r3, [pc, #136]	; (800cf64 <xTaskResumeAll+0x130>)
 800cedc:	2201      	movs	r2, #1
 800cede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cee0:	4b1c      	ldr	r3, [pc, #112]	; (800cf54 <xTaskResumeAll+0x120>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1cb      	bne.n	800ce80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ceee:	f000 fb55 	bl	800d59c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cef2:	4b1d      	ldr	r3, [pc, #116]	; (800cf68 <xTaskResumeAll+0x134>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d010      	beq.n	800cf20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cefe:	f000 f847 	bl	800cf90 <xTaskIncrementTick>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cf08:	4b16      	ldr	r3, [pc, #88]	; (800cf64 <xTaskResumeAll+0x130>)
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1f1      	bne.n	800cefe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <xTaskResumeAll+0x134>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf20:	4b10      	ldr	r3, [pc, #64]	; (800cf64 <xTaskResumeAll+0x130>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d009      	beq.n	800cf3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf2c:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <xTaskResumeAll+0x138>)
 800cf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf3c:	f001 f9ea 	bl	800e314 <vPortExitCritical>

	return xAlreadyYielded;
 800cf40:	68bb      	ldr	r3, [r7, #8]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20001668 	.word	0x20001668
 800cf50:	20001640 	.word	0x20001640
 800cf54:	20001600 	.word	0x20001600
 800cf58:	20001648 	.word	0x20001648
 800cf5c:	20001170 	.word	0x20001170
 800cf60:	2000116c 	.word	0x2000116c
 800cf64:	20001654 	.word	0x20001654
 800cf68:	20001650 	.word	0x20001650
 800cf6c:	e000ed04 	.word	0xe000ed04

0800cf70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf76:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <xTaskGetTickCount+0x1c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf7c:	687b      	ldr	r3, [r7, #4]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	20001644 	.word	0x20001644

0800cf90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9a:	4b4f      	ldr	r3, [pc, #316]	; (800d0d8 <xTaskIncrementTick+0x148>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 808f 	bne.w	800d0c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfa4:	4b4d      	ldr	r3, [pc, #308]	; (800d0dc <xTaskIncrementTick+0x14c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfac:	4a4b      	ldr	r2, [pc, #300]	; (800d0dc <xTaskIncrementTick+0x14c>)
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d120      	bne.n	800cffa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfb8:	4b49      	ldr	r3, [pc, #292]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	603b      	str	r3, [r7, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <xTaskIncrementTick+0x46>
 800cfd8:	4b41      	ldr	r3, [pc, #260]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	4b41      	ldr	r3, [pc, #260]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a3f      	ldr	r2, [pc, #252]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	4a3f      	ldr	r2, [pc, #252]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	4b3e      	ldr	r3, [pc, #248]	; (800d0e8 <xTaskIncrementTick+0x158>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3301      	adds	r3, #1
 800cff2:	4a3d      	ldr	r2, [pc, #244]	; (800d0e8 <xTaskIncrementTick+0x158>)
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	f000 fad1 	bl	800d59c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cffa:	4b3c      	ldr	r3, [pc, #240]	; (800d0ec <xTaskIncrementTick+0x15c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	429a      	cmp	r2, r3
 800d002:	d349      	bcc.n	800d098 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d004:	4b36      	ldr	r3, [pc, #216]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d00e:	4b37      	ldr	r3, [pc, #220]	; (800d0ec <xTaskIncrementTick+0x15c>)
 800d010:	f04f 32ff 	mov.w	r2, #4294967295
 800d014:	601a      	str	r2, [r3, #0]
					break;
 800d016:	e03f      	b.n	800d098 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d018:	4b31      	ldr	r3, [pc, #196]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d203      	bcs.n	800d038 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d030:	4a2e      	ldr	r2, [pc, #184]	; (800d0ec <xTaskIncrementTick+0x15c>)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d036:	e02f      	b.n	800d098 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	3304      	adds	r3, #4
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe fbc1 	bl	800b7c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d046:	2b00      	cmp	r3, #0
 800d048:	d004      	beq.n	800d054 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3318      	adds	r3, #24
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fe fbb8 	bl	800b7c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d058:	4b25      	ldr	r3, [pc, #148]	; (800d0f0 <xTaskIncrementTick+0x160>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d903      	bls.n	800d068 <xTaskIncrementTick+0xd8>
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	4a22      	ldr	r2, [pc, #136]	; (800d0f0 <xTaskIncrementTick+0x160>)
 800d066:	6013      	str	r3, [r2, #0]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4a1f      	ldr	r2, [pc, #124]	; (800d0f4 <xTaskIncrementTick+0x164>)
 800d076:	441a      	add	r2, r3
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3304      	adds	r3, #4
 800d07c:	4619      	mov	r1, r3
 800d07e:	4610      	mov	r0, r2
 800d080:	f7fe fb43 	bl	800b70a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d088:	4b1b      	ldr	r3, [pc, #108]	; (800d0f8 <xTaskIncrementTick+0x168>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08e:	429a      	cmp	r2, r3
 800d090:	d3b8      	bcc.n	800d004 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d092:	2301      	movs	r3, #1
 800d094:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d096:	e7b5      	b.n	800d004 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d098:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <xTaskIncrementTick+0x168>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09e:	4915      	ldr	r1, [pc, #84]	; (800d0f4 <xTaskIncrementTick+0x164>)
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	440b      	add	r3, r1
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d901      	bls.n	800d0b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0b4:	4b11      	ldr	r3, [pc, #68]	; (800d0fc <xTaskIncrementTick+0x16c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d007      	beq.n	800d0cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	e004      	b.n	800d0cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0c2:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <xTaskIncrementTick+0x170>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	4a0d      	ldr	r2, [pc, #52]	; (800d100 <xTaskIncrementTick+0x170>)
 800d0ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0cc:	697b      	ldr	r3, [r7, #20]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20001668 	.word	0x20001668
 800d0dc:	20001644 	.word	0x20001644
 800d0e0:	200015f8 	.word	0x200015f8
 800d0e4:	200015fc 	.word	0x200015fc
 800d0e8:	20001658 	.word	0x20001658
 800d0ec:	20001660 	.word	0x20001660
 800d0f0:	20001648 	.word	0x20001648
 800d0f4:	20001170 	.word	0x20001170
 800d0f8:	2000116c 	.word	0x2000116c
 800d0fc:	20001654 	.word	0x20001654
 800d100:	20001650 	.word	0x20001650

0800d104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d10a:	4b28      	ldr	r3, [pc, #160]	; (800d1ac <vTaskSwitchContext+0xa8>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d003      	beq.n	800d11a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d112:	4b27      	ldr	r3, [pc, #156]	; (800d1b0 <vTaskSwitchContext+0xac>)
 800d114:	2201      	movs	r2, #1
 800d116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d118:	e041      	b.n	800d19e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d11a:	4b25      	ldr	r3, [pc, #148]	; (800d1b0 <vTaskSwitchContext+0xac>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d120:	4b24      	ldr	r3, [pc, #144]	; (800d1b4 <vTaskSwitchContext+0xb0>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	e010      	b.n	800d14a <vTaskSwitchContext+0x46>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <vTaskSwitchContext+0x40>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	607b      	str	r3, [r7, #4]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <vTaskSwitchContext+0x3e>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3b01      	subs	r3, #1
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	491b      	ldr	r1, [pc, #108]	; (800d1b8 <vTaskSwitchContext+0xb4>)
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	440b      	add	r3, r1
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0e4      	beq.n	800d128 <vTaskSwitchContext+0x24>
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4a13      	ldr	r2, [pc, #76]	; (800d1b8 <vTaskSwitchContext+0xb4>)
 800d16a:	4413      	add	r3, r2
 800d16c:	60bb      	str	r3, [r7, #8]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	605a      	str	r2, [r3, #4]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	3308      	adds	r3, #8
 800d180:	429a      	cmp	r2, r3
 800d182:	d104      	bne.n	800d18e <vTaskSwitchContext+0x8a>
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	605a      	str	r2, [r3, #4]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <vTaskSwitchContext+0xb8>)
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	4a06      	ldr	r2, [pc, #24]	; (800d1b4 <vTaskSwitchContext+0xb0>)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6013      	str	r3, [r2, #0]
}
 800d19e:	bf00      	nop
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	20001668 	.word	0x20001668
 800d1b0:	20001654 	.word	0x20001654
 800d1b4:	20001648 	.word	0x20001648
 800d1b8:	20001170 	.word	0x20001170
 800d1bc:	2000116c 	.word	0x2000116c

0800d1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e6:	4b07      	ldr	r3, [pc, #28]	; (800d204 <vTaskPlaceOnEventList+0x44>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3318      	adds	r3, #24
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7fe faaf 	bl	800b752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	6838      	ldr	r0, [r7, #0]
 800d1f8:	f000 fb8a 	bl	800d910 <prvAddCurrentTaskToDelayedList>
}
 800d1fc:	bf00      	nop
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	2000116c 	.word	0x2000116c

0800d208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10a      	bne.n	800d230 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	617b      	str	r3, [r7, #20]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d230:	4b0a      	ldr	r3, [pc, #40]	; (800d25c <vTaskPlaceOnEventListRestricted+0x54>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3318      	adds	r3, #24
 800d236:	4619      	mov	r1, r3
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7fe fa66 	bl	800b70a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d244:	f04f 33ff 	mov.w	r3, #4294967295
 800d248:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	68b8      	ldr	r0, [r7, #8]
 800d24e:	f000 fb5f 	bl	800d910 <prvAddCurrentTaskToDelayedList>
	}
 800d252:	bf00      	nop
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	2000116c 	.word	0x2000116c

0800d260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10a      	bne.n	800d28c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60fb      	str	r3, [r7, #12]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	3318      	adds	r3, #24
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fa97 	bl	800b7c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d296:	4b1e      	ldr	r3, [pc, #120]	; (800d310 <xTaskRemoveFromEventList+0xb0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d11d      	bne.n	800d2da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fa8e 	bl	800b7c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ac:	4b19      	ldr	r3, [pc, #100]	; (800d314 <xTaskRemoveFromEventList+0xb4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d903      	bls.n	800d2bc <xTaskRemoveFromEventList+0x5c>
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b8:	4a16      	ldr	r2, [pc, #88]	; (800d314 <xTaskRemoveFromEventList+0xb4>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4a13      	ldr	r2, [pc, #76]	; (800d318 <xTaskRemoveFromEventList+0xb8>)
 800d2ca:	441a      	add	r2, r3
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	f7fe fa19 	bl	800b70a <vListInsertEnd>
 800d2d8:	e005      	b.n	800d2e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	3318      	adds	r3, #24
 800d2de:	4619      	mov	r1, r3
 800d2e0:	480e      	ldr	r0, [pc, #56]	; (800d31c <xTaskRemoveFromEventList+0xbc>)
 800d2e2:	f7fe fa12 	bl	800b70a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	; (800d320 <xTaskRemoveFromEventList+0xc0>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d905      	bls.n	800d300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <xTaskRemoveFromEventList+0xc4>)
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	e001      	b.n	800d304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d304:	697b      	ldr	r3, [r7, #20]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20001668 	.word	0x20001668
 800d314:	20001648 	.word	0x20001648
 800d318:	20001170 	.word	0x20001170
 800d31c:	20001600 	.word	0x20001600
 800d320:	2000116c 	.word	0x2000116c
 800d324:	20001654 	.word	0x20001654

0800d328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d330:	4b06      	ldr	r3, [pc, #24]	; (800d34c <vTaskInternalSetTimeOutState+0x24>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d338:	4b05      	ldr	r3, [pc, #20]	; (800d350 <vTaskInternalSetTimeOutState+0x28>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	605a      	str	r2, [r3, #4]
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	20001658 	.word	0x20001658
 800d350:	20001644 	.word	0x20001644

0800d354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	613b      	str	r3, [r7, #16]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	60fb      	str	r3, [r7, #12]
}
 800d392:	bf00      	nop
 800d394:	e7fe      	b.n	800d394 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d396:	f000 ff8d 	bl	800e2b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d39a:	4b1d      	ldr	r3, [pc, #116]	; (800d410 <xTaskCheckForTimeOut+0xbc>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b2:	d102      	bne.n	800d3ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	61fb      	str	r3, [r7, #28]
 800d3b8:	e023      	b.n	800d402 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	4b15      	ldr	r3, [pc, #84]	; (800d414 <xTaskCheckForTimeOut+0xc0>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d007      	beq.n	800d3d6 <xTaskCheckForTimeOut+0x82>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	69ba      	ldr	r2, [r7, #24]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d302      	bcc.n	800d3d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	61fb      	str	r3, [r7, #28]
 800d3d4:	e015      	b.n	800d402 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d20b      	bcs.n	800d3f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	1ad2      	subs	r2, r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff ff9b 	bl	800d328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	61fb      	str	r3, [r7, #28]
 800d3f6:	e004      	b.n	800d402 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3fe:	2301      	movs	r3, #1
 800d400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d402:	f000 ff87 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800d406:	69fb      	ldr	r3, [r7, #28]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3720      	adds	r7, #32
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20001644 	.word	0x20001644
 800d414:	20001658 	.word	0x20001658

0800d418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d418:	b480      	push	{r7}
 800d41a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d41c:	4b03      	ldr	r3, [pc, #12]	; (800d42c <vTaskMissedYield+0x14>)
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
}
 800d422:	bf00      	nop
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	20001654 	.word	0x20001654

0800d430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d438:	f000 f852 	bl	800d4e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <prvIdleTask+0x28>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d9f9      	bls.n	800d438 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d444:	4b05      	ldr	r3, [pc, #20]	; (800d45c <prvIdleTask+0x2c>)
 800d446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d454:	e7f0      	b.n	800d438 <prvIdleTask+0x8>
 800d456:	bf00      	nop
 800d458:	20001170 	.word	0x20001170
 800d45c:	e000ed04 	.word	0xe000ed04

0800d460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d466:	2300      	movs	r3, #0
 800d468:	607b      	str	r3, [r7, #4]
 800d46a:	e00c      	b.n	800d486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	4613      	mov	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4a12      	ldr	r2, [pc, #72]	; (800d4c0 <prvInitialiseTaskLists+0x60>)
 800d478:	4413      	add	r3, r2
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fe f918 	bl	800b6b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3301      	adds	r3, #1
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b37      	cmp	r3, #55	; 0x37
 800d48a:	d9ef      	bls.n	800d46c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d48c:	480d      	ldr	r0, [pc, #52]	; (800d4c4 <prvInitialiseTaskLists+0x64>)
 800d48e:	f7fe f90f 	bl	800b6b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d492:	480d      	ldr	r0, [pc, #52]	; (800d4c8 <prvInitialiseTaskLists+0x68>)
 800d494:	f7fe f90c 	bl	800b6b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d498:	480c      	ldr	r0, [pc, #48]	; (800d4cc <prvInitialiseTaskLists+0x6c>)
 800d49a:	f7fe f909 	bl	800b6b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d49e:	480c      	ldr	r0, [pc, #48]	; (800d4d0 <prvInitialiseTaskLists+0x70>)
 800d4a0:	f7fe f906 	bl	800b6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4a4:	480b      	ldr	r0, [pc, #44]	; (800d4d4 <prvInitialiseTaskLists+0x74>)
 800d4a6:	f7fe f903 	bl	800b6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	; (800d4d8 <prvInitialiseTaskLists+0x78>)
 800d4ac:	4a05      	ldr	r2, [pc, #20]	; (800d4c4 <prvInitialiseTaskLists+0x64>)
 800d4ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <prvInitialiseTaskLists+0x7c>)
 800d4b2:	4a05      	ldr	r2, [pc, #20]	; (800d4c8 <prvInitialiseTaskLists+0x68>)
 800d4b4:	601a      	str	r2, [r3, #0]
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20001170 	.word	0x20001170
 800d4c4:	200015d0 	.word	0x200015d0
 800d4c8:	200015e4 	.word	0x200015e4
 800d4cc:	20001600 	.word	0x20001600
 800d4d0:	20001614 	.word	0x20001614
 800d4d4:	2000162c 	.word	0x2000162c
 800d4d8:	200015f8 	.word	0x200015f8
 800d4dc:	200015fc 	.word	0x200015fc

0800d4e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4e6:	e019      	b.n	800d51c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4e8:	f000 fee4 	bl	800e2b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ec:	4b10      	ldr	r3, [pc, #64]	; (800d530 <prvCheckTasksWaitingTermination+0x50>)
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	3304      	adds	r3, #4
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe f963 	bl	800b7c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	; (800d534 <prvCheckTasksWaitingTermination+0x54>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3b01      	subs	r3, #1
 800d504:	4a0b      	ldr	r2, [pc, #44]	; (800d534 <prvCheckTasksWaitingTermination+0x54>)
 800d506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d508:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <prvCheckTasksWaitingTermination+0x58>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	4a0a      	ldr	r2, [pc, #40]	; (800d538 <prvCheckTasksWaitingTermination+0x58>)
 800d510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d512:	f000 feff 	bl	800e314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f810 	bl	800d53c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d51c:	4b06      	ldr	r3, [pc, #24]	; (800d538 <prvCheckTasksWaitingTermination+0x58>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e1      	bne.n	800d4e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d524:	bf00      	nop
 800d526:	bf00      	nop
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	20001614 	.word	0x20001614
 800d534:	20001640 	.word	0x20001640
 800d538:	20001628 	.word	0x20001628

0800d53c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d108      	bne.n	800d560 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d552:	4618      	mov	r0, r3
 800d554:	f001 f89c 	bl	800e690 <vPortFree>
				vPortFree( pxTCB );
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 f899 	bl	800e690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d55e:	e018      	b.n	800d592 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d566:	2b01      	cmp	r3, #1
 800d568:	d103      	bne.n	800d572 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f001 f890 	bl	800e690 <vPortFree>
	}
 800d570:	e00f      	b.n	800d592 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d00a      	beq.n	800d592 <prvDeleteTCB+0x56>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	60fb      	str	r3, [r7, #12]
}
 800d58e:	bf00      	nop
 800d590:	e7fe      	b.n	800d590 <prvDeleteTCB+0x54>
	}
 800d592:	bf00      	nop
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
	...

0800d59c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5a2:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <prvResetNextTaskUnblockTime+0x38>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d104      	bne.n	800d5b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5ac:	4b0a      	ldr	r3, [pc, #40]	; (800d5d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5b4:	e008      	b.n	800d5c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b6:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <prvResetNextTaskUnblockTime+0x38>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	4a04      	ldr	r2, [pc, #16]	; (800d5d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d5c6:	6013      	str	r3, [r2, #0]
}
 800d5c8:	bf00      	nop
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	200015f8 	.word	0x200015f8
 800d5d8:	20001660 	.word	0x20001660

0800d5dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d5e2:	4b05      	ldr	r3, [pc, #20]	; (800d5f8 <xTaskGetCurrentTaskHandle+0x1c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d5e8:	687b      	ldr	r3, [r7, #4]
	}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	2000116c 	.word	0x2000116c

0800d5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d602:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <xTaskGetSchedulerState+0x34>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d60a:	2301      	movs	r3, #1
 800d60c:	607b      	str	r3, [r7, #4]
 800d60e:	e008      	b.n	800d622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d610:	4b08      	ldr	r3, [pc, #32]	; (800d634 <xTaskGetSchedulerState+0x38>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d102      	bne.n	800d61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d618:	2302      	movs	r3, #2
 800d61a:	607b      	str	r3, [r7, #4]
 800d61c:	e001      	b.n	800d622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d61e:	2300      	movs	r3, #0
 800d620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d622:	687b      	ldr	r3, [r7, #4]
	}
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	2000164c 	.word	0x2000164c
 800d634:	20001668 	.word	0x20001668

0800d638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d644:	2300      	movs	r3, #0
 800d646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d051      	beq.n	800d6f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d652:	4b2a      	ldr	r3, [pc, #168]	; (800d6fc <xTaskPriorityInherit+0xc4>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	429a      	cmp	r2, r3
 800d65a:	d241      	bcs.n	800d6e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	db06      	blt.n	800d672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d664:	4b25      	ldr	r3, [pc, #148]	; (800d6fc <xTaskPriorityInherit+0xc4>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	6959      	ldr	r1, [r3, #20]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4a1f      	ldr	r2, [pc, #124]	; (800d700 <xTaskPriorityInherit+0xc8>)
 800d684:	4413      	add	r3, r2
 800d686:	4299      	cmp	r1, r3
 800d688:	d122      	bne.n	800d6d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe f898 	bl	800b7c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d694:	4b19      	ldr	r3, [pc, #100]	; (800d6fc <xTaskPriorityInherit+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a2:	4b18      	ldr	r3, [pc, #96]	; (800d704 <xTaskPriorityInherit+0xcc>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d903      	bls.n	800d6b2 <xTaskPriorityInherit+0x7a>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	4a15      	ldr	r2, [pc, #84]	; (800d704 <xTaskPriorityInherit+0xcc>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4a10      	ldr	r2, [pc, #64]	; (800d700 <xTaskPriorityInherit+0xc8>)
 800d6c0:	441a      	add	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	f7fe f81e 	bl	800b70a <vListInsertEnd>
 800d6ce:	e004      	b.n	800d6da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <xTaskPriorityInherit+0xc4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	60fb      	str	r3, [r7, #12]
 800d6de:	e008      	b.n	800d6f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <xTaskPriorityInherit+0xc4>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d201      	bcs.n	800d6f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	2000116c 	.word	0x2000116c
 800d700:	20001170 	.word	0x20001170
 800d704:	20001648 	.word	0x20001648

0800d708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d714:	2300      	movs	r3, #0
 800d716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d056      	beq.n	800d7cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d71e:	4b2e      	ldr	r3, [pc, #184]	; (800d7d8 <xTaskPriorityDisinherit+0xd0>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	429a      	cmp	r2, r3
 800d726:	d00a      	beq.n	800d73e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	60fb      	str	r3, [r7, #12]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10a      	bne.n	800d75c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60bb      	str	r3, [r7, #8]
}
 800d758:	bf00      	nop
 800d75a:	e7fe      	b.n	800d75a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d760:	1e5a      	subs	r2, r3, #1
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76e:	429a      	cmp	r2, r3
 800d770:	d02c      	beq.n	800d7cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d776:	2b00      	cmp	r3, #0
 800d778:	d128      	bne.n	800d7cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	3304      	adds	r3, #4
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe f820 	bl	800b7c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79c:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <xTaskPriorityDisinherit+0xd4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d903      	bls.n	800d7ac <xTaskPriorityDisinherit+0xa4>
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a8:	4a0c      	ldr	r2, [pc, #48]	; (800d7dc <xTaskPriorityDisinherit+0xd4>)
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <xTaskPriorityDisinherit+0xd8>)
 800d7ba:	441a      	add	r2, r3
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	3304      	adds	r3, #4
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	f7fd ffa1 	bl	800b70a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7cc:	697b      	ldr	r3, [r7, #20]
	}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	2000116c 	.word	0x2000116c
 800d7dc:	20001648 	.word	0x20001648
 800d7e0:	20001170 	.word	0x20001170

0800d7e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d06a      	beq.n	800d8d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	60fb      	str	r3, [r7, #12]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d902      	bls.n	800d82a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	61fb      	str	r3, [r7, #28]
 800d828:	e002      	b.n	800d830 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d82e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	69fa      	ldr	r2, [r7, #28]
 800d836:	429a      	cmp	r2, r3
 800d838:	d04b      	beq.n	800d8d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	429a      	cmp	r2, r3
 800d842:	d146      	bne.n	800d8d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d844:	4b25      	ldr	r3, [pc, #148]	; (800d8dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d10a      	bne.n	800d864 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60bb      	str	r3, [r7, #8]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	2b00      	cmp	r3, #0
 800d876:	db04      	blt.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	6959      	ldr	r1, [r3, #20]
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4a13      	ldr	r2, [pc, #76]	; (800d8e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d892:	4413      	add	r3, r2
 800d894:	4299      	cmp	r1, r3
 800d896:	d11c      	bne.n	800d8d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fd ff91 	bl	800b7c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d903      	bls.n	800d8b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	4a0c      	ldr	r2, [pc, #48]	; (800d8e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4a07      	ldr	r2, [pc, #28]	; (800d8e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8c4:	441a      	add	r2, r3
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7fd ff1c 	bl	800b70a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8d2:	bf00      	nop
 800d8d4:	3720      	adds	r7, #32
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	2000116c 	.word	0x2000116c
 800d8e0:	20001170 	.word	0x20001170
 800d8e4:	20001648 	.word	0x20001648

0800d8e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d8e8:	b480      	push	{r7}
 800d8ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d8ec:	4b07      	ldr	r3, [pc, #28]	; (800d90c <pvTaskIncrementMutexHeldCount+0x24>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d004      	beq.n	800d8fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8f4:	4b05      	ldr	r3, [pc, #20]	; (800d90c <pvTaskIncrementMutexHeldCount+0x24>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8fa:	3201      	adds	r2, #1
 800d8fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d8fe:	4b03      	ldr	r3, [pc, #12]	; (800d90c <pvTaskIncrementMutexHeldCount+0x24>)
 800d900:	681b      	ldr	r3, [r3, #0]
	}
 800d902:	4618      	mov	r0, r3
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	2000116c 	.word	0x2000116c

0800d910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d91a:	4b21      	ldr	r3, [pc, #132]	; (800d9a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d920:	4b20      	ldr	r3, [pc, #128]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fd ff4c 	bl	800b7c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d932:	d10a      	bne.n	800d94a <prvAddCurrentTaskToDelayedList+0x3a>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d007      	beq.n	800d94a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d93a:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3304      	adds	r3, #4
 800d940:	4619      	mov	r1, r3
 800d942:	4819      	ldr	r0, [pc, #100]	; (800d9a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d944:	f7fd fee1 	bl	800b70a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d948:	e026      	b.n	800d998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4413      	add	r3, r2
 800d950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d209      	bcs.n	800d976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d962:	4b12      	ldr	r3, [pc, #72]	; (800d9ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	3304      	adds	r3, #4
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7fd feef 	bl	800b752 <vListInsert>
}
 800d974:	e010      	b.n	800d998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d976:	4b0e      	ldr	r3, [pc, #56]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3304      	adds	r3, #4
 800d980:	4619      	mov	r1, r3
 800d982:	4610      	mov	r0, r2
 800d984:	f7fd fee5 	bl	800b752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d988:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d202      	bcs.n	800d998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d992:	4a08      	ldr	r2, [pc, #32]	; (800d9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	6013      	str	r3, [r2, #0]
}
 800d998:	bf00      	nop
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20001644 	.word	0x20001644
 800d9a4:	2000116c 	.word	0x2000116c
 800d9a8:	2000162c 	.word	0x2000162c
 800d9ac:	200015fc 	.word	0x200015fc
 800d9b0:	200015f8 	.word	0x200015f8
 800d9b4:	20001660 	.word	0x20001660

0800d9b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9c2:	f000 fb07 	bl	800dfd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9c6:	4b1c      	ldr	r3, [pc, #112]	; (800da38 <xTimerCreateTimerTask+0x80>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d021      	beq.n	800da12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9d6:	1d3a      	adds	r2, r7, #4
 800d9d8:	f107 0108 	add.w	r1, r7, #8
 800d9dc:	f107 030c 	add.w	r3, r7, #12
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fd fe4b 	bl	800b67c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9e6:	6879      	ldr	r1, [r7, #4]
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	9202      	str	r2, [sp, #8]
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	460a      	mov	r2, r1
 800d9f8:	4910      	ldr	r1, [pc, #64]	; (800da3c <xTimerCreateTimerTask+0x84>)
 800d9fa:	4811      	ldr	r0, [pc, #68]	; (800da40 <xTimerCreateTimerTask+0x88>)
 800d9fc:	f7fe ffd0 	bl	800c9a0 <xTaskCreateStatic>
 800da00:	4603      	mov	r3, r0
 800da02:	4a10      	ldr	r2, [pc, #64]	; (800da44 <xTimerCreateTimerTask+0x8c>)
 800da04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da06:	4b0f      	ldr	r3, [pc, #60]	; (800da44 <xTimerCreateTimerTask+0x8c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da0e:	2301      	movs	r3, #1
 800da10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10a      	bne.n	800da2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	613b      	str	r3, [r7, #16]
}
 800da2a:	bf00      	nop
 800da2c:	e7fe      	b.n	800da2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da2e:	697b      	ldr	r3, [r7, #20]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	2000169c 	.word	0x2000169c
 800da3c:	08010314 	.word	0x08010314
 800da40:	0800db7d 	.word	0x0800db7d
 800da44:	200016a0 	.word	0x200016a0

0800da48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08a      	sub	sp, #40	; 0x28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da56:	2300      	movs	r3, #0
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	623b      	str	r3, [r7, #32]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da76:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <xTimerGenericCommand+0x98>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d02a      	beq.n	800dad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b05      	cmp	r3, #5
 800da8e:	dc18      	bgt.n	800dac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da90:	f7ff fdb4 	bl	800d5fc <xTaskGetSchedulerState>
 800da94:	4603      	mov	r3, r0
 800da96:	2b02      	cmp	r3, #2
 800da98:	d109      	bne.n	800daae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da9a:	4b11      	ldr	r3, [pc, #68]	; (800dae0 <xTimerGenericCommand+0x98>)
 800da9c:	6818      	ldr	r0, [r3, #0]
 800da9e:	f107 0110 	add.w	r1, r7, #16
 800daa2:	2300      	movs	r3, #0
 800daa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa6:	f7fe f915 	bl	800bcd4 <xQueueGenericSend>
 800daaa:	6278      	str	r0, [r7, #36]	; 0x24
 800daac:	e012      	b.n	800dad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daae:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <xTimerGenericCommand+0x98>)
 800dab0:	6818      	ldr	r0, [r3, #0]
 800dab2:	f107 0110 	add.w	r1, r7, #16
 800dab6:	2300      	movs	r3, #0
 800dab8:	2200      	movs	r2, #0
 800daba:	f7fe f90b 	bl	800bcd4 <xQueueGenericSend>
 800dabe:	6278      	str	r0, [r7, #36]	; 0x24
 800dac0:	e008      	b.n	800dad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dac2:	4b07      	ldr	r3, [pc, #28]	; (800dae0 <xTimerGenericCommand+0x98>)
 800dac4:	6818      	ldr	r0, [r3, #0]
 800dac6:	f107 0110 	add.w	r1, r7, #16
 800daca:	2300      	movs	r3, #0
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	f7fe f9ff 	bl	800bed0 <xQueueGenericSendFromISR>
 800dad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3728      	adds	r7, #40	; 0x28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000169c 	.word	0x2000169c

0800dae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af02      	add	r7, sp, #8
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daee:	4b22      	ldr	r3, [pc, #136]	; (800db78 <prvProcessExpiredTimer+0x94>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fd fe61 	bl	800b7c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db08:	f003 0304 	and.w	r3, r3, #4
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d022      	beq.n	800db56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	699a      	ldr	r2, [r3, #24]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	18d1      	adds	r1, r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	6978      	ldr	r0, [r7, #20]
 800db1e:	f000 f8d1 	bl	800dcc4 <prvInsertTimerInActiveList>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01f      	beq.n	800db68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db28:	2300      	movs	r3, #0
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	2300      	movs	r3, #0
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	2100      	movs	r1, #0
 800db32:	6978      	ldr	r0, [r7, #20]
 800db34:	f7ff ff88 	bl	800da48 <xTimerGenericCommand>
 800db38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d113      	bne.n	800db68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	60fb      	str	r3, [r7, #12]
}
 800db52:	bf00      	nop
 800db54:	e7fe      	b.n	800db54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db5c:	f023 0301 	bic.w	r3, r3, #1
 800db60:	b2da      	uxtb	r2, r3
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	6978      	ldr	r0, [r7, #20]
 800db6e:	4798      	blx	r3
}
 800db70:	bf00      	nop
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	20001694 	.word	0x20001694

0800db7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db84:	f107 0308 	add.w	r3, r7, #8
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f857 	bl	800dc3c <prvGetNextExpireTime>
 800db8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f803 	bl	800dba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db9a:	f000 f8d5 	bl	800dd48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db9e:	e7f1      	b.n	800db84 <prvTimerTask+0x8>

0800dba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbaa:	f7ff f935 	bl	800ce18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbae:	f107 0308 	add.w	r3, r7, #8
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f866 	bl	800dc84 <prvSampleTimeNow>
 800dbb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d130      	bne.n	800dc22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10a      	bne.n	800dbdc <prvProcessTimerOrBlockTask+0x3c>
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d806      	bhi.n	800dbdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbce:	f7ff f931 	bl	800ce34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbd2:	68f9      	ldr	r1, [r7, #12]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ff85 	bl	800dae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbda:	e024      	b.n	800dc26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d008      	beq.n	800dbf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbe2:	4b13      	ldr	r3, [pc, #76]	; (800dc30 <prvProcessTimerOrBlockTask+0x90>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <prvProcessTimerOrBlockTask+0x50>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <prvProcessTimerOrBlockTask+0x52>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbf4:	4b0f      	ldr	r3, [pc, #60]	; (800dc34 <prvProcessTimerOrBlockTask+0x94>)
 800dbf6:	6818      	ldr	r0, [r3, #0]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	4619      	mov	r1, r3
 800dc02:	f7fe fe99 	bl	800c938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc06:	f7ff f915 	bl	800ce34 <xTaskResumeAll>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10a      	bne.n	800dc26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc10:	4b09      	ldr	r3, [pc, #36]	; (800dc38 <prvProcessTimerOrBlockTask+0x98>)
 800dc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	f3bf 8f6f 	isb	sy
}
 800dc20:	e001      	b.n	800dc26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc22:	f7ff f907 	bl	800ce34 <xTaskResumeAll>
}
 800dc26:	bf00      	nop
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	20001698 	.word	0x20001698
 800dc34:	2000169c 	.word	0x2000169c
 800dc38:	e000ed04 	.word	0xe000ed04

0800dc3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc44:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <prvGetNextExpireTime+0x44>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <prvGetNextExpireTime+0x16>
 800dc4e:	2201      	movs	r2, #1
 800dc50:	e000      	b.n	800dc54 <prvGetNextExpireTime+0x18>
 800dc52:	2200      	movs	r2, #0
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc60:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <prvGetNextExpireTime+0x44>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	60fb      	str	r3, [r7, #12]
 800dc6a:	e001      	b.n	800dc70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc70:	68fb      	ldr	r3, [r7, #12]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	20001694 	.word	0x20001694

0800dc84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc8c:	f7ff f970 	bl	800cf70 <xTaskGetTickCount>
 800dc90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc92:	4b0b      	ldr	r3, [pc, #44]	; (800dcc0 <prvSampleTimeNow+0x3c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d205      	bcs.n	800dca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc9c:	f000 f936 	bl	800df0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	e002      	b.n	800dcae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcae:	4a04      	ldr	r2, [pc, #16]	; (800dcc0 <prvSampleTimeNow+0x3c>)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200016a4 	.word	0x200016a4

0800dcc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d812      	bhi.n	800dd10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d302      	bcc.n	800dcfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	617b      	str	r3, [r7, #20]
 800dcfc:	e01b      	b.n	800dd36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcfe:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <prvInsertTimerInActiveList+0x7c>)
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3304      	adds	r3, #4
 800dd06:	4619      	mov	r1, r3
 800dd08:	4610      	mov	r0, r2
 800dd0a:	f7fd fd22 	bl	800b752 <vListInsert>
 800dd0e:	e012      	b.n	800dd36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d206      	bcs.n	800dd26 <prvInsertTimerInActiveList+0x62>
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d302      	bcc.n	800dd26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd20:	2301      	movs	r3, #1
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	e007      	b.n	800dd36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd26:	4b07      	ldr	r3, [pc, #28]	; (800dd44 <prvInsertTimerInActiveList+0x80>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4610      	mov	r0, r2
 800dd32:	f7fd fd0e 	bl	800b752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd36:	697b      	ldr	r3, [r7, #20]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20001698 	.word	0x20001698
 800dd44:	20001694 	.word	0x20001694

0800dd48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08e      	sub	sp, #56	; 0x38
 800dd4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd4e:	e0ca      	b.n	800dee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	da18      	bge.n	800dd88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd56:	1d3b      	adds	r3, r7, #4
 800dd58:	3304      	adds	r3, #4
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10a      	bne.n	800dd78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	61fb      	str	r3, [r7, #28]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd7e:	6850      	ldr	r0, [r2, #4]
 800dd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd82:	6892      	ldr	r2, [r2, #8]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f2c0 80aa 	blt.w	800dee4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	695b      	ldr	r3, [r3, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d004      	beq.n	800dda6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fd fd0f 	bl	800b7c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dda6:	463b      	mov	r3, r7
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff ff6b 	bl	800dc84 <prvSampleTimeNow>
 800ddae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b09      	cmp	r3, #9
 800ddb4:	f200 8097 	bhi.w	800dee6 <prvProcessReceivedCommands+0x19e>
 800ddb8:	a201      	add	r2, pc, #4	; (adr r2, 800ddc0 <prvProcessReceivedCommands+0x78>)
 800ddba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbe:	bf00      	nop
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800dde9 	.word	0x0800dde9
 800ddc8:	0800dde9 	.word	0x0800dde9
 800ddcc:	0800de5d 	.word	0x0800de5d
 800ddd0:	0800de71 	.word	0x0800de71
 800ddd4:	0800debb 	.word	0x0800debb
 800ddd8:	0800dde9 	.word	0x0800dde9
 800dddc:	0800dde9 	.word	0x0800dde9
 800dde0:	0800de5d 	.word	0x0800de5d
 800dde4:	0800de71 	.word	0x0800de71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddee:	f043 0301 	orr.w	r3, r3, #1
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	18d1      	adds	r1, r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de08:	f7ff ff5c 	bl	800dcc4 <prvInsertTimerInActiveList>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d069      	beq.n	800dee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de20:	f003 0304 	and.w	r3, r3, #4
 800de24:	2b00      	cmp	r3, #0
 800de26:	d05e      	beq.n	800dee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	441a      	add	r2, r3
 800de30:	2300      	movs	r3, #0
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	2300      	movs	r3, #0
 800de36:	2100      	movs	r1, #0
 800de38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de3a:	f7ff fe05 	bl	800da48 <xTimerGenericCommand>
 800de3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de40:	6a3b      	ldr	r3, [r7, #32]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d14f      	bne.n	800dee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	61bb      	str	r3, [r7, #24]
}
 800de58:	bf00      	nop
 800de5a:	e7fe      	b.n	800de5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de62:	f023 0301 	bic.w	r3, r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de6e:	e03a      	b.n	800dee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de76:	f043 0301 	orr.w	r3, r3, #1
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10a      	bne.n	800dea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de94:	f383 8811 	msr	BASEPRI, r3
 800de98:	f3bf 8f6f 	isb	sy
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	617b      	str	r3, [r7, #20]
}
 800dea2:	bf00      	nop
 800dea4:	e7fe      	b.n	800dea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	699a      	ldr	r2, [r3, #24]
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	18d1      	adds	r1, r2, r3
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deb4:	f7ff ff06 	bl	800dcc4 <prvInsertTimerInActiveList>
					break;
 800deb8:	e015      	b.n	800dee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dec0:	f003 0302 	and.w	r3, r3, #2
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d103      	bne.n	800ded0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deca:	f000 fbe1 	bl	800e690 <vPortFree>
 800dece:	e00a      	b.n	800dee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ded6:	f023 0301 	bic.w	r3, r3, #1
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dee2:	e000      	b.n	800dee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dee6:	4b08      	ldr	r3, [pc, #32]	; (800df08 <prvProcessReceivedCommands+0x1c0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	1d39      	adds	r1, r7, #4
 800deec:	2200      	movs	r2, #0
 800deee:	4618      	mov	r0, r3
 800def0:	f7fe f916 	bl	800c120 <xQueueReceive>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	f47f af2a 	bne.w	800dd50 <prvProcessReceivedCommands+0x8>
	}
}
 800defc:	bf00      	nop
 800defe:	bf00      	nop
 800df00:	3730      	adds	r7, #48	; 0x30
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	2000169c 	.word	0x2000169c

0800df0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df12:	e048      	b.n	800dfa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df14:	4b2d      	ldr	r3, [pc, #180]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df1e:	4b2b      	ldr	r3, [pc, #172]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fd fc49 	bl	800b7c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6a1b      	ldr	r3, [r3, #32]
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df40:	f003 0304 	and.w	r3, r3, #4
 800df44:	2b00      	cmp	r3, #0
 800df46:	d02e      	beq.n	800dfa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	4413      	add	r3, r2
 800df50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	429a      	cmp	r2, r3
 800df58:	d90e      	bls.n	800df78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df66:	4b19      	ldr	r3, [pc, #100]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3304      	adds	r3, #4
 800df6e:	4619      	mov	r1, r3
 800df70:	4610      	mov	r0, r2
 800df72:	f7fd fbee 	bl	800b752 <vListInsert>
 800df76:	e016      	b.n	800dfa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df78:	2300      	movs	r3, #0
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	2300      	movs	r3, #0
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	2100      	movs	r1, #0
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f7ff fd60 	bl	800da48 <xTimerGenericCommand>
 800df88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10a      	bne.n	800dfa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	603b      	str	r3, [r7, #0]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfa6:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1b1      	bne.n	800df14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfb0:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dfb6:	4b06      	ldr	r3, [pc, #24]	; (800dfd0 <prvSwitchTimerLists+0xc4>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a04      	ldr	r2, [pc, #16]	; (800dfcc <prvSwitchTimerLists+0xc0>)
 800dfbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dfbe:	4a04      	ldr	r2, [pc, #16]	; (800dfd0 <prvSwitchTimerLists+0xc4>)
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	6013      	str	r3, [r2, #0]
}
 800dfc4:	bf00      	nop
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20001694 	.word	0x20001694
 800dfd0:	20001698 	.word	0x20001698

0800dfd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfda:	f000 f96b 	bl	800e2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfde:	4b15      	ldr	r3, [pc, #84]	; (800e034 <prvCheckForValidListAndQueue+0x60>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d120      	bne.n	800e028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfe6:	4814      	ldr	r0, [pc, #80]	; (800e038 <prvCheckForValidListAndQueue+0x64>)
 800dfe8:	f7fd fb62 	bl	800b6b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfec:	4813      	ldr	r0, [pc, #76]	; (800e03c <prvCheckForValidListAndQueue+0x68>)
 800dfee:	f7fd fb5f 	bl	800b6b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dff2:	4b13      	ldr	r3, [pc, #76]	; (800e040 <prvCheckForValidListAndQueue+0x6c>)
 800dff4:	4a10      	ldr	r2, [pc, #64]	; (800e038 <prvCheckForValidListAndQueue+0x64>)
 800dff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dff8:	4b12      	ldr	r3, [pc, #72]	; (800e044 <prvCheckForValidListAndQueue+0x70>)
 800dffa:	4a10      	ldr	r2, [pc, #64]	; (800e03c <prvCheckForValidListAndQueue+0x68>)
 800dffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dffe:	2300      	movs	r3, #0
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	4b11      	ldr	r3, [pc, #68]	; (800e048 <prvCheckForValidListAndQueue+0x74>)
 800e004:	4a11      	ldr	r2, [pc, #68]	; (800e04c <prvCheckForValidListAndQueue+0x78>)
 800e006:	2110      	movs	r1, #16
 800e008:	200a      	movs	r0, #10
 800e00a:	f7fd fc6d 	bl	800b8e8 <xQueueGenericCreateStatic>
 800e00e:	4603      	mov	r3, r0
 800e010:	4a08      	ldr	r2, [pc, #32]	; (800e034 <prvCheckForValidListAndQueue+0x60>)
 800e012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e014:	4b07      	ldr	r3, [pc, #28]	; (800e034 <prvCheckForValidListAndQueue+0x60>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d005      	beq.n	800e028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e01c:	4b05      	ldr	r3, [pc, #20]	; (800e034 <prvCheckForValidListAndQueue+0x60>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	490b      	ldr	r1, [pc, #44]	; (800e050 <prvCheckForValidListAndQueue+0x7c>)
 800e022:	4618      	mov	r0, r3
 800e024:	f7fe fc34 	bl	800c890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e028:	f000 f974 	bl	800e314 <vPortExitCritical>
}
 800e02c:	bf00      	nop
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	2000169c 	.word	0x2000169c
 800e038:	2000166c 	.word	0x2000166c
 800e03c:	20001680 	.word	0x20001680
 800e040:	20001694 	.word	0x20001694
 800e044:	20001698 	.word	0x20001698
 800e048:	20001748 	.word	0x20001748
 800e04c:	200016a8 	.word	0x200016a8
 800e050:	0801031c 	.word	0x0801031c

0800e054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3b04      	subs	r3, #4
 800e064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3b04      	subs	r3, #4
 800e072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f023 0201 	bic.w	r2, r3, #1
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3b04      	subs	r3, #4
 800e082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e084:	4a0c      	ldr	r2, [pc, #48]	; (800e0b8 <pxPortInitialiseStack+0x64>)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	3b14      	subs	r3, #20
 800e08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3b04      	subs	r3, #4
 800e09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f06f 0202 	mvn.w	r2, #2
 800e0a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	3b20      	subs	r3, #32
 800e0a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	0800e0bd 	.word	0x0800e0bd

0800e0bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0c6:	4b12      	ldr	r3, [pc, #72]	; (800e110 <prvTaskExitError+0x54>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ce:	d00a      	beq.n	800e0e6 <prvTaskExitError+0x2a>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	60fb      	str	r3, [r7, #12]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <prvTaskExitError+0x28>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	60bb      	str	r3, [r7, #8]
}
 800e0f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0fa:	bf00      	nop
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d0fc      	beq.n	800e0fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	20000258 	.word	0x20000258
	...

0800e120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <pxCurrentTCBConst2>)
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	6808      	ldr	r0, [r1, #0]
 800e126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12a:	f380 8809 	msr	PSP, r0
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f380 8811 	msr	BASEPRI, r0
 800e13a:	4770      	bx	lr
 800e13c:	f3af 8000 	nop.w

0800e140 <pxCurrentTCBConst2>:
 800e140:	2000116c 	.word	0x2000116c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e144:	bf00      	nop
 800e146:	bf00      	nop

0800e148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e148:	4808      	ldr	r0, [pc, #32]	; (800e16c <prvPortStartFirstTask+0x24>)
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	6800      	ldr	r0, [r0, #0]
 800e14e:	f380 8808 	msr	MSP, r0
 800e152:	f04f 0000 	mov.w	r0, #0
 800e156:	f380 8814 	msr	CONTROL, r0
 800e15a:	b662      	cpsie	i
 800e15c:	b661      	cpsie	f
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	df00      	svc	0
 800e168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e16a:	bf00      	nop
 800e16c:	e000ed08 	.word	0xe000ed08

0800e170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e176:	4b46      	ldr	r3, [pc, #280]	; (800e290 <xPortStartScheduler+0x120>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a46      	ldr	r2, [pc, #280]	; (800e294 <xPortStartScheduler+0x124>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d10a      	bne.n	800e196 <xPortStartScheduler+0x26>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	613b      	str	r3, [r7, #16]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e196:	4b3e      	ldr	r3, [pc, #248]	; (800e290 <xPortStartScheduler+0x120>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a3f      	ldr	r2, [pc, #252]	; (800e298 <xPortStartScheduler+0x128>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d10a      	bne.n	800e1b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	60fb      	str	r3, [r7, #12]
}
 800e1b2:	bf00      	nop
 800e1b4:	e7fe      	b.n	800e1b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1b6:	4b39      	ldr	r3, [pc, #228]	; (800e29c <xPortStartScheduler+0x12c>)
 800e1b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	22ff      	movs	r2, #255	; 0xff
 800e1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	4b31      	ldr	r3, [pc, #196]	; (800e2a0 <xPortStartScheduler+0x130>)
 800e1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1de:	4b31      	ldr	r3, [pc, #196]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1e0:	2207      	movs	r2, #7
 800e1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1e4:	e009      	b.n	800e1fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e1e6:	4b2f      	ldr	r3, [pc, #188]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	4a2d      	ldr	r2, [pc, #180]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1f0:	78fb      	ldrb	r3, [r7, #3]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e202:	2b80      	cmp	r3, #128	; 0x80
 800e204:	d0ef      	beq.n	800e1e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e206:	4b27      	ldr	r3, [pc, #156]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f1c3 0307 	rsb	r3, r3, #7
 800e20e:	2b04      	cmp	r3, #4
 800e210:	d00a      	beq.n	800e228 <xPortStartScheduler+0xb8>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	60bb      	str	r3, [r7, #8]
}
 800e224:	bf00      	nop
 800e226:	e7fe      	b.n	800e226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e228:	4b1e      	ldr	r3, [pc, #120]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	021b      	lsls	r3, r3, #8
 800e22e:	4a1d      	ldr	r2, [pc, #116]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e232:	4b1c      	ldr	r3, [pc, #112]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e23a:	4a1a      	ldr	r2, [pc, #104]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e23c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e246:	4b18      	ldr	r3, [pc, #96]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a17      	ldr	r2, [pc, #92]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e24c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e252:	4b15      	ldr	r3, [pc, #84]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a14      	ldr	r2, [pc, #80]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e25c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e25e:	f000 f8dd 	bl	800e41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e262:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <xPortStartScheduler+0x13c>)
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e268:	f000 f8fc 	bl	800e464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e26c:	4b10      	ldr	r3, [pc, #64]	; (800e2b0 <xPortStartScheduler+0x140>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0f      	ldr	r2, [pc, #60]	; (800e2b0 <xPortStartScheduler+0x140>)
 800e272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e278:	f7ff ff66 	bl	800e148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e27c:	f7fe ff42 	bl	800d104 <vTaskSwitchContext>
	prvTaskExitError();
 800e280:	f7ff ff1c 	bl	800e0bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	e000ed00 	.word	0xe000ed00
 800e294:	410fc271 	.word	0x410fc271
 800e298:	410fc270 	.word	0x410fc270
 800e29c:	e000e400 	.word	0xe000e400
 800e2a0:	20001798 	.word	0x20001798
 800e2a4:	2000179c 	.word	0x2000179c
 800e2a8:	e000ed20 	.word	0xe000ed20
 800e2ac:	20000258 	.word	0x20000258
 800e2b0:	e000ef34 	.word	0xe000ef34

0800e2b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	f383 8811 	msr	BASEPRI, r3
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	f3bf 8f4f 	dsb	sy
 800e2ca:	607b      	str	r3, [r7, #4]
}
 800e2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <vPortEnterCritical+0x58>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <vPortEnterCritical+0x58>)
 800e2d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2d8:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <vPortEnterCritical+0x58>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d10f      	bne.n	800e300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <vPortEnterCritical+0x5c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <vPortEnterCritical+0x4c>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	603b      	str	r3, [r7, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	e7fe      	b.n	800e2fe <vPortEnterCritical+0x4a>
	}
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	20000258 	.word	0x20000258
 800e310:	e000ed04 	.word	0xe000ed04

0800e314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e31a:	4b12      	ldr	r3, [pc, #72]	; (800e364 <vPortExitCritical+0x50>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <vPortExitCritical+0x24>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	607b      	str	r3, [r7, #4]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e338:	4b0a      	ldr	r3, [pc, #40]	; (800e364 <vPortExitCritical+0x50>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	4a09      	ldr	r2, [pc, #36]	; (800e364 <vPortExitCritical+0x50>)
 800e340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e342:	4b08      	ldr	r3, [pc, #32]	; (800e364 <vPortExitCritical+0x50>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d105      	bne.n	800e356 <vPortExitCritical+0x42>
 800e34a:	2300      	movs	r3, #0
 800e34c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	f383 8811 	msr	BASEPRI, r3
}
 800e354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e356:	bf00      	nop
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20000258 	.word	0x20000258
	...

0800e370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e370:	f3ef 8009 	mrs	r0, PSP
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	4b15      	ldr	r3, [pc, #84]	; (800e3d0 <pxCurrentTCBConst>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	f01e 0f10 	tst.w	lr, #16
 800e380:	bf08      	it	eq
 800e382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e394:	f380 8811 	msr	BASEPRI, r0
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f7fe feb0 	bl	800d104 <vTaskSwitchContext>
 800e3a4:	f04f 0000 	mov.w	r0, #0
 800e3a8:	f380 8811 	msr	BASEPRI, r0
 800e3ac:	bc09      	pop	{r0, r3}
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	6808      	ldr	r0, [r1, #0]
 800e3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b6:	f01e 0f10 	tst.w	lr, #16
 800e3ba:	bf08      	it	eq
 800e3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3c0:	f380 8809 	msr	PSP, r0
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <pxCurrentTCBConst>:
 800e3d0:	2000116c 	.word	0x2000116c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop

0800e3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	607b      	str	r3, [r7, #4]
}
 800e3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3f2:	f7fe fdcd 	bl	800cf90 <xTaskIncrementTick>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3fc:	4b06      	ldr	r3, [pc, #24]	; (800e418 <xPortSysTickHandler+0x40>)
 800e3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f383 8811 	msr	BASEPRI, r3
}
 800e40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e420:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <vPortSetupTimerInterrupt+0x38>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <vPortSetupTimerInterrupt+0x3c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a0a      	ldr	r2, [pc, #40]	; (800e45c <vPortSetupTimerInterrupt+0x40>)
 800e432:	fba2 2303 	umull	r2, r3, r2, r3
 800e436:	099b      	lsrs	r3, r3, #6
 800e438:	4a09      	ldr	r2, [pc, #36]	; (800e460 <vPortSetupTimerInterrupt+0x44>)
 800e43a:	3b01      	subs	r3, #1
 800e43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e43e:	4b04      	ldr	r3, [pc, #16]	; (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e440:	2207      	movs	r2, #7
 800e442:	601a      	str	r2, [r3, #0]
}
 800e444:	bf00      	nop
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	e000e010 	.word	0xe000e010
 800e454:	e000e018 	.word	0xe000e018
 800e458:	20000004 	.word	0x20000004
 800e45c:	10624dd3 	.word	0x10624dd3
 800e460:	e000e014 	.word	0xe000e014

0800e464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e474 <vPortEnableVFP+0x10>
 800e468:	6801      	ldr	r1, [r0, #0]
 800e46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e46e:	6001      	str	r1, [r0, #0]
 800e470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e472:	bf00      	nop
 800e474:	e000ed88 	.word	0xe000ed88

0800e478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e47e:	f3ef 8305 	mrs	r3, IPSR
 800e482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b0f      	cmp	r3, #15
 800e488:	d914      	bls.n	800e4b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e48a:	4a17      	ldr	r2, [pc, #92]	; (800e4e8 <vPortValidateInterruptPriority+0x70>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e494:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <vPortValidateInterruptPriority+0x74>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	7afa      	ldrb	r2, [r7, #11]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d20a      	bcs.n	800e4b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	607b      	str	r3, [r7, #4]
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <vPortValidateInterruptPriority+0x78>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	; (800e4f4 <vPortValidateInterruptPriority+0x7c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d90a      	bls.n	800e4da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	603b      	str	r3, [r7, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <vPortValidateInterruptPriority+0x60>
	}
 800e4da:	bf00      	nop
 800e4dc:	3714      	adds	r7, #20
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	e000e3f0 	.word	0xe000e3f0
 800e4ec:	20001798 	.word	0x20001798
 800e4f0:	e000ed0c 	.word	0xe000ed0c
 800e4f4:	2000179c 	.word	0x2000179c

0800e4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e504:	f7fe fc88 	bl	800ce18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e508:	4b5b      	ldr	r3, [pc, #364]	; (800e678 <pvPortMalloc+0x180>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e510:	f000 f920 	bl	800e754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e514:	4b59      	ldr	r3, [pc, #356]	; (800e67c <pvPortMalloc+0x184>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4013      	ands	r3, r2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f040 8093 	bne.w	800e648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01d      	beq.n	800e564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e528:	2208      	movs	r2, #8
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4413      	add	r3, r2
 800e52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b00      	cmp	r3, #0
 800e538:	d014      	beq.n	800e564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f023 0307 	bic.w	r3, r3, #7
 800e540:	3308      	adds	r3, #8
 800e542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00a      	beq.n	800e564 <pvPortMalloc+0x6c>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	617b      	str	r3, [r7, #20]
}
 800e560:	bf00      	nop
 800e562:	e7fe      	b.n	800e562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d06e      	beq.n	800e648 <pvPortMalloc+0x150>
 800e56a:	4b45      	ldr	r3, [pc, #276]	; (800e680 <pvPortMalloc+0x188>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	429a      	cmp	r2, r3
 800e572:	d869      	bhi.n	800e648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e574:	4b43      	ldr	r3, [pc, #268]	; (800e684 <pvPortMalloc+0x18c>)
 800e576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e578:	4b42      	ldr	r3, [pc, #264]	; (800e684 <pvPortMalloc+0x18c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e57e:	e004      	b.n	800e58a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	429a      	cmp	r2, r3
 800e592:	d903      	bls.n	800e59c <pvPortMalloc+0xa4>
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1f1      	bne.n	800e580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e59c:	4b36      	ldr	r3, [pc, #216]	; (800e678 <pvPortMalloc+0x180>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d050      	beq.n	800e648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2208      	movs	r2, #8
 800e5ac:	4413      	add	r3, r2
 800e5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	2308      	movs	r3, #8
 800e5c2:	005b      	lsls	r3, r3, #1
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d91f      	bls.n	800e608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	f003 0307 	and.w	r3, r3, #7
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	613b      	str	r3, [r7, #16]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	1ad2      	subs	r2, r2, r3
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e602:	69b8      	ldr	r0, [r7, #24]
 800e604:	f000 f908 	bl	800e818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e608:	4b1d      	ldr	r3, [pc, #116]	; (800e680 <pvPortMalloc+0x188>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	4a1b      	ldr	r2, [pc, #108]	; (800e680 <pvPortMalloc+0x188>)
 800e614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e616:	4b1a      	ldr	r3, [pc, #104]	; (800e680 <pvPortMalloc+0x188>)
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	4b1b      	ldr	r3, [pc, #108]	; (800e688 <pvPortMalloc+0x190>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d203      	bcs.n	800e62a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <pvPortMalloc+0x188>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a18      	ldr	r2, [pc, #96]	; (800e688 <pvPortMalloc+0x190>)
 800e628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	4b13      	ldr	r3, [pc, #76]	; (800e67c <pvPortMalloc+0x184>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	431a      	orrs	r2, r3
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e63e:	4b13      	ldr	r3, [pc, #76]	; (800e68c <pvPortMalloc+0x194>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	4a11      	ldr	r2, [pc, #68]	; (800e68c <pvPortMalloc+0x194>)
 800e646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e648:	f7fe fbf4 	bl	800ce34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	f003 0307 	and.w	r3, r3, #7
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00a      	beq.n	800e66c <pvPortMalloc+0x174>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	60fb      	str	r3, [r7, #12]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <pvPortMalloc+0x172>
	return pvReturn;
 800e66c:	69fb      	ldr	r3, [r7, #28]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3728      	adds	r7, #40	; 0x28
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	200053a8 	.word	0x200053a8
 800e67c:	200053bc 	.word	0x200053bc
 800e680:	200053ac 	.word	0x200053ac
 800e684:	200053a0 	.word	0x200053a0
 800e688:	200053b0 	.word	0x200053b0
 800e68c:	200053b4 	.word	0x200053b4

0800e690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d04d      	beq.n	800e73e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6a2:	2308      	movs	r3, #8
 800e6a4:	425b      	negs	r3, r3
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	4b24      	ldr	r3, [pc, #144]	; (800e748 <vPortFree+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10a      	bne.n	800e6d4 <vPortFree+0x44>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60fb      	str	r3, [r7, #12]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00a      	beq.n	800e6f2 <vPortFree+0x62>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	60bb      	str	r3, [r7, #8]
}
 800e6ee:	bf00      	nop
 800e6f0:	e7fe      	b.n	800e6f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <vPortFree+0xb8>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01e      	beq.n	800e73e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d11a      	bne.n	800e73e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	4b0e      	ldr	r3, [pc, #56]	; (800e748 <vPortFree+0xb8>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	43db      	mvns	r3, r3
 800e712:	401a      	ands	r2, r3
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e718:	f7fe fb7e 	bl	800ce18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <vPortFree+0xbc>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4413      	add	r3, r2
 800e726:	4a09      	ldr	r2, [pc, #36]	; (800e74c <vPortFree+0xbc>)
 800e728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f000 f874 	bl	800e818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <vPortFree+0xc0>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a06      	ldr	r2, [pc, #24]	; (800e750 <vPortFree+0xc0>)
 800e738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e73a:	f7fe fb7b 	bl	800ce34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e73e:	bf00      	nop
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	200053bc 	.word	0x200053bc
 800e74c:	200053ac 	.word	0x200053ac
 800e750:	200053b8 	.word	0x200053b8

0800e754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e760:	4b27      	ldr	r3, [pc, #156]	; (800e800 <prvHeapInit+0xac>)
 800e762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00c      	beq.n	800e788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3307      	adds	r3, #7
 800e772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f023 0307 	bic.w	r3, r3, #7
 800e77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	4a1f      	ldr	r2, [pc, #124]	; (800e800 <prvHeapInit+0xac>)
 800e784:	4413      	add	r3, r2
 800e786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e78c:	4a1d      	ldr	r2, [pc, #116]	; (800e804 <prvHeapInit+0xb0>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e792:	4b1c      	ldr	r3, [pc, #112]	; (800e804 <prvHeapInit+0xb0>)
 800e794:	2200      	movs	r2, #0
 800e796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	4413      	add	r3, r2
 800e79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7a0:	2208      	movs	r2, #8
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	1a9b      	subs	r3, r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f023 0307 	bic.w	r3, r3, #7
 800e7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4a15      	ldr	r2, [pc, #84]	; (800e808 <prvHeapInit+0xb4>)
 800e7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7b6:	4b14      	ldr	r3, [pc, #80]	; (800e808 <prvHeapInit+0xb4>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7be:	4b12      	ldr	r3, [pc, #72]	; (800e808 <prvHeapInit+0xb4>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	1ad2      	subs	r2, r2, r3
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7d4:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <prvHeapInit+0xb4>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4a0a      	ldr	r2, [pc, #40]	; (800e80c <prvHeapInit+0xb8>)
 800e7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	4a09      	ldr	r2, [pc, #36]	; (800e810 <prvHeapInit+0xbc>)
 800e7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7ec:	4b09      	ldr	r3, [pc, #36]	; (800e814 <prvHeapInit+0xc0>)
 800e7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7f2:	601a      	str	r2, [r3, #0]
}
 800e7f4:	bf00      	nop
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	200017a0 	.word	0x200017a0
 800e804:	200053a0 	.word	0x200053a0
 800e808:	200053a8 	.word	0x200053a8
 800e80c:	200053b0 	.word	0x200053b0
 800e810:	200053ac 	.word	0x200053ac
 800e814:	200053bc 	.word	0x200053bc

0800e818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e820:	4b28      	ldr	r3, [pc, #160]	; (800e8c4 <prvInsertBlockIntoFreeList+0xac>)
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	e002      	b.n	800e82c <prvInsertBlockIntoFreeList+0x14>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	429a      	cmp	r2, r3
 800e834:	d8f7      	bhi.n	800e826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	4413      	add	r3, r2
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	429a      	cmp	r2, r3
 800e846:	d108      	bne.n	800e85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	685a      	ldr	r2, [r3, #4]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	441a      	add	r2, r3
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	441a      	add	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d118      	bne.n	800e8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d00d      	beq.n	800e896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	441a      	add	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	e008      	b.n	800e8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e896:	4b0c      	ldr	r3, [pc, #48]	; (800e8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	e003      	b.n	800e8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d002      	beq.n	800e8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8b6:	bf00      	nop
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	200053a0 	.word	0x200053a0
 800e8c8:	200053a8 	.word	0x200053a8

0800e8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4912      	ldr	r1, [pc, #72]	; (800e91c <MX_USB_DEVICE_Init+0x50>)
 800e8d4:	4812      	ldr	r0, [pc, #72]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8d6:	f7fb f85d 	bl	8009994 <USBD_Init>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8e0:	f7f3 fa3c 	bl	8001d5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8e4:	490f      	ldr	r1, [pc, #60]	; (800e924 <MX_USB_DEVICE_Init+0x58>)
 800e8e6:	480e      	ldr	r0, [pc, #56]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8e8:	f7fb f884 	bl	80099f4 <USBD_RegisterClass>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8f2:	f7f3 fa33 	bl	8001d5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8f6:	490c      	ldr	r1, [pc, #48]	; (800e928 <MX_USB_DEVICE_Init+0x5c>)
 800e8f8:	4809      	ldr	r0, [pc, #36]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8fa:	f7fa ffbb 	bl	8009874 <USBD_CDC_RegisterInterface>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e904:	f7f3 fa2a 	bl	8001d5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e908:	4805      	ldr	r0, [pc, #20]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e90a:	f7fb f8a9 	bl	8009a60 <USBD_Start>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e914:	f7f3 fa22 	bl	8001d5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e918:	bf00      	nop
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20000270 	.word	0x20000270
 800e920:	200053c0 	.word	0x200053c0
 800e924:	200001d8 	.word	0x200001d8
 800e928:	2000025c 	.word	0x2000025c

0800e92c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e930:	2200      	movs	r2, #0
 800e932:	4905      	ldr	r1, [pc, #20]	; (800e948 <CDC_Init_FS+0x1c>)
 800e934:	4805      	ldr	r0, [pc, #20]	; (800e94c <CDC_Init_FS+0x20>)
 800e936:	f7fa ffb7 	bl	80098a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e93a:	4905      	ldr	r1, [pc, #20]	; (800e950 <CDC_Init_FS+0x24>)
 800e93c:	4803      	ldr	r0, [pc, #12]	; (800e94c <CDC_Init_FS+0x20>)
 800e93e:	f7fa ffd5 	bl	80098ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e942:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e944:	4618      	mov	r0, r3
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20005e9c 	.word	0x20005e9c
 800e94c:	200053c0 	.word	0x200053c0
 800e950:	2000569c 	.word	0x2000569c

0800e954 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e958:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4603      	mov	r3, r0
 800e96c:	6039      	str	r1, [r7, #0]
 800e96e:	71fb      	strb	r3, [r7, #7]
 800e970:	4613      	mov	r3, r2
 800e972:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e974:	79fb      	ldrb	r3, [r7, #7]
 800e976:	2b23      	cmp	r3, #35	; 0x23
 800e978:	d84a      	bhi.n	800ea10 <CDC_Control_FS+0xac>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <CDC_Control_FS+0x1c>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800ea11 	.word	0x0800ea11
 800e984:	0800ea11 	.word	0x0800ea11
 800e988:	0800ea11 	.word	0x0800ea11
 800e98c:	0800ea11 	.word	0x0800ea11
 800e990:	0800ea11 	.word	0x0800ea11
 800e994:	0800ea11 	.word	0x0800ea11
 800e998:	0800ea11 	.word	0x0800ea11
 800e99c:	0800ea11 	.word	0x0800ea11
 800e9a0:	0800ea11 	.word	0x0800ea11
 800e9a4:	0800ea11 	.word	0x0800ea11
 800e9a8:	0800ea11 	.word	0x0800ea11
 800e9ac:	0800ea11 	.word	0x0800ea11
 800e9b0:	0800ea11 	.word	0x0800ea11
 800e9b4:	0800ea11 	.word	0x0800ea11
 800e9b8:	0800ea11 	.word	0x0800ea11
 800e9bc:	0800ea11 	.word	0x0800ea11
 800e9c0:	0800ea11 	.word	0x0800ea11
 800e9c4:	0800ea11 	.word	0x0800ea11
 800e9c8:	0800ea11 	.word	0x0800ea11
 800e9cc:	0800ea11 	.word	0x0800ea11
 800e9d0:	0800ea11 	.word	0x0800ea11
 800e9d4:	0800ea11 	.word	0x0800ea11
 800e9d8:	0800ea11 	.word	0x0800ea11
 800e9dc:	0800ea11 	.word	0x0800ea11
 800e9e0:	0800ea11 	.word	0x0800ea11
 800e9e4:	0800ea11 	.word	0x0800ea11
 800e9e8:	0800ea11 	.word	0x0800ea11
 800e9ec:	0800ea11 	.word	0x0800ea11
 800e9f0:	0800ea11 	.word	0x0800ea11
 800e9f4:	0800ea11 	.word	0x0800ea11
 800e9f8:	0800ea11 	.word	0x0800ea11
 800e9fc:	0800ea11 	.word	0x0800ea11
 800ea00:	0800ea11 	.word	0x0800ea11
 800ea04:	0800ea11 	.word	0x0800ea11
 800ea08:	0800ea11 	.word	0x0800ea11
 800ea0c:	0800ea11 	.word	0x0800ea11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea10:	bf00      	nop
  }

  return (USBD_OK);
 800ea12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea2a:	6879      	ldr	r1, [r7, #4]
 800ea2c:	4805      	ldr	r0, [pc, #20]	; (800ea44 <CDC_Receive_FS+0x24>)
 800ea2e:	f7fa ff5d 	bl	80098ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea32:	4804      	ldr	r0, [pc, #16]	; (800ea44 <CDC_Receive_FS+0x24>)
 800ea34:	f7fa ff78 	bl	8009928 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	200053c0 	.word	0x200053c0

0800ea48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	4613      	mov	r3, r2
 800ea54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ea5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	371c      	adds	r7, #28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
	...

0800ea6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	6039      	str	r1, [r7, #0]
 800ea76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	2212      	movs	r2, #18
 800ea7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea7e:	4b03      	ldr	r3, [pc, #12]	; (800ea8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	2000028c 	.word	0x2000028c

0800ea90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	4603      	mov	r3, r0
 800ea98:	6039      	str	r1, [r7, #0]
 800ea9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaa2:	4b03      	ldr	r3, [pc, #12]	; (800eab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	200002a0 	.word	0x200002a0

0800eab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	6039      	str	r1, [r7, #0]
 800eabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d105      	bne.n	800ead2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	4907      	ldr	r1, [pc, #28]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eaca:	4808      	ldr	r0, [pc, #32]	; (800eaec <USBD_FS_ProductStrDescriptor+0x38>)
 800eacc:	f7fc f974 	bl	800adb8 <USBD_GetString>
 800ead0:	e004      	b.n	800eadc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	4904      	ldr	r1, [pc, #16]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ead6:	4805      	ldr	r0, [pc, #20]	; (800eaec <USBD_FS_ProductStrDescriptor+0x38>)
 800ead8:	f7fc f96e 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eadc:	4b02      	ldr	r3, [pc, #8]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	2000669c 	.word	0x2000669c
 800eaec:	08010324 	.word	0x08010324

0800eaf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	4904      	ldr	r1, [pc, #16]	; (800eb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb00:	4804      	ldr	r0, [pc, #16]	; (800eb14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb02:	f7fc f959 	bl	800adb8 <USBD_GetString>
  return USBD_StrDesc;
 800eb06:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	2000669c 	.word	0x2000669c
 800eb14:	0801033c 	.word	0x0801033c

0800eb18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	6039      	str	r1, [r7, #0]
 800eb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	221a      	movs	r2, #26
 800eb28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb2a:	f000 f843 	bl	800ebb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb2e:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	200002a4 	.word	0x200002a4

0800eb3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	6039      	str	r1, [r7, #0]
 800eb46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d105      	bne.n	800eb5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	4907      	ldr	r1, [pc, #28]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb52:	4808      	ldr	r0, [pc, #32]	; (800eb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb54:	f7fc f930 	bl	800adb8 <USBD_GetString>
 800eb58:	e004      	b.n	800eb64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	4904      	ldr	r1, [pc, #16]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb5e:	4805      	ldr	r0, [pc, #20]	; (800eb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb60:	f7fc f92a 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb64:	4b02      	ldr	r3, [pc, #8]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000669c 	.word	0x2000669c
 800eb74:	08010350 	.word	0x08010350

0800eb78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	6039      	str	r1, [r7, #0]
 800eb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb84:	79fb      	ldrb	r3, [r7, #7]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d105      	bne.n	800eb96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	4907      	ldr	r1, [pc, #28]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb8e:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb90:	f7fc f912 	bl	800adb8 <USBD_GetString>
 800eb94:	e004      	b.n	800eba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	4904      	ldr	r1, [pc, #16]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb9a:	4805      	ldr	r0, [pc, #20]	; (800ebb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb9c:	f7fc f90c 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eba0:	4b02      	ldr	r3, [pc, #8]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	2000669c 	.word	0x2000669c
 800ebb0:	0801035c 	.word	0x0801035c

0800ebb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebba:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <Get_SerialNum+0x44>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebc0:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <Get_SerialNum+0x48>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebc6:	4b0e      	ldr	r3, [pc, #56]	; (800ec00 <Get_SerialNum+0x4c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d009      	beq.n	800ebee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebda:	2208      	movs	r2, #8
 800ebdc:	4909      	ldr	r1, [pc, #36]	; (800ec04 <Get_SerialNum+0x50>)
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 f814 	bl	800ec0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebe4:	2204      	movs	r2, #4
 800ebe6:	4908      	ldr	r1, [pc, #32]	; (800ec08 <Get_SerialNum+0x54>)
 800ebe8:	68b8      	ldr	r0, [r7, #8]
 800ebea:	f000 f80f 	bl	800ec0c <IntToUnicode>
  }
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	1fff7a10 	.word	0x1fff7a10
 800ebfc:	1fff7a14 	.word	0x1fff7a14
 800ec00:	1fff7a18 	.word	0x1fff7a18
 800ec04:	200002a6 	.word	0x200002a6
 800ec08:	200002b6 	.word	0x200002b6

0800ec0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b087      	sub	sp, #28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	4613      	mov	r3, r2
 800ec18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
 800ec22:	e027      	b.n	800ec74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	0f1b      	lsrs	r3, r3, #28
 800ec28:	2b09      	cmp	r3, #9
 800ec2a:	d80b      	bhi.n	800ec44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	0f1b      	lsrs	r3, r3, #28
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4619      	mov	r1, r3
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	440b      	add	r3, r1
 800ec3c:	3230      	adds	r2, #48	; 0x30
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	e00a      	b.n	800ec5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	0f1b      	lsrs	r3, r3, #28
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	4619      	mov	r1, r3
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	440b      	add	r3, r1
 800ec54:	3237      	adds	r2, #55	; 0x37
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	011b      	lsls	r3, r3, #4
 800ec5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	3301      	adds	r3, #1
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	4413      	add	r3, r2
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	3301      	adds	r3, #1
 800ec72:	75fb      	strb	r3, [r7, #23]
 800ec74:	7dfa      	ldrb	r2, [r7, #23]
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3d3      	bcc.n	800ec24 <IntToUnicode+0x18>
  }
}
 800ec7c:	bf00      	nop
 800ec7e:	bf00      	nop
 800ec80:	371c      	adds	r7, #28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
	...

0800ec8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08a      	sub	sp, #40	; 0x28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	605a      	str	r2, [r3, #4]
 800ec9e:	609a      	str	r2, [r3, #8]
 800eca0:	60da      	str	r2, [r3, #12]
 800eca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ecac:	d13a      	bne.n	800ed24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecae:	2300      	movs	r3, #0
 800ecb0:	613b      	str	r3, [r7, #16]
 800ecb2:	4b1e      	ldr	r3, [pc, #120]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecb8:	f043 0301 	orr.w	r3, r3, #1
 800ecbc:	6313      	str	r3, [r2, #48]	; 0x30
 800ecbe:	4b1b      	ldr	r3, [pc, #108]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	613b      	str	r3, [r7, #16]
 800ecc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ecca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ecce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ecdc:	230a      	movs	r3, #10
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ece0:	f107 0314 	add.w	r3, r7, #20
 800ece4:	4619      	mov	r1, r3
 800ece6:	4812      	ldr	r0, [pc, #72]	; (800ed30 <HAL_PCD_MspInit+0xa4>)
 800ece8:	f7f4 fe90 	bl	8003a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ecec:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecf0:	4a0e      	ldr	r2, [pc, #56]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecf6:	6353      	str	r3, [r2, #52]	; 0x34
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed00:	4a0a      	ldr	r2, [pc, #40]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ed02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed06:	6453      	str	r3, [r2, #68]	; 0x44
 800ed08:	4b08      	ldr	r3, [pc, #32]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ed0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed10:	60fb      	str	r3, [r7, #12]
 800ed12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ed14:	2200      	movs	r2, #0
 800ed16:	2105      	movs	r1, #5
 800ed18:	2043      	movs	r0, #67	; 0x43
 800ed1a:	f7f4 fe2b 	bl	8003974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed1e:	2043      	movs	r0, #67	; 0x43
 800ed20:	f7f4 fe44 	bl	80039ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed24:	bf00      	nop
 800ed26:	3728      	adds	r7, #40	; 0x28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	40023800 	.word	0x40023800
 800ed30:	40020000 	.word	0x40020000

0800ed34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fa fed5 	bl	8009afa <USBD_LL_SetupStage>
}
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ed6a:	78fa      	ldrb	r2, [r7, #3]
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	440b      	add	r3, r1
 800ed78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	78fb      	ldrb	r3, [r7, #3]
 800ed80:	4619      	mov	r1, r3
 800ed82:	f7fa ff0f 	bl	8009ba4 <USBD_LL_DataOutStage>
}
 800ed86:	bf00      	nop
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	460b      	mov	r3, r1
 800ed98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eda0:	78fa      	ldrb	r2, [r7, #3]
 800eda2:	6879      	ldr	r1, [r7, #4]
 800eda4:	4613      	mov	r3, r2
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	440b      	add	r3, r1
 800edae:	334c      	adds	r3, #76	; 0x4c
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	4619      	mov	r1, r3
 800edb6:	f7fa ffa8 	bl	8009d0a <USBD_LL_DataInStage>
}
 800edba:	bf00      	nop
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b082      	sub	sp, #8
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fb f8dc 	bl	8009f8e <USBD_LL_SOF>
}
 800edd6:	bf00      	nop
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ede6:	2301      	movs	r3, #1
 800ede8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d102      	bne.n	800edf8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
 800edf6:	e008      	b.n	800ee0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d102      	bne.n	800ee06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ee00:	2301      	movs	r3, #1
 800ee02:	73fb      	strb	r3, [r7, #15]
 800ee04:	e001      	b.n	800ee0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ee06:	f7f2 ffa9 	bl	8001d5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee10:	7bfa      	ldrb	r2, [r7, #15]
 800ee12:	4611      	mov	r1, r2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fb f87c 	bl	8009f12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fb f824 	bl	8009e6e <USBD_LL_Reset>
}
 800ee26:	bf00      	nop
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
	...

0800ee30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fb f877 	bl	8009f32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6812      	ldr	r2, [r2, #0]
 800ee52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee56:	f043 0301 	orr.w	r3, r3, #1
 800ee5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d005      	beq.n	800ee70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <HAL_PCD_SuspendCallback+0x48>)
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	4a03      	ldr	r2, [pc, #12]	; (800ee78 <HAL_PCD_SuspendCallback+0x48>)
 800ee6a:	f043 0306 	orr.w	r3, r3, #6
 800ee6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee70:	bf00      	nop
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	e000ed00 	.word	0xe000ed00

0800ee7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fb f867 	bl	8009f5e <USBD_LL_Resume>
}
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeaa:	78fa      	ldrb	r2, [r7, #3]
 800eeac:	4611      	mov	r1, r2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fb f8bf 	bl	800a032 <USBD_LL_IsoOUTIncomplete>
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eece:	78fa      	ldrb	r2, [r7, #3]
 800eed0:	4611      	mov	r1, r2
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb f87b 	bl	8009fce <USBD_LL_IsoINIncomplete>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fb f8d1 	bl	800a096 <USBD_LL_DevConnected>
}
 800eef4:	bf00      	nop
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fb f8ce 	bl	800a0ac <USBD_LL_DevDisconnected>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d13c      	bne.n	800efa2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef28:	4a20      	ldr	r2, [pc, #128]	; (800efac <USBD_LL_Init+0x94>)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a1e      	ldr	r2, [pc, #120]	; (800efac <USBD_LL_Init+0x94>)
 800ef34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef38:	4b1c      	ldr	r3, [pc, #112]	; (800efac <USBD_LL_Init+0x94>)
 800ef3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef40:	4b1a      	ldr	r3, [pc, #104]	; (800efac <USBD_LL_Init+0x94>)
 800ef42:	2204      	movs	r2, #4
 800ef44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef46:	4b19      	ldr	r3, [pc, #100]	; (800efac <USBD_LL_Init+0x94>)
 800ef48:	2202      	movs	r2, #2
 800ef4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef4c:	4b17      	ldr	r3, [pc, #92]	; (800efac <USBD_LL_Init+0x94>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef52:	4b16      	ldr	r3, [pc, #88]	; (800efac <USBD_LL_Init+0x94>)
 800ef54:	2202      	movs	r2, #2
 800ef56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef58:	4b14      	ldr	r3, [pc, #80]	; (800efac <USBD_LL_Init+0x94>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef5e:	4b13      	ldr	r3, [pc, #76]	; (800efac <USBD_LL_Init+0x94>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef64:	4b11      	ldr	r3, [pc, #68]	; (800efac <USBD_LL_Init+0x94>)
 800ef66:	2200      	movs	r2, #0
 800ef68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef6a:	4b10      	ldr	r3, [pc, #64]	; (800efac <USBD_LL_Init+0x94>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef70:	4b0e      	ldr	r3, [pc, #56]	; (800efac <USBD_LL_Init+0x94>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef76:	480d      	ldr	r0, [pc, #52]	; (800efac <USBD_LL_Init+0x94>)
 800ef78:	f7f4 fefd 	bl	8003d76 <HAL_PCD_Init>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ef82:	f7f2 feeb 	bl	8001d5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ef86:	2180      	movs	r1, #128	; 0x80
 800ef88:	4808      	ldr	r0, [pc, #32]	; (800efac <USBD_LL_Init+0x94>)
 800ef8a:	f7f6 f954 	bl	8005236 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef8e:	2240      	movs	r2, #64	; 0x40
 800ef90:	2100      	movs	r1, #0
 800ef92:	4806      	ldr	r0, [pc, #24]	; (800efac <USBD_LL_Init+0x94>)
 800ef94:	f7f6 f908 	bl	80051a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef98:	2280      	movs	r2, #128	; 0x80
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	4803      	ldr	r0, [pc, #12]	; (800efac <USBD_LL_Init+0x94>)
 800ef9e:	f7f6 f903 	bl	80051a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efa2:	2300      	movs	r3, #0
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	2000689c 	.word	0x2000689c

0800efb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb8:	2300      	movs	r3, #0
 800efba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f4 fff2 	bl	8003fb0 <HAL_PCD_Start>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 f942 	bl	800f25c <USBD_Get_USB_Status>
 800efd8:	4603      	mov	r3, r0
 800efda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b084      	sub	sp, #16
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	4608      	mov	r0, r1
 800eff0:	4611      	mov	r1, r2
 800eff2:	461a      	mov	r2, r3
 800eff4:	4603      	mov	r3, r0
 800eff6:	70fb      	strb	r3, [r7, #3]
 800eff8:	460b      	mov	r3, r1
 800effa:	70bb      	strb	r3, [r7, #2]
 800effc:	4613      	mov	r3, r2
 800effe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f00e:	78bb      	ldrb	r3, [r7, #2]
 800f010:	883a      	ldrh	r2, [r7, #0]
 800f012:	78f9      	ldrb	r1, [r7, #3]
 800f014:	f7f5 fcc3 	bl	800499e <HAL_PCD_EP_Open>
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	4618      	mov	r0, r3
 800f020:	f000 f91c 	bl	800f25c <USBD_Get_USB_Status>
 800f024:	4603      	mov	r3, r0
 800f026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f028:	7bbb      	ldrb	r3, [r7, #14]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	460b      	mov	r3, r1
 800f03c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f04c:	78fa      	ldrb	r2, [r7, #3]
 800f04e:	4611      	mov	r1, r2
 800f050:	4618      	mov	r0, r3
 800f052:	f7f5 fd0c 	bl	8004a6e <HAL_PCD_EP_Close>
 800f056:	4603      	mov	r3, r0
 800f058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f8fd 	bl	800f25c <USBD_Get_USB_Status>
 800f062:	4603      	mov	r3, r0
 800f064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f066:	7bbb      	ldrb	r3, [r7, #14]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	460b      	mov	r3, r1
 800f07a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f08a:	78fa      	ldrb	r2, [r7, #3]
 800f08c:	4611      	mov	r1, r2
 800f08e:	4618      	mov	r0, r3
 800f090:	f7f5 fde4 	bl	8004c5c <HAL_PCD_EP_SetStall>
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 f8de 	bl	800f25c <USBD_Get_USB_Status>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b084      	sub	sp, #16
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0c8:	78fa      	ldrb	r2, [r7, #3]
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7f5 fe29 	bl	8004d24 <HAL_PCD_EP_ClrStall>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 f8bf 	bl	800f25c <USBD_Get_USB_Status>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f104:	2b00      	cmp	r3, #0
 800f106:	da0b      	bge.n	800f120 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f108:	78fb      	ldrb	r3, [r7, #3]
 800f10a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f10e:	68f9      	ldr	r1, [r7, #12]
 800f110:	4613      	mov	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	440b      	add	r3, r1
 800f11a:	333e      	adds	r3, #62	; 0x3e
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	e00b      	b.n	800f138 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f126:	68f9      	ldr	r1, [r7, #12]
 800f128:	4613      	mov	r3, r2
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	4413      	add	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	440b      	add	r3, r1
 800f132:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f136:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f154:	2300      	movs	r3, #0
 800f156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f15e:	78fa      	ldrb	r2, [r7, #3]
 800f160:	4611      	mov	r1, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7f5 fbf6 	bl	8004954 <HAL_PCD_SetAddress>
 800f168:	4603      	mov	r3, r0
 800f16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f16c:	7bfb      	ldrb	r3, [r7, #15]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 f874 	bl	800f25c <USBD_Get_USB_Status>
 800f174:	4603      	mov	r3, r0
 800f176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f178:	7bbb      	ldrb	r3, [r7, #14]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b086      	sub	sp, #24
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	603b      	str	r3, [r7, #0]
 800f18e:	460b      	mov	r3, r1
 800f190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1a0:	7af9      	ldrb	r1, [r7, #11]
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	f7f5 fd0f 	bl	8004bc8 <HAL_PCD_EP_Transmit>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 f853 	bl	800f25c <USBD_Get_USB_Status>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	607a      	str	r2, [r7, #4]
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1e2:	7af9      	ldrb	r1, [r7, #11]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	f7f5 fc8b 	bl	8004b02 <HAL_PCD_EP_Receive>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f832 	bl	800f25c <USBD_Get_USB_Status>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f218:	78fa      	ldrb	r2, [r7, #3]
 800f21a:	4611      	mov	r1, r2
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f5 fcbb 	bl	8004b98 <HAL_PCD_EP_GetRxCount>
 800f222:	4603      	mov	r3, r0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f234:	4b03      	ldr	r3, [pc, #12]	; (800f244 <USBD_static_malloc+0x18>)
}
 800f236:	4618      	mov	r0, r3
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	20006da8 	.word	0x20006da8

0800f248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]

}
 800f250:	bf00      	nop
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f266:	2300      	movs	r3, #0
 800f268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f26a:	79fb      	ldrb	r3, [r7, #7]
 800f26c:	2b03      	cmp	r3, #3
 800f26e:	d817      	bhi.n	800f2a0 <USBD_Get_USB_Status+0x44>
 800f270:	a201      	add	r2, pc, #4	; (adr r2, 800f278 <USBD_Get_USB_Status+0x1c>)
 800f272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f276:	bf00      	nop
 800f278:	0800f289 	.word	0x0800f289
 800f27c:	0800f28f 	.word	0x0800f28f
 800f280:	0800f295 	.word	0x0800f295
 800f284:	0800f29b 	.word	0x0800f29b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	73fb      	strb	r3, [r7, #15]
    break;
 800f28c:	e00b      	b.n	800f2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f28e:	2303      	movs	r3, #3
 800f290:	73fb      	strb	r3, [r7, #15]
    break;
 800f292:	e008      	b.n	800f2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f294:	2301      	movs	r3, #1
 800f296:	73fb      	strb	r3, [r7, #15]
    break;
 800f298:	e005      	b.n	800f2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f29a:	2303      	movs	r3, #3
 800f29c:	73fb      	strb	r3, [r7, #15]
    break;
 800f29e:	e002      	b.n	800f2a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2a0:	2303      	movs	r3, #3
 800f2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a4:	bf00      	nop
  }
  return usb_status;
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3714      	adds	r7, #20
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <__errno>:
 800f2b4:	4b01      	ldr	r3, [pc, #4]	; (800f2bc <__errno+0x8>)
 800f2b6:	6818      	ldr	r0, [r3, #0]
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	200002c0 	.word	0x200002c0

0800f2c0 <__libc_init_array>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4d0d      	ldr	r5, [pc, #52]	; (800f2f8 <__libc_init_array+0x38>)
 800f2c4:	4c0d      	ldr	r4, [pc, #52]	; (800f2fc <__libc_init_array+0x3c>)
 800f2c6:	1b64      	subs	r4, r4, r5
 800f2c8:	10a4      	asrs	r4, r4, #2
 800f2ca:	2600      	movs	r6, #0
 800f2cc:	42a6      	cmp	r6, r4
 800f2ce:	d109      	bne.n	800f2e4 <__libc_init_array+0x24>
 800f2d0:	4d0b      	ldr	r5, [pc, #44]	; (800f300 <__libc_init_array+0x40>)
 800f2d2:	4c0c      	ldr	r4, [pc, #48]	; (800f304 <__libc_init_array+0x44>)
 800f2d4:	f000 ff4a 	bl	801016c <_init>
 800f2d8:	1b64      	subs	r4, r4, r5
 800f2da:	10a4      	asrs	r4, r4, #2
 800f2dc:	2600      	movs	r6, #0
 800f2de:	42a6      	cmp	r6, r4
 800f2e0:	d105      	bne.n	800f2ee <__libc_init_array+0x2e>
 800f2e2:	bd70      	pop	{r4, r5, r6, pc}
 800f2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2e8:	4798      	blx	r3
 800f2ea:	3601      	adds	r6, #1
 800f2ec:	e7ee      	b.n	800f2cc <__libc_init_array+0xc>
 800f2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2f2:	4798      	blx	r3
 800f2f4:	3601      	adds	r6, #1
 800f2f6:	e7f2      	b.n	800f2de <__libc_init_array+0x1e>
 800f2f8:	08010520 	.word	0x08010520
 800f2fc:	08010520 	.word	0x08010520
 800f300:	08010520 	.word	0x08010520
 800f304:	08010524 	.word	0x08010524

0800f308 <memcpy>:
 800f308:	440a      	add	r2, r1
 800f30a:	4291      	cmp	r1, r2
 800f30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f310:	d100      	bne.n	800f314 <memcpy+0xc>
 800f312:	4770      	bx	lr
 800f314:	b510      	push	{r4, lr}
 800f316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f31e:	4291      	cmp	r1, r2
 800f320:	d1f9      	bne.n	800f316 <memcpy+0xe>
 800f322:	bd10      	pop	{r4, pc}

0800f324 <memset>:
 800f324:	4402      	add	r2, r0
 800f326:	4603      	mov	r3, r0
 800f328:	4293      	cmp	r3, r2
 800f32a:	d100      	bne.n	800f32e <memset+0xa>
 800f32c:	4770      	bx	lr
 800f32e:	f803 1b01 	strb.w	r1, [r3], #1
 800f332:	e7f9      	b.n	800f328 <memset+0x4>

0800f334 <pow>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	ed2d 8b02 	vpush	{d8}
 800f33a:	eeb0 8a40 	vmov.f32	s16, s0
 800f33e:	eef0 8a60 	vmov.f32	s17, s1
 800f342:	ec55 4b11 	vmov	r4, r5, d1
 800f346:	f000 f867 	bl	800f418 <__ieee754_pow>
 800f34a:	4622      	mov	r2, r4
 800f34c:	462b      	mov	r3, r5
 800f34e:	4620      	mov	r0, r4
 800f350:	4629      	mov	r1, r5
 800f352:	ec57 6b10 	vmov	r6, r7, d0
 800f356:	f7f1 fb99 	bl	8000a8c <__aeabi_dcmpun>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d13b      	bne.n	800f3d6 <pow+0xa2>
 800f35e:	ec51 0b18 	vmov	r0, r1, d8
 800f362:	2200      	movs	r2, #0
 800f364:	2300      	movs	r3, #0
 800f366:	f7f1 fb5f 	bl	8000a28 <__aeabi_dcmpeq>
 800f36a:	b1b8      	cbz	r0, 800f39c <pow+0x68>
 800f36c:	2200      	movs	r2, #0
 800f36e:	2300      	movs	r3, #0
 800f370:	4620      	mov	r0, r4
 800f372:	4629      	mov	r1, r5
 800f374:	f7f1 fb58 	bl	8000a28 <__aeabi_dcmpeq>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d146      	bne.n	800f40a <pow+0xd6>
 800f37c:	ec45 4b10 	vmov	d0, r4, r5
 800f380:	f000 fe63 	bl	801004a <finite>
 800f384:	b338      	cbz	r0, 800f3d6 <pow+0xa2>
 800f386:	2200      	movs	r2, #0
 800f388:	2300      	movs	r3, #0
 800f38a:	4620      	mov	r0, r4
 800f38c:	4629      	mov	r1, r5
 800f38e:	f7f1 fb55 	bl	8000a3c <__aeabi_dcmplt>
 800f392:	b300      	cbz	r0, 800f3d6 <pow+0xa2>
 800f394:	f7ff ff8e 	bl	800f2b4 <__errno>
 800f398:	2322      	movs	r3, #34	; 0x22
 800f39a:	e01b      	b.n	800f3d4 <pow+0xa0>
 800f39c:	ec47 6b10 	vmov	d0, r6, r7
 800f3a0:	f000 fe53 	bl	801004a <finite>
 800f3a4:	b9e0      	cbnz	r0, 800f3e0 <pow+0xac>
 800f3a6:	eeb0 0a48 	vmov.f32	s0, s16
 800f3aa:	eef0 0a68 	vmov.f32	s1, s17
 800f3ae:	f000 fe4c 	bl	801004a <finite>
 800f3b2:	b1a8      	cbz	r0, 800f3e0 <pow+0xac>
 800f3b4:	ec45 4b10 	vmov	d0, r4, r5
 800f3b8:	f000 fe47 	bl	801004a <finite>
 800f3bc:	b180      	cbz	r0, 800f3e0 <pow+0xac>
 800f3be:	4632      	mov	r2, r6
 800f3c0:	463b      	mov	r3, r7
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	f7f1 fb61 	bl	8000a8c <__aeabi_dcmpun>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d0e2      	beq.n	800f394 <pow+0x60>
 800f3ce:	f7ff ff71 	bl	800f2b4 <__errno>
 800f3d2:	2321      	movs	r3, #33	; 0x21
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	ecbd 8b02 	vpop	{d8}
 800f3da:	ec47 6b10 	vmov	d0, r6, r7
 800f3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	f7f1 fb1e 	bl	8000a28 <__aeabi_dcmpeq>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d0f2      	beq.n	800f3d6 <pow+0xa2>
 800f3f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f3f4:	eef0 0a68 	vmov.f32	s1, s17
 800f3f8:	f000 fe27 	bl	801004a <finite>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d0ea      	beq.n	800f3d6 <pow+0xa2>
 800f400:	ec45 4b10 	vmov	d0, r4, r5
 800f404:	f000 fe21 	bl	801004a <finite>
 800f408:	e7c3      	b.n	800f392 <pow+0x5e>
 800f40a:	4f01      	ldr	r7, [pc, #4]	; (800f410 <pow+0xdc>)
 800f40c:	2600      	movs	r6, #0
 800f40e:	e7e2      	b.n	800f3d6 <pow+0xa2>
 800f410:	3ff00000 	.word	0x3ff00000
 800f414:	00000000 	.word	0x00000000

0800f418 <__ieee754_pow>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	ed2d 8b06 	vpush	{d8-d10}
 800f420:	b089      	sub	sp, #36	; 0x24
 800f422:	ed8d 1b00 	vstr	d1, [sp]
 800f426:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f42a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f42e:	ea58 0102 	orrs.w	r1, r8, r2
 800f432:	ec57 6b10 	vmov	r6, r7, d0
 800f436:	d115      	bne.n	800f464 <__ieee754_pow+0x4c>
 800f438:	19b3      	adds	r3, r6, r6
 800f43a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f43e:	4152      	adcs	r2, r2
 800f440:	4299      	cmp	r1, r3
 800f442:	4b89      	ldr	r3, [pc, #548]	; (800f668 <__ieee754_pow+0x250>)
 800f444:	4193      	sbcs	r3, r2
 800f446:	f080 84d2 	bcs.w	800fdee <__ieee754_pow+0x9d6>
 800f44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f44e:	4630      	mov	r0, r6
 800f450:	4639      	mov	r1, r7
 800f452:	f7f0 fecb 	bl	80001ec <__adddf3>
 800f456:	ec41 0b10 	vmov	d0, r0, r1
 800f45a:	b009      	add	sp, #36	; 0x24
 800f45c:	ecbd 8b06 	vpop	{d8-d10}
 800f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f464:	4b81      	ldr	r3, [pc, #516]	; (800f66c <__ieee754_pow+0x254>)
 800f466:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f46a:	429c      	cmp	r4, r3
 800f46c:	ee10 aa10 	vmov	sl, s0
 800f470:	463d      	mov	r5, r7
 800f472:	dc06      	bgt.n	800f482 <__ieee754_pow+0x6a>
 800f474:	d101      	bne.n	800f47a <__ieee754_pow+0x62>
 800f476:	2e00      	cmp	r6, #0
 800f478:	d1e7      	bne.n	800f44a <__ieee754_pow+0x32>
 800f47a:	4598      	cmp	r8, r3
 800f47c:	dc01      	bgt.n	800f482 <__ieee754_pow+0x6a>
 800f47e:	d10f      	bne.n	800f4a0 <__ieee754_pow+0x88>
 800f480:	b172      	cbz	r2, 800f4a0 <__ieee754_pow+0x88>
 800f482:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f486:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f48a:	ea55 050a 	orrs.w	r5, r5, sl
 800f48e:	d1dc      	bne.n	800f44a <__ieee754_pow+0x32>
 800f490:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f494:	18db      	adds	r3, r3, r3
 800f496:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f49a:	4152      	adcs	r2, r2
 800f49c:	429d      	cmp	r5, r3
 800f49e:	e7d0      	b.n	800f442 <__ieee754_pow+0x2a>
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	da3b      	bge.n	800f51c <__ieee754_pow+0x104>
 800f4a4:	4b72      	ldr	r3, [pc, #456]	; (800f670 <__ieee754_pow+0x258>)
 800f4a6:	4598      	cmp	r8, r3
 800f4a8:	dc51      	bgt.n	800f54e <__ieee754_pow+0x136>
 800f4aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f4ae:	4598      	cmp	r8, r3
 800f4b0:	f340 84ac 	ble.w	800fe0c <__ieee754_pow+0x9f4>
 800f4b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f4b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f4bc:	2b14      	cmp	r3, #20
 800f4be:	dd0f      	ble.n	800f4e0 <__ieee754_pow+0xc8>
 800f4c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f4c4:	fa22 f103 	lsr.w	r1, r2, r3
 800f4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	f040 849d 	bne.w	800fe0c <__ieee754_pow+0x9f4>
 800f4d2:	f001 0101 	and.w	r1, r1, #1
 800f4d6:	f1c1 0302 	rsb	r3, r1, #2
 800f4da:	9304      	str	r3, [sp, #16]
 800f4dc:	b182      	cbz	r2, 800f500 <__ieee754_pow+0xe8>
 800f4de:	e05f      	b.n	800f5a0 <__ieee754_pow+0x188>
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d15b      	bne.n	800f59c <__ieee754_pow+0x184>
 800f4e4:	f1c3 0314 	rsb	r3, r3, #20
 800f4e8:	fa48 f103 	asr.w	r1, r8, r3
 800f4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f4f0:	4543      	cmp	r3, r8
 800f4f2:	f040 8488 	bne.w	800fe06 <__ieee754_pow+0x9ee>
 800f4f6:	f001 0101 	and.w	r1, r1, #1
 800f4fa:	f1c1 0302 	rsb	r3, r1, #2
 800f4fe:	9304      	str	r3, [sp, #16]
 800f500:	4b5c      	ldr	r3, [pc, #368]	; (800f674 <__ieee754_pow+0x25c>)
 800f502:	4598      	cmp	r8, r3
 800f504:	d132      	bne.n	800f56c <__ieee754_pow+0x154>
 800f506:	f1b9 0f00 	cmp.w	r9, #0
 800f50a:	f280 8478 	bge.w	800fdfe <__ieee754_pow+0x9e6>
 800f50e:	4959      	ldr	r1, [pc, #356]	; (800f674 <__ieee754_pow+0x25c>)
 800f510:	4632      	mov	r2, r6
 800f512:	463b      	mov	r3, r7
 800f514:	2000      	movs	r0, #0
 800f516:	f7f1 f949 	bl	80007ac <__aeabi_ddiv>
 800f51a:	e79c      	b.n	800f456 <__ieee754_pow+0x3e>
 800f51c:	2300      	movs	r3, #0
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	2a00      	cmp	r2, #0
 800f522:	d13d      	bne.n	800f5a0 <__ieee754_pow+0x188>
 800f524:	4b51      	ldr	r3, [pc, #324]	; (800f66c <__ieee754_pow+0x254>)
 800f526:	4598      	cmp	r8, r3
 800f528:	d1ea      	bne.n	800f500 <__ieee754_pow+0xe8>
 800f52a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f52e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f532:	ea53 030a 	orrs.w	r3, r3, sl
 800f536:	f000 845a 	beq.w	800fdee <__ieee754_pow+0x9d6>
 800f53a:	4b4f      	ldr	r3, [pc, #316]	; (800f678 <__ieee754_pow+0x260>)
 800f53c:	429c      	cmp	r4, r3
 800f53e:	dd08      	ble.n	800f552 <__ieee754_pow+0x13a>
 800f540:	f1b9 0f00 	cmp.w	r9, #0
 800f544:	f2c0 8457 	blt.w	800fdf6 <__ieee754_pow+0x9de>
 800f548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f54c:	e783      	b.n	800f456 <__ieee754_pow+0x3e>
 800f54e:	2302      	movs	r3, #2
 800f550:	e7e5      	b.n	800f51e <__ieee754_pow+0x106>
 800f552:	f1b9 0f00 	cmp.w	r9, #0
 800f556:	f04f 0000 	mov.w	r0, #0
 800f55a:	f04f 0100 	mov.w	r1, #0
 800f55e:	f6bf af7a 	bge.w	800f456 <__ieee754_pow+0x3e>
 800f562:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f56a:	e774      	b.n	800f456 <__ieee754_pow+0x3e>
 800f56c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f570:	d106      	bne.n	800f580 <__ieee754_pow+0x168>
 800f572:	4632      	mov	r2, r6
 800f574:	463b      	mov	r3, r7
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7f0 ffed 	bl	8000558 <__aeabi_dmul>
 800f57e:	e76a      	b.n	800f456 <__ieee754_pow+0x3e>
 800f580:	4b3e      	ldr	r3, [pc, #248]	; (800f67c <__ieee754_pow+0x264>)
 800f582:	4599      	cmp	r9, r3
 800f584:	d10c      	bne.n	800f5a0 <__ieee754_pow+0x188>
 800f586:	2d00      	cmp	r5, #0
 800f588:	db0a      	blt.n	800f5a0 <__ieee754_pow+0x188>
 800f58a:	ec47 6b10 	vmov	d0, r6, r7
 800f58e:	b009      	add	sp, #36	; 0x24
 800f590:	ecbd 8b06 	vpop	{d8-d10}
 800f594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f598:	f000 bc6c 	b.w	800fe74 <__ieee754_sqrt>
 800f59c:	2300      	movs	r3, #0
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	ec47 6b10 	vmov	d0, r6, r7
 800f5a4:	f000 fd48 	bl	8010038 <fabs>
 800f5a8:	ec51 0b10 	vmov	r0, r1, d0
 800f5ac:	f1ba 0f00 	cmp.w	sl, #0
 800f5b0:	d129      	bne.n	800f606 <__ieee754_pow+0x1ee>
 800f5b2:	b124      	cbz	r4, 800f5be <__ieee754_pow+0x1a6>
 800f5b4:	4b2f      	ldr	r3, [pc, #188]	; (800f674 <__ieee754_pow+0x25c>)
 800f5b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d123      	bne.n	800f606 <__ieee754_pow+0x1ee>
 800f5be:	f1b9 0f00 	cmp.w	r9, #0
 800f5c2:	da05      	bge.n	800f5d0 <__ieee754_pow+0x1b8>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	492a      	ldr	r1, [pc, #168]	; (800f674 <__ieee754_pow+0x25c>)
 800f5cc:	f7f1 f8ee 	bl	80007ac <__aeabi_ddiv>
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	f6bf af40 	bge.w	800f456 <__ieee754_pow+0x3e>
 800f5d6:	9b04      	ldr	r3, [sp, #16]
 800f5d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f5dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f5e0:	4323      	orrs	r3, r4
 800f5e2:	d108      	bne.n	800f5f6 <__ieee754_pow+0x1de>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	f7f0 fdfc 	bl	80001e8 <__aeabi_dsub>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	e78f      	b.n	800f516 <__ieee754_pow+0xfe>
 800f5f6:	9b04      	ldr	r3, [sp, #16]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	f47f af2c 	bne.w	800f456 <__ieee754_pow+0x3e>
 800f5fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f602:	4619      	mov	r1, r3
 800f604:	e727      	b.n	800f456 <__ieee754_pow+0x3e>
 800f606:	0feb      	lsrs	r3, r5, #31
 800f608:	3b01      	subs	r3, #1
 800f60a:	9306      	str	r3, [sp, #24]
 800f60c:	9a06      	ldr	r2, [sp, #24]
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	4313      	orrs	r3, r2
 800f612:	d102      	bne.n	800f61a <__ieee754_pow+0x202>
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	e7e6      	b.n	800f5e8 <__ieee754_pow+0x1d0>
 800f61a:	4b19      	ldr	r3, [pc, #100]	; (800f680 <__ieee754_pow+0x268>)
 800f61c:	4598      	cmp	r8, r3
 800f61e:	f340 80fb 	ble.w	800f818 <__ieee754_pow+0x400>
 800f622:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f626:	4598      	cmp	r8, r3
 800f628:	4b13      	ldr	r3, [pc, #76]	; (800f678 <__ieee754_pow+0x260>)
 800f62a:	dd0c      	ble.n	800f646 <__ieee754_pow+0x22e>
 800f62c:	429c      	cmp	r4, r3
 800f62e:	dc0f      	bgt.n	800f650 <__ieee754_pow+0x238>
 800f630:	f1b9 0f00 	cmp.w	r9, #0
 800f634:	da0f      	bge.n	800f656 <__ieee754_pow+0x23e>
 800f636:	2000      	movs	r0, #0
 800f638:	b009      	add	sp, #36	; 0x24
 800f63a:	ecbd 8b06 	vpop	{d8-d10}
 800f63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f642:	f000 bcf0 	b.w	8010026 <__math_oflow>
 800f646:	429c      	cmp	r4, r3
 800f648:	dbf2      	blt.n	800f630 <__ieee754_pow+0x218>
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <__ieee754_pow+0x25c>)
 800f64c:	429c      	cmp	r4, r3
 800f64e:	dd19      	ble.n	800f684 <__ieee754_pow+0x26c>
 800f650:	f1b9 0f00 	cmp.w	r9, #0
 800f654:	dcef      	bgt.n	800f636 <__ieee754_pow+0x21e>
 800f656:	2000      	movs	r0, #0
 800f658:	b009      	add	sp, #36	; 0x24
 800f65a:	ecbd 8b06 	vpop	{d8-d10}
 800f65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f662:	f000 bcd7 	b.w	8010014 <__math_uflow>
 800f666:	bf00      	nop
 800f668:	fff00000 	.word	0xfff00000
 800f66c:	7ff00000 	.word	0x7ff00000
 800f670:	433fffff 	.word	0x433fffff
 800f674:	3ff00000 	.word	0x3ff00000
 800f678:	3fefffff 	.word	0x3fefffff
 800f67c:	3fe00000 	.word	0x3fe00000
 800f680:	41e00000 	.word	0x41e00000
 800f684:	4b60      	ldr	r3, [pc, #384]	; (800f808 <__ieee754_pow+0x3f0>)
 800f686:	2200      	movs	r2, #0
 800f688:	f7f0 fdae 	bl	80001e8 <__aeabi_dsub>
 800f68c:	a354      	add	r3, pc, #336	; (adr r3, 800f7e0 <__ieee754_pow+0x3c8>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	4604      	mov	r4, r0
 800f694:	460d      	mov	r5, r1
 800f696:	f7f0 ff5f 	bl	8000558 <__aeabi_dmul>
 800f69a:	a353      	add	r3, pc, #332	; (adr r3, 800f7e8 <__ieee754_pow+0x3d0>)
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	4606      	mov	r6, r0
 800f6a2:	460f      	mov	r7, r1
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	f7f0 ff56 	bl	8000558 <__aeabi_dmul>
 800f6ac:	4b57      	ldr	r3, [pc, #348]	; (800f80c <__ieee754_pow+0x3f4>)
 800f6ae:	4682      	mov	sl, r0
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f0 ff4e 	bl	8000558 <__aeabi_dmul>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	a14b      	add	r1, pc, #300	; (adr r1, 800f7f0 <__ieee754_pow+0x3d8>)
 800f6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6c6:	f7f0 fd8f 	bl	80001e8 <__aeabi_dsub>
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	f7f0 ff43 	bl	8000558 <__aeabi_dmul>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	494d      	ldr	r1, [pc, #308]	; (800f810 <__ieee754_pow+0x3f8>)
 800f6da:	f7f0 fd85 	bl	80001e8 <__aeabi_dsub>
 800f6de:	4622      	mov	r2, r4
 800f6e0:	4680      	mov	r8, r0
 800f6e2:	4689      	mov	r9, r1
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	f7f0 ff35 	bl	8000558 <__aeabi_dmul>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4640      	mov	r0, r8
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	f7f0 ff2f 	bl	8000558 <__aeabi_dmul>
 800f6fa:	a33f      	add	r3, pc, #252	; (adr r3, 800f7f8 <__ieee754_pow+0x3e0>)
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	f7f0 ff2a 	bl	8000558 <__aeabi_dmul>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4650      	mov	r0, sl
 800f70a:	4659      	mov	r1, fp
 800f70c:	f7f0 fd6c 	bl	80001e8 <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	4680      	mov	r8, r0
 800f716:	4689      	mov	r9, r1
 800f718:	4630      	mov	r0, r6
 800f71a:	4639      	mov	r1, r7
 800f71c:	f7f0 fd66 	bl	80001ec <__adddf3>
 800f720:	2000      	movs	r0, #0
 800f722:	4632      	mov	r2, r6
 800f724:	463b      	mov	r3, r7
 800f726:	4604      	mov	r4, r0
 800f728:	460d      	mov	r5, r1
 800f72a:	f7f0 fd5d 	bl	80001e8 <__aeabi_dsub>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 fd57 	bl	80001e8 <__aeabi_dsub>
 800f73a:	9b04      	ldr	r3, [sp, #16]
 800f73c:	9a06      	ldr	r2, [sp, #24]
 800f73e:	3b01      	subs	r3, #1
 800f740:	4313      	orrs	r3, r2
 800f742:	4682      	mov	sl, r0
 800f744:	468b      	mov	fp, r1
 800f746:	f040 81e7 	bne.w	800fb18 <__ieee754_pow+0x700>
 800f74a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f800 <__ieee754_pow+0x3e8>
 800f74e:	eeb0 8a47 	vmov.f32	s16, s14
 800f752:	eef0 8a67 	vmov.f32	s17, s15
 800f756:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f75a:	2600      	movs	r6, #0
 800f75c:	4632      	mov	r2, r6
 800f75e:	463b      	mov	r3, r7
 800f760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f764:	f7f0 fd40 	bl	80001e8 <__aeabi_dsub>
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	f7f0 fef4 	bl	8000558 <__aeabi_dmul>
 800f770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f774:	4680      	mov	r8, r0
 800f776:	4689      	mov	r9, r1
 800f778:	4650      	mov	r0, sl
 800f77a:	4659      	mov	r1, fp
 800f77c:	f7f0 feec 	bl	8000558 <__aeabi_dmul>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4640      	mov	r0, r8
 800f786:	4649      	mov	r1, r9
 800f788:	f7f0 fd30 	bl	80001ec <__adddf3>
 800f78c:	4632      	mov	r2, r6
 800f78e:	463b      	mov	r3, r7
 800f790:	4680      	mov	r8, r0
 800f792:	4689      	mov	r9, r1
 800f794:	4620      	mov	r0, r4
 800f796:	4629      	mov	r1, r5
 800f798:	f7f0 fede 	bl	8000558 <__aeabi_dmul>
 800f79c:	460b      	mov	r3, r1
 800f79e:	4604      	mov	r4, r0
 800f7a0:	460d      	mov	r5, r1
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	4649      	mov	r1, r9
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	f7f0 fd20 	bl	80001ec <__adddf3>
 800f7ac:	4b19      	ldr	r3, [pc, #100]	; (800f814 <__ieee754_pow+0x3fc>)
 800f7ae:	4299      	cmp	r1, r3
 800f7b0:	ec45 4b19 	vmov	d9, r4, r5
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	460f      	mov	r7, r1
 800f7b8:	468b      	mov	fp, r1
 800f7ba:	f340 82f1 	ble.w	800fda0 <__ieee754_pow+0x988>
 800f7be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f7c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f7c6:	4303      	orrs	r3, r0
 800f7c8:	f000 81e4 	beq.w	800fb94 <__ieee754_pow+0x77c>
 800f7cc:	ec51 0b18 	vmov	r0, r1, d8
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f7f1 f932 	bl	8000a3c <__aeabi_dcmplt>
 800f7d8:	3800      	subs	r0, #0
 800f7da:	bf18      	it	ne
 800f7dc:	2001      	movne	r0, #1
 800f7de:	e72b      	b.n	800f638 <__ieee754_pow+0x220>
 800f7e0:	60000000 	.word	0x60000000
 800f7e4:	3ff71547 	.word	0x3ff71547
 800f7e8:	f85ddf44 	.word	0xf85ddf44
 800f7ec:	3e54ae0b 	.word	0x3e54ae0b
 800f7f0:	55555555 	.word	0x55555555
 800f7f4:	3fd55555 	.word	0x3fd55555
 800f7f8:	652b82fe 	.word	0x652b82fe
 800f7fc:	3ff71547 	.word	0x3ff71547
 800f800:	00000000 	.word	0x00000000
 800f804:	bff00000 	.word	0xbff00000
 800f808:	3ff00000 	.word	0x3ff00000
 800f80c:	3fd00000 	.word	0x3fd00000
 800f810:	3fe00000 	.word	0x3fe00000
 800f814:	408fffff 	.word	0x408fffff
 800f818:	4bd5      	ldr	r3, [pc, #852]	; (800fb70 <__ieee754_pow+0x758>)
 800f81a:	402b      	ands	r3, r5
 800f81c:	2200      	movs	r2, #0
 800f81e:	b92b      	cbnz	r3, 800f82c <__ieee754_pow+0x414>
 800f820:	4bd4      	ldr	r3, [pc, #848]	; (800fb74 <__ieee754_pow+0x75c>)
 800f822:	f7f0 fe99 	bl	8000558 <__aeabi_dmul>
 800f826:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f82a:	460c      	mov	r4, r1
 800f82c:	1523      	asrs	r3, r4, #20
 800f82e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f832:	4413      	add	r3, r2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	4bd0      	ldr	r3, [pc, #832]	; (800fb78 <__ieee754_pow+0x760>)
 800f838:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f83c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f840:	429c      	cmp	r4, r3
 800f842:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f846:	dd08      	ble.n	800f85a <__ieee754_pow+0x442>
 800f848:	4bcc      	ldr	r3, [pc, #816]	; (800fb7c <__ieee754_pow+0x764>)
 800f84a:	429c      	cmp	r4, r3
 800f84c:	f340 8162 	ble.w	800fb14 <__ieee754_pow+0x6fc>
 800f850:	9b05      	ldr	r3, [sp, #20]
 800f852:	3301      	adds	r3, #1
 800f854:	9305      	str	r3, [sp, #20]
 800f856:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f85a:	2400      	movs	r4, #0
 800f85c:	00e3      	lsls	r3, r4, #3
 800f85e:	9307      	str	r3, [sp, #28]
 800f860:	4bc7      	ldr	r3, [pc, #796]	; (800fb80 <__ieee754_pow+0x768>)
 800f862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f866:	ed93 7b00 	vldr	d7, [r3]
 800f86a:	4629      	mov	r1, r5
 800f86c:	ec53 2b17 	vmov	r2, r3, d7
 800f870:	eeb0 9a47 	vmov.f32	s18, s14
 800f874:	eef0 9a67 	vmov.f32	s19, s15
 800f878:	4682      	mov	sl, r0
 800f87a:	f7f0 fcb5 	bl	80001e8 <__aeabi_dsub>
 800f87e:	4652      	mov	r2, sl
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	462b      	mov	r3, r5
 800f886:	ec51 0b19 	vmov	r0, r1, d9
 800f88a:	f7f0 fcaf 	bl	80001ec <__adddf3>
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	2000      	movs	r0, #0
 800f894:	49bb      	ldr	r1, [pc, #748]	; (800fb84 <__ieee754_pow+0x76c>)
 800f896:	f7f0 ff89 	bl	80007ac <__aeabi_ddiv>
 800f89a:	ec41 0b1a 	vmov	d10, r0, r1
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	f7f0 fe57 	bl	8000558 <__aeabi_dmul>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b0:	9302      	str	r3, [sp, #8]
 800f8b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8b6:	46ab      	mov	fp, r5
 800f8b8:	106d      	asrs	r5, r5, #1
 800f8ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f8be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f8c2:	ec41 0b18 	vmov	d8, r0, r1
 800f8c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	4614      	mov	r4, r2
 800f8d2:	461d      	mov	r5, r3
 800f8d4:	f7f0 fe40 	bl	8000558 <__aeabi_dmul>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	4630      	mov	r0, r6
 800f8de:	4639      	mov	r1, r7
 800f8e0:	f7f0 fc82 	bl	80001e8 <__aeabi_dsub>
 800f8e4:	ec53 2b19 	vmov	r2, r3, d9
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	460f      	mov	r7, r1
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f7f0 fc7a 	bl	80001e8 <__aeabi_dsub>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	4650      	mov	r0, sl
 800f8fa:	4659      	mov	r1, fp
 800f8fc:	f7f0 fc74 	bl	80001e8 <__aeabi_dsub>
 800f900:	4642      	mov	r2, r8
 800f902:	464b      	mov	r3, r9
 800f904:	f7f0 fe28 	bl	8000558 <__aeabi_dmul>
 800f908:	4602      	mov	r2, r0
 800f90a:	460b      	mov	r3, r1
 800f90c:	4630      	mov	r0, r6
 800f90e:	4639      	mov	r1, r7
 800f910:	f7f0 fc6a 	bl	80001e8 <__aeabi_dsub>
 800f914:	ec53 2b1a 	vmov	r2, r3, d10
 800f918:	f7f0 fe1e 	bl	8000558 <__aeabi_dmul>
 800f91c:	ec53 2b18 	vmov	r2, r3, d8
 800f920:	ec41 0b19 	vmov	d9, r0, r1
 800f924:	ec51 0b18 	vmov	r0, r1, d8
 800f928:	f7f0 fe16 	bl	8000558 <__aeabi_dmul>
 800f92c:	a37c      	add	r3, pc, #496	; (adr r3, 800fb20 <__ieee754_pow+0x708>)
 800f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f932:	4604      	mov	r4, r0
 800f934:	460d      	mov	r5, r1
 800f936:	f7f0 fe0f 	bl	8000558 <__aeabi_dmul>
 800f93a:	a37b      	add	r3, pc, #492	; (adr r3, 800fb28 <__ieee754_pow+0x710>)
 800f93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f940:	f7f0 fc54 	bl	80001ec <__adddf3>
 800f944:	4622      	mov	r2, r4
 800f946:	462b      	mov	r3, r5
 800f948:	f7f0 fe06 	bl	8000558 <__aeabi_dmul>
 800f94c:	a378      	add	r3, pc, #480	; (adr r3, 800fb30 <__ieee754_pow+0x718>)
 800f94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f952:	f7f0 fc4b 	bl	80001ec <__adddf3>
 800f956:	4622      	mov	r2, r4
 800f958:	462b      	mov	r3, r5
 800f95a:	f7f0 fdfd 	bl	8000558 <__aeabi_dmul>
 800f95e:	a376      	add	r3, pc, #472	; (adr r3, 800fb38 <__ieee754_pow+0x720>)
 800f960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f964:	f7f0 fc42 	bl	80001ec <__adddf3>
 800f968:	4622      	mov	r2, r4
 800f96a:	462b      	mov	r3, r5
 800f96c:	f7f0 fdf4 	bl	8000558 <__aeabi_dmul>
 800f970:	a373      	add	r3, pc, #460	; (adr r3, 800fb40 <__ieee754_pow+0x728>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	f7f0 fc39 	bl	80001ec <__adddf3>
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	f7f0 fdeb 	bl	8000558 <__aeabi_dmul>
 800f982:	a371      	add	r3, pc, #452	; (adr r3, 800fb48 <__ieee754_pow+0x730>)
 800f984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f988:	f7f0 fc30 	bl	80001ec <__adddf3>
 800f98c:	4622      	mov	r2, r4
 800f98e:	4606      	mov	r6, r0
 800f990:	460f      	mov	r7, r1
 800f992:	462b      	mov	r3, r5
 800f994:	4620      	mov	r0, r4
 800f996:	4629      	mov	r1, r5
 800f998:	f7f0 fdde 	bl	8000558 <__aeabi_dmul>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	f7f0 fdd8 	bl	8000558 <__aeabi_dmul>
 800f9a8:	4642      	mov	r2, r8
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	464b      	mov	r3, r9
 800f9b0:	ec51 0b18 	vmov	r0, r1, d8
 800f9b4:	f7f0 fc1a 	bl	80001ec <__adddf3>
 800f9b8:	ec53 2b19 	vmov	r2, r3, d9
 800f9bc:	f7f0 fdcc 	bl	8000558 <__aeabi_dmul>
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f7f0 fc12 	bl	80001ec <__adddf3>
 800f9c8:	4642      	mov	r2, r8
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	468b      	mov	fp, r1
 800f9ce:	464b      	mov	r3, r9
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	f7f0 fdc0 	bl	8000558 <__aeabi_dmul>
 800f9d8:	4b6b      	ldr	r3, [pc, #428]	; (800fb88 <__ieee754_pow+0x770>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	4606      	mov	r6, r0
 800f9de:	460f      	mov	r7, r1
 800f9e0:	f7f0 fc04 	bl	80001ec <__adddf3>
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	465b      	mov	r3, fp
 800f9e8:	f7f0 fc00 	bl	80001ec <__adddf3>
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	f7f0 fdad 	bl	8000558 <__aeabi_dmul>
 800f9fe:	4b62      	ldr	r3, [pc, #392]	; (800fb88 <__ieee754_pow+0x770>)
 800fa00:	4680      	mov	r8, r0
 800fa02:	4689      	mov	r9, r1
 800fa04:	2200      	movs	r2, #0
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7f0 fbed 	bl	80001e8 <__aeabi_dsub>
 800fa0e:	4632      	mov	r2, r6
 800fa10:	463b      	mov	r3, r7
 800fa12:	f7f0 fbe9 	bl	80001e8 <__aeabi_dsub>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4650      	mov	r0, sl
 800fa1c:	4659      	mov	r1, fp
 800fa1e:	f7f0 fbe3 	bl	80001e8 <__aeabi_dsub>
 800fa22:	ec53 2b18 	vmov	r2, r3, d8
 800fa26:	f7f0 fd97 	bl	8000558 <__aeabi_dmul>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	460f      	mov	r7, r1
 800fa30:	462b      	mov	r3, r5
 800fa32:	ec51 0b19 	vmov	r0, r1, d9
 800fa36:	f7f0 fd8f 	bl	8000558 <__aeabi_dmul>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4630      	mov	r0, r6
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f0 fbd3 	bl	80001ec <__adddf3>
 800fa46:	4606      	mov	r6, r0
 800fa48:	460f      	mov	r7, r1
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4640      	mov	r0, r8
 800fa50:	4649      	mov	r1, r9
 800fa52:	f7f0 fbcb 	bl	80001ec <__adddf3>
 800fa56:	a33e      	add	r3, pc, #248	; (adr r3, 800fb50 <__ieee754_pow+0x738>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	4604      	mov	r4, r0
 800fa60:	460d      	mov	r5, r1
 800fa62:	f7f0 fd79 	bl	8000558 <__aeabi_dmul>
 800fa66:	4642      	mov	r2, r8
 800fa68:	ec41 0b18 	vmov	d8, r0, r1
 800fa6c:	464b      	mov	r3, r9
 800fa6e:	4620      	mov	r0, r4
 800fa70:	4629      	mov	r1, r5
 800fa72:	f7f0 fbb9 	bl	80001e8 <__aeabi_dsub>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f0 fbb3 	bl	80001e8 <__aeabi_dsub>
 800fa82:	a335      	add	r3, pc, #212	; (adr r3, 800fb58 <__ieee754_pow+0x740>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f7f0 fd66 	bl	8000558 <__aeabi_dmul>
 800fa8c:	a334      	add	r3, pc, #208	; (adr r3, 800fb60 <__ieee754_pow+0x748>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	4606      	mov	r6, r0
 800fa94:	460f      	mov	r7, r1
 800fa96:	4620      	mov	r0, r4
 800fa98:	4629      	mov	r1, r5
 800fa9a:	f7f0 fd5d 	bl	8000558 <__aeabi_dmul>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	4630      	mov	r0, r6
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f0 fba1 	bl	80001ec <__adddf3>
 800faaa:	9a07      	ldr	r2, [sp, #28]
 800faac:	4b37      	ldr	r3, [pc, #220]	; (800fb8c <__ieee754_pow+0x774>)
 800faae:	4413      	add	r3, r2
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fb9a 	bl	80001ec <__adddf3>
 800fab8:	4682      	mov	sl, r0
 800faba:	9805      	ldr	r0, [sp, #20]
 800fabc:	468b      	mov	fp, r1
 800fabe:	f7f0 fce1 	bl	8000484 <__aeabi_i2d>
 800fac2:	9a07      	ldr	r2, [sp, #28]
 800fac4:	4b32      	ldr	r3, [pc, #200]	; (800fb90 <__ieee754_pow+0x778>)
 800fac6:	4413      	add	r3, r2
 800fac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800facc:	4606      	mov	r6, r0
 800face:	460f      	mov	r7, r1
 800fad0:	4652      	mov	r2, sl
 800fad2:	465b      	mov	r3, fp
 800fad4:	ec51 0b18 	vmov	r0, r1, d8
 800fad8:	f7f0 fb88 	bl	80001ec <__adddf3>
 800fadc:	4642      	mov	r2, r8
 800fade:	464b      	mov	r3, r9
 800fae0:	f7f0 fb84 	bl	80001ec <__adddf3>
 800fae4:	4632      	mov	r2, r6
 800fae6:	463b      	mov	r3, r7
 800fae8:	f7f0 fb80 	bl	80001ec <__adddf3>
 800faec:	2000      	movs	r0, #0
 800faee:	4632      	mov	r2, r6
 800faf0:	463b      	mov	r3, r7
 800faf2:	4604      	mov	r4, r0
 800faf4:	460d      	mov	r5, r1
 800faf6:	f7f0 fb77 	bl	80001e8 <__aeabi_dsub>
 800fafa:	4642      	mov	r2, r8
 800fafc:	464b      	mov	r3, r9
 800fafe:	f7f0 fb73 	bl	80001e8 <__aeabi_dsub>
 800fb02:	ec53 2b18 	vmov	r2, r3, d8
 800fb06:	f7f0 fb6f 	bl	80001e8 <__aeabi_dsub>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4650      	mov	r0, sl
 800fb10:	4659      	mov	r1, fp
 800fb12:	e610      	b.n	800f736 <__ieee754_pow+0x31e>
 800fb14:	2401      	movs	r4, #1
 800fb16:	e6a1      	b.n	800f85c <__ieee754_pow+0x444>
 800fb18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fb68 <__ieee754_pow+0x750>
 800fb1c:	e617      	b.n	800f74e <__ieee754_pow+0x336>
 800fb1e:	bf00      	nop
 800fb20:	4a454eef 	.word	0x4a454eef
 800fb24:	3fca7e28 	.word	0x3fca7e28
 800fb28:	93c9db65 	.word	0x93c9db65
 800fb2c:	3fcd864a 	.word	0x3fcd864a
 800fb30:	a91d4101 	.word	0xa91d4101
 800fb34:	3fd17460 	.word	0x3fd17460
 800fb38:	518f264d 	.word	0x518f264d
 800fb3c:	3fd55555 	.word	0x3fd55555
 800fb40:	db6fabff 	.word	0xdb6fabff
 800fb44:	3fdb6db6 	.word	0x3fdb6db6
 800fb48:	33333303 	.word	0x33333303
 800fb4c:	3fe33333 	.word	0x3fe33333
 800fb50:	e0000000 	.word	0xe0000000
 800fb54:	3feec709 	.word	0x3feec709
 800fb58:	dc3a03fd 	.word	0xdc3a03fd
 800fb5c:	3feec709 	.word	0x3feec709
 800fb60:	145b01f5 	.word	0x145b01f5
 800fb64:	be3e2fe0 	.word	0xbe3e2fe0
 800fb68:	00000000 	.word	0x00000000
 800fb6c:	3ff00000 	.word	0x3ff00000
 800fb70:	7ff00000 	.word	0x7ff00000
 800fb74:	43400000 	.word	0x43400000
 800fb78:	0003988e 	.word	0x0003988e
 800fb7c:	000bb679 	.word	0x000bb679
 800fb80:	080104e8 	.word	0x080104e8
 800fb84:	3ff00000 	.word	0x3ff00000
 800fb88:	40080000 	.word	0x40080000
 800fb8c:	08010508 	.word	0x08010508
 800fb90:	080104f8 	.word	0x080104f8
 800fb94:	a3b5      	add	r3, pc, #724	; (adr r3, 800fe6c <__ieee754_pow+0xa54>)
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	f7f0 fb25 	bl	80001ec <__adddf3>
 800fba2:	4622      	mov	r2, r4
 800fba4:	ec41 0b1a 	vmov	d10, r0, r1
 800fba8:	462b      	mov	r3, r5
 800fbaa:	4630      	mov	r0, r6
 800fbac:	4639      	mov	r1, r7
 800fbae:	f7f0 fb1b 	bl	80001e8 <__aeabi_dsub>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	ec51 0b1a 	vmov	r0, r1, d10
 800fbba:	f7f0 ff5d 	bl	8000a78 <__aeabi_dcmpgt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f47f ae04 	bne.w	800f7cc <__ieee754_pow+0x3b4>
 800fbc4:	4aa4      	ldr	r2, [pc, #656]	; (800fe58 <__ieee754_pow+0xa40>)
 800fbc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	f340 8108 	ble.w	800fde0 <__ieee754_pow+0x9c8>
 800fbd0:	151b      	asrs	r3, r3, #20
 800fbd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fbd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fbda:	fa4a f303 	asr.w	r3, sl, r3
 800fbde:	445b      	add	r3, fp
 800fbe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fbe4:	4e9d      	ldr	r6, [pc, #628]	; (800fe5c <__ieee754_pow+0xa44>)
 800fbe6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fbea:	4116      	asrs	r6, r2
 800fbec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	ea23 0106 	bic.w	r1, r3, r6
 800fbf6:	f1c2 0214 	rsb	r2, r2, #20
 800fbfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fbfe:	fa4a fa02 	asr.w	sl, sl, r2
 800fc02:	f1bb 0f00 	cmp.w	fp, #0
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	bfb8      	it	lt
 800fc10:	f1ca 0a00 	rsblt	sl, sl, #0
 800fc14:	f7f0 fae8 	bl	80001e8 <__aeabi_dsub>
 800fc18:	ec41 0b19 	vmov	d9, r0, r1
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	464b      	mov	r3, r9
 800fc20:	ec51 0b19 	vmov	r0, r1, d9
 800fc24:	f7f0 fae2 	bl	80001ec <__adddf3>
 800fc28:	a37b      	add	r3, pc, #492	; (adr r3, 800fe18 <__ieee754_pow+0xa00>)
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	2000      	movs	r0, #0
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	f7f0 fc90 	bl	8000558 <__aeabi_dmul>
 800fc38:	ec53 2b19 	vmov	r2, r3, d9
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	460f      	mov	r7, r1
 800fc40:	4620      	mov	r0, r4
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7f0 fad0 	bl	80001e8 <__aeabi_dsub>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4649      	mov	r1, r9
 800fc50:	f7f0 faca 	bl	80001e8 <__aeabi_dsub>
 800fc54:	a372      	add	r3, pc, #456	; (adr r3, 800fe20 <__ieee754_pow+0xa08>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	f7f0 fc7d 	bl	8000558 <__aeabi_dmul>
 800fc5e:	a372      	add	r3, pc, #456	; (adr r3, 800fe28 <__ieee754_pow+0xa10>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	4680      	mov	r8, r0
 800fc66:	4689      	mov	r9, r1
 800fc68:	4620      	mov	r0, r4
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	f7f0 fc74 	bl	8000558 <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4640      	mov	r0, r8
 800fc76:	4649      	mov	r1, r9
 800fc78:	f7f0 fab8 	bl	80001ec <__adddf3>
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	460d      	mov	r5, r1
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4630      	mov	r0, r6
 800fc86:	4639      	mov	r1, r7
 800fc88:	f7f0 fab0 	bl	80001ec <__adddf3>
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	463b      	mov	r3, r7
 800fc90:	4680      	mov	r8, r0
 800fc92:	4689      	mov	r9, r1
 800fc94:	f7f0 faa8 	bl	80001e8 <__aeabi_dsub>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 faa2 	bl	80001e8 <__aeabi_dsub>
 800fca4:	4642      	mov	r2, r8
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	464b      	mov	r3, r9
 800fcac:	4640      	mov	r0, r8
 800fcae:	4649      	mov	r1, r9
 800fcb0:	f7f0 fc52 	bl	8000558 <__aeabi_dmul>
 800fcb4:	a35e      	add	r3, pc, #376	; (adr r3, 800fe30 <__ieee754_pow+0xa18>)
 800fcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcba:	4604      	mov	r4, r0
 800fcbc:	460d      	mov	r5, r1
 800fcbe:	f7f0 fc4b 	bl	8000558 <__aeabi_dmul>
 800fcc2:	a35d      	add	r3, pc, #372	; (adr r3, 800fe38 <__ieee754_pow+0xa20>)
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f0 fa8e 	bl	80001e8 <__aeabi_dsub>
 800fccc:	4622      	mov	r2, r4
 800fcce:	462b      	mov	r3, r5
 800fcd0:	f7f0 fc42 	bl	8000558 <__aeabi_dmul>
 800fcd4:	a35a      	add	r3, pc, #360	; (adr r3, 800fe40 <__ieee754_pow+0xa28>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f7f0 fa87 	bl	80001ec <__adddf3>
 800fcde:	4622      	mov	r2, r4
 800fce0:	462b      	mov	r3, r5
 800fce2:	f7f0 fc39 	bl	8000558 <__aeabi_dmul>
 800fce6:	a358      	add	r3, pc, #352	; (adr r3, 800fe48 <__ieee754_pow+0xa30>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	f7f0 fa7c 	bl	80001e8 <__aeabi_dsub>
 800fcf0:	4622      	mov	r2, r4
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	f7f0 fc30 	bl	8000558 <__aeabi_dmul>
 800fcf8:	a355      	add	r3, pc, #340	; (adr r3, 800fe50 <__ieee754_pow+0xa38>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fa75 	bl	80001ec <__adddf3>
 800fd02:	4622      	mov	r2, r4
 800fd04:	462b      	mov	r3, r5
 800fd06:	f7f0 fc27 	bl	8000558 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4640      	mov	r0, r8
 800fd10:	4649      	mov	r1, r9
 800fd12:	f7f0 fa69 	bl	80001e8 <__aeabi_dsub>
 800fd16:	4604      	mov	r4, r0
 800fd18:	460d      	mov	r5, r1
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	4640      	mov	r0, r8
 800fd20:	4649      	mov	r1, r9
 800fd22:	f7f0 fc19 	bl	8000558 <__aeabi_dmul>
 800fd26:	2200      	movs	r2, #0
 800fd28:	ec41 0b19 	vmov	d9, r0, r1
 800fd2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd30:	4620      	mov	r0, r4
 800fd32:	4629      	mov	r1, r5
 800fd34:	f7f0 fa58 	bl	80001e8 <__aeabi_dsub>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	ec51 0b19 	vmov	r0, r1, d9
 800fd40:	f7f0 fd34 	bl	80007ac <__aeabi_ddiv>
 800fd44:	4632      	mov	r2, r6
 800fd46:	4604      	mov	r4, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7f0 fc02 	bl	8000558 <__aeabi_dmul>
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	f7f0 fa48 	bl	80001ec <__adddf3>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	460b      	mov	r3, r1
 800fd60:	4620      	mov	r0, r4
 800fd62:	4629      	mov	r1, r5
 800fd64:	f7f0 fa40 	bl	80001e8 <__aeabi_dsub>
 800fd68:	4642      	mov	r2, r8
 800fd6a:	464b      	mov	r3, r9
 800fd6c:	f7f0 fa3c 	bl	80001e8 <__aeabi_dsub>
 800fd70:	460b      	mov	r3, r1
 800fd72:	4602      	mov	r2, r0
 800fd74:	493a      	ldr	r1, [pc, #232]	; (800fe60 <__ieee754_pow+0xa48>)
 800fd76:	2000      	movs	r0, #0
 800fd78:	f7f0 fa36 	bl	80001e8 <__aeabi_dsub>
 800fd7c:	ec41 0b10 	vmov	d0, r0, r1
 800fd80:	ee10 3a90 	vmov	r3, s1
 800fd84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fd88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd8c:	da2b      	bge.n	800fde6 <__ieee754_pow+0x9ce>
 800fd8e:	4650      	mov	r0, sl
 800fd90:	f000 f966 	bl	8010060 <scalbn>
 800fd94:	ec51 0b10 	vmov	r0, r1, d0
 800fd98:	ec53 2b18 	vmov	r2, r3, d8
 800fd9c:	f7ff bbed 	b.w	800f57a <__ieee754_pow+0x162>
 800fda0:	4b30      	ldr	r3, [pc, #192]	; (800fe64 <__ieee754_pow+0xa4c>)
 800fda2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fda6:	429e      	cmp	r6, r3
 800fda8:	f77f af0c 	ble.w	800fbc4 <__ieee754_pow+0x7ac>
 800fdac:	4b2e      	ldr	r3, [pc, #184]	; (800fe68 <__ieee754_pow+0xa50>)
 800fdae:	440b      	add	r3, r1
 800fdb0:	4303      	orrs	r3, r0
 800fdb2:	d009      	beq.n	800fdc8 <__ieee754_pow+0x9b0>
 800fdb4:	ec51 0b18 	vmov	r0, r1, d8
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2300      	movs	r3, #0
 800fdbc:	f7f0 fe3e 	bl	8000a3c <__aeabi_dcmplt>
 800fdc0:	3800      	subs	r0, #0
 800fdc2:	bf18      	it	ne
 800fdc4:	2001      	movne	r0, #1
 800fdc6:	e447      	b.n	800f658 <__ieee754_pow+0x240>
 800fdc8:	4622      	mov	r2, r4
 800fdca:	462b      	mov	r3, r5
 800fdcc:	f7f0 fa0c 	bl	80001e8 <__aeabi_dsub>
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	f7f0 fe46 	bl	8000a64 <__aeabi_dcmpge>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	f43f aef3 	beq.w	800fbc4 <__ieee754_pow+0x7ac>
 800fdde:	e7e9      	b.n	800fdb4 <__ieee754_pow+0x99c>
 800fde0:	f04f 0a00 	mov.w	sl, #0
 800fde4:	e71a      	b.n	800fc1c <__ieee754_pow+0x804>
 800fde6:	ec51 0b10 	vmov	r0, r1, d0
 800fdea:	4619      	mov	r1, r3
 800fdec:	e7d4      	b.n	800fd98 <__ieee754_pow+0x980>
 800fdee:	491c      	ldr	r1, [pc, #112]	; (800fe60 <__ieee754_pow+0xa48>)
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	f7ff bb30 	b.w	800f456 <__ieee754_pow+0x3e>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	f7ff bb2c 	b.w	800f456 <__ieee754_pow+0x3e>
 800fdfe:	4630      	mov	r0, r6
 800fe00:	4639      	mov	r1, r7
 800fe02:	f7ff bb28 	b.w	800f456 <__ieee754_pow+0x3e>
 800fe06:	9204      	str	r2, [sp, #16]
 800fe08:	f7ff bb7a 	b.w	800f500 <__ieee754_pow+0xe8>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f7ff bb64 	b.w	800f4da <__ieee754_pow+0xc2>
 800fe12:	bf00      	nop
 800fe14:	f3af 8000 	nop.w
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3fe62e43 	.word	0x3fe62e43
 800fe20:	fefa39ef 	.word	0xfefa39ef
 800fe24:	3fe62e42 	.word	0x3fe62e42
 800fe28:	0ca86c39 	.word	0x0ca86c39
 800fe2c:	be205c61 	.word	0xbe205c61
 800fe30:	72bea4d0 	.word	0x72bea4d0
 800fe34:	3e663769 	.word	0x3e663769
 800fe38:	c5d26bf1 	.word	0xc5d26bf1
 800fe3c:	3ebbbd41 	.word	0x3ebbbd41
 800fe40:	af25de2c 	.word	0xaf25de2c
 800fe44:	3f11566a 	.word	0x3f11566a
 800fe48:	16bebd93 	.word	0x16bebd93
 800fe4c:	3f66c16c 	.word	0x3f66c16c
 800fe50:	5555553e 	.word	0x5555553e
 800fe54:	3fc55555 	.word	0x3fc55555
 800fe58:	3fe00000 	.word	0x3fe00000
 800fe5c:	000fffff 	.word	0x000fffff
 800fe60:	3ff00000 	.word	0x3ff00000
 800fe64:	4090cbff 	.word	0x4090cbff
 800fe68:	3f6f3400 	.word	0x3f6f3400
 800fe6c:	652b82fe 	.word	0x652b82fe
 800fe70:	3c971547 	.word	0x3c971547

0800fe74 <__ieee754_sqrt>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	ec55 4b10 	vmov	r4, r5, d0
 800fe7c:	4e55      	ldr	r6, [pc, #340]	; (800ffd4 <__ieee754_sqrt+0x160>)
 800fe7e:	43ae      	bics	r6, r5
 800fe80:	ee10 0a10 	vmov	r0, s0
 800fe84:	ee10 3a10 	vmov	r3, s0
 800fe88:	462a      	mov	r2, r5
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	d110      	bne.n	800feb0 <__ieee754_sqrt+0x3c>
 800fe8e:	ee10 2a10 	vmov	r2, s0
 800fe92:	462b      	mov	r3, r5
 800fe94:	f7f0 fb60 	bl	8000558 <__aeabi_dmul>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	4629      	mov	r1, r5
 800fea0:	f7f0 f9a4 	bl	80001ec <__adddf3>
 800fea4:	4604      	mov	r4, r0
 800fea6:	460d      	mov	r5, r1
 800fea8:	ec45 4b10 	vmov	d0, r4, r5
 800feac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	dc10      	bgt.n	800fed6 <__ieee754_sqrt+0x62>
 800feb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800feb8:	4330      	orrs	r0, r6
 800feba:	d0f5      	beq.n	800fea8 <__ieee754_sqrt+0x34>
 800febc:	b15d      	cbz	r5, 800fed6 <__ieee754_sqrt+0x62>
 800febe:	ee10 2a10 	vmov	r2, s0
 800fec2:	462b      	mov	r3, r5
 800fec4:	ee10 0a10 	vmov	r0, s0
 800fec8:	f7f0 f98e 	bl	80001e8 <__aeabi_dsub>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	f7f0 fc6c 	bl	80007ac <__aeabi_ddiv>
 800fed4:	e7e6      	b.n	800fea4 <__ieee754_sqrt+0x30>
 800fed6:	1512      	asrs	r2, r2, #20
 800fed8:	d074      	beq.n	800ffc4 <__ieee754_sqrt+0x150>
 800feda:	07d4      	lsls	r4, r2, #31
 800fedc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fee0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fee8:	bf5e      	ittt	pl
 800feea:	0fda      	lsrpl	r2, r3, #31
 800feec:	005b      	lslpl	r3, r3, #1
 800feee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fef2:	2400      	movs	r4, #0
 800fef4:	0fda      	lsrs	r2, r3, #31
 800fef6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fefa:	107f      	asrs	r7, r7, #1
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	2516      	movs	r5, #22
 800ff00:	4620      	mov	r0, r4
 800ff02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ff06:	1886      	adds	r6, r0, r2
 800ff08:	428e      	cmp	r6, r1
 800ff0a:	bfde      	ittt	le
 800ff0c:	1b89      	suble	r1, r1, r6
 800ff0e:	18b0      	addle	r0, r6, r2
 800ff10:	18a4      	addle	r4, r4, r2
 800ff12:	0049      	lsls	r1, r1, #1
 800ff14:	3d01      	subs	r5, #1
 800ff16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ff1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ff1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff22:	d1f0      	bne.n	800ff06 <__ieee754_sqrt+0x92>
 800ff24:	462a      	mov	r2, r5
 800ff26:	f04f 0e20 	mov.w	lr, #32
 800ff2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ff2e:	4281      	cmp	r1, r0
 800ff30:	eb06 0c05 	add.w	ip, r6, r5
 800ff34:	dc02      	bgt.n	800ff3c <__ieee754_sqrt+0xc8>
 800ff36:	d113      	bne.n	800ff60 <__ieee754_sqrt+0xec>
 800ff38:	459c      	cmp	ip, r3
 800ff3a:	d811      	bhi.n	800ff60 <__ieee754_sqrt+0xec>
 800ff3c:	f1bc 0f00 	cmp.w	ip, #0
 800ff40:	eb0c 0506 	add.w	r5, ip, r6
 800ff44:	da43      	bge.n	800ffce <__ieee754_sqrt+0x15a>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	db41      	blt.n	800ffce <__ieee754_sqrt+0x15a>
 800ff4a:	f100 0801 	add.w	r8, r0, #1
 800ff4e:	1a09      	subs	r1, r1, r0
 800ff50:	459c      	cmp	ip, r3
 800ff52:	bf88      	it	hi
 800ff54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ff58:	eba3 030c 	sub.w	r3, r3, ip
 800ff5c:	4432      	add	r2, r6
 800ff5e:	4640      	mov	r0, r8
 800ff60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ff64:	f1be 0e01 	subs.w	lr, lr, #1
 800ff68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ff6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ff74:	d1db      	bne.n	800ff2e <__ieee754_sqrt+0xba>
 800ff76:	430b      	orrs	r3, r1
 800ff78:	d006      	beq.n	800ff88 <__ieee754_sqrt+0x114>
 800ff7a:	1c50      	adds	r0, r2, #1
 800ff7c:	bf13      	iteet	ne
 800ff7e:	3201      	addne	r2, #1
 800ff80:	3401      	addeq	r4, #1
 800ff82:	4672      	moveq	r2, lr
 800ff84:	f022 0201 	bicne.w	r2, r2, #1
 800ff88:	1063      	asrs	r3, r4, #1
 800ff8a:	0852      	lsrs	r2, r2, #1
 800ff8c:	07e1      	lsls	r1, r4, #31
 800ff8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ff92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ff96:	bf48      	it	mi
 800ff98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ff9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ffa0:	4614      	mov	r4, r2
 800ffa2:	e781      	b.n	800fea8 <__ieee754_sqrt+0x34>
 800ffa4:	0ad9      	lsrs	r1, r3, #11
 800ffa6:	3815      	subs	r0, #21
 800ffa8:	055b      	lsls	r3, r3, #21
 800ffaa:	2900      	cmp	r1, #0
 800ffac:	d0fa      	beq.n	800ffa4 <__ieee754_sqrt+0x130>
 800ffae:	02cd      	lsls	r5, r1, #11
 800ffb0:	d50a      	bpl.n	800ffc8 <__ieee754_sqrt+0x154>
 800ffb2:	f1c2 0420 	rsb	r4, r2, #32
 800ffb6:	fa23 f404 	lsr.w	r4, r3, r4
 800ffba:	1e55      	subs	r5, r2, #1
 800ffbc:	4093      	lsls	r3, r2
 800ffbe:	4321      	orrs	r1, r4
 800ffc0:	1b42      	subs	r2, r0, r5
 800ffc2:	e78a      	b.n	800feda <__ieee754_sqrt+0x66>
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	e7f0      	b.n	800ffaa <__ieee754_sqrt+0x136>
 800ffc8:	0049      	lsls	r1, r1, #1
 800ffca:	3201      	adds	r2, #1
 800ffcc:	e7ef      	b.n	800ffae <__ieee754_sqrt+0x13a>
 800ffce:	4680      	mov	r8, r0
 800ffd0:	e7bd      	b.n	800ff4e <__ieee754_sqrt+0xda>
 800ffd2:	bf00      	nop
 800ffd4:	7ff00000 	.word	0x7ff00000

0800ffd8 <with_errno>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	4604      	mov	r4, r0
 800ffdc:	460d      	mov	r5, r1
 800ffde:	4616      	mov	r6, r2
 800ffe0:	f7ff f968 	bl	800f2b4 <__errno>
 800ffe4:	4629      	mov	r1, r5
 800ffe6:	6006      	str	r6, [r0, #0]
 800ffe8:	4620      	mov	r0, r4
 800ffea:	bd70      	pop	{r4, r5, r6, pc}

0800ffec <xflow>:
 800ffec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffee:	4614      	mov	r4, r2
 800fff0:	461d      	mov	r5, r3
 800fff2:	b108      	cbz	r0, 800fff8 <xflow+0xc>
 800fff4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fff8:	e9cd 2300 	strd	r2, r3, [sp]
 800fffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010000:	4620      	mov	r0, r4
 8010002:	4629      	mov	r1, r5
 8010004:	f7f0 faa8 	bl	8000558 <__aeabi_dmul>
 8010008:	2222      	movs	r2, #34	; 0x22
 801000a:	b003      	add	sp, #12
 801000c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010010:	f7ff bfe2 	b.w	800ffd8 <with_errno>

08010014 <__math_uflow>:
 8010014:	b508      	push	{r3, lr}
 8010016:	2200      	movs	r2, #0
 8010018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801001c:	f7ff ffe6 	bl	800ffec <xflow>
 8010020:	ec41 0b10 	vmov	d0, r0, r1
 8010024:	bd08      	pop	{r3, pc}

08010026 <__math_oflow>:
 8010026:	b508      	push	{r3, lr}
 8010028:	2200      	movs	r2, #0
 801002a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801002e:	f7ff ffdd 	bl	800ffec <xflow>
 8010032:	ec41 0b10 	vmov	d0, r0, r1
 8010036:	bd08      	pop	{r3, pc}

08010038 <fabs>:
 8010038:	ec51 0b10 	vmov	r0, r1, d0
 801003c:	ee10 2a10 	vmov	r2, s0
 8010040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010044:	ec43 2b10 	vmov	d0, r2, r3
 8010048:	4770      	bx	lr

0801004a <finite>:
 801004a:	b082      	sub	sp, #8
 801004c:	ed8d 0b00 	vstr	d0, [sp]
 8010050:	9801      	ldr	r0, [sp, #4]
 8010052:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010056:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801005a:	0fc0      	lsrs	r0, r0, #31
 801005c:	b002      	add	sp, #8
 801005e:	4770      	bx	lr

08010060 <scalbn>:
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	ec55 4b10 	vmov	r4, r5, d0
 8010066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801006a:	4606      	mov	r6, r0
 801006c:	462b      	mov	r3, r5
 801006e:	b99a      	cbnz	r2, 8010098 <scalbn+0x38>
 8010070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010074:	4323      	orrs	r3, r4
 8010076:	d036      	beq.n	80100e6 <scalbn+0x86>
 8010078:	4b39      	ldr	r3, [pc, #228]	; (8010160 <scalbn+0x100>)
 801007a:	4629      	mov	r1, r5
 801007c:	ee10 0a10 	vmov	r0, s0
 8010080:	2200      	movs	r2, #0
 8010082:	f7f0 fa69 	bl	8000558 <__aeabi_dmul>
 8010086:	4b37      	ldr	r3, [pc, #220]	; (8010164 <scalbn+0x104>)
 8010088:	429e      	cmp	r6, r3
 801008a:	4604      	mov	r4, r0
 801008c:	460d      	mov	r5, r1
 801008e:	da10      	bge.n	80100b2 <scalbn+0x52>
 8010090:	a32b      	add	r3, pc, #172	; (adr r3, 8010140 <scalbn+0xe0>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	e03a      	b.n	801010e <scalbn+0xae>
 8010098:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801009c:	428a      	cmp	r2, r1
 801009e:	d10c      	bne.n	80100ba <scalbn+0x5a>
 80100a0:	ee10 2a10 	vmov	r2, s0
 80100a4:	4620      	mov	r0, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	f7f0 f8a0 	bl	80001ec <__adddf3>
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	e019      	b.n	80100e6 <scalbn+0x86>
 80100b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100b6:	460b      	mov	r3, r1
 80100b8:	3a36      	subs	r2, #54	; 0x36
 80100ba:	4432      	add	r2, r6
 80100bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100c0:	428a      	cmp	r2, r1
 80100c2:	dd08      	ble.n	80100d6 <scalbn+0x76>
 80100c4:	2d00      	cmp	r5, #0
 80100c6:	a120      	add	r1, pc, #128	; (adr r1, 8010148 <scalbn+0xe8>)
 80100c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100cc:	da1c      	bge.n	8010108 <scalbn+0xa8>
 80100ce:	a120      	add	r1, pc, #128	; (adr r1, 8010150 <scalbn+0xf0>)
 80100d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d4:	e018      	b.n	8010108 <scalbn+0xa8>
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	dd08      	ble.n	80100ec <scalbn+0x8c>
 80100da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100e6:	ec45 4b10 	vmov	d0, r4, r5
 80100ea:	bd70      	pop	{r4, r5, r6, pc}
 80100ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80100f0:	da19      	bge.n	8010126 <scalbn+0xc6>
 80100f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100f6:	429e      	cmp	r6, r3
 80100f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80100fc:	dd0a      	ble.n	8010114 <scalbn+0xb4>
 80100fe:	a112      	add	r1, pc, #72	; (adr r1, 8010148 <scalbn+0xe8>)
 8010100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e2      	bne.n	80100ce <scalbn+0x6e>
 8010108:	a30f      	add	r3, pc, #60	; (adr r3, 8010148 <scalbn+0xe8>)
 801010a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010e:	f7f0 fa23 	bl	8000558 <__aeabi_dmul>
 8010112:	e7cb      	b.n	80100ac <scalbn+0x4c>
 8010114:	a10a      	add	r1, pc, #40	; (adr r1, 8010140 <scalbn+0xe0>)
 8010116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d0b8      	beq.n	8010090 <scalbn+0x30>
 801011e:	a10e      	add	r1, pc, #56	; (adr r1, 8010158 <scalbn+0xf8>)
 8010120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010124:	e7b4      	b.n	8010090 <scalbn+0x30>
 8010126:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801012a:	3236      	adds	r2, #54	; 0x36
 801012c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010130:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010134:	4620      	mov	r0, r4
 8010136:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <scalbn+0x108>)
 8010138:	2200      	movs	r2, #0
 801013a:	e7e8      	b.n	801010e <scalbn+0xae>
 801013c:	f3af 8000 	nop.w
 8010140:	c2f8f359 	.word	0xc2f8f359
 8010144:	01a56e1f 	.word	0x01a56e1f
 8010148:	8800759c 	.word	0x8800759c
 801014c:	7e37e43c 	.word	0x7e37e43c
 8010150:	8800759c 	.word	0x8800759c
 8010154:	fe37e43c 	.word	0xfe37e43c
 8010158:	c2f8f359 	.word	0xc2f8f359
 801015c:	81a56e1f 	.word	0x81a56e1f
 8010160:	43500000 	.word	0x43500000
 8010164:	ffff3cb0 	.word	0xffff3cb0
 8010168:	3c900000 	.word	0x3c900000

0801016c <_init>:
 801016c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016e:	bf00      	nop
 8010170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010172:	bc08      	pop	{r3}
 8010174:	469e      	mov	lr, r3
 8010176:	4770      	bx	lr

08010178 <_fini>:
 8010178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017a:	bf00      	nop
 801017c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801017e:	bc08      	pop	{r3}
 8010180:	469e      	mov	lr, r3
 8010182:	4770      	bx	lr
