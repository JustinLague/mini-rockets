
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af6c  0800af6c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af74  0800af74  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800af7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00006b50  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006c50  20006c50  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002572e  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000577f  00000000  00000000  0004585e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  0004afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb8  00000000  00000000  0004ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274c0  00000000  00000000  0004e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002590c  00000000  00000000  00075e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6114  00000000  00000000  0009b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001718b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cd8  00000000  00000000  00171908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad08 	.word	0x0800ad08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800ad08 	.word	0x0800ad08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <initBarometerTask>:
  .priority = (osPriority_t) osPriorityHigh, //Set initial thread priority to high
  .stack_size = 2048
};


void initBarometerTask(SPI_HandleTypeDef hspi1) {
 80004e4:	b084      	sub	sp, #16
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	f107 0c10 	add.w	ip, r7, #16
 80004f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadId_t barometer_id = osThreadNew(barometerTask, NULL, &barometerHeader_attr);
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <initBarometerTask+0x34>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <initBarometerTask+0x38>)
 80004fa:	f007 f9cd 	bl	8007898 <osThreadNew>
 80004fe:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init barometer task\r\n");
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <initBarometerTask+0x3c>)
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fe54 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000512:	b004      	add	sp, #16
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	0800ae20 	.word	0x0800ae20
 800051c:	08000525 	.word	0x08000525
 8000520:	0800ad20 	.word	0x0800ad20

08000524 <barometerTask>:

__NO_RETURN void barometerTask() {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	while(1) {
		osDelay(10);
 8000528:	200a      	movs	r0, #10
 800052a:	f007 fa47 	bl	80079bc <osDelay>
 800052e:	e7fb      	b.n	8000528 <barometerTask+0x4>

08000530 <initBuzzerTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initBuzzerTask() {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	osThreadId_t buzzer_id = osThreadNew(buzzerTask, NULL, &buzzerHeader_attr);
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <initBuzzerTask+0x24>)
 8000538:	2100      	movs	r1, #0
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <initBuzzerTask+0x28>)
 800053c:	f007 f9ac 	bl	8007898 <osThreadNew>
 8000540:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 8000542:	4906      	ldr	r1, [pc, #24]	; (800055c <initBuzzerTask+0x2c>)
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fe33 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	0800ae44 	.word	0x0800ae44
 8000558:	08000561 	.word	0x08000561
 800055c:	0800ad38 	.word	0x0800ad38

08000560 <buzzerTask>:

__NO_RETURN void buzzerTask() {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f007 fa29 	bl	80079bc <osDelay>
 800056a:	e7fb      	b.n	8000564 <buzzerTask+0x4>

0800056c <initHeartbeatTask>:
  .priority = (osPriority_t) osPriorityIdle, //Set initial thread priority to high
  .stack_size = 512
};


void initHeartbeatTask() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	osThreadId_t heartbeat_id = osThreadNew(heartbeatTask, NULL, &heartbeatHeader_attr);
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <initHeartbeatTask+0x24>)
 8000574:	2100      	movs	r1, #0
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <initHeartbeatTask+0x28>)
 8000578:	f007 f98e 	bl	8007898 <osThreadNew>
 800057c:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init heartbeat task\r\n");
 800057e:	4906      	ldr	r1, [pc, #24]	; (8000598 <initHeartbeatTask+0x2c>)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fe15 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	0800ae68 	.word	0x0800ae68
 8000594:	0800059d 	.word	0x0800059d
 8000598:	0800ad48 	.word	0x0800ad48

0800059c <heartbeatTask>:

__NO_RETURN void heartbeatTask() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80005a0:	200a      	movs	r0, #10
 80005a2:	f007 fa0b 	bl	80079bc <osDelay>
 80005a6:	e7fb      	b.n	80005a0 <heartbeatTask+0x4>

080005a8 <initIMUTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 2048
};


void initIMUTask(SPI_HandleTypeDef hspi1) {
 80005a8:	b084      	sub	sp, #16
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	f107 0c10 	add.w	ip, r7, #16
 80005b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadId_t imu_id = osThreadNew(IMUTask, NULL, &imuHeader_attr);
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <initIMUTask+0x34>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <initIMUTask+0x38>)
 80005be:	f007 f96b 	bl	8007898 <osThreadNew>
 80005c2:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <initIMUTask+0x3c>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fdf2 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	0800ae8c 	.word	0x0800ae8c
 80005e0:	080005e9 	.word	0x080005e9
 80005e4:	0800ad60 	.word	0x0800ad60

080005e8 <IMUTask>:

__NO_RETURN void IMUTask() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f007 f9e5 	bl	80079bc <osDelay>
 80005f2:	e7fb      	b.n	80005ec <IMUTask+0x4>

080005f4 <initMainTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 4096
};


void initMainTask() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	osThreadId_t main_id = osThreadNew(mainTask, NULL, &mainHeader_attr);
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <initMainTask+0x24>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <initMainTask+0x28>)
 8000600:	f007 f94a 	bl	8007898 <osThreadNew>
 8000604:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init main task\r\n");
 8000606:	4906      	ldr	r1, [pc, #24]	; (8000620 <initMainTask+0x2c>)
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fdd1 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	0800aeb0 	.word	0x0800aeb0
 800061c:	08000625 	.word	0x08000625
 8000620:	0800ad70 	.word	0x0800ad70

08000624 <mainTask>:

__NO_RETURN void mainTask() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f007 f9c7 	bl	80079bc <osDelay>
 800062e:	e7fb      	b.n	8000628 <mainTask+0x4>

08000630 <initMemoryTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 2048
};


void initMemoryTask(SPI_HandleTypeDef hspi2) {
 8000630:	b084      	sub	sp, #16
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	f107 0c10 	add.w	ip, r7, #16
 800063c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadId_t memory_id = osThreadNew(memoryTask, NULL, &memoryHeader_attr);
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <initMemoryTask+0x34>)
 8000642:	2100      	movs	r1, #0
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <initMemoryTask+0x38>)
 8000646:	f007 f927 	bl	8007898 <osThreadNew>
 800064a:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init Memory task\r\n");
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <initMemoryTask+0x3c>)
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fdae 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065e:	b004      	add	sp, #16
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	0800aed4 	.word	0x0800aed4
 8000668:	08000671 	.word	0x08000671
 800066c:	0800ad84 	.word	0x0800ad84

08000670 <memoryTask>:

__NO_RETURN void memoryTask() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000674:	200a      	movs	r0, #10
 8000676:	f007 f9a1 	bl	80079bc <osDelay>
 800067a:	e7fb      	b.n	8000674 <memoryTask+0x4>

0800067c <initUSBTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initUSBTask() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	osThreadId_t usb_id = osThreadNew(USBTask, NULL, &usbHeader_attr);
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <initUSBTask+0x24>)
 8000684:	2100      	movs	r1, #0
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <initUSBTask+0x28>)
 8000688:	f007 f906 	bl	8007898 <osThreadNew>
 800068c:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init usb task\r\n");
 800068e:	4906      	ldr	r1, [pc, #24]	; (80006a8 <initUSBTask+0x2c>)
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fd8d 	bl	80011b0 <SEGGER_RTT_WriteString>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800aef8 	.word	0x0800aef8
 80006a4:	080006ad 	.word	0x080006ad
 80006a8:	0800ad98 	.word	0x0800ad98

080006ac <USBTask>:

__NO_RETURN void USBTask() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f007 f983 	bl	80079bc <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <USBTask+0x4>

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b093      	sub	sp, #76	; 0x4c
 80006bc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fd8b 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f84b 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f947 	bl	8000958 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006ca:	f000 f8d9 	bl	8000880 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006ce:	f000 f90d 	bl	80008ec <MX_SPI2_Init>
  MX_RTC_Init();
 80006d2:	f000 f8af 	bl	8000834 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d6:	f007 f895 	bl	8007804 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006da:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <main+0x90>)
 80006dc:	2100      	movs	r1, #0
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0x94>)
 80006e0:	f007 f8da 	bl	8007898 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <main+0x98>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initBarometerTask(hspi1);
 80006ea:	4c1a      	ldr	r4, [pc, #104]	; (8000754 <main+0x9c>)
 80006ec:	4668      	mov	r0, sp
 80006ee:	f104 0310 	add.w	r3, r4, #16
 80006f2:	2248      	movs	r2, #72	; 0x48
 80006f4:	4619      	mov	r1, r3
 80006f6:	f00a faf1 	bl	800acdc <memcpy>
 80006fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fe:	f7ff fef1 	bl	80004e4 <initBarometerTask>
  initBuzzerTask();
 8000702:	f7ff ff15 	bl	8000530 <initBuzzerTask>
  initHeartbeatTask();
 8000706:	f7ff ff31 	bl	800056c <initHeartbeatTask>
  initIMUTask(hspi1);
 800070a:	4c12      	ldr	r4, [pc, #72]	; (8000754 <main+0x9c>)
 800070c:	4668      	mov	r0, sp
 800070e:	f104 0310 	add.w	r3, r4, #16
 8000712:	2248      	movs	r2, #72	; 0x48
 8000714:	4619      	mov	r1, r3
 8000716:	f00a fae1 	bl	800acdc <memcpy>
 800071a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800071e:	f7ff ff43 	bl	80005a8 <initIMUTask>
  initMainTask();
 8000722:	f7ff ff67 	bl	80005f4 <initMainTask>
  initMemoryTask(hspi2);
 8000726:	4c0c      	ldr	r4, [pc, #48]	; (8000758 <main+0xa0>)
 8000728:	4668      	mov	r0, sp
 800072a:	f104 0310 	add.w	r3, r4, #16
 800072e:	2248      	movs	r2, #72	; 0x48
 8000730:	4619      	mov	r1, r3
 8000732:	f00a fad3 	bl	800acdc <memcpy>
 8000736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800073a:	f7ff ff79 	bl	8000630 <initMemoryTask>
  initUSBTask();
 800073e:	f7ff ff9d 	bl	800067c <initUSBTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000742:	f007 f883 	bl	800784c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x8e>
 8000748:	0800af1c 	.word	0x0800af1c
 800074c:	08000ad5 	.word	0x08000ad5
 8000750:	200001ec 	.word	0x200001ec
 8000754:	2000013c 	.word	0x2000013c
 8000758:	20000194 	.word	0x20000194

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00a fac4 	bl	800acf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a28      	ldr	r2, [pc, #160]	; (800082c <SystemClock_Config+0xd0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <SystemClock_Config+0xd4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007b8:	2309      	movs	r3, #9
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d0:	2319      	movs	r3, #25
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007de:	2307      	movs	r3, #7
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fa70 	bl	8002ccc <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f2:	f000 f98b 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2302      	movs	r3, #2
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2105      	movs	r1, #5
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fcd1 	bl	80031bc <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000820:	f000 f974 	bl	8000b0c <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_RTC_Init+0x44>)
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <MX_RTC_Init+0x48>)
 800083c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_RTC_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_RTC_Init+0x44>)
 8000846:	227f      	movs	r2, #127	; 0x7f
 8000848:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_RTC_Init+0x44>)
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_RTC_Init+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_RTC_Init+0x44>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_RTC_Init+0x44>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_RTC_Init+0x44>)
 8000864:	f002 ff8a 	bl	800377c <HAL_RTC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800086e:	f000 f94d 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000011c 	.word	0x2000011c
 800087c:	40002800 	.word	0x40002800

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_SPI1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_SPI1_Init+0x64>)
 80008d2:	f003 f84d 	bl	8003970 <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008dc:	f000 f916 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000013c 	.word	0x2000013c
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI2_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI2_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI2_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI2_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI2_Init+0x64>)
 800093e:	f003 f817 	bl	8003970 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f8e0 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000194 	.word	0x20000194
 8000954:	40003800 	.word	0x40003800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <MX_GPIO_Init+0x168>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <MX_GPIO_Init+0x168>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <MX_GPIO_Init+0x168>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_GPIO_Init+0x168>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <MX_GPIO_Init+0x168>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <MX_GPIO_Init+0x168>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a36      	ldr	r2, [pc, #216]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x168>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f248 0118 	movw	r1, #32792	; 0x8018
 8000a00:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x16c>)
 8000a02:	f000 fecd 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8000a0c:	482e      	ldr	r0, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0x170>)
 8000a0e:	f000 fec7 	bl	80017a0 <HAL_GPIO_WritePin>
                          |LED_4_Pin|SENSE_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8000a18:	482c      	ldr	r0, [pc, #176]	; (8000acc <MX_GPIO_Init+0x174>)
 8000a1a:	f000 fec1 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_1_GPIO_Port, FIRE_1_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	482b      	ldr	r0, [pc, #172]	; (8000ad0 <MX_GPIO_Init+0x178>)
 8000a24:	f000 febc 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_ALTIMITER_Pin SPI1_CS_IMU_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin;
 8000a28:	f248 0318 	movw	r3, #32792	; 0x8018
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <MX_GPIO_Init+0x16c>)
 8000a42:	f000 fd11 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin SENSE_2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000a46:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8000a4a:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|SENSE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x170>)
 8000a60:	f000 fd02 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_MEMORY_Pin HOLD_Pin CS_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin;
 8000a64:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_GPIO_Init+0x174>)
 8000a7e:	f000 fcf3 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : FIRE_2_Pin SENSE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_2_Pin|SENSE_1_Pin;
 8000a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_GPIO_Init+0x170>)
 8000a98:	f000 fce6 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_1_Pin;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FIRE_1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_GPIO_Init+0x178>)
 8000ab4:	f000 fcd8 	bl	8001468 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000adc:	f009 fbe6 	bl	800a2ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f006 ff6b 	bl	80079bc <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <StartDefaultTask+0xc>

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afa:	f000 fb8f 	bl	800121c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40001000 	.word	0x40001000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <HAL_MspInit+0x54>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x54>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_MspInit+0x54>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_MspInit+0x54>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fc59 	bl	8001414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <HAL_RTC_MspInit+0x4c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d111      	bne.n	8000bb4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b98:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fd0a 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000baa:	f7ff ffaf 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <HAL_RTC_MspInit+0x50>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40002800 	.word	0x40002800
 8000bc0:	42470e3c 	.word	0x42470e3c

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a41      	ldr	r2, [pc, #260]	; (8000ce8 <HAL_SPI_MspInit+0x124>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12c      	bne.n	8000c40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b40      	ldr	r3, [pc, #256]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b39      	ldr	r3, [pc, #228]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a38      	ldr	r2, [pc, #224]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b36      	ldr	r3, [pc, #216]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23e0      	movs	r3, #224	; 0xe0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	482d      	ldr	r0, [pc, #180]	; (8000cf0 <HAL_SPI_MspInit+0x12c>)
 8000c3a:	f000 fc15 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c3e:	e04f      	b.n	8000ce0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <HAL_SPI_MspInit+0x130>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d14a      	bne.n	8000ce0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a26      	ldr	r2, [pc, #152]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_SPI_MspInit+0x128>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <HAL_SPI_MspInit+0x134>)
 8000cba:	f000 fbd5 	bl	8001468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <HAL_SPI_MspInit+0x138>)
 8000cdc:	f000 fbc4 	bl	8001468 <HAL_GPIO_Init>
}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40013000 	.word	0x40013000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40003800 	.word	0x40003800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 fb7d 	bl	8001414 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1a:	2036      	movs	r0, #54	; 0x36
 8000d1c:	f000 fb96 	bl	800144c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_InitTick+0xa4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_InitTick+0xa4>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_InitTick+0xa4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3c:	f107 0210 	add.w	r2, r7, #16
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fc04 	bl	8003554 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d4c:	f002 fbee 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 8000d50:	4603      	mov	r3, r0
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <HAL_InitTick+0xa8>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	0c9b      	lsrs	r3, r3, #18
 8000d60:	3b01      	subs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_InitTick+0xac>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_InitTick+0xb0>)
 8000d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_InitTick+0xac>)
 8000d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_InitTick+0xac>)
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_InitTick+0xac>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_InitTick+0xac>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_InitTick+0xac>)
 8000d86:	f002 fe7c 	bl	8003a82 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d104      	bne.n	8000d9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_InitTick+0xac>)
 8000d92:	f002 fecf 	bl	8003b34 <HAL_TIM_Base_Start_IT>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	200001f0 	.word	0x200001f0
 8000db0:	40001000 	.word	0x40001000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM6_DAC_IRQHandler+0x10>)
 8000de6:	f002 ff15 	bl	8003c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001f0 	.word	0x200001f0

08000df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <OTG_FS_IRQHandler+0x10>)
 8000dfa:	f000 fe3a 	bl	8001a72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20006524 	.word	0x20006524

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd7 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f009 ff1b 	bl	800ac94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc2b 	bl	80006b8 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000e70:	0800af7c 	.word	0x0800af7c
  ldr r2, =_sbss
 8000e74:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000e78:	20006c50 	.word	0x20006c50

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <_DoInit+0xa0>)
 8000e88:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000e8a:	22a8      	movs	r2, #168	; 0xa8
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	6838      	ldr	r0, [r7, #0]
 8000e90:	f009 ff32 	bl	800acf8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2203      	movs	r2, #3
 8000e98:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <_DoInit+0xa4>)
 8000ea4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <_DoInit+0xa8>)
 8000eaa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <_DoInit+0xa4>)
 8000eca:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <_DoInit+0xac>)
 8000ed0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000eea:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e00c      	b.n	8000f0e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1c3 030f 	rsb	r3, r3, #15
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <_DoInit+0xb0>)
 8000efc:	5cd1      	ldrb	r1, [r2, r3]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d9ef      	bls.n	8000ef4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000f14:	f3bf 8f5f 	dmb	sy
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000238 	.word	0x20000238
 8000f24:	0800adb4 	.word	0x0800adb4
 8000f28:	200002e0 	.word	0x200002e0
 8000f2c:	200006e0 	.word	0x200006e0
 8000f30:	0800af58 	.word	0x0800af58

08000f34 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d905      	bls.n	8000f64 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	e007      	b.n	8000f74 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69b9      	ldr	r1, [r7, #24]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	3b01      	subs	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	bf28      	it	cs
 8000f82:	4613      	movcs	r3, r2
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	bf28      	it	cs
 8000f8e:	4613      	movcs	r3, r2
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f009 fe9b 	bl	800acdc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000fa6:	6a3a      	ldr	r2, [r7, #32]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	4413      	add	r3, r2
 8000fac:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	4413      	add	r3, r2
 8000fc4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d101      	bne.n	8000fd4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000fd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1b2      	bne.n	8000f4a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b088      	sub	sp, #32
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d911      	bls.n	8001036 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4413      	add	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	6938      	ldr	r0, [r7, #16]
 8001022:	f009 fe5b 	bl	800acdc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001026:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	441a      	add	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001034:	e01f      	b.n	8001076 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	6938      	ldr	r0, [r7, #16]
 800104a:	f009 fe47 	bl	800acdc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4413      	add	r3, r2
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4619      	mov	r1, r3
 8001066:	6938      	ldr	r0, [r7, #16]
 8001068:	f009 fe38 	bl	800acdc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800106c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	60da      	str	r2, [r3, #12]
}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800107e:	b480      	push	{r7}
 8001080:	b087      	sub	sp, #28
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d808      	bhi.n	80010ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4413      	add	r3, r2
 80010a6:	3b01      	subs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e004      	b.n	80010b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <SEGGER_RTT_WriteNoLock+0x9c>)
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d029      	beq.n	8001142 <SEGGER_RTT_WriteNoLock+0x7e>
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d82e      	bhi.n	8001150 <SEGGER_RTT_WriteNoLock+0x8c>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <SEGGER_RTT_WriteNoLock+0x38>
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d013      	beq.n	8001122 <SEGGER_RTT_WriteNoLock+0x5e>
 80010fa:	e029      	b.n	8001150 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffbe 	bl	800107e <_GetAvailWriteSpace>
 8001102:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d202      	bcs.n	8001112 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001110:	e021      	b.n	8001156 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	69b9      	ldr	r1, [r7, #24]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff67 	bl	8000fee <_WriteNoCheck>
    break;
 8001120:	e019      	b.n	8001156 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ffab 	bl	800107e <_GetAvailWriteSpace>
 8001128:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4293      	cmp	r3, r2
 8001130:	bf28      	it	cs
 8001132:	4613      	movcs	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	69b9      	ldr	r1, [r7, #24]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff57 	bl	8000fee <_WriteNoCheck>
    break;
 8001140:	e009      	b.n	8001156 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	69b9      	ldr	r1, [r7, #24]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff fef4 	bl	8000f34 <_WriteBlocking>
 800114c:	61f8      	str	r0, [r7, #28]
    break;
 800114e:	e002      	b.n	8001156 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    break;
 8001154:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8001156:	69fb      	ldr	r3, [r7, #28]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000238 	.word	0x20000238

08001164 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <SEGGER_RTT_Write+0x48>)
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <SEGGER_RTT_Write+0x1e>
 800117e:	f7ff fe7f 	bl	8000e80 <_DoInit>
  SEGGER_RTT_LOCK();
 8001182:	f3ef 8311 	mrs	r3, BASEPRI
 8001186:	f04f 0120 	mov.w	r1, #32
 800118a:	f381 8811 	msr	BASEPRI, r1
 800118e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff ff95 	bl	80010c4 <SEGGER_RTT_WriteNoLock>
 800119a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80011a2:	697b      	ldr	r3, [r7, #20]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000238 	.word	0x20000238

080011b0 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f7ff f808 	bl	80001d0 <strlen>
 80011c0:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffcc 	bl	8001164 <SEGGER_RTT_Write>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f8fc 	bl	80013fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f7ff fd7a 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fc84 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	200006f0 	.word	0x200006f0

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200006f0 	.word	0x200006f0

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff4c 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001426:	f7ff ff61 	bl	80012ec <__NVIC_GetPriorityGrouping>
 800142a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f7ff ffb1 	bl	8001398 <NVIC_EncodePriority>
 8001436:	4602      	mov	r2, r0
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff80 	bl	8001344 <__NVIC_SetPriority>
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff54 	bl	8001308 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	e16b      	b.n	800175c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 815a 	bne.w	8001756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d005      	beq.n	80014ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d130      	bne.n	800151c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 0201 	and.w	r2, r3, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b03      	cmp	r3, #3
 8001526:	d017      	beq.n	8001558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d123      	bne.n	80015ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	69b9      	ldr	r1, [r7, #24]
 80015a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80b4 	beq.w	8001756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b60      	ldr	r3, [pc, #384]	; (8001774 <HAL_GPIO_Init+0x30c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a5f      	ldr	r2, [pc, #380]	; (8001774 <HAL_GPIO_Init+0x30c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_GPIO_Init+0x30c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160a:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <HAL_GPIO_Init+0x310>)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_GPIO_Init+0x314>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d02b      	beq.n	800168e <HAL_GPIO_Init+0x226>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a51      	ldr	r2, [pc, #324]	; (8001780 <HAL_GPIO_Init+0x318>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d025      	beq.n	800168a <HAL_GPIO_Init+0x222>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a50      	ldr	r2, [pc, #320]	; (8001784 <HAL_GPIO_Init+0x31c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01f      	beq.n	8001686 <HAL_GPIO_Init+0x21e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x320>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <HAL_GPIO_Init+0x21a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4e      	ldr	r2, [pc, #312]	; (800178c <HAL_GPIO_Init+0x324>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_GPIO_Init+0x328>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00d      	beq.n	800167a <HAL_GPIO_Init+0x212>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_GPIO_Init+0x32c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <HAL_GPIO_Init+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <HAL_GPIO_Init+0x330>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_GPIO_Init+0x20a>
 800166e:	2307      	movs	r3, #7
 8001670:	e00e      	b.n	8001690 <HAL_GPIO_Init+0x228>
 8001672:	2308      	movs	r3, #8
 8001674:	e00c      	b.n	8001690 <HAL_GPIO_Init+0x228>
 8001676:	2306      	movs	r3, #6
 8001678:	e00a      	b.n	8001690 <HAL_GPIO_Init+0x228>
 800167a:	2305      	movs	r3, #5
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x228>
 800167e:	2304      	movs	r3, #4
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x228>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x228>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x228>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x228>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a0:	4935      	ldr	r1, [pc, #212]	; (8001778 <HAL_GPIO_Init+0x310>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_GPIO_Init+0x334>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <HAL_GPIO_Init+0x334>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_GPIO_Init+0x334>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <HAL_GPIO_Init+0x334>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_GPIO_Init+0x334>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_GPIO_Init+0x334>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_GPIO_Init+0x334>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_GPIO_Init+0x334>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f ae90 	bls.w	8001484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40021400 	.word	0x40021400
 8001794:	40021800 	.word	0x40021800
 8001798:	40021c00 	.word	0x40021c00
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d4:	b08f      	sub	sp, #60	; 0x3c
 80017d6:	af0a      	add	r7, sp, #40	; 0x28
 80017d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e10f      	b.n	8001a04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f008 ff34 	bl	800a66c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fcef 	bl	8004206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	687e      	ldr	r6, [r7, #4]
 8001830:	466d      	mov	r5, sp
 8001832:	f106 0410 	add.w	r4, r6, #16
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001842:	e885 0003 	stmia.w	r5, {r0, r1}
 8001846:	1d33      	adds	r3, r6, #4
 8001848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f002 fbc6 	bl	8003fdc <USB_CoreInit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0d0      	b.n	8001a04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fcdd 	bl	8004228 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e04a      	b.n	800190a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333d      	adds	r3, #61	; 0x3d
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	333c      	adds	r3, #60	; 0x3c
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	b298      	uxth	r0, r3
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3344      	adds	r3, #68	; 0x44
 80018b0:	4602      	mov	r2, r0
 80018b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3340      	adds	r3, #64	; 0x40
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	334c      	adds	r3, #76	; 0x4c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	3354      	adds	r3, #84	; 0x54
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	3301      	adds	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3af      	bcc.n	8001874 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e044      	b.n	80019a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3b5      	bcc.n	800191a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	687e      	ldr	r6, [r7, #4]
 80019b6:	466d      	mov	r5, sp
 80019b8:	f106 0410 	add.w	r4, r6, #16
 80019bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019cc:	1d33      	adds	r3, r6, #4
 80019ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f002 fc75 	bl	80042c0 <USB_DevInit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e00d      	b.n	8001a04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fdc4 	bl	800558a <USB_DevDisconnect>

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_PCD_Start+0x1c>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e020      	b.n	8001a6a <HAL_PCD_Start+0x5e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d109      	bne.n	8001a4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d005      	beq.n	8001a4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fbc7 	bl	80041e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fd74 	bl	8005548 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a72:	b590      	push	{r4, r7, lr}
 8001a74:	b08d      	sub	sp, #52	; 0x34
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fe32 	bl	80056f2 <USB_GetMode>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 848a 	bne.w	80023aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fd96 	bl	80055cc <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8480 	beq.w	80023a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fd83 	bl	80055cc <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d107      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f002 0202 	and.w	r2, r2, #2
 8001ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fd71 	bl	80055cc <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d161      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0210 	bic.w	r2, r2, #16
 8001b02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 020f 	and.w	r2, r3, #15
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3304      	adds	r3, #4
 8001b22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	0c5b      	lsrs	r3, r3, #17
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d124      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d035      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	6a38      	ldr	r0, [r7, #32]
 8001b50:	f003 fba8 	bl	80052a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b60:	441a      	add	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b72:	441a      	add	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	621a      	str	r2, [r3, #32]
 8001b78:	e016      	b.n	8001ba8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	0c5b      	lsrs	r3, r3, #17
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d110      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6a38      	ldr	r0, [r7, #32]
 8001b92:	f003 fb87 	bl	80052a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba2:	441a      	add	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fd05 	bl	80055cc <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bcc:	f040 80a7 	bne.w	8001d1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fd0a 	bl	80055f2 <USB_ReadDevAllOutEpInterrupt>
 8001bde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001be0:	e099      	b.n	8001d16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808e 	beq.w	8001d0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fd2e 	bl	800565a <USB_ReadDevOutEPInterrupt>
 8001bfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c16:	461a      	mov	r2, r3
 8001c18:	2301      	movs	r3, #1
 8001c1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fec2 	bl	80029a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 ff98 	bl	8002b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2310      	movs	r3, #16
 8001c62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d030      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b80      	cmp	r3, #128	; 0x80
 8001c78:	d109      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	78db      	ldrb	r3, [r3, #3]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d108      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f008 fddd 	bl	800a878 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2302      	movs	r3, #2
 8001cce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2320      	movs	r3, #32
 8001cea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d02:	461a      	mov	r2, r3
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f af62 	bne.w	8001be2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fc52 	bl	80055cc <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d32:	f040 80db 	bne.w	8001eec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fc73 	bl	8005626 <USB_ReadDevAllInEpInterrupt>
 8001d40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d46:	e0cd      	b.n	8001ee4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80c2 	beq.w	8001ed8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fc99 	bl	8005696 <USB_ReadDevInEPInterrupt>
 8001d64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d057      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2201      	movs	r2, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69f9      	ldr	r1, [r7, #28]
 8001d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d90:	4013      	ands	r3, r2
 8001d92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2301      	movs	r3, #1
 8001da4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d132      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	334c      	adds	r3, #76	; 0x4c
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4403      	add	r3, r0
 8001dce:	3348      	adds	r3, #72	; 0x48
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4419      	add	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4403      	add	r3, r0
 8001de2:	334c      	adds	r3, #76	; 0x4c
 8001de4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d113      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x3a2>
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3354      	adds	r3, #84	; 0x54
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2101      	movs	r1, #1
 8001e10:	f003 fca0 	bl	8005754 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f008 fca7 	bl	800a76e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e36:	461a      	mov	r2, r3
 8001e38:	2308      	movs	r3, #8
 8001e3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e52:	461a      	mov	r2, r3
 8001e54:	2310      	movs	r3, #16
 8001e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2340      	movs	r3, #64	; 0x40
 8001e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d023      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e80:	6a38      	ldr	r0, [r7, #32]
 8001e82:	f002 fb81 	bl	8004588 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	3338      	adds	r3, #56	; 0x38
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f008 fcf4 	bl	800a89c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fcdb 	bl	800288e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	3301      	adds	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f47f af2e 	bne.w	8001d48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fb6b 	bl	80055cc <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f00:	d122      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fec2 	bl	8002cb4 <HAL_PCDEx_LPM_Callback>
 8001f30:	e002      	b.n	8001f38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f008 fc92 	bl	800a85c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fb3d 	bl	80055cc <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f5c:	d112      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f008 fc4e 	bl	800a810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fb1f 	bl	80055cc <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f98:	f040 80b7 	bne.w	800210a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fae6 	bl	8004588 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc0:	e046      	b.n	8002050 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	440a      	add	r2, r1
 8001fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ff4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002002:	461a      	mov	r2, r3
 8002004:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002008:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201a:	0151      	lsls	r1, r2, #5
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	440a      	add	r2, r1
 8002020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002024:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002028:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203a:	0151      	lsls	r1, r2, #5
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	440a      	add	r2, r1
 8002040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002044:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002048:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	3301      	adds	r3, #1
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002056:	429a      	cmp	r2, r3
 8002058:	d3b3      	bcc.n	8001fc2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800206c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002086:	f043 030b 	orr.w	r3, r3, #11
 800208a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209c:	f043 030b 	orr.w	r3, r3, #11
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	e015      	b.n	80020d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ca:	f043 030b 	orr.w	r3, r3, #11
 80020ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020f4:	461a      	mov	r2, r3
 80020f6:	f003 fb2d 	bl	8005754 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fa5c 	bl	80055cc <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211e:	d124      	bne.n	800216a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 faf2 	bl	800570e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 faa7 	bl	8004682 <USB_GetDevSpeed>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681c      	ldr	r4, [r3, #0]
 8002140:	f001 f9e8 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f001 ffa6 	bl	80040a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f008 fb32 	bl	800a7be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002168:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fa2c 	bl	80055cc <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d10a      	bne.n	8002194 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f008 fb0f 	bl	800a7a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f002 0208 	and.w	r2, r2, #8
 8002192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fa17 	bl	80055cc <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d122      	bne.n	80021ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e014      	b.n	80021e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fb27 	bl	800282c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3e5      	bcc.n	80021ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 f9ea 	bl	80055cc <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002202:	d13b      	bne.n	800227c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	e02b      	b.n	8002262 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3340      	adds	r3, #64	; 0x40
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d115      	bne.n	800225c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002230:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	da12      	bge.n	800225c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333f      	adds	r3, #63	; 0x3f
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fae8 	bl	800282c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3301      	adds	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	429a      	cmp	r2, r3
 800226a:	d3ce      	bcc.n	800220a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f9a3 	bl	80055cc <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002290:	d155      	bne.n	800233e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002292:	2301      	movs	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e045      	b.n	8002324 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d12e      	bne.n	800231e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da2b      	bge.n	800231e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d121      	bne.n	800231e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6053      	str	r3, [r2, #4]
            break;
 800231c:	e007      	b.n	800232e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3301      	adds	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	429a      	cmp	r2, r3
 800232c:	d3b4      	bcc.n	8002298 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800233c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 f942 	bl	80055cc <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d10a      	bne.n	800236a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f008 fab3 	bl	800a8c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 f92c 	bl	80055cc <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d115      	bne.n	80023aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f008 faa3 	bl	800a8dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e000      	b.n	80023aa <HAL_PCD_IRQHandler+0x938>
      return;
 80023a8:	bf00      	nop
    }
  }
}
 80023aa:	3734      	adds	r7, #52	; 0x34
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_PCD_SetAddress+0x1a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e013      	b.n	80023f2 <HAL_PCD_SetAddress+0x42>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f88a 	bl	80054fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	461a      	mov	r2, r3
 8002408:	4603      	mov	r3, r0
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	460b      	mov	r3, r1
 800240e:	803b      	strh	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	da0f      	bge.n	8002440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3338      	adds	r3, #56	; 0x38
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	3304      	adds	r3, #4
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	705a      	strb	r2, [r3, #1]
 800243e:	e00f      	b.n	8002460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800246c:	883a      	ldrh	r2, [r7, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	78ba      	ldrb	r2, [r7, #2]
 8002476:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800248a:	78bb      	ldrb	r3, [r7, #2]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d102      	bne.n	8002496 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_EP_Open+0xaa>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e00e      	b.n	80024c2 <HAL_PCD_EP_Open+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 f90a 	bl	80046cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024c0:	7afb      	ldrb	r3, [r7, #11]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da0f      	bge.n	80024fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	3338      	adds	r3, #56	; 0x38
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	705a      	strb	r2, [r3, #1]
 80024fc:	e00f      	b.n	800251e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_PCD_EP_Close+0x6e>
 8002534:	2302      	movs	r3, #2
 8002536:	e00e      	b.n	8002556 <HAL_PCD_EP_Close+0x8c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 f948 	bl	80047dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	460b      	mov	r3, r1
 800256c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256e:	7afb      	ldrb	r3, [r7, #11]
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	f002 fc27 	bl	8004e24 <USB_EP0StartXfer>
 80025d6:	e008      	b.n	80025ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	f002 f9d5 	bl	8004994 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	460b      	mov	r3, r1
 8002632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3338      	adds	r3, #56	; 0x38
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2201      	movs	r2, #1
 8002662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b2da      	uxtb	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d102      	bne.n	800267e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800267e:	7afb      	ldrb	r3, [r7, #11]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	f002 fbc5 	bl	8004e24 <USB_EP0StartXfer>
 800269a:	e008      	b.n	80026ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	f002 f973 	bl	8004994 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d901      	bls.n	80026d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e050      	b.n	8002778 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da0f      	bge.n	80026fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	3338      	adds	r3, #56	; 0x38
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	705a      	strb	r2, [r3, #1]
 80026fc:	e00d      	b.n	800271a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_PCD_EP_SetStall+0x82>
 8002736:	2302      	movs	r3, #2
 8002738:	e01e      	b.n	8002778 <HAL_PCD_EP_SetStall+0xc0>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fe03 	bl	8005354 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	b2d9      	uxtb	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002768:	461a      	mov	r2, r3
 800276a:	f002 fff3 	bl	8005754 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e042      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3338      	adds	r3, #56	; 0x38
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00f      	b.n	80027e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_PCD_EP_ClrStall+0x86>
 8002802:	2302      	movs	r3, #2
 8002804:	e00e      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fe0b 	bl	8005430 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da0c      	bge.n	800285a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	3338      	adds	r3, #56	; 0x38
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e00c      	b.n	8002874 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fc2a 	bl	80050d4 <USB_EPStopXfer>
 8002880:	4603      	mov	r3, r0
 8002882:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002884:	7afb      	ldrb	r3, [r7, #11]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b08a      	sub	sp, #40	; 0x28
 8002892:	af02      	add	r7, sp, #8
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	3338      	adds	r3, #56	; 0x38
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	3304      	adds	r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d901      	bls.n	80028c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06c      	b.n	80029a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d902      	bls.n	80028e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3303      	adds	r3, #3
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ea:	e02b      	b.n	8002944 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d902      	bls.n	8002908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3303      	adds	r3, #3
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6919      	ldr	r1, [r3, #16]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002920:	b2db      	uxtb	r3, r3
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4603      	mov	r3, r0
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f002 fc7e 	bl	8005228 <USB_WritePacket>

    ep->xfer_buff  += len;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1a      	ldr	r2, [r3, #32]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	b29b      	uxth	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	429a      	cmp	r2, r3
 8002958:	d809      	bhi.n	800296e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002962:	429a      	cmp	r2, r3
 8002964:	d203      	bcs.n	800296e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1be      	bne.n	80028ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	429a      	cmp	r2, r3
 8002978:	d811      	bhi.n	800299e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2201      	movs	r2, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	43db      	mvns	r3, r3
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800299a:	4013      	ands	r3, r2
 800299c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	333c      	adds	r3, #60	; 0x3c
 80029c0:	3304      	adds	r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d17b      	bne.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d015      	beq.n	8002a14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	f240 80b9 	bls.w	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b3 	beq.w	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a10:	6093      	str	r3, [r2, #8]
 8002a12:	e0a7      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e098      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 8093 	bne.w	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d90f      	bls.n	8002a66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	e07e      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d114      	bne.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f002 fe4e 	bl	8005754 <USB_EP0_OutStart>
 8002ab8:	e006      	b.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f007 fe32 	bl	800a738 <HAL_PCD_DataOutStageCallback>
 8002ad4:	e046      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d124      	bne.n	8002b28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af4:	461a      	mov	r2, r3
 8002af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afa:	6093      	str	r3, [r2, #8]
 8002afc:	e032      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	2320      	movs	r3, #32
 8002b18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f007 fe09 	bl	800a738 <HAL_PCD_DataOutStageCallback>
 8002b26:	e01d      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d114      	bne.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b50:	461a      	mov	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f002 fdfe 	bl	8005754 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f007 fdea 	bl	800a738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	4f54300a 	.word	0x4f54300a
 8002b74:	4f54310a 	.word	0x4f54310a

08002b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	333c      	adds	r3, #60	; 0x3c
 8002b90:	3304      	adds	r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d90e      	bls.n	8002bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f007 fda1 	bl	800a714 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d90c      	bls.n	8002bf4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d108      	bne.n	8002bf4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bec:	461a      	mov	r2, r3
 8002bee:	2101      	movs	r1, #1
 8002bf0:	f002 fdb0 	bl	8005754 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	4f54300a 	.word	0x4f54300a

08002c04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
 8002c10:	4613      	mov	r3, r2
 8002c12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c22:	883b      	ldrh	r3, [r7, #0]
 8002c24:	0419      	lsls	r1, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c30:	e028      	b.n	8002c84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e00d      	b.n	8002c62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	3340      	adds	r3, #64	; 0x40
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d3ec      	bcc.n	8002c46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c6c:	883b      	ldrh	r3, [r7, #0]
 8002c6e:	0418      	lsls	r0, r3, #16
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4302      	orrs	r2, r0
 8002c7c:	3340      	adds	r3, #64	; 0x40
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e267      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d075      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cea:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b85      	ldr	r3, [pc, #532]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d112      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x108>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d157      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e242      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d106      	bne.n	8002d40 <HAL_RCC_OscConfig+0x74>
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6f      	ldr	r2, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6c      	ldr	r2, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d64:	4b69      	ldr	r3, [pc, #420]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a68      	ldr	r2, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a65      	ldr	r2, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fa5e 	bl	8001244 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fa5a 	bl	8001244 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e207      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fa4a 	bl	8001244 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fa46 	bl	8001244 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1f3      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0xe8>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d063      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b44      	ldr	r3, [pc, #272]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1c7      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4937      	ldr	r1, [pc, #220]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e03a      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe f9ff 	bl	8001244 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe f9fb 	bl	8001244 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1a8      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4925      	ldr	r1, [pc, #148]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe f9de 	bl	8001244 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f9da 	bl	8001244 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e187      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d036      	beq.n	8002f24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe f9be 	bl	8001244 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe f9ba 	bl	8001244 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e167      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x200>
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f9a7 	bl	8001244 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe f9a3 	bl	8001244 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d907      	bls.n	8002f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e150      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b88      	ldr	r3, [pc, #544]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ea      	bne.n	8002efa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8097 	beq.w	8003060 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b81      	ldr	r3, [pc, #516]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b7d      	ldr	r3, [pc, #500]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a7c      	ldr	r2, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b7a      	ldr	r3, [pc, #488]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b77      	ldr	r3, [pc, #476]	; (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b74      	ldr	r3, [pc, #464]	; (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a73      	ldr	r2, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f963 	bl	8001244 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe f95f 	bl	8001244 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e10c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2ea>
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a63      	ldr	r2, [pc, #396]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x30c>
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a5e      	ldr	r2, [pc, #376]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4b5c      	ldr	r3, [pc, #368]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a5b      	ldr	r2, [pc, #364]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fd8:	4b58      	ldr	r3, [pc, #352]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a57      	ldr	r2, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	4b55      	ldr	r3, [pc, #340]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe f924 	bl	8001244 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe f920 	bl	8001244 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0cb      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCC_OscConfig+0x334>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe f90e 	bl	8001244 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe f90a 	bl	8001244 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0b5      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	4b3e      	ldr	r3, [pc, #248]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a1 	beq.w	80031ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <HAL_RCC_OscConfig+0x470>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d05c      	beq.n	8003130 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d141      	bne.n	8003102 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe f8de 	bl	8001244 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe f8da 	bl	8001244 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e087      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	491b      	ldr	r1, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x470>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x478>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe f8b3 	bl	8001244 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe f8af 	bl	8001244 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e05c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_OscConfig+0x470>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x416>
 8003100:	e054      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f89c 	bl	8001244 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe f898 	bl	8001244 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e045      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
 800312e:	e03d      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e038      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
 8003144:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x4ec>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d121      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800317e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0cc      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d90c      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a58      	ldr	r2, [pc, #352]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800321a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d044      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e067      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4934      	ldr	r1, [pc, #208]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fd ffca 	bl	8001244 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fd ffc6 	bl	8001244 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d20c      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fccc 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023c00 	.word	0x40023c00
 8003378:	40023800 	.word	0x40023800
 800337c:	0800af40 	.word	0x0800af40
 8003380:	20000000 	.word	0x20000000
 8003384:	20000004 	.word	0x20000004

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b090      	sub	sp, #64	; 0x40
 800338e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	2300      	movs	r3, #0
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d00d      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x40>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	f200 80a1 	bhi.w	80034f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x34>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ba:	e09b      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_GetSysClockFreq+0x184>)
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033c0:	e09b      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033c6:	e098      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	4b4d      	ldr	r3, [pc, #308]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	627a      	str	r2, [r7, #36]	; 0x24
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f0:	2100      	movs	r1, #0
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f4:	fb03 f201 	mul.w	r2, r3, r1
 80033f8:	2300      	movs	r3, #0
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	4413      	add	r3, r2
 8003400:	4a43      	ldr	r2, [pc, #268]	; (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 8003402:	fba0 1202 	umull	r1, r2, r0, r2
 8003406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003408:	460a      	mov	r2, r1
 800340a:	62ba      	str	r2, [r7, #40]	; 0x28
 800340c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340e:	4413      	add	r3, r2
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	2200      	movs	r2, #0
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800341e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003422:	f7fc fedd 	bl	80001e0 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4613      	mov	r3, r2
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342e:	e053      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	2200      	movs	r2, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	617a      	str	r2, [r7, #20]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003442:	f04f 0b00 	mov.w	fp, #0
 8003446:	4652      	mov	r2, sl
 8003448:	465b      	mov	r3, fp
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	0159      	lsls	r1, r3, #5
 8003454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003458:	0150      	lsls	r0, r2, #5
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	ebb2 080a 	subs.w	r8, r2, sl
 8003462:	eb63 090b 	sbc.w	r9, r3, fp
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003472:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003476:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800347a:	ebb2 0408 	subs.w	r4, r2, r8
 800347e:	eb63 0509 	sbc.w	r5, r3, r9
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	00eb      	lsls	r3, r5, #3
 800348c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003490:	00e2      	lsls	r2, r4, #3
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	eb14 030a 	adds.w	r3, r4, sl
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	eb45 030b 	adc.w	r3, r5, fp
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ae:	4629      	mov	r1, r5
 80034b0:	028b      	lsls	r3, r1, #10
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b8:	4621      	mov	r1, r4
 80034ba:	028a      	lsls	r2, r1, #10
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	2200      	movs	r2, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	60fa      	str	r2, [r7, #12]
 80034c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034cc:	f7fc fe88 	bl	80001e0 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4613      	mov	r3, r2
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f2:	e002      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetSysClockFreq+0x184>)
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3740      	adds	r7, #64	; 0x40
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	017d7840 	.word	0x017d7840

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_RCC_GetHCLKFreq+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000000 	.word	0x20000000

0800352c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003530:	f7ff fff0 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	0800af50 	.word	0x0800af50

08003554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	220f      	movs	r2, #15
 8003562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_RCC_GetClockConfig+0x60>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0207 	and.w	r2, r3, #7
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d035      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e0:	4b62      	ldr	r3, [pc, #392]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fe2d 	bl	8001244 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035ee:	f7fd fe29 	bl	8001244 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0b0      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003600:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f0      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	019a      	lsls	r2, r3, #6
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4955      	ldr	r1, [pc, #340]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003620:	4b52      	ldr	r3, [pc, #328]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003626:	f7fd fe0d 	bl	8001244 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800362e:	f7fd fe09 	bl	8001244 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e090      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8083 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3e      	ldr	r2, [pc, #248]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003682:	f7fd fddf 	bl	8001244 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fd fddb 	bl	8001244 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e062      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d028      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036dc:	4a24      	ldr	r2, [pc, #144]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d114      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fd fda9 	bl	8001244 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fda5 	bl	8001244 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e02a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003724:	d10d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003748:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800374c:	6093      	str	r3, [r2, #8]
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	4905      	ldr	r1, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	42470068 	.word	0x42470068
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000
 8003778:	42470e40 	.word	0x42470e40

0800377c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e066      	b.n	8003860 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7f5b      	ldrb	r3, [r3, #29]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd f9e4 	bl	8000b70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	22ca      	movs	r2, #202	; 0xca
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2253      	movs	r2, #83	; 0x53
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f87a 	bl	80038b8 <RTC_EnterInitMode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12c      	bne.n	8003828 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6919      	ldr	r1, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f881 	bl	8003926 <RTC_ExitInitMode>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d113      	bne.n	8003856 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003882:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003884:	f7fd fcde 	bl	8001244 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800388a:	e009      	b.n	80038a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800388c:	f7fd fcda 	bl	8001244 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800389a:	d901      	bls.n	80038a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e007      	b.n	80038b0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d122      	bne.n	800391c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038e6:	f7fd fcad 	bl	8001244 <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038ec:	e00c      	b.n	8003908 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038ee:	f7fd fca9 	bl	8001244 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038fc:	d904      	bls.n	8003908 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2204      	movs	r2, #4
 8003902:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <RTC_EnterInitMode+0x64>
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d1e8      	bne.n	80038ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003940:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff89 	bl	8003868 <HAL_RTC_WaitForSynchro>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003966:	7bfb      	ldrb	r3, [r7, #15]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07b      	b.n	8003a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d009      	beq.n	80039a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
 800399a:	e005      	b.n	80039a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd f8fe 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	ea42 0103 	orr.w	r1, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0104 	and.w	r1, r3, #4
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0210 	and.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e041      	b.n	8003b18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f839 	bl	8003b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f000 f9d7 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e04e      	b.n	8003bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d01d      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d010      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	e007      	b.n	8003be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40010400 	.word	0x40010400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40001800 	.word	0x40001800

08003c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0202 	mvn.w	r2, #2
 8003c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8ee 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8e0 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8f1 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0204 	mvn.w	r2, #4
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8c4 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8b6 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f8c7 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0208 	mvn.w	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f89a 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f88c 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f89d 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0210 	mvn.w	r2, #16
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2208      	movs	r2, #8
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f870 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f862 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f873 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0201 	mvn.w	r2, #1
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fea8 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f902 	bl	8003fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f838 	bl	8003e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d10e      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d107      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0220 	mvn.w	r2, #32
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8cc 	bl	8003fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3d      	ldr	r2, [pc, #244]	; (8003f8c <TIM_Base_SetConfig+0x118>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3c      	ldr	r2, [pc, #240]	; (8003f90 <TIM_Base_SetConfig+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <TIM_Base_SetConfig+0x120>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3a      	ldr	r2, [pc, #232]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d027      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <TIM_Base_SetConfig+0x118>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d023      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <TIM_Base_SetConfig+0x11c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <TIM_Base_SetConfig+0x120>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <TIM_Base_SetConfig+0x128>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a24      	ldr	r2, [pc, #144]	; (8003fac <TIM_Base_SetConfig+0x138>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0xf8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40001c00 	.word	0x40001c00
 8003fb0:	40002000 	.word	0x40002000

08003fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fdc:	b084      	sub	sp, #16
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	f107 001c 	add.w	r0, r7, #28
 8003fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d122      	bne.n	800403a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 fbee 	bl	8005810 <USB_CoreReset>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e01a      	b.n	8004070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 fbe2 	bl	8005810 <USB_CoreReset>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
 8004062:	e005      	b.n	8004070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10b      	bne.n	800408e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f043 0206 	orr.w	r2, r3, #6
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409a:	b004      	add	sp, #16
 800409c:	4770      	bx	lr
	...

080040a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d165      	bne.n	8004180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a41      	ldr	r2, [pc, #260]	; (80041bc <USB_SetTurnaroundTime+0x11c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d906      	bls.n	80040ca <USB_SetTurnaroundTime+0x2a>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <USB_SetTurnaroundTime+0x120>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d202      	bcs.n	80040ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040c4:	230f      	movs	r3, #15
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e062      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a3c      	ldr	r2, [pc, #240]	; (80041c0 <USB_SetTurnaroundTime+0x120>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d306      	bcc.n	80040e0 <USB_SetTurnaroundTime+0x40>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a3b      	ldr	r2, [pc, #236]	; (80041c4 <USB_SetTurnaroundTime+0x124>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d202      	bcs.n	80040e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040da:	230e      	movs	r3, #14
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e057      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <USB_SetTurnaroundTime+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d306      	bcc.n	80040f6 <USB_SetTurnaroundTime+0x56>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <USB_SetTurnaroundTime+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d202      	bcs.n	80040f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040f0:	230d      	movs	r3, #13
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e04c      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a33      	ldr	r2, [pc, #204]	; (80041c8 <USB_SetTurnaroundTime+0x128>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d306      	bcc.n	800410c <USB_SetTurnaroundTime+0x6c>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a32      	ldr	r2, [pc, #200]	; (80041cc <USB_SetTurnaroundTime+0x12c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d802      	bhi.n	800410c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004106:	230c      	movs	r3, #12
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e041      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <USB_SetTurnaroundTime+0x12c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d906      	bls.n	8004122 <USB_SetTurnaroundTime+0x82>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <USB_SetTurnaroundTime+0x130>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d802      	bhi.n	8004122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800411c:	230b      	movs	r3, #11
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e036      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <USB_SetTurnaroundTime+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d906      	bls.n	8004138 <USB_SetTurnaroundTime+0x98>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <USB_SetTurnaroundTime+0x134>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d802      	bhi.n	8004138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004132:	230a      	movs	r3, #10
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e02b      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <USB_SetTurnaroundTime+0x134>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d906      	bls.n	800414e <USB_SetTurnaroundTime+0xae>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <USB_SetTurnaroundTime+0x138>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d202      	bcs.n	800414e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004148:	2309      	movs	r3, #9
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e020      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <USB_SetTurnaroundTime+0x138>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d306      	bcc.n	8004164 <USB_SetTurnaroundTime+0xc4>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <USB_SetTurnaroundTime+0x13c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d802      	bhi.n	8004164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800415e:	2308      	movs	r3, #8
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e015      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <USB_SetTurnaroundTime+0x13c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d906      	bls.n	800417a <USB_SetTurnaroundTime+0xda>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <USB_SetTurnaroundTime+0x140>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d202      	bcs.n	800417a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004174:	2307      	movs	r3, #7
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e00a      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800417a:	2306      	movs	r3, #6
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e007      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004186:	2309      	movs	r3, #9
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e001      	b.n	8004190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800418c:	2309      	movs	r3, #9
 800418e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	00d8acbf 	.word	0x00d8acbf
 80041c0:	00e4e1c0 	.word	0x00e4e1c0
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	01067380 	.word	0x01067380
 80041cc:	011a499f 	.word	0x011a499f
 80041d0:	01312cff 	.word	0x01312cff
 80041d4:	014ca43f 	.word	0x014ca43f
 80041d8:	016e3600 	.word	0x016e3600
 80041dc:	01a6ab1f 	.word	0x01a6ab1f
 80041e0:	01e84800 	.word	0x01e84800

080041e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d115      	bne.n	8004276 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004256:	2001      	movs	r0, #1
 8004258:	f7fd f800 	bl	800125c <HAL_Delay>
      ms++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f001 fa45 	bl	80056f2 <USB_GetMode>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d01e      	beq.n	80042ac <USB_SetCurrentMode+0x84>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b31      	cmp	r3, #49	; 0x31
 8004272:	d9f0      	bls.n	8004256 <USB_SetCurrentMode+0x2e>
 8004274:	e01a      	b.n	80042ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d115      	bne.n	80042a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004288:	2001      	movs	r0, #1
 800428a:	f7fc ffe7 	bl	800125c <HAL_Delay>
      ms++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3301      	adds	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f001 fa2c 	bl	80056f2 <USB_GetMode>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <USB_SetCurrentMode+0x84>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b31      	cmp	r3, #49	; 0x31
 80042a4:	d9f0      	bls.n	8004288 <USB_SetCurrentMode+0x60>
 80042a6:	e001      	b.n	80042ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e005      	b.n	80042b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b32      	cmp	r3, #50	; 0x32
 80042b0:	d101      	bne.n	80042b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042c0:	b084      	sub	sp, #16
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	e009      	b.n	80042f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3340      	adds	r3, #64	; 0x40
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3301      	adds	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b0e      	cmp	r3, #14
 80042f8:	d9f2      	bls.n	80042e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11c      	bne.n	800433a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
 8004338:	e00b      	b.n	8004352 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	4619      	mov	r1, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	461a      	mov	r2, r3
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10c      	bne.n	8004392 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f965 	bl	8004650 <USB_SetDevSpeed>
 8004386:	e008      	b.n	800439a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004388:	2101      	movs	r1, #1
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f960 	bl	8004650 <USB_SetDevSpeed>
 8004390:	e003      	b.n	800439a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004392:	2103      	movs	r1, #3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f95b 	bl	8004650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800439a:	2110      	movs	r1, #16
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8f3 	bl	8004588 <USB_FlushTxFifo>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f91f 	bl	80045f0 <USB_FlushRxFifo>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	461a      	mov	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	e043      	b.n	800446e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fc:	d118      	bne.n	8004430 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e013      	b.n	8004442 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	461a      	mov	r2, r3
 8004428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e008      	b.n	8004442 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	461a      	mov	r2, r3
 8004462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3301      	adds	r3, #1
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d3b7      	bcc.n	80043e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e043      	b.n	8004504 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800448e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004492:	d118      	bne.n	80044c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e013      	b.n	80044d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e008      	b.n	80044d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3301      	adds	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d3b7      	bcc.n	800447c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800452c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f043 0210 	orr.w	r2, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <USB_DevInit+0x2c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f043 0208 	orr.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004580:	b004      	add	sp, #16
 8004582:	4770      	bx	lr
 8004584:	803c3800 	.word	0x803c3800

08004588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <USB_FlushTxFifo+0x64>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e01b      	b.n	80045e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	daf2      	bge.n	8004596 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	019b      	lsls	r3, r3, #6
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a08      	ldr	r2, [pc, #32]	; (80045ec <USB_FlushTxFifo+0x64>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e006      	b.n	80045e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d0f0      	beq.n	80045c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	00030d40 	.word	0x00030d40

080045f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <USB_FlushRxFifo+0x5c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e018      	b.n	8004640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	daf2      	bge.n	80045fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2210      	movs	r2, #16
 800461e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <USB_FlushRxFifo+0x5c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e006      	b.n	8004640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b10      	cmp	r3, #16
 800463c:	d0f0      	beq.n	8004620 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	00030d40 	.word	0x00030d40

08004650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
 80046a6:	e00a      	b.n	80046be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d002      	beq.n	80046b4 <USB_GetDevSpeed+0x32>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d102      	bne.n	80046ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046b4:	2302      	movs	r3, #2
 80046b6:	75fb      	strb	r3, [r7, #23]
 80046b8:	e001      	b.n	80046be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046ba:	230f      	movs	r3, #15
 80046bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d13a      	bne.n	800475e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	b29b      	uxth	r3, r3
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004706:	4313      	orrs	r3, r2
 8004708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d155      	bne.n	80047cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	791b      	ldrb	r3, [r3, #4]
 800473a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800473c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	059b      	lsls	r3, r3, #22
 8004742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004744:	4313      	orrs	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e036      	b.n	80047cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f303 	lsl.w	r3, r1, r3
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477c:	4313      	orrs	r3, r2
 800477e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d11a      	bne.n	80047cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	791b      	ldrb	r3, [r3, #4]
 80047b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047b2:	430b      	orrs	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d161      	bne.n	80048bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480e:	d11f      	bne.n	8004850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800484e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	b29b      	uxth	r3, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004870:	4013      	ands	r3, r2
 8004872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004894:	4013      	ands	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0159      	lsls	r1, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	440b      	add	r3, r1
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	4619      	mov	r1, r3
 80048b4:	4b35      	ldr	r3, [pc, #212]	; (800498c <USB_DeactivateEndpoint+0x1b0>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
 80048ba:	e060      	b.n	800497e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d2:	d11f      	bne.n	8004914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	43db      	mvns	r3, r3
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004934:	4013      	ands	r3, r2
 8004936:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	2101      	movs	r1, #1
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	43db      	mvns	r3, r3
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004958:	4013      	ands	r3, r2
 800495a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0159      	lsls	r1, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	440b      	add	r3, r1
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	4619      	mov	r1, r3
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <USB_DeactivateEndpoint+0x1b4>)
 800497a:	4013      	ands	r3, r2
 800497c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	ec337800 	.word	0xec337800
 8004990:	eff37800 	.word	0xeff37800

08004994 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 815c 	bne.w	8004c6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d132      	bne.n	8004a24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1c:	0cdb      	lsrs	r3, r3, #19
 8004a1e:	04db      	lsls	r3, r3, #19
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	e074      	b.n	8004b0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	0cdb      	lsrs	r3, r3, #19
 8004a40:	04db      	lsls	r3, r3, #19
 8004a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6999      	ldr	r1, [r3, #24]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	440b      	add	r3, r1
 8004a80:	1e59      	subs	r1, r3, #1
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a8c:	4b9d      	ldr	r3, [pc, #628]	; (8004d04 <USB_EPStartXfer+0x370>)
 8004a8e:	400b      	ands	r3, r1
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	0148      	lsls	r0, r1, #5
 8004a94:	69f9      	ldr	r1, [r7, #28]
 8004a96:	4401      	add	r1, r0
 8004a98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	0148      	lsls	r0, r1, #5
 8004aba:	69f9      	ldr	r1, [r7, #28]
 8004abc:	4401      	add	r1, r0
 8004abe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	791b      	ldrb	r3, [r3, #4]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d11f      	bne.n	8004b0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004aec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d14b      	bne.n	8004bac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d128      	bne.n	8004b8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e00f      	b.n	8004b8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e133      	b.n	8004e14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	791b      	ldrb	r3, [r3, #4]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d015      	beq.n	8004c00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 811b 	beq.w	8004e14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	634b      	str	r3, [r1, #52]	; 0x34
 8004bfe:	e109      	b.n	8004e14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e00f      	b.n	8004c52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6919      	ldr	r1, [r3, #16]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	b298      	uxth	r0, r3
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4603      	mov	r3, r0
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fade 	bl	8005228 <USB_WritePacket>
 8004c6c:	e0d2      	b.n	8004e14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	04db      	lsls	r3, r3, #19
 8004c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d126      	bne.n	8004d08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	0148      	lsls	r0, r1, #5
 8004cd4:	69f9      	ldr	r1, [r7, #28]
 8004cd6:	4401      	add	r1, r0
 8004cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfe:	6113      	str	r3, [r2, #16]
 8004d00:	e03a      	b.n	8004d78 <USB_EPStartXfer+0x3e4>
 8004d02:	bf00      	nop
 8004d04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	8afa      	ldrh	r2, [r7, #22]
 8004d24:	fb03 f202 	mul.w	r2, r3, r2
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	04d9      	lsls	r1, r3, #19
 8004d3e:	4b38      	ldr	r3, [pc, #224]	; (8004e20 <USB_EPStartXfer+0x48c>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	0148      	lsls	r0, r1, #5
 8004d46:	69f9      	ldr	r1, [r7, #28]
 8004d48:	4401      	add	r1, r0
 8004d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	0148      	lsls	r0, r1, #5
 8004d6c:	69f9      	ldr	r1, [r7, #28]
 8004d6e:	4401      	add	r1, r0
 8004d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d74:	4313      	orrs	r3, r2
 8004d76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10d      	bne.n	8004d9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6919      	ldr	r1, [r3, #16]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	460a      	mov	r2, r1
 8004d98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d128      	bne.n	8004df4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d110      	bne.n	8004dd4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e00f      	b.n	8004df4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	1ff80000 	.word	0x1ff80000

08004e24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 80ce 	bne.w	8004fe2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d132      	bne.n	8004eb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	0cdb      	lsrs	r3, r3, #19
 8004eae:	04db      	lsls	r3, r3, #19
 8004eb0:	6113      	str	r3, [r2, #16]
 8004eb2:	e04e      	b.n	8004f52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	0cdb      	lsrs	r3, r3, #19
 8004ed0:	04db      	lsls	r3, r3, #19
 8004ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ef2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ef6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d903      	bls.n	8004f0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f42:	6939      	ldr	r1, [r7, #16]
 8004f44:	0148      	lsls	r0, r1, #5
 8004f46:	6979      	ldr	r1, [r7, #20]
 8004f48:	4401      	add	r1, r0
 8004f4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d11e      	bne.n	8004f96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e097      	b.n	80050c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8083 	beq.w	80050c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	634b      	str	r3, [r1, #52]	; 0x34
 8004fe0:	e071      	b.n	80050c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	0cdb      	lsrs	r3, r3, #19
 8004ffe:	04db      	lsls	r3, r3, #19
 8005000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005020:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005024:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005074:	6939      	ldr	r1, [r7, #16]
 8005076:	0148      	lsls	r0, r1, #5
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	4401      	add	r1, r0
 800507c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005080:	4313      	orrs	r3, r2
 8005082:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10d      	bne.n	80050a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6919      	ldr	r1, [r3, #16]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	460a      	mov	r2, r1
 80050a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d14a      	bne.n	8005188 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510a:	f040 8086 	bne.w	800521a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005130:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005154:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3301      	adds	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005162:	4293      	cmp	r3, r2
 8005164:	d902      	bls.n	800516c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
          break;
 800516a:	e056      	b.n	800521a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005184:	d0e7      	beq.n	8005156 <USB_EPStopXfer+0x82>
 8005186:	e048      	b.n	800521a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a0:	d13b      	bne.n	800521a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d902      	bls.n	8005200 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
          break;
 80051fe:	e00c      	b.n	800521a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005218:	d0e7      	beq.n	80051ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
}
 800521c:	4618      	mov	r0, r3
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4611      	mov	r1, r2
 8005234:	461a      	mov	r2, r3
 8005236:	460b      	mov	r3, r1
 8005238:	71fb      	strb	r3, [r7, #7]
 800523a:	4613      	mov	r3, r2
 800523c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d123      	bne.n	8005296 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800524e:	88bb      	ldrh	r3, [r7, #4]
 8005250:	3303      	adds	r3, #3
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e018      	b.n	800528e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	031a      	lsls	r2, r3, #12
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005268:	461a      	mov	r2, r3
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3301      	adds	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	3301      	adds	r3, #1
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	d3e2      	bcc.n	800525c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3724      	adds	r7, #36	; 0x24
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b08b      	sub	sp, #44	; 0x2c
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	e014      	b.n	80052fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	601a      	str	r2, [r3, #0]
    pDest++;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	3301      	adds	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	3301      	adds	r3, #1
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	3301      	adds	r3, #1
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	3301      	adds	r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	3301      	adds	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]
 80052fa:	6a3a      	ldr	r2, [r7, #32]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d3e6      	bcc.n	80052d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005302:	8bfb      	ldrh	r3, [r7, #30]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01e      	beq.n	8005346 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005312:	461a      	mov	r2, r3
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	701a      	strb	r2, [r3, #0]
      i++;
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	3301      	adds	r3, #1
 8005332:	623b      	str	r3, [r7, #32]
      pDest++;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	3301      	adds	r3, #1
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800533a:	8bfb      	ldrh	r3, [r7, #30]
 800533c:	3b01      	subs	r3, #1
 800533e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005340:	8bfb      	ldrh	r3, [r7, #30]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ea      	bne.n	800531c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005348:	4618      	mov	r0, r3
 800534a:	372c      	adds	r7, #44	; 0x2c
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d12c      	bne.n	80053ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db12      	blt.n	80053a8 <USB_EPSetStall+0x54>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e02b      	b.n	8005422 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	db12      	blt.n	8005402 <USB_EPSetStall+0xae>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00f      	beq.n	8005402 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005400:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005420:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d128      	bne.n	800549e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800546a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	791b      	ldrb	r3, [r3, #4]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d003      	beq.n	800547c <USB_EPClearStall+0x4c>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	791b      	ldrb	r3, [r3, #4]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d138      	bne.n	80054ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e027      	b.n	80054ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	791b      	ldrb	r3, [r3, #4]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d003      	beq.n	80054ce <USB_EPClearStall+0x9e>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	791b      	ldrb	r3, [r3, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d10f      	bne.n	80054ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800551e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005576:	f023 0302 	bic.w	r3, r3, #2
 800557a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055a4:	f023 0303 	bic.w	r3, r3, #3
 80055a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0c1b      	lsrs	r3, r3, #16
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	b29b      	uxth	r3, r3
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005688:	68bb      	ldr	r3, [r7, #8]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056e4:	68bb      	ldr	r3, [r7, #8]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0301 	and.w	r3, r3, #1
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	460b      	mov	r3, r1
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	333c      	adds	r3, #60	; 0x3c
 800576a:	3304      	adds	r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4a26      	ldr	r2, [pc, #152]	; (800580c <USB_EP0_OutStart+0xb8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d90a      	bls.n	800578e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005788:	d101      	bne.n	800578e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e037      	b.n	80057fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	2300      	movs	r3, #0
 8005798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	f043 0318 	orr.w	r3, r3, #24
 80057c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10f      	bne.n	80057fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	4f54300a 	.word	0x4f54300a

08005810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a13      	ldr	r2, [pc, #76]	; (8005874 <USB_CoreReset+0x64>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e01b      	b.n	8005866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	daf2      	bge.n	800581c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a09      	ldr	r2, [pc, #36]	; (8005874 <USB_CoreReset+0x64>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d0f0      	beq.n	8005846 <USB_CoreReset+0x36>

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	00030d40 	.word	0x00030d40

08005878 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005884:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005888:	f005 f9c0 	bl	800ac0c <USBD_static_malloc>
 800588c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32b0      	adds	r2, #176	; 0xb0
 800589e:	2100      	movs	r1, #0
 80058a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058a4:	2302      	movs	r3, #2
 80058a6:	e0d4      	b.n	8005a52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058ac:	2100      	movs	r1, #0
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f005 fa22 	bl	800acf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32b0      	adds	r2, #176	; 0xb0
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	32b0      	adds	r2, #176	; 0xb0
 80058ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7c1b      	ldrb	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d138      	bne.n	8005952 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058e0:	4b5e      	ldr	r3, [pc, #376]	; (8005a5c <USBD_CDC_Init+0x1e4>)
 80058e2:	7819      	ldrb	r1, [r3, #0]
 80058e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058e8:	2202      	movs	r2, #2
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f005 f86b 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058f0:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <USBD_CDC_Init+0x1e4>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3324      	adds	r3, #36	; 0x24
 8005906:	2201      	movs	r2, #1
 8005908:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800590a:	4b55      	ldr	r3, [pc, #340]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 800590c:	7819      	ldrb	r1, [r3, #0]
 800590e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005912:	2202      	movs	r2, #2
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f005 f856 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800591a:	4b51      	ldr	r3, [pc, #324]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005932:	2201      	movs	r2, #1
 8005934:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005936:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <USBD_CDC_Init+0x1ec>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	3326      	adds	r3, #38	; 0x26
 800594c:	2210      	movs	r2, #16
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e035      	b.n	80059be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <USBD_CDC_Init+0x1e4>)
 8005954:	7819      	ldrb	r1, [r3, #0]
 8005956:	2340      	movs	r3, #64	; 0x40
 8005958:	2202      	movs	r2, #2
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f005 f833 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005960:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <USBD_CDC_Init+0x1e4>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f003 020f 	and.w	r2, r3, #15
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	3324      	adds	r3, #36	; 0x24
 8005976:	2201      	movs	r2, #1
 8005978:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800597a:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 800597c:	7819      	ldrb	r1, [r3, #0]
 800597e:	2340      	movs	r3, #64	; 0x40
 8005980:	2202      	movs	r2, #2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f005 f81f 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059a0:	2201      	movs	r2, #1
 80059a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059a4:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <USBD_CDC_Init+0x1ec>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3326      	adds	r3, #38	; 0x26
 80059ba:	2210      	movs	r2, #16
 80059bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <USBD_CDC_Init+0x1ec>)
 80059c0:	7819      	ldrb	r1, [r3, #0]
 80059c2:	2308      	movs	r3, #8
 80059c4:	2203      	movs	r2, #3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f004 fffd 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <USBD_CDC_Init+0x1ec>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	2201      	movs	r2, #1
 80059e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	33b0      	adds	r3, #176	; 0xb0
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e018      	b.n	8005a52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7c1b      	ldrb	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 8005a2a:	7819      	ldrb	r1, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f005 f8b4 	bl	800aba4 <USBD_LL_PrepareReceive>
 8005a3c:	e008      	b.n	8005a50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <USBD_CDC_Init+0x1e8>)
 8005a40:	7819      	ldrb	r1, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f005 f8aa 	bl	800aba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000093 	.word	0x20000093
 8005a60:	20000094 	.word	0x20000094
 8005a64:	20000095 	.word	0x20000095

08005a68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a74:	4b3a      	ldr	r3, [pc, #232]	; (8005b60 <USBD_CDC_DeInit+0xf8>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f004 ffc9 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a80:	4b37      	ldr	r3, [pc, #220]	; (8005b60 <USBD_CDC_DeInit+0xf8>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	3324      	adds	r3, #36	; 0x24
 8005a96:	2200      	movs	r2, #0
 8005a98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a9a:	4b32      	ldr	r3, [pc, #200]	; (8005b64 <USBD_CDC_DeInit+0xfc>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f004 ffb6 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <USBD_CDC_DeInit+0xfc>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005abe:	2200      	movs	r2, #0
 8005ac0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ac2:	4b29      	ldr	r3, [pc, #164]	; (8005b68 <USBD_CDC_DeInit+0x100>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f004 ffa2 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ace:	4b26      	ldr	r3, [pc, #152]	; (8005b68 <USBD_CDC_DeInit+0x100>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 020f 	and.w	r2, r3, #15
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	3324      	adds	r3, #36	; 0x24
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <USBD_CDC_DeInit+0x100>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	3326      	adds	r3, #38	; 0x26
 8005afe:	2200      	movs	r2, #0
 8005b00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	32b0      	adds	r2, #176	; 0xb0
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01f      	beq.n	8005b54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	33b0      	adds	r3, #176	; 0xb0
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32b0      	adds	r2, #176	; 0xb0
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f005 f876 	bl	800ac28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32b0      	adds	r2, #176	; 0xb0
 8005b46:	2100      	movs	r1, #0
 8005b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000093 	.word	0x20000093
 8005b64:	20000094 	.word	0x20000094
 8005b68:	20000095 	.word	0x20000095

08005b6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	32b0      	adds	r2, #176	; 0xb0
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0bf      	b.n	8005d1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d050      	beq.n	8005c4a <USBD_CDC_Setup+0xde>
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	f040 80af 	bne.w	8005d0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	88db      	ldrh	r3, [r3, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03a      	beq.n	8005c2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	da1b      	bge.n	8005bf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	33b0      	adds	r3, #176	; 0xb0
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	88d2      	ldrh	r2, [r2, #6]
 8005bdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	bf28      	it	cs
 8005be6:	2307      	movcs	r3, #7
 8005be8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	89fa      	ldrh	r2, [r7, #14]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fd43 	bl	800767c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bf6:	e090      	b.n	8005d1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	785a      	ldrb	r2, [r3, #1]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	88db      	ldrh	r3, [r3, #6]
 8005c06:	2b3f      	cmp	r3, #63	; 0x3f
 8005c08:	d803      	bhi.n	8005c12 <USBD_CDC_Setup+0xa6>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	88db      	ldrh	r3, [r3, #6]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	e000      	b.n	8005c14 <USBD_CDC_Setup+0xa8>
 8005c12:	2240      	movs	r2, #64	; 0x40
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c1a:	6939      	ldr	r1, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c22:	461a      	mov	r2, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fd55 	bl	80076d4 <USBD_CtlPrepareRx>
      break;
 8005c2a:	e076      	b.n	8005d1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	33b0      	adds	r3, #176	; 0xb0
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	7850      	ldrb	r0, [r2, #1]
 8005c42:	2200      	movs	r2, #0
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	4798      	blx	r3
      break;
 8005c48:	e067      	b.n	8005d1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b0b      	cmp	r3, #11
 8005c50:	d851      	bhi.n	8005cf6 <USBD_CDC_Setup+0x18a>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <USBD_CDC_Setup+0xec>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c89 	.word	0x08005c89
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005cf7 	.word	0x08005cf7
 8005c64:	08005cf7 	.word	0x08005cf7
 8005c68:	08005cf7 	.word	0x08005cf7
 8005c6c:	08005cf7 	.word	0x08005cf7
 8005c70:	08005cf7 	.word	0x08005cf7
 8005c74:	08005cf7 	.word	0x08005cf7
 8005c78:	08005cf7 	.word	0x08005cf7
 8005c7c:	08005cf7 	.word	0x08005cf7
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cdd 	.word	0x08005cdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d107      	bne.n	8005ca4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c94:	f107 030a 	add.w	r3, r7, #10
 8005c98:	2202      	movs	r2, #2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fced 	bl	800767c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ca2:	e032      	b.n	8005d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 fc77 	bl	800759a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cac:	2303      	movs	r3, #3
 8005cae:	75fb      	strb	r3, [r7, #23]
          break;
 8005cb0:	e02b      	b.n	8005d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d107      	bne.n	8005cce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cbe:	f107 030d 	add.w	r3, r7, #13
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 fcd8 	bl	800767c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ccc:	e01d      	b.n	8005d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fc62 	bl	800759a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cda:	e016      	b.n	8005d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d00f      	beq.n	8005d08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fc55 	bl	800759a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cf4:	e008      	b.n	8005d08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 fc4e 	bl	800759a <USBD_CtlError>
          ret = USBD_FAIL;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	75fb      	strb	r3, [r7, #23]
          break;
 8005d02:	e002      	b.n	8005d0a <USBD_CDC_Setup+0x19e>
          break;
 8005d04:	bf00      	nop
 8005d06:	e008      	b.n	8005d1a <USBD_CDC_Setup+0x1ae>
          break;
 8005d08:	bf00      	nop
      }
      break;
 8005d0a:	e006      	b.n	8005d1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 fc43 	bl	800759a <USBD_CtlError>
      ret = USBD_FAIL;
 8005d14:	2303      	movs	r3, #3
 8005d16:	75fb      	strb	r3, [r7, #23]
      break;
 8005d18:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	32b0      	adds	r2, #176	; 0xb0
 8005d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e065      	b.n	8005e1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	; 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3318      	adds	r3, #24
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02f      	beq.n	8005dd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	f003 010f 	and.w	r1, r3, #15
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	460b      	mov	r3, r1
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4403      	add	r3, r0
 8005da0:	3348      	adds	r3, #72	; 0x48
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d112      	bne.n	8005dd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dca:	78f9      	ldrb	r1, [r7, #3]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	2200      	movs	r2, #0
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f004 fec6 	bl	800ab62 <USBD_LL_Transmit>
 8005dd6:	e01f      	b.n	8005e18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	33b0      	adds	r3, #176	; 0xb0
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d010      	beq.n	8005e18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	33b0      	adds	r3, #176	; 0xb0
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32b0      	adds	r2, #176	; 0xb0
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	32b0      	adds	r2, #176	; 0xb0
 8005e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e01a      	b.n	8005e8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f004 fec4 	bl	800abe6 <USBD_LL_GetRxDataSize>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	33b0      	adds	r3, #176	; 0xb0
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e84:	4611      	mov	r1, r2
 8005e86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	32b0      	adds	r2, #176	; 0xb0
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e025      	b.n	8005f00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	33b0      	adds	r3, #176	; 0xb0
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <USBD_CDC_EP0_RxReady+0x6c>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ece:	2bff      	cmp	r3, #255	; 0xff
 8005ed0:	d015      	beq.n	8005efe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	33b0      	adds	r3, #176	; 0xb0
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005eea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	22ff      	movs	r2, #255	; 0xff
 8005efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f10:	2182      	movs	r1, #130	; 0x82
 8005f12:	4818      	ldr	r0, [pc, #96]	; (8005f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f14:	f000 fd09 	bl	800692a <USBD_GetEpDesc>
 8005f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4815      	ldr	r0, [pc, #84]	; (8005f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f1e:	f000 fd04 	bl	800692a <USBD_GetEpDesc>
 8005f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f24:	2181      	movs	r1, #129	; 0x81
 8005f26:	4813      	ldr	r0, [pc, #76]	; (8005f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f28:	f000 fcff 	bl	800692a <USBD_GetEpDesc>
 8005f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2210      	movs	r2, #16
 8005f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f48:	711a      	strb	r2, [r3, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	711a      	strb	r2, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2243      	movs	r2, #67	; 0x43
 8005f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000050 	.word	0x20000050

08005f78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f80:	2182      	movs	r1, #130	; 0x82
 8005f82:	4818      	ldr	r0, [pc, #96]	; (8005fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f84:	f000 fcd1 	bl	800692a <USBD_GetEpDesc>
 8005f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4815      	ldr	r0, [pc, #84]	; (8005fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f8e:	f000 fccc 	bl	800692a <USBD_GetEpDesc>
 8005f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f94:	2181      	movs	r1, #129	; 0x81
 8005f96:	4813      	ldr	r0, [pc, #76]	; (8005fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f98:	f000 fcc7 	bl	800692a <USBD_GetEpDesc>
 8005f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d006      	beq.n	8005fbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	711a      	strb	r2, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f042 0202 	orr.w	r2, r2, #2
 8005fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	711a      	strb	r2, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f042 0202 	orr.w	r2, r2, #2
 8005fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2243      	movs	r2, #67	; 0x43
 8005fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fd8:	4b02      	ldr	r3, [pc, #8]	; (8005fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000050 	.word	0x20000050

08005fe8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ff0:	2182      	movs	r1, #130	; 0x82
 8005ff2:	4818      	ldr	r0, [pc, #96]	; (8006054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ff4:	f000 fc99 	bl	800692a <USBD_GetEpDesc>
 8005ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4815      	ldr	r0, [pc, #84]	; (8006054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ffe:	f000 fc94 	bl	800692a <USBD_GetEpDesc>
 8006002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006004:	2181      	movs	r1, #129	; 0x81
 8006006:	4813      	ldr	r0, [pc, #76]	; (8006054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006008:	f000 fc8f 	bl	800692a <USBD_GetEpDesc>
 800600c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2210      	movs	r2, #16
 8006018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2200      	movs	r2, #0
 8006024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006028:	711a      	strb	r2, [r3, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d006      	beq.n	8006042 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603c:	711a      	strb	r2, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2243      	movs	r2, #67	; 0x43
 8006046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006048:	4b02      	ldr	r3, [pc, #8]	; (8006054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000050 	.word	0x20000050

08006058 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	220a      	movs	r2, #10
 8006064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	2000000c 	.word	0x2000000c

08006078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006088:	2303      	movs	r3, #3
 800608a:	e009      	b.n	80060a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	33b0      	adds	r3, #176	; 0xb0
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	32b0      	adds	r2, #176	; 0xb0
 80060c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e008      	b.n	80060e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32b0      	adds	r2, #176	; 0xb0
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	e004      	b.n	800611e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32b0      	adds	r2, #176	; 0xb0
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32b0      	adds	r2, #176	; 0xb0
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006156:	2303      	movs	r3, #3
 8006158:	e018      	b.n	800618c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7c1b      	ldrb	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <USBD_CDC_ReceivePacket+0x68>)
 8006164:	7819      	ldrb	r1, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800616c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f004 fd17 	bl	800aba4 <USBD_LL_PrepareReceive>
 8006176:	e008      	b.n	800618a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <USBD_CDC_ReceivePacket+0x68>)
 800617a:	7819      	ldrb	r1, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f004 fd0d 	bl	800aba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000094 	.word	0x20000094

08006198 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e01f      	b.n	80061f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	79fa      	ldrb	r2, [r7, #7]
 80061e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f004 fb87 	bl	800a8f8 <USBD_LL_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e025      	b.n	800625c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32ae      	adds	r2, #174	; 0xae
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00f      	beq.n	800624c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	32ae      	adds	r2, #174	; 0xae
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	f107 020e 	add.w	r2, r7, #14
 8006240:	4610      	mov	r0, r2
 8006242:	4798      	blx	r3
 8006244:	4602      	mov	r2, r0
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f004 fb8f 	bl	800a990 <USBD_LL_Start>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006284:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	4611      	mov	r1, r2
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	4611      	mov	r1, r2
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f908 	bl	8007526 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006324:	461a      	mov	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b02      	cmp	r3, #2
 8006338:	d01a      	beq.n	8006370 <USBD_LL_SetupStage+0x72>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d822      	bhi.n	8006384 <USBD_LL_SetupStage+0x86>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <USBD_LL_SetupStage+0x4a>
 8006342:	2b01      	cmp	r3, #1
 8006344:	d00a      	beq.n	800635c <USBD_LL_SetupStage+0x5e>
 8006346:	e01d      	b.n	8006384 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb5f 	bl	8006a14 <USBD_StdDevReq>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
      break;
 800635a:	e020      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fbc7 	bl	8006af8 <USBD_StdItfReq>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
      break;
 800636e:	e016      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fc29 	bl	8006bd0 <USBD_StdEPReq>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
      break;
 8006382:	e00c      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800638a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f004 fb5c 	bl	800aa50 <USBD_LL_StallEP>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	bf00      	nop
  }

  return ret;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d16e      	bne.n	800649e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f040 8098 	bne.w	8006504 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d913      	bls.n	8006408 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bf28      	it	cs
 80063fa:	4613      	movcs	r3, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f001 f984 	bl	800770e <USBD_CtlContinueRx>
 8006406:	e07d      	b.n	8006504 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2b02      	cmp	r3, #2
 8006414:	d014      	beq.n	8006440 <USBD_LL_DataOutStage+0x98>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d81d      	bhi.n	8006456 <USBD_LL_DataOutStage+0xae>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <USBD_LL_DataOutStage+0x7c>
 800641e:	2b01      	cmp	r3, #1
 8006420:	d003      	beq.n	800642a <USBD_LL_DataOutStage+0x82>
 8006422:	e018      	b.n	8006456 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	75bb      	strb	r3, [r7, #22]
            break;
 8006428:	e018      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006430:	b2db      	uxtb	r3, r3
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa5e 	bl	80068f6 <USBD_CoreFindIF>
 800643a:	4603      	mov	r3, r0
 800643c:	75bb      	strb	r3, [r7, #22]
            break;
 800643e:	e00d      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fa60 	bl	8006910 <USBD_CoreFindEP>
 8006450:	4603      	mov	r3, r0
 8006452:	75bb      	strb	r3, [r7, #22]
            break;
 8006454:	e002      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	75bb      	strb	r3, [r7, #22]
            break;
 800645a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800645c:	7dbb      	ldrb	r3, [r7, #22]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d119      	bne.n	8006496 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d113      	bne.n	8006496 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800646e:	7dba      	ldrb	r2, [r7, #22]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	32ae      	adds	r2, #174	; 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800647e:	7dba      	ldrb	r2, [r7, #22]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006486:	7dba      	ldrb	r2, [r7, #22]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	32ae      	adds	r2, #174	; 0xae
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f001 f94a 	bl	8007730 <USBD_CtlSendStatus>
 800649c:	e032      	b.n	8006504 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fa31 	bl	8006910 <USBD_CoreFindEP>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064b2:	7dbb      	ldrb	r3, [r7, #22]
 80064b4:	2bff      	cmp	r3, #255	; 0xff
 80064b6:	d025      	beq.n	8006504 <USBD_LL_DataOutStage+0x15c>
 80064b8:	7dbb      	ldrb	r3, [r7, #22]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d122      	bne.n	8006504 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d117      	bne.n	80064fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064ca:	7dba      	ldrb	r2, [r7, #22]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	32ae      	adds	r2, #174	; 0xae
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00f      	beq.n	80064fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064da:	7dba      	ldrb	r2, [r7, #22]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064e2:	7dba      	ldrb	r2, [r7, #22]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	32ae      	adds	r2, #174	; 0xae
 80064e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	7afa      	ldrb	r2, [r7, #11]
 80064f0:	4611      	mov	r1, r2
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	4798      	blx	r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	e000      	b.n	8006506 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	460b      	mov	r3, r1
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d16f      	bne.n	8006602 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3314      	adds	r3, #20
 8006526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800652e:	2b02      	cmp	r3, #2
 8006530:	d15a      	bne.n	80065e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	429a      	cmp	r2, r3
 800653c:	d914      	bls.n	8006568 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	461a      	mov	r2, r3
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 f8ac 	bl	80076b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	2100      	movs	r1, #0
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f004 fb1f 	bl	800aba4 <USBD_LL_PrepareReceive>
 8006566:	e03f      	b.n	80065e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	d11c      	bne.n	80065ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800657c:	429a      	cmp	r2, r3
 800657e:	d316      	bcc.n	80065ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d20f      	bcs.n	80065ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f001 f88d 	bl	80076b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a0:	2300      	movs	r3, #0
 80065a2:	2200      	movs	r2, #0
 80065a4:	2100      	movs	r1, #0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f004 fafc 	bl	800aba4 <USBD_LL_PrepareReceive>
 80065ac:	e01c      	b.n	80065e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d10f      	bne.n	80065da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f004 fa37 	bl	800aa50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f001 f8b7 	bl	8007756 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03a      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fe42 	bl	800627c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006600:	e032      	b.n	8006668 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f97f 	bl	8006910 <USBD_CoreFindEP>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d025      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d122      	bne.n	8006668 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d11c      	bne.n	8006668 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800662e:	7dfa      	ldrb	r2, [r7, #23]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	32ae      	adds	r2, #174	; 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d014      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800663e:	7dfa      	ldrb	r2, [r7, #23]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006646:	7dfa      	ldrb	r2, [r7, #23]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	32ae      	adds	r2, #174	; 0xae
 800664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	7afa      	ldrb	r2, [r7, #11]
 8006654:	4611      	mov	r1, r2
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	4798      	blx	r3
 800665a:	4603      	mov	r3, r0
 800665c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800665e:	7dbb      	ldrb	r3, [r7, #22]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006664:	7dbb      	ldrb	r3, [r7, #22]
 8006666:	e000      	b.n	800666a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d014      	beq.n	80066d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6852      	ldr	r2, [r2, #4]
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	4611      	mov	r1, r2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d8:	2340      	movs	r3, #64	; 0x40
 80066da:	2200      	movs	r2, #0
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f004 f971 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	2200      	movs	r2, #0
 80066f8:	2180      	movs	r1, #128	; 0x80
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f004 f963 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2240      	movs	r2, #64	; 0x40
 800670a:	621a      	str	r2, [r3, #32]

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b04      	cmp	r3, #4
 8006774:	d106      	bne.n	8006784 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d110      	bne.n	80067c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32ae      	adds	r2, #174	; 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01c      	b.n	800682e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d115      	bne.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32ae      	adds	r2, #174	; 0xae
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32ae      	adds	r2, #174	; 0xae
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32ae      	adds	r2, #174	; 0xae
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e01c      	b.n	8006892 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d115      	bne.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32ae      	adds	r2, #174	; 0xae
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6852      	ldr	r2, [r2, #4]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	4611      	mov	r1, r2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006902:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800691c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	429a      	cmp	r2, r3
 8006950:	d920      	bls.n	8006994 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800695a:	e013      	b.n	8006984 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800695c:	f107 030a 	add.w	r3, r7, #10
 8006960:	4619      	mov	r1, r3
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f000 f81b 	bl	800699e <USBD_GetNextDesc>
 8006968:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b05      	cmp	r3, #5
 8006970:	d108      	bne.n	8006984 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	789b      	ldrb	r3, [r3, #2]
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	429a      	cmp	r2, r3
 800697e:	d008      	beq.n	8006992 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	885b      	ldrh	r3, [r3, #2]
 8006988:	b29a      	uxth	r2, r3
 800698a:	897b      	ldrh	r3, [r7, #10]
 800698c:	429a      	cmp	r2, r3
 800698e:	d8e5      	bhi.n	800695c <USBD_GetEpDesc+0x32>
 8006990:	e000      	b.n	8006994 <USBD_GetEpDesc+0x6a>
          break;
 8006992:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006994:	693b      	ldr	r3, [r7, #16]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4413      	add	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	3301      	adds	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069f6:	8a3b      	ldrh	r3, [r7, #16]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	b21a      	sxth	r2, r3
 80069fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b21b      	sxth	r3, r3
 8006a04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a06:	89fb      	ldrh	r3, [r7, #14]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d005      	beq.n	8006a3a <USBD_StdDevReq+0x26>
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d857      	bhi.n	8006ae2 <USBD_StdDevReq+0xce>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <USBD_StdDevReq+0x42>
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d153      	bne.n	8006ae2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	32ae      	adds	r2, #174	; 0xae
 8006a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e04a      	b.n	8006aec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	d83b      	bhi.n	8006ad6 <USBD_StdDevReq+0xc2>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <USBD_StdDevReq+0x50>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006ad7 	.word	0x08006ad7
 8006a70:	08006ac3 	.word	0x08006ac3
 8006a74:	08006ad7 	.word	0x08006ad7
 8006a78:	08006a97 	.word	0x08006a97
 8006a7c:	08006a8d 	.word	0x08006a8d
 8006a80:	08006ad7 	.word	0x08006ad7
 8006a84:	08006aaf 	.word	0x08006aaf
 8006a88:	08006aa1 	.word	0x08006aa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa3c 	bl	8006f0c <USBD_GetDescriptor>
          break;
 8006a94:	e024      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fba1 	bl	80071e0 <USBD_SetAddress>
          break;
 8006a9e:	e01f      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fbe0 	bl	8007268 <USBD_SetConfig>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
          break;
 8006aac:	e018      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fc83 	bl	80073bc <USBD_GetConfig>
          break;
 8006ab6:	e013      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fcb4 	bl	8007428 <USBD_GetStatus>
          break;
 8006ac0:	e00e      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fce3 	bl	8007490 <USBD_SetFeature>
          break;
 8006aca:	e009      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fd07 	bl	80074e2 <USBD_ClrFeature>
          break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fd5e 	bl	800759a <USBD_CtlError>
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e004      	b.n	8006aec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fd58 	bl	800759a <USBD_CtlError>
      break;
 8006aea:	bf00      	nop
  }

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d005      	beq.n	8006b1e <USBD_StdItfReq+0x26>
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d852      	bhi.n	8006bbc <USBD_StdItfReq+0xc4>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <USBD_StdItfReq+0x26>
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d14e      	bne.n	8006bbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d840      	bhi.n	8006bae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	889b      	ldrh	r3, [r3, #4]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d836      	bhi.n	8006ba4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	889b      	ldrh	r3, [r3, #4]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fed9 	bl	80068f6 <USBD_CoreFindIF>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2bff      	cmp	r3, #255	; 0xff
 8006b4c:	d01d      	beq.n	8006b8a <USBD_StdItfReq+0x92>
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11a      	bne.n	8006b8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b54:	7bba      	ldrb	r2, [r7, #14]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	32ae      	adds	r2, #174	; 0xae
 8006b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00f      	beq.n	8006b84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b64:	7bba      	ldrb	r2, [r7, #14]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b6c:	7bba      	ldrb	r2, [r7, #14]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32ae      	adds	r2, #174	; 0xae
 8006b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b82:	e004      	b.n	8006b8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b88:	e001      	b.n	8006b8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88db      	ldrh	r3, [r3, #6]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d110      	bne.n	8006bb8 <USBD_StdItfReq+0xc0>
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10d      	bne.n	8006bb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fdc7 	bl	8007730 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ba2:	e009      	b.n	8006bb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fcf7 	bl	800759a <USBD_CtlError>
          break;
 8006bac:	e004      	b.n	8006bb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fcf2 	bl	800759a <USBD_CtlError>
          break;
 8006bb6:	e000      	b.n	8006bba <USBD_StdItfReq+0xc2>
          break;
 8006bb8:	bf00      	nop
      }
      break;
 8006bba:	e004      	b.n	8006bc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fceb 	bl	800759a <USBD_CtlError>
      break;
 8006bc4:	bf00      	nop
  }

  return ret;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	889b      	ldrh	r3, [r3, #4]
 8006be2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d007      	beq.n	8006c00 <USBD_StdEPReq+0x30>
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	f200 817f 	bhi.w	8006ef4 <USBD_StdEPReq+0x324>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d02a      	beq.n	8006c50 <USBD_StdEPReq+0x80>
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	f040 817a 	bne.w	8006ef4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fe83 	bl	8006910 <USBD_CoreFindEP>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c0e:	7b7b      	ldrb	r3, [r7, #13]
 8006c10:	2bff      	cmp	r3, #255	; 0xff
 8006c12:	f000 8174 	beq.w	8006efe <USBD_StdEPReq+0x32e>
 8006c16:	7b7b      	ldrb	r3, [r7, #13]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 8170 	bne.w	8006efe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c1e:	7b7a      	ldrb	r2, [r7, #13]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c26:	7b7a      	ldrb	r2, [r7, #13]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32ae      	adds	r2, #174	; 0xae
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8163 	beq.w	8006efe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c38:	7b7a      	ldrb	r2, [r7, #13]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32ae      	adds	r2, #174	; 0xae
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c4e:	e156      	b.n	8006efe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d008      	beq.n	8006c6a <USBD_StdEPReq+0x9a>
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	f300 8145 	bgt.w	8006ee8 <USBD_StdEPReq+0x318>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 809b 	beq.w	8006d9a <USBD_StdEPReq+0x1ca>
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d03c      	beq.n	8006ce2 <USBD_StdEPReq+0x112>
 8006c68:	e13e      	b.n	8006ee8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d002      	beq.n	8006c7c <USBD_StdEPReq+0xac>
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d016      	beq.n	8006ca8 <USBD_StdEPReq+0xd8>
 8006c7a:	e02c      	b.n	8006cd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <USBD_StdEPReq+0xce>
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b80      	cmp	r3, #128	; 0x80
 8006c86:	d00a      	beq.n	8006c9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f003 fedf 	bl	800aa50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c92:	2180      	movs	r1, #128	; 0x80
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f003 fedb 	bl	800aa50 <USBD_LL_StallEP>
 8006c9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c9c:	e020      	b.n	8006ce0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fc7a 	bl	800759a <USBD_CtlError>
              break;
 8006ca6:	e01b      	b.n	8006ce0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	885b      	ldrh	r3, [r3, #2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10e      	bne.n	8006cce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <USBD_StdEPReq+0xfe>
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d008      	beq.n	8006cce <USBD_StdEPReq+0xfe>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	88db      	ldrh	r3, [r3, #6]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f003 fec1 	bl	800aa50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fd2e 	bl	8007730 <USBD_CtlSendStatus>

              break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fc5e 	bl	800759a <USBD_CtlError>
              break;
 8006cde:	bf00      	nop
          }
          break;
 8006ce0:	e107      	b.n	8006ef2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d002      	beq.n	8006cf4 <USBD_StdEPReq+0x124>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d016      	beq.n	8006d20 <USBD_StdEPReq+0x150>
 8006cf2:	e04b      	b.n	8006d8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00d      	beq.n	8006d16 <USBD_StdEPReq+0x146>
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d00a      	beq.n	8006d16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f003 fea3 	bl	800aa50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d0a:	2180      	movs	r1, #128	; 0x80
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f003 fe9f 	bl	800aa50 <USBD_LL_StallEP>
 8006d12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d14:	e040      	b.n	8006d98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fc3e 	bl	800759a <USBD_CtlError>
              break;
 8006d1e:	e03b      	b.n	8006d98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	885b      	ldrh	r3, [r3, #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d136      	bne.n	8006d96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f003 fea9 	bl	800aa8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fcf7 	bl	8007730 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fde2 	bl	8006910 <USBD_CoreFindEP>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d50:	7b7b      	ldrb	r3, [r7, #13]
 8006d52:	2bff      	cmp	r3, #255	; 0xff
 8006d54:	d01f      	beq.n	8006d96 <USBD_StdEPReq+0x1c6>
 8006d56:	7b7b      	ldrb	r3, [r7, #13]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11c      	bne.n	8006d96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d5c:	7b7a      	ldrb	r2, [r7, #13]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d64:	7b7a      	ldrb	r2, [r7, #13]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32ae      	adds	r2, #174	; 0xae
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d74:	7b7a      	ldrb	r2, [r7, #13]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32ae      	adds	r2, #174	; 0xae
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d8a:	e004      	b.n	8006d96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc03 	bl	800759a <USBD_CtlError>
              break;
 8006d94:	e000      	b.n	8006d98 <USBD_StdEPReq+0x1c8>
              break;
 8006d96:	bf00      	nop
          }
          break;
 8006d98:	e0ab      	b.n	8006ef2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d002      	beq.n	8006dac <USBD_StdEPReq+0x1dc>
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d032      	beq.n	8006e10 <USBD_StdEPReq+0x240>
 8006daa:	e097      	b.n	8006edc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <USBD_StdEPReq+0x1f2>
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d004      	beq.n	8006dc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fbed 	bl	800759a <USBD_CtlError>
                break;
 8006dc0:	e091      	b.n	8006ee6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da0b      	bge.n	8006de2 <USBD_StdEPReq+0x212>
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	3310      	adds	r3, #16
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3304      	adds	r3, #4
 8006de0:	e00b      	b.n	8006dfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	3304      	adds	r3, #4
 8006dfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2202      	movs	r2, #2
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc37 	bl	800767c <USBD_CtlSendData>
              break;
 8006e0e:	e06a      	b.n	8006ee6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da11      	bge.n	8006e3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d117      	bne.n	8006e62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fbb0 	bl	800759a <USBD_CtlError>
                  break;
 8006e3a:	e054      	b.n	8006ee6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb9d 	bl	800759a <USBD_CtlError>
                  break;
 8006e60:	e041      	b.n	8006ee6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da0b      	bge.n	8006e82 <USBD_StdEPReq+0x2b2>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	e00b      	b.n	8006e9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	3304      	adds	r3, #4
 8006e9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <USBD_StdEPReq+0x2d8>
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d103      	bne.n	8006eb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e00e      	b.n	8006ece <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f003 fe09 	bl	800aacc <USBD_LL_IsStallEP>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fbd1 	bl	800767c <USBD_CtlSendData>
              break;
 8006eda:	e004      	b.n	8006ee6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fb5b 	bl	800759a <USBD_CtlError>
              break;
 8006ee4:	bf00      	nop
          }
          break;
 8006ee6:	e004      	b.n	8006ef2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb55 	bl	800759a <USBD_CtlError>
          break;
 8006ef0:	bf00      	nop
      }
      break;
 8006ef2:	e005      	b.n	8006f00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fb4f 	bl	800759a <USBD_CtlError>
      break;
 8006efc:	e000      	b.n	8006f00 <USBD_StdEPReq+0x330>
      break;
 8006efe:	bf00      	nop
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	2b06      	cmp	r3, #6
 8006f2e:	f200 8128 	bhi.w	8007182 <USBD_GetDescriptor+0x276>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <USBD_GetDescriptor+0x2c>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f55 	.word	0x08006f55
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	08007183 	.word	0x08007183
 8006f48:	08007183 	.word	0x08007183
 8006f4c:	08007123 	.word	0x08007123
 8006f50:	0800714f 	.word	0x0800714f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
      break;
 8006f6a:	e112      	b.n	8007192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10d      	bne.n	8006f90 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	f107 0208 	add.w	r2, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f8e:	e100      	b.n	8007192 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f107 0208 	add.w	r2, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	701a      	strb	r2, [r3, #0]
      break;
 8006faa:	e0f2      	b.n	8007192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	885b      	ldrh	r3, [r3, #2]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	f200 80ac 	bhi.w	8007110 <USBD_GetDescriptor+0x204>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <USBD_GetDescriptor+0xb4>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fd9 	.word	0x08006fd9
 8006fc4:	0800700d 	.word	0x0800700d
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007075 	.word	0x08007075
 8006fd0:	080070a9 	.word	0x080070a9
 8006fd4:	080070dd 	.word	0x080070dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7c12      	ldrb	r2, [r2, #16]
 8006ff0:	f107 0108 	add.w	r1, r7, #8
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffa:	e091      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 facb 	bl	800759a <USBD_CtlError>
            err++;
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	3301      	adds	r3, #1
 8007008:	72fb      	strb	r3, [r7, #11]
          break;
 800700a:	e089      	b.n	8007120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	7c12      	ldrb	r2, [r2, #16]
 8007024:	f107 0108 	add.w	r1, r7, #8
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
 800702c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702e:	e077      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fab1 	bl	800759a <USBD_CtlError>
            err++;
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	3301      	adds	r3, #1
 800703c:	72fb      	strb	r3, [r7, #11]
          break;
 800703e:	e06f      	b.n	8007120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	f107 0108 	add.w	r1, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007062:	e05d      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa97 	bl	800759a <USBD_CtlError>
            err++;
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	3301      	adds	r3, #1
 8007070:	72fb      	strb	r3, [r7, #11]
          break;
 8007072:	e055      	b.n	8007120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7c12      	ldrb	r2, [r2, #16]
 800708c:	f107 0108 	add.w	r1, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007096:	e043      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa7d 	bl	800759a <USBD_CtlError>
            err++;
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	3301      	adds	r3, #1
 80070a4:	72fb      	strb	r3, [r7, #11]
          break;
 80070a6:	e03b      	b.n	8007120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7c12      	ldrb	r2, [r2, #16]
 80070c0:	f107 0108 	add.w	r1, r7, #8
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ca:	e029      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa63 	bl	800759a <USBD_CtlError>
            err++;
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	3301      	adds	r3, #1
 80070d8:	72fb      	strb	r3, [r7, #11]
          break;
 80070da:	e021      	b.n	8007120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7c12      	ldrb	r2, [r2, #16]
 80070f4:	f107 0108 	add.w	r1, r7, #8
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070fe:	e00f      	b.n	8007120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa49 	bl	800759a <USBD_CtlError>
            err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
          break;
 800710e:	e007      	b.n	8007120 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa41 	bl	800759a <USBD_CtlError>
          err++;
 8007118:	7afb      	ldrb	r3, [r7, #11]
 800711a:	3301      	adds	r3, #1
 800711c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800711e:	bf00      	nop
      }
      break;
 8007120:	e037      	b.n	8007192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7c1b      	ldrb	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	f107 0208 	add.w	r2, r7, #8
 8007136:	4610      	mov	r0, r2
 8007138:	4798      	blx	r3
 800713a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800713c:	e029      	b.n	8007192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fa2a 	bl	800759a <USBD_CtlError>
        err++;
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	3301      	adds	r3, #1
 800714a:	72fb      	strb	r3, [r7, #11]
      break;
 800714c:	e021      	b.n	8007192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7c1b      	ldrb	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10d      	bne.n	8007172 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f107 0208 	add.w	r2, r7, #8
 8007162:	4610      	mov	r0, r2
 8007164:	4798      	blx	r3
 8007166:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	2207      	movs	r2, #7
 800716e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007170:	e00f      	b.n	8007192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa10 	bl	800759a <USBD_CtlError>
        err++;
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	3301      	adds	r3, #1
 800717e:	72fb      	strb	r3, [r7, #11]
      break;
 8007180:	e007      	b.n	8007192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fa08 	bl	800759a <USBD_CtlError>
      err++;
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	3301      	adds	r3, #1
 800718e:	72fb      	strb	r3, [r7, #11]
      break;
 8007190:	bf00      	nop
  }

  if (err != 0U)
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11e      	bne.n	80071d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80071a0:	893b      	ldrh	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88da      	ldrh	r2, [r3, #6]
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bf28      	it	cs
 80071b0:	4613      	movcs	r3, r2
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071b6:	893b      	ldrh	r3, [r7, #8]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa5d 	bl	800767c <USBD_CtlSendData>
 80071c2:	e009      	b.n	80071d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f9e7 	bl	800759a <USBD_CtlError>
 80071cc:	e004      	b.n	80071d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 faae 	bl	8007730 <USBD_CtlSendStatus>
 80071d4:	e000      	b.n	80071d8 <USBD_GetDescriptor+0x2cc>
    return;
 80071d6:	bf00      	nop
  }
}
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop

080071e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	889b      	ldrh	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d131      	bne.n	8007256 <USBD_SetAddress+0x76>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d12d      	bne.n	8007256 <USBD_SetAddress+0x76>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	885b      	ldrh	r3, [r3, #2]
 80071fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007200:	d829      	bhi.n	8007256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d104      	bne.n	8007224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f9bc 	bl	800759a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007222:	e01d      	b.n	8007260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f003 fc77 	bl	800ab24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa7a 	bl	8007730 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	e009      	b.n	8007260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	e004      	b.n	8007260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f99e 	bl	800759a <USBD_CtlError>
  }
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	885b      	ldrh	r3, [r3, #2]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	4b4e      	ldr	r3, [pc, #312]	; (80073b8 <USBD_SetConfig+0x150>)
 800727e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007280:	4b4d      	ldr	r3, [pc, #308]	; (80073b8 <USBD_SetConfig+0x150>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d905      	bls.n	8007294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f985 	bl	800759a <USBD_CtlError>
    return USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	e08c      	b.n	80073ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d002      	beq.n	80072a6 <USBD_SetConfig+0x3e>
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d029      	beq.n	80072f8 <USBD_SetConfig+0x90>
 80072a4:	e075      	b.n	8007392 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072a6:	4b44      	ldr	r3, [pc, #272]	; (80073b8 <USBD_SetConfig+0x150>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d020      	beq.n	80072f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80072ae:	4b42      	ldr	r3, [pc, #264]	; (80073b8 <USBD_SetConfig+0x150>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072b8:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <USBD_SetConfig+0x150>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fe ffe7 	bl	8006292 <USBD_SetClassConfig>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f962 	bl	800759a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072de:	e065      	b.n	80073ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa25 	bl	8007730 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2203      	movs	r2, #3
 80072ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072ee:	e05d      	b.n	80073ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fa1d 	bl	8007730 <USBD_CtlSendStatus>
      break;
 80072f6:	e059      	b.n	80073ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072f8:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <USBD_SetConfig+0x150>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d112      	bne.n	8007326 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007308:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <USBD_SetConfig+0x150>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007312:	4b29      	ldr	r3, [pc, #164]	; (80073b8 <USBD_SetConfig+0x150>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe ffd6 	bl	80062ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa06 	bl	8007730 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007324:	e042      	b.n	80073ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <USBD_SetConfig+0x150>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d02a      	beq.n	800738a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fe ffc4 	bl	80062ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <USBD_SetConfig+0x150>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800734c:	4b1a      	ldr	r3, [pc, #104]	; (80073b8 <USBD_SetConfig+0x150>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fe ff9d 	bl	8006292 <USBD_SetClassConfig>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f918 	bl	800759a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fe ffa9 	bl	80062ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007380:	e014      	b.n	80073ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9d4 	bl	8007730 <USBD_CtlSendStatus>
      break;
 8007388:	e010      	b.n	80073ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9d0 	bl	8007730 <USBD_CtlSendStatus>
      break;
 8007390:	e00c      	b.n	80073ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f900 	bl	800759a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <USBD_SetConfig+0x150>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fe ff92 	bl	80062ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	73fb      	strb	r3, [r7, #15]
      break;
 80073aa:	bf00      	nop
  }

  return ret;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200006f4 	.word	0x200006f4

080073bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d004      	beq.n	80073d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f8e2 	bl	800759a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073d6:	e023      	b.n	8007420 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	dc02      	bgt.n	80073ea <USBD_GetConfig+0x2e>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dc03      	bgt.n	80073f0 <USBD_GetConfig+0x34>
 80073e8:	e015      	b.n	8007416 <USBD_GetConfig+0x5a>
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d00b      	beq.n	8007406 <USBD_GetConfig+0x4a>
 80073ee:	e012      	b.n	8007416 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3308      	adds	r3, #8
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f93c 	bl	800767c <USBD_CtlSendData>
        break;
 8007404:	e00c      	b.n	8007420 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2201      	movs	r2, #1
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f934 	bl	800767c <USBD_CtlSendData>
        break;
 8007414:	e004      	b.n	8007420 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f8be 	bl	800759a <USBD_CtlError>
        break;
 800741e:	bf00      	nop
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	2b02      	cmp	r3, #2
 800743e:	d81e      	bhi.n	800747e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	88db      	ldrh	r3, [r3, #6]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d004      	beq.n	8007452 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8a5 	bl	800759a <USBD_CtlError>
        break;
 8007450:	e01a      	b.n	8007488 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f043 0202 	orr.w	r2, r3, #2
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	330c      	adds	r3, #12
 8007472:	2202      	movs	r2, #2
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f900 	bl	800767c <USBD_CtlSendData>
      break;
 800747c:	e004      	b.n	8007488 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f88a 	bl	800759a <USBD_CtlError>
      break;
 8007486:	bf00      	nop
  }
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d107      	bne.n	80074b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f940 	bl	8007730 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80074b0:	e013      	b.n	80074da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d10b      	bne.n	80074d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	889b      	ldrh	r3, [r3, #4]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f930 	bl	8007730 <USBD_CtlSendStatus>
}
 80074d0:	e003      	b.n	80074da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f860 	bl	800759a <USBD_CtlError>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d80b      	bhi.n	8007512 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10c      	bne.n	800751c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f910 	bl	8007730 <USBD_CtlSendStatus>
      }
      break;
 8007510:	e004      	b.n	800751c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f840 	bl	800759a <USBD_CtlError>
      break;
 800751a:	e000      	b.n	800751e <USBD_ClrFeature+0x3c>
      break;
 800751c:	bf00      	nop
  }
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fa41 	bl	80069d8 <SWAPBYTE>
 8007556:	4603      	mov	r3, r0
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fa34 	bl	80069d8 <SWAPBYTE>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff fa27 	bl	80069d8 <SWAPBYTE>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	80da      	strh	r2, [r3, #6]
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f003 fa52 	bl	800aa50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f003 fa4e 	bl	800aa50 <USBD_LL_StallEP>
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d036      	beq.n	8007640 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f000 f836 	bl	8007648 <USBD_GetLen>
 80075dc:	4603      	mov	r3, r0
 80075de:	3301      	adds	r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4413      	add	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	3301      	adds	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	2203      	movs	r2, #3
 8007604:	701a      	strb	r2, [r3, #0]
  idx++;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	3301      	adds	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800760c:	e013      	b.n	8007636 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	4413      	add	r3, r2
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
    idx++;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	3301      	adds	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	4413      	add	r3, r2
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	3301      	adds	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e7      	bne.n	800760e <USBD_GetString+0x52>
 800763e:	e000      	b.n	8007642 <USBD_GetString+0x86>
    return;
 8007640:	bf00      	nop
  }
}
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007658:	e005      	b.n	8007666 <USBD_GetLen+0x1e>
  {
    len++;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	3301      	adds	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3301      	adds	r3, #1
 8007664:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f5      	bne.n	800765a <USBD_GetLen+0x12>
  }

  return len;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2202      	movs	r2, #2
 800768c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f003 fa5d 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	2100      	movs	r1, #0
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f003 fa4c 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2203      	movs	r2, #3
 80076e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	2100      	movs	r1, #0
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f003 fa50 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	2100      	movs	r1, #0
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f003 fa3f 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2204      	movs	r2, #4
 800773c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f003 fa0b 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2205      	movs	r2, #5
 8007762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f003 fa19 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <__NVIC_SetPriority>:
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778c:	2b00      	cmp	r3, #0
 800778e:	db0a      	blt.n	80077a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	b2da      	uxtb	r2, r3
 8007794:	490c      	ldr	r1, [pc, #48]	; (80077c8 <__NVIC_SetPriority+0x4c>)
 8007796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800779a:	0112      	lsls	r2, r2, #4
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	440b      	add	r3, r1
 80077a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077a4:	e00a      	b.n	80077bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	4908      	ldr	r1, [pc, #32]	; (80077cc <__NVIC_SetPriority+0x50>)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	3b04      	subs	r3, #4
 80077b4:	0112      	lsls	r2, r2, #4
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	440b      	add	r3, r1
 80077ba:	761a      	strb	r2, [r3, #24]
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	e000e100 	.word	0xe000e100
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <SysTick_Handler+0x1c>)
 80077d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80077d8:	f001 fcfe 	bl	80091d8 <xTaskGetSchedulerState>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80077e2:	f002 fae9 	bl	8009db8 <xPortSysTickHandler>
  }
}
 80077e6:	bf00      	nop
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	e000e010 	.word	0xe000e010

080077f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80077f4:	2100      	movs	r1, #0
 80077f6:	f06f 0004 	mvn.w	r0, #4
 80077fa:	f7ff ffbf 	bl	800777c <__NVIC_SetPriority>
#endif
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780a:	f3ef 8305 	mrs	r3, IPSR
 800780e:	603b      	str	r3, [r7, #0]
  return(result);
 8007810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007816:	f06f 0305 	mvn.w	r3, #5
 800781a:	607b      	str	r3, [r7, #4]
 800781c:	e00c      	b.n	8007838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800781e:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <osKernelInitialize+0x44>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d105      	bne.n	8007832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007826:	4b08      	ldr	r3, [pc, #32]	; (8007848 <osKernelInitialize+0x44>)
 8007828:	2201      	movs	r2, #1
 800782a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800782c:	2300      	movs	r3, #0
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	e002      	b.n	8007838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007832:	f04f 33ff 	mov.w	r3, #4294967295
 8007836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007838:	687b      	ldr	r3, [r7, #4]
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	200006f8 	.word	0x200006f8

0800784c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007852:	f3ef 8305 	mrs	r3, IPSR
 8007856:	603b      	str	r3, [r7, #0]
  return(result);
 8007858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800785e:	f06f 0305 	mvn.w	r3, #5
 8007862:	607b      	str	r3, [r7, #4]
 8007864:	e010      	b.n	8007888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <osKernelStart+0x48>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d109      	bne.n	8007882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800786e:	f7ff ffbf 	bl	80077f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <osKernelStart+0x48>)
 8007874:	2202      	movs	r2, #2
 8007876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007878:	f001 f866 	bl	8008948 <vTaskStartScheduler>
      stat = osOK;
 800787c:	2300      	movs	r3, #0
 800787e:	607b      	str	r3, [r7, #4]
 8007880:	e002      	b.n	8007888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007888:	687b      	ldr	r3, [r7, #4]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200006f8 	.word	0x200006f8

08007898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	; 0x38
 800789c:	af04      	add	r7, sp, #16
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a8:	f3ef 8305 	mrs	r3, IPSR
 80078ac:	617b      	str	r3, [r7, #20]
  return(result);
 80078ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d17e      	bne.n	80079b2 <osThreadNew+0x11a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d07b      	beq.n	80079b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078ba:	2380      	movs	r3, #128	; 0x80
 80078bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80078be:	2318      	movs	r3, #24
 80078c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d045      	beq.n	800795e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <osThreadNew+0x48>
        name = attr->name;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <osThreadNew+0x6e>
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2b38      	cmp	r3, #56	; 0x38
 80078f8:	d805      	bhi.n	8007906 <osThreadNew+0x6e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <osThreadNew+0x72>
        return (NULL);
 8007906:	2300      	movs	r3, #0
 8007908:	e054      	b.n	80079b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	089b      	lsrs	r3, r3, #2
 8007918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00e      	beq.n	8007940 <osThreadNew+0xa8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	2b5b      	cmp	r3, #91	; 0x5b
 8007928:	d90a      	bls.n	8007940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <osThreadNew+0xa8>
        mem = 1;
 800793a:	2301      	movs	r3, #1
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e010      	b.n	8007962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10c      	bne.n	8007962 <osThreadNew+0xca>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d108      	bne.n	8007962 <osThreadNew+0xca>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <osThreadNew+0xca>
          mem = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e001      	b.n	8007962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d110      	bne.n	800798a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6a3a      	ldr	r2, [r7, #32]
 800797c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fe0c 	bl	800859c <xTaskCreateStatic>
 8007984:	4603      	mov	r3, r0
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	e013      	b.n	80079b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d110      	bne.n	80079b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	b29a      	uxth	r2, r3
 8007994:	f107 0310 	add.w	r3, r7, #16
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fe57 	bl	8008656 <xTaskCreate>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d001      	beq.n	80079b2 <osThreadNew+0x11a>
            hTask = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079b2:	693b      	ldr	r3, [r7, #16]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3728      	adds	r7, #40	; 0x28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c4:	f3ef 8305 	mrs	r3, IPSR
 80079c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <osDelay+0x1c>
    stat = osErrorISR;
 80079d0:	f06f 0305 	mvn.w	r3, #5
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e007      	b.n	80079e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 ff7c 	bl	80088e0 <vTaskDelay>
    }
  }

  return (stat);
 80079e8:	68fb      	ldr	r3, [r7, #12]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4a06      	ldr	r2, [pc, #24]	; (8007a24 <vApplicationGetIdleTaskMemory+0x30>)
 8007a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	200006fc 	.word	0x200006fc
 8007a24:	20000758 	.word	0x20000758

08007a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a07      	ldr	r2, [pc, #28]	; (8007a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a06      	ldr	r2, [pc, #24]	; (8007a58 <vApplicationGetTimerTaskMemory+0x30>)
 8007a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20000958 	.word	0x20000958
 8007a58:	200009b4 	.word	0x200009b4

08007a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0208 	add.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f103 0208 	add.w	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0208 	add.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d103      	bne.n	8007b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e00c      	b.n	8007b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3308      	adds	r3, #8
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <vListInsert+0x2e>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d2f6      	bcs.n	8007b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6892      	ldr	r2, [r2, #8]
 8007b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d103      	bne.n	8007ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1e5a      	subs	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bee:	f002 f851 	bl	8009c94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	441a      	add	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	22ff      	movs	r2, #255	; 0xff
 8007c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	22ff      	movs	r2, #255	; 0xff
 8007c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d114      	bne.n	8007c6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3310      	adds	r3, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 f903 	bl	8008e5c <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d012      	beq.n	8007c82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <xQueueGenericReset+0xcc>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	e009      	b.n	8007c82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3310      	adds	r3, #16
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fef2 	bl	8007a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff feed 	bl	8007a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c82:	f002 f837 	bl	8009cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c86:	2301      	movs	r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <xQueueGenericCreateStatic+0x52>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <xQueueGenericCreateStatic+0x56>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <xQueueGenericCreateStatic+0x58>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	623b      	str	r3, [r7, #32]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <xQueueGenericCreateStatic+0x7e>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <xQueueGenericCreateStatic+0x82>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueGenericCreateStatic+0x84>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	61fb      	str	r3, [r7, #28]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d32:	2350      	movs	r3, #80	; 0x50
 8007d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b50      	cmp	r3, #80	; 0x50
 8007d3a:	d00a      	beq.n	8007d52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	61bb      	str	r3, [r7, #24]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f805 	bl	8007d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3730      	adds	r7, #48	; 0x30
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007db2:	2101      	movs	r1, #1
 8007db4:	69b8      	ldr	r0, [r7, #24]
 8007db6:	f7ff ff05 	bl	8007bc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08e      	sub	sp, #56	; 0x38
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xQueueGenericSend+0x32>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <xQueueGenericSend+0x40>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <xQueueGenericSend+0x44>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <xQueueGenericSend+0x46>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xQueueGenericSend+0x60>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d103      	bne.n	8007e3a <xQueueGenericSend+0x6e>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSend+0x72>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSend+0x74>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	623b      	str	r3, [r7, #32]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e5a:	f001 f9bd 	bl	80091d8 <xTaskGetSchedulerState>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <xQueueGenericSend+0x9e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <xQueueGenericSend+0xa2>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <xQueueGenericSend+0xa4>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	61fb      	str	r3, [r7, #28]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e8a:	f001 ff03 	bl	8009c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d302      	bcc.n	8007ea0 <xQueueGenericSend+0xd4>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d129      	bne.n	8007ef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea6:	f000 fa0b 	bl	80082c0 <prvCopyDataToQueue>
 8007eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 ffcf 	bl	8008e5c <xTaskRemoveFromEventList>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d013      	beq.n	8007eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ec4:	4b3f      	ldr	r3, [pc, #252]	; (8007fc4 <xQueueGenericSend+0x1f8>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	e00a      	b.n	8007eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007edc:	4b39      	ldr	r3, [pc, #228]	; (8007fc4 <xQueueGenericSend+0x1f8>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007eec:	f001 ff02 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e063      	b.n	8007fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d103      	bne.n	8007f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007efa:	f001 fefb 	bl	8009cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e05c      	b.n	8007fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 f809 	bl	8008f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f16:	f001 feed 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f1a:	f000 fd7b 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f1e:	f001 feb9 	bl	8009c94 <vPortEnterCritical>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d103      	bne.n	8007f38 <xQueueGenericSend+0x16c>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3e:	b25b      	sxtb	r3, r3
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d103      	bne.n	8007f4e <xQueueGenericSend+0x182>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f4e:	f001 fed1 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f52:	1d3a      	adds	r2, r7, #4
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fff8 	bl	8008f50 <xTaskCheckForTimeOut>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d124      	bne.n	8007fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f68:	f000 faa2 	bl	80084b0 <prvIsQueueFull>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d018      	beq.n	8007fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	3310      	adds	r3, #16
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 ff1e 	bl	8008dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f82:	f000 fa2d 	bl	80083e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f86:	f000 fd53 	bl	8008a30 <xTaskResumeAll>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f47f af7c 	bne.w	8007e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f92:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <xQueueGenericSend+0x1f8>)
 8007f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	e772      	b.n	8007e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa6:	f000 fa1b 	bl	80083e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007faa:	f000 fd41 	bl	8008a30 <xTaskResumeAll>
 8007fae:	e76c      	b.n	8007e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fb2:	f000 fa15 	bl	80083e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fb6:	f000 fd3b 	bl	8008a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3738      	adds	r7, #56	; 0x38
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b090      	sub	sp, #64	; 0x40
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <xQueueGenericSendFromISR+0x3c>
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <xQueueGenericSendFromISR+0x40>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <xQueueGenericSendFromISR+0x42>
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d103      	bne.n	8008032 <xQueueGenericSendFromISR+0x6a>
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <xQueueGenericSendFromISR+0x6e>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueGenericSendFromISR+0x70>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008052:	f001 ff01 	bl	8009e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008056:	f3ef 8211 	mrs	r2, BASEPRI
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61fa      	str	r2, [r7, #28]
 800806c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800806e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <xQueueGenericSendFromISR+0xbc>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d12f      	bne.n	80080e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800808a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800809a:	f000 f911 	bl	80082c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800809e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d112      	bne.n	80080ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d016      	beq.n	80080de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	3324      	adds	r3, #36	; 0x24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fed1 	bl	8008e5c <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e007      	b.n	80080de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080d2:	3301      	adds	r3, #1
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	b25a      	sxtb	r2, r3
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080de:	2301      	movs	r3, #1
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080e2:	e001      	b.n	80080e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3740      	adds	r7, #64	; 0x40
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08c      	sub	sp, #48	; 0x30
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800810c:	2300      	movs	r3, #0
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <xQueueReceive+0x30>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	623b      	str	r3, [r7, #32]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <xQueueReceive+0x3e>
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <xQueueReceive+0x42>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueReceive+0x44>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xQueueReceive+0x5e>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fb      	str	r3, [r7, #28]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800815e:	f001 f83b 	bl	80091d8 <xTaskGetSchedulerState>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <xQueueReceive+0x6e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <xQueueReceive+0x72>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xQueueReceive+0x74>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueReceive+0x8e>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	61bb      	str	r3, [r7, #24]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800818e:	f001 fd81 	bl	8009c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01f      	beq.n	80081de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a2:	f000 f8f7 	bl	8008394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00f      	beq.n	80081d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	3310      	adds	r3, #16
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fe4e 	bl	8008e5c <xTaskRemoveFromEventList>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081c6:	4b3d      	ldr	r3, [pc, #244]	; (80082bc <xQueueReceive+0x1bc>)
 80081c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081d6:	f001 fd8d 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 80081da:	2301      	movs	r3, #1
 80081dc:	e069      	b.n	80082b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d103      	bne.n	80081ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081e4:	f001 fd86 	bl	8009cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e062      	b.n	80082b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081f2:	f107 0310 	add.w	r3, r7, #16
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fe94 	bl	8008f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008200:	f001 fd78 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008204:	f000 fc06 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008208:	f001 fd44 	bl	8009c94 <vPortEnterCritical>
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008212:	b25b      	sxtb	r3, r3
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d103      	bne.n	8008222 <xQueueReceive+0x122>
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008228:	b25b      	sxtb	r3, r3
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	d103      	bne.n	8008238 <xQueueReceive+0x138>
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008238:	f001 fd5c 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800823c:	1d3a      	adds	r2, r7, #4
 800823e:	f107 0310 	add.w	r3, r7, #16
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fe83 	bl	8008f50 <xTaskCheckForTimeOut>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d123      	bne.n	8008298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008252:	f000 f917 	bl	8008484 <prvIsQueueEmpty>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d017      	beq.n	800828c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	3324      	adds	r3, #36	; 0x24
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fda9 	bl	8008dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800826a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826c:	f000 f8b8 	bl	80083e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008270:	f000 fbde 	bl	8008a30 <xTaskResumeAll>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d189      	bne.n	800818e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <xQueueReceive+0x1bc>)
 800827c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	e780      	b.n	800818e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800828c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828e:	f000 f8a7 	bl	80083e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008292:	f000 fbcd 	bl	8008a30 <xTaskResumeAll>
 8008296:	e77a      	b.n	800818e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829a:	f000 f8a1 	bl	80083e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800829e:	f000 fbc7 	bl	8008a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a4:	f000 f8ee 	bl	8008484 <prvIsQueueEmpty>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f43f af6f 	beq.w	800818e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d14d      	bne.n	8008382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff92 	bl	8009214 <xTaskPriorityDisinherit>
 80082f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	e043      	b.n	8008382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d119      	bne.n	8008334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6858      	ldr	r0, [r3, #4]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	461a      	mov	r2, r3
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	f002 fce6 	bl	800acdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	441a      	add	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	429a      	cmp	r2, r3
 8008328:	d32b      	bcc.n	8008382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	e026      	b.n	8008382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68d8      	ldr	r0, [r3, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	461a      	mov	r2, r3
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	f002 fccc 	bl	800acdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	425b      	negs	r3, r3
 800834e:	441a      	add	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d207      	bcs.n	8008370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	425b      	negs	r3, r3
 800836a:	441a      	add	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d105      	bne.n	8008382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	3b01      	subs	r3, #1
 8008380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800838a:	697b      	ldr	r3, [r7, #20]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d018      	beq.n	80083d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	441a      	add	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d303      	bcc.n	80083c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68d9      	ldr	r1, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	461a      	mov	r2, r3
 80083d2:	6838      	ldr	r0, [r7, #0]
 80083d4:	f002 fc82 	bl	800acdc <memcpy>
	}
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083e8:	f001 fc54 	bl	8009c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083f4:	e011      	b.n	800841a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d012      	beq.n	8008424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3324      	adds	r3, #36	; 0x24
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fd2a 	bl	8008e5c <xTaskRemoveFromEventList>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800840e:	f000 fe01 	bl	8009014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	3b01      	subs	r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800841a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841e:	2b00      	cmp	r3, #0
 8008420:	dce9      	bgt.n	80083f6 <prvUnlockQueue+0x16>
 8008422:	e000      	b.n	8008426 <prvUnlockQueue+0x46>
					break;
 8008424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800842e:	f001 fc61 	bl	8009cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008432:	f001 fc2f 	bl	8009c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800843c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800843e:	e011      	b.n	8008464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d012      	beq.n	800846e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3310      	adds	r3, #16
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fd05 	bl	8008e5c <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008458:	f000 fddc 	bl	8009014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	3b01      	subs	r3, #1
 8008460:	b2db      	uxtb	r3, r3
 8008462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dce9      	bgt.n	8008440 <prvUnlockQueue+0x60>
 800846c:	e000      	b.n	8008470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800846e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	22ff      	movs	r2, #255	; 0xff
 8008474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008478:	f001 fc3c 	bl	8009cf4 <vPortExitCritical>
}
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800848c:	f001 fc02 	bl	8009c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e001      	b.n	80084a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084a2:	f001 fc27 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 80084a6:	68fb      	ldr	r3, [r7, #12]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084b8:	f001 fbec 	bl	8009c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d102      	bne.n	80084ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e001      	b.n	80084d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084d2:	f001 fc0f 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e014      	b.n	800851a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084f0:	4a0f      	ldr	r2, [pc, #60]	; (8008530 <vQueueAddToRegistry+0x50>)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084fc:	490c      	ldr	r1, [pc, #48]	; (8008530 <vQueueAddToRegistry+0x50>)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008506:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <vQueueAddToRegistry+0x50>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008512:	e006      	b.n	8008522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b07      	cmp	r3, #7
 800851e:	d9e7      	bls.n	80084f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000db4 	.word	0x20000db4

08008534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008544:	f001 fba6 	bl	8009c94 <vPortEnterCritical>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800854e:	b25b      	sxtb	r3, r3
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d103      	bne.n	800855e <vQueueWaitForMessageRestricted+0x2a>
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008564:	b25b      	sxtb	r3, r3
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d103      	bne.n	8008574 <vQueueWaitForMessageRestricted+0x40>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008574:	f001 fbbe 	bl	8009cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fc3b 	bl	8008e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f7ff ff26 	bl	80083e0 <prvUnlockQueue>
	}
 8008594:	bf00      	nop
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	; 0x38
 80085a0:	af04      	add	r7, sp, #16
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	623b      	str	r3, [r7, #32]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	61fb      	str	r3, [r7, #28]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085e2:	235c      	movs	r3, #92	; 0x5c
 80085e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b5c      	cmp	r3, #92	; 0x5c
 80085ea:	d00a      	beq.n	8008602 <xTaskCreateStatic+0x66>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61bb      	str	r3, [r7, #24]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01e      	beq.n	8008648 <xTaskCreateStatic+0xac>
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01b      	beq.n	8008648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008622:	2300      	movs	r3, #0
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	9302      	str	r3, [sp, #8]
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f850 	bl	80086e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008642:	f000 f8dd 	bl	8008800 <prvAddNewTaskToReadyList>
 8008646:	e001      	b.n	800864c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800864c:	697b      	ldr	r3, [r7, #20]
	}
 800864e:	4618      	mov	r0, r3
 8008650:	3728      	adds	r7, #40	; 0x28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008656:	b580      	push	{r7, lr}
 8008658:	b08c      	sub	sp, #48	; 0x30
 800865a:	af04      	add	r7, sp, #16
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4618      	mov	r0, r3
 800866c:	f001 fc34 	bl	8009ed8 <pvPortMalloc>
 8008670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00e      	beq.n	8008696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008678:	205c      	movs	r0, #92	; 0x5c
 800867a:	f001 fc2d 	bl	8009ed8 <pvPortMalloc>
 800867e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	631a      	str	r2, [r3, #48]	; 0x30
 800868c:	e005      	b.n	800869a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f001 fcee 	bl	800a070 <vPortFree>
 8008694:	e001      	b.n	800869a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d017      	beq.n	80086d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086a8:	88fa      	ldrh	r2, [r7, #6]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9303      	str	r3, [sp, #12]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	9302      	str	r3, [sp, #8]
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f80e 	bl	80086e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086c4:	69f8      	ldr	r0, [r7, #28]
 80086c6:	f000 f89b 	bl	8008800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086ca:	2301      	movs	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	e002      	b.n	80086d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086d6:	69bb      	ldr	r3, [r7, #24]
	}
 80086d8:	4618      	mov	r0, r3
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	461a      	mov	r2, r3
 80086f8:	21a5      	movs	r1, #165	; 0xa5
 80086fa:	f002 fafd 	bl	800acf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008708:	3b01      	subs	r3, #1
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f023 0307 	bic.w	r3, r3, #7
 8008716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	617b      	str	r3, [r7, #20]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01f      	beq.n	800877e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800873e:	2300      	movs	r3, #0
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e012      	b.n	800876a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	7819      	ldrb	r1, [r3, #0]
 800874c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	3334      	adds	r3, #52	; 0x34
 8008754:	460a      	mov	r2, r1
 8008756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	3301      	adds	r3, #1
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d9e9      	bls.n	8008744 <prvInitialiseNewTask+0x64>
 8008770:	e000      	b.n	8008774 <prvInitialiseNewTask+0x94>
			{
				break;
 8008772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800877c:	e003      	b.n	8008786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	2b37      	cmp	r3, #55	; 0x37
 800878a:	d901      	bls.n	8008790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800878c:	2337      	movs	r3, #55	; 0x37
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	2200      	movs	r2, #0
 80087a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	3304      	adds	r3, #4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff f978 	bl	8007a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	3318      	adds	r3, #24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff f973 	bl	8007a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2200      	movs	r2, #0
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	68f9      	ldr	r1, [r7, #12]
 80087de:	69b8      	ldr	r0, [r7, #24]
 80087e0:	f001 f928 	bl	8009a34 <pxPortInitialiseStack>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087f6:	bf00      	nop
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008808:	f001 fa44 	bl	8009c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800880c:	4b2d      	ldr	r3, [pc, #180]	; (80088c4 <prvAddNewTaskToReadyList+0xc4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	4a2c      	ldr	r2, [pc, #176]	; (80088c4 <prvAddNewTaskToReadyList+0xc4>)
 8008814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008816:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <prvAddNewTaskToReadyList+0xc8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800881e:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <prvAddNewTaskToReadyList+0xc8>)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <prvAddNewTaskToReadyList+0xc4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d110      	bne.n	800884e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800882c:	f000 fc16 	bl	800905c <prvInitialiseTaskLists>
 8008830:	e00d      	b.n	800884e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008832:	4b26      	ldr	r3, [pc, #152]	; (80088cc <prvAddNewTaskToReadyList+0xcc>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800883a:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <prvAddNewTaskToReadyList+0xc8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	429a      	cmp	r2, r3
 8008846:	d802      	bhi.n	800884e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008848:	4a1f      	ldr	r2, [pc, #124]	; (80088c8 <prvAddNewTaskToReadyList+0xc8>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800884e:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <prvAddNewTaskToReadyList+0xd0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <prvAddNewTaskToReadyList+0xd0>)
 8008856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008858:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <prvAddNewTaskToReadyList+0xd0>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <prvAddNewTaskToReadyList+0xd4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	429a      	cmp	r2, r3
 800886a:	d903      	bls.n	8008874 <prvAddNewTaskToReadyList+0x74>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	4a18      	ldr	r2, [pc, #96]	; (80088d4 <prvAddNewTaskToReadyList+0xd4>)
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4a15      	ldr	r2, [pc, #84]	; (80088d8 <prvAddNewTaskToReadyList+0xd8>)
 8008882:	441a      	add	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f7ff f913 	bl	8007ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008890:	f001 fa30 	bl	8009cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <prvAddNewTaskToReadyList+0xcc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00e      	beq.n	80088ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <prvAddNewTaskToReadyList+0xc8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d207      	bcs.n	80088ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <prvAddNewTaskToReadyList+0xdc>)
 80088ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	200012c8 	.word	0x200012c8
 80088c8:	20000df4 	.word	0x20000df4
 80088cc:	200012d4 	.word	0x200012d4
 80088d0:	200012e4 	.word	0x200012e4
 80088d4:	200012d0 	.word	0x200012d0
 80088d8:	20000df8 	.word	0x20000df8
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088f2:	4b13      	ldr	r3, [pc, #76]	; (8008940 <vTaskDelay+0x60>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <vTaskDelay+0x30>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60bb      	str	r3, [r7, #8]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008910:	f000 f880 	bl	8008a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fcea 	bl	80092f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800891c:	f000 f888 	bl	8008a30 <xTaskResumeAll>
 8008920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d107      	bne.n	8008938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <vTaskDelay+0x64>)
 800892a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	200012f0 	.word	0x200012f0
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008956:	463a      	mov	r2, r7
 8008958:	1d39      	adds	r1, r7, #4
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff f848 	bl	80079f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	9202      	str	r2, [sp, #8]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	2300      	movs	r3, #0
 8008974:	460a      	mov	r2, r1
 8008976:	4921      	ldr	r1, [pc, #132]	; (80089fc <vTaskStartScheduler+0xb4>)
 8008978:	4821      	ldr	r0, [pc, #132]	; (8008a00 <vTaskStartScheduler+0xb8>)
 800897a:	f7ff fe0f 	bl	800859c <xTaskCreateStatic>
 800897e:	4603      	mov	r3, r0
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <vTaskStartScheduler+0xbc>)
 8008982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008984:	4b1f      	ldr	r3, [pc, #124]	; (8008a04 <vTaskStartScheduler+0xbc>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800898c:	2301      	movs	r3, #1
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e001      	b.n	8008996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d102      	bne.n	80089a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800899c:	f000 fcfc 	bl	8009398 <xTimerCreateTimerTask>
 80089a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d116      	bne.n	80089d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	613b      	str	r3, [r7, #16]
}
 80089ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089bc:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <vTaskStartScheduler+0xc0>)
 80089be:	f04f 32ff 	mov.w	r2, #4294967295
 80089c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089c4:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <vTaskStartScheduler+0xc4>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <vTaskStartScheduler+0xc8>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089d0:	f001 f8be 	bl	8009b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089d4:	e00e      	b.n	80089f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d10a      	bne.n	80089f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <vTaskStartScheduler+0xaa>
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	0800adc0 	.word	0x0800adc0
 8008a00:	0800902d 	.word	0x0800902d
 8008a04:	200012ec 	.word	0x200012ec
 8008a08:	200012e8 	.word	0x200012e8
 8008a0c:	200012d4 	.word	0x200012d4
 8008a10:	200012cc 	.word	0x200012cc

08008a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <vTaskSuspendAll+0x18>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4a03      	ldr	r2, [pc, #12]	; (8008a2c <vTaskSuspendAll+0x18>)
 8008a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a22:	bf00      	nop
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	200012f0 	.word	0x200012f0

08008a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a3e:	4b42      	ldr	r3, [pc, #264]	; (8008b48 <xTaskResumeAll+0x118>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	603b      	str	r3, [r7, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a5c:	f001 f91a 	bl	8009c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a60:	4b39      	ldr	r3, [pc, #228]	; (8008b48 <xTaskResumeAll+0x118>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	4a38      	ldr	r2, [pc, #224]	; (8008b48 <xTaskResumeAll+0x118>)
 8008a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6a:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <xTaskResumeAll+0x118>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d162      	bne.n	8008b38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a72:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <xTaskResumeAll+0x11c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05e      	beq.n	8008b38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a7a:	e02f      	b.n	8008adc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	4b34      	ldr	r3, [pc, #208]	; (8008b50 <xTaskResumeAll+0x120>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3318      	adds	r3, #24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff f871 	bl	8007b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff f86c 	bl	8007b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4b2d      	ldr	r3, [pc, #180]	; (8008b54 <xTaskResumeAll+0x124>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <xTaskResumeAll+0x7c>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4a2a      	ldr	r2, [pc, #168]	; (8008b54 <xTaskResumeAll+0x124>)
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4a27      	ldr	r2, [pc, #156]	; (8008b58 <xTaskResumeAll+0x128>)
 8008aba:	441a      	add	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f7fe fff7 	bl	8007ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <xTaskResumeAll+0x12c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d302      	bcc.n	8008adc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ad6:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <xTaskResumeAll+0x130>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008adc:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <xTaskResumeAll+0x120>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1cb      	bne.n	8008a7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aea:	f000 fb55 	bl	8009198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008aee:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <xTaskResumeAll+0x134>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008afa:	f000 f847 	bl	8008b8c <xTaskIncrementTick>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b04:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <xTaskResumeAll+0x130>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f1      	bne.n	8008afa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <xTaskResumeAll+0x134>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b1c:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <xTaskResumeAll+0x130>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <xTaskResumeAll+0x138>)
 8008b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b38:	f001 f8dc 	bl	8009cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200012f0 	.word	0x200012f0
 8008b4c:	200012c8 	.word	0x200012c8
 8008b50:	20001288 	.word	0x20001288
 8008b54:	200012d0 	.word	0x200012d0
 8008b58:	20000df8 	.word	0x20000df8
 8008b5c:	20000df4 	.word	0x20000df4
 8008b60:	200012dc 	.word	0x200012dc
 8008b64:	200012d8 	.word	0x200012d8
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <xTaskGetTickCount+0x1c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b78:	687b      	ldr	r3, [r7, #4]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	200012cc 	.word	0x200012cc

08008b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b96:	4b4f      	ldr	r3, [pc, #316]	; (8008cd4 <xTaskIncrementTick+0x148>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 808f 	bne.w	8008cbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ba0:	4b4d      	ldr	r3, [pc, #308]	; (8008cd8 <xTaskIncrementTick+0x14c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ba8:	4a4b      	ldr	r2, [pc, #300]	; (8008cd8 <xTaskIncrementTick+0x14c>)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d120      	bne.n	8008bf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bb4:	4b49      	ldr	r3, [pc, #292]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	603b      	str	r3, [r7, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <xTaskIncrementTick+0x46>
 8008bd4:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	4b41      	ldr	r3, [pc, #260]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a3f      	ldr	r2, [pc, #252]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	4a3f      	ldr	r2, [pc, #252]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	4b3e      	ldr	r3, [pc, #248]	; (8008ce4 <xTaskIncrementTick+0x158>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	4a3d      	ldr	r2, [pc, #244]	; (8008ce4 <xTaskIncrementTick+0x158>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	f000 fad1 	bl	8009198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bf6:	4b3c      	ldr	r3, [pc, #240]	; (8008ce8 <xTaskIncrementTick+0x15c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d349      	bcc.n	8008c94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c00:	4b36      	ldr	r3, [pc, #216]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0a:	4b37      	ldr	r3, [pc, #220]	; (8008ce8 <xTaskIncrementTick+0x15c>)
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	601a      	str	r2, [r3, #0]
					break;
 8008c12:	e03f      	b.n	8008c94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c14:	4b31      	ldr	r3, [pc, #196]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d203      	bcs.n	8008c34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ce8 <xTaskIncrementTick+0x15c>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c32:	e02f      	b.n	8008c94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe ff99 	bl	8007b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe ff90 	bl	8007b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <xTaskIncrementTick+0x160>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d903      	bls.n	8008c64 <xTaskIncrementTick+0xd8>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a22      	ldr	r2, [pc, #136]	; (8008cec <xTaskIncrementTick+0x160>)
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <xTaskIncrementTick+0x164>)
 8008c72:	441a      	add	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f7fe ff1b 	bl	8007ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c84:	4b1b      	ldr	r3, [pc, #108]	; (8008cf4 <xTaskIncrementTick+0x168>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3b8      	bcc.n	8008c00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c92:	e7b5      	b.n	8008c00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c94:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <xTaskIncrementTick+0x168>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	4915      	ldr	r1, [pc, #84]	; (8008cf0 <xTaskIncrementTick+0x164>)
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d901      	bls.n	8008cb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cb0:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <xTaskIncrementTick+0x16c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e004      	b.n	8008cc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <xTaskIncrementTick+0x170>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	4a0d      	ldr	r2, [pc, #52]	; (8008cfc <xTaskIncrementTick+0x170>)
 8008cc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cc8:	697b      	ldr	r3, [r7, #20]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200012f0 	.word	0x200012f0
 8008cd8:	200012cc 	.word	0x200012cc
 8008cdc:	20001280 	.word	0x20001280
 8008ce0:	20001284 	.word	0x20001284
 8008ce4:	200012e0 	.word	0x200012e0
 8008ce8:	200012e8 	.word	0x200012e8
 8008cec:	200012d0 	.word	0x200012d0
 8008cf0:	20000df8 	.word	0x20000df8
 8008cf4:	20000df4 	.word	0x20000df4
 8008cf8:	200012dc 	.word	0x200012dc
 8008cfc:	200012d8 	.word	0x200012d8

08008d00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d06:	4b28      	ldr	r3, [pc, #160]	; (8008da8 <vTaskSwitchContext+0xa8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d0e:	4b27      	ldr	r3, [pc, #156]	; (8008dac <vTaskSwitchContext+0xac>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d14:	e041      	b.n	8008d9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008d16:	4b25      	ldr	r3, [pc, #148]	; (8008dac <vTaskSwitchContext+0xac>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1c:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <vTaskSwitchContext+0xb0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e010      	b.n	8008d46 <vTaskSwitchContext+0x46>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	607b      	str	r3, [r7, #4]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <vTaskSwitchContext+0x3e>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	491b      	ldr	r1, [pc, #108]	; (8008db4 <vTaskSwitchContext+0xb4>)
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0e4      	beq.n	8008d24 <vTaskSwitchContext+0x24>
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <vTaskSwitchContext+0xb4>)
 8008d66:	4413      	add	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	605a      	str	r2, [r3, #4]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d104      	bne.n	8008d8a <vTaskSwitchContext+0x8a>
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	4a09      	ldr	r2, [pc, #36]	; (8008db8 <vTaskSwitchContext+0xb8>)
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	4a06      	ldr	r2, [pc, #24]	; (8008db0 <vTaskSwitchContext+0xb0>)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6013      	str	r3, [r2, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	200012f0 	.word	0x200012f0
 8008dac:	200012dc 	.word	0x200012dc
 8008db0:	200012d0 	.word	0x200012d0
 8008db4:	20000df8 	.word	0x20000df8
 8008db8:	20000df4 	.word	0x20000df4

08008dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	60fb      	str	r3, [r7, #12]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <vTaskPlaceOnEventList+0x44>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3318      	adds	r3, #24
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fe fe87 	bl	8007afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008df0:	2101      	movs	r1, #1
 8008df2:	6838      	ldr	r0, [r7, #0]
 8008df4:	f000 fa7c 	bl	80092f0 <prvAddCurrentTaskToDelayedList>
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000df4 	.word	0x20000df4

08008e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	617b      	str	r3, [r7, #20]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3318      	adds	r3, #24
 8008e32:	4619      	mov	r1, r3
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7fe fe3e 	bl	8007ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	68b8      	ldr	r0, [r7, #8]
 8008e4a:	f000 fa51 	bl	80092f0 <prvAddCurrentTaskToDelayedList>
	}
 8008e4e:	bf00      	nop
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000df4 	.word	0x20000df4

08008e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60fb      	str	r3, [r7, #12]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3318      	adds	r3, #24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fe6f 	bl	8007b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <xTaskRemoveFromEventList+0xb0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d11d      	bne.n	8008ed6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fe66 	bl	8007b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <xTaskRemoveFromEventList+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d903      	bls.n	8008eb8 <xTaskRemoveFromEventList+0x5c>
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	4a16      	ldr	r2, [pc, #88]	; (8008f10 <xTaskRemoveFromEventList+0xb4>)
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <xTaskRemoveFromEventList+0xb8>)
 8008ec6:	441a      	add	r2, r3
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe fdf1 	bl	8007ab6 <vListInsertEnd>
 8008ed4:	e005      	b.n	8008ee2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3318      	adds	r3, #24
 8008eda:	4619      	mov	r1, r3
 8008edc:	480e      	ldr	r0, [pc, #56]	; (8008f18 <xTaskRemoveFromEventList+0xbc>)
 8008ede:	f7fe fdea 	bl	8007ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <xTaskRemoveFromEventList+0xc0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d905      	bls.n	8008efc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <xTaskRemoveFromEventList+0xc4>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e001      	b.n	8008f00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f00:	697b      	ldr	r3, [r7, #20]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200012f0 	.word	0x200012f0
 8008f10:	200012d0 	.word	0x200012d0
 8008f14:	20000df8 	.word	0x20000df8
 8008f18:	20001288 	.word	0x20001288
 8008f1c:	20000df4 	.word	0x20000df4
 8008f20:	200012dc 	.word	0x200012dc

08008f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <vTaskInternalSetTimeOutState+0x24>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <vTaskInternalSetTimeOutState+0x28>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	605a      	str	r2, [r3, #4]
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	200012e0 	.word	0x200012e0
 8008f4c:	200012cc 	.word	0x200012cc

08008f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	613b      	str	r3, [r7, #16]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f92:	f000 fe7f 	bl	8009c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <xTaskCheckForTimeOut+0xbc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d102      	bne.n	8008fb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e023      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <xTaskCheckForTimeOut+0xc0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d007      	beq.n	8008fd2 <xTaskCheckForTimeOut+0x82>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d302      	bcc.n	8008fd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e015      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d20b      	bcs.n	8008ff4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff9b 	bl	8008f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	e004      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f000 fe79 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200012cc 	.word	0x200012cc
 8009010:	200012e0 	.word	0x200012e0

08009014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009018:	4b03      	ldr	r3, [pc, #12]	; (8009028 <vTaskMissedYield+0x14>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
}
 800901e:	bf00      	nop
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	200012dc 	.word	0x200012dc

0800902c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009034:	f000 f852 	bl	80090dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <prvIdleTask+0x28>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d9f9      	bls.n	8009034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <prvIdleTask+0x2c>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009050:	e7f0      	b.n	8009034 <prvIdleTask+0x8>
 8009052:	bf00      	nop
 8009054:	20000df8 	.word	0x20000df8
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	e00c      	b.n	8009082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a12      	ldr	r2, [pc, #72]	; (80090bc <prvInitialiseTaskLists+0x60>)
 8009074:	4413      	add	r3, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fcf0 	bl	8007a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b37      	cmp	r3, #55	; 0x37
 8009086:	d9ef      	bls.n	8009068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009088:	480d      	ldr	r0, [pc, #52]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 800908a:	f7fe fce7 	bl	8007a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800908e:	480d      	ldr	r0, [pc, #52]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 8009090:	f7fe fce4 	bl	8007a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009094:	480c      	ldr	r0, [pc, #48]	; (80090c8 <prvInitialiseTaskLists+0x6c>)
 8009096:	f7fe fce1 	bl	8007a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800909a:	480c      	ldr	r0, [pc, #48]	; (80090cc <prvInitialiseTaskLists+0x70>)
 800909c:	f7fe fcde 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a0:	480b      	ldr	r0, [pc, #44]	; (80090d0 <prvInitialiseTaskLists+0x74>)
 80090a2:	f7fe fcdb 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <prvInitialiseTaskLists+0x78>)
 80090a8:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 80090aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <prvInitialiseTaskLists+0x7c>)
 80090ae:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000df8 	.word	0x20000df8
 80090c0:	20001258 	.word	0x20001258
 80090c4:	2000126c 	.word	0x2000126c
 80090c8:	20001288 	.word	0x20001288
 80090cc:	2000129c 	.word	0x2000129c
 80090d0:	200012b4 	.word	0x200012b4
 80090d4:	20001280 	.word	0x20001280
 80090d8:	20001284 	.word	0x20001284

080090dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090e2:	e019      	b.n	8009118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090e4:	f000 fdd6 	bl	8009c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e8:	4b10      	ldr	r3, [pc, #64]	; (800912c <prvCheckTasksWaitingTermination+0x50>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fd3b 	bl	8007b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a0b      	ldr	r2, [pc, #44]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 8009102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800910c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800910e:	f000 fdf1 	bl	8009cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f810 	bl	8009138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e1      	bne.n	80090e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2000129c 	.word	0x2000129c
 8009130:	200012c8 	.word	0x200012c8
 8009134:	200012b0 	.word	0x200012b0

08009138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009146:	2b00      	cmp	r3, #0
 8009148:	d108      	bne.n	800915c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914e:	4618      	mov	r0, r3
 8009150:	f000 ff8e 	bl	800a070 <vPortFree>
				vPortFree( pxTCB );
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 ff8b 	bl	800a070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800915a:	e018      	b.n	800918e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009162:	2b01      	cmp	r3, #1
 8009164:	d103      	bne.n	800916e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 ff82 	bl	800a070 <vPortFree>
	}
 800916c:	e00f      	b.n	800918e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009174:	2b02      	cmp	r3, #2
 8009176:	d00a      	beq.n	800918e <prvDeleteTCB+0x56>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60fb      	str	r3, [r7, #12]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <prvDeleteTCB+0x54>
	}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091b0:	e008      	b.n	80091c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20001280 	.word	0x20001280
 80091d4:	200012e8 	.word	0x200012e8

080091d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091de:	4b0b      	ldr	r3, [pc, #44]	; (800920c <xTaskGetSchedulerState+0x34>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091e6:	2301      	movs	r3, #1
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	e008      	b.n	80091fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <xTaskGetSchedulerState+0x38>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091f4:	2302      	movs	r3, #2
 80091f6:	607b      	str	r3, [r7, #4]
 80091f8:	e001      	b.n	80091fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091fe:	687b      	ldr	r3, [r7, #4]
	}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	200012d4 	.word	0x200012d4
 8009210:	200012f0 	.word	0x200012f0

08009214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d056      	beq.n	80092d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800922a:	4b2e      	ldr	r3, [pc, #184]	; (80092e4 <xTaskPriorityDisinherit+0xd0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d00a      	beq.n	800924a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60bb      	str	r3, [r7, #8]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	1e5a      	subs	r2, r3, #1
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927a:	429a      	cmp	r2, r3
 800927c:	d02c      	beq.n	80092d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009282:	2b00      	cmp	r3, #0
 8009284:	d128      	bne.n	80092d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3304      	adds	r3, #4
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fc70 	bl	8007b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <xTaskPriorityDisinherit+0xd4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d903      	bls.n	80092b8 <xTaskPriorityDisinherit+0xa4>
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <xTaskPriorityDisinherit+0xd4>)
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4a09      	ldr	r2, [pc, #36]	; (80092ec <xTaskPriorityDisinherit+0xd8>)
 80092c6:	441a      	add	r2, r3
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fe fbf1 	bl	8007ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d8:	697b      	ldr	r3, [r7, #20]
	}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20000df4 	.word	0x20000df4
 80092e8:	200012d0 	.word	0x200012d0
 80092ec:	20000df8 	.word	0x20000df8

080092f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092fa:	4b21      	ldr	r3, [pc, #132]	; (8009380 <prvAddCurrentTaskToDelayedList+0x90>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009300:	4b20      	ldr	r3, [pc, #128]	; (8009384 <prvAddCurrentTaskToDelayedList+0x94>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3304      	adds	r3, #4
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fc32 	bl	8007b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009312:	d10a      	bne.n	800932a <prvAddCurrentTaskToDelayedList+0x3a>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800931a:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <prvAddCurrentTaskToDelayedList+0x94>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4819      	ldr	r0, [pc, #100]	; (8009388 <prvAddCurrentTaskToDelayedList+0x98>)
 8009324:	f7fe fbc7 	bl	8007ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009328:	e026      	b.n	8009378 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4413      	add	r3, r2
 8009330:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <prvAddCurrentTaskToDelayedList+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	429a      	cmp	r2, r3
 8009340:	d209      	bcs.n	8009356 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009342:	4b12      	ldr	r3, [pc, #72]	; (800938c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <prvAddCurrentTaskToDelayedList+0x94>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fe fbd5 	bl	8007afe <vListInsert>
}
 8009354:	e010      	b.n	8009378 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009356:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <prvAddCurrentTaskToDelayedList+0x94>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7fe fbcb 	bl	8007afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <prvAddCurrentTaskToDelayedList+0xa4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	d202      	bcs.n	8009378 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009372:	4a08      	ldr	r2, [pc, #32]	; (8009394 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	6013      	str	r3, [r2, #0]
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	200012cc 	.word	0x200012cc
 8009384:	20000df4 	.word	0x20000df4
 8009388:	200012b4 	.word	0x200012b4
 800938c:	20001284 	.word	0x20001284
 8009390:	20001280 	.word	0x20001280
 8009394:	200012e8 	.word	0x200012e8

08009398 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093a2:	f000 fb07 	bl	80099b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093a6:	4b1c      	ldr	r3, [pc, #112]	; (8009418 <xTimerCreateTimerTask+0x80>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d021      	beq.n	80093f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093b6:	1d3a      	adds	r2, r7, #4
 80093b8:	f107 0108 	add.w	r1, r7, #8
 80093bc:	f107 030c 	add.w	r3, r7, #12
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fb31 	bl	8007a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	9202      	str	r2, [sp, #8]
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	2302      	movs	r3, #2
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	460a      	mov	r2, r1
 80093d8:	4910      	ldr	r1, [pc, #64]	; (800941c <xTimerCreateTimerTask+0x84>)
 80093da:	4811      	ldr	r0, [pc, #68]	; (8009420 <xTimerCreateTimerTask+0x88>)
 80093dc:	f7ff f8de 	bl	800859c <xTaskCreateStatic>
 80093e0:	4603      	mov	r3, r0
 80093e2:	4a10      	ldr	r2, [pc, #64]	; (8009424 <xTimerCreateTimerTask+0x8c>)
 80093e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093e6:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <xTimerCreateTimerTask+0x8c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093ee:	2301      	movs	r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	613b      	str	r3, [r7, #16]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800940e:	697b      	ldr	r3, [r7, #20]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20001324 	.word	0x20001324
 800941c:	0800adc8 	.word	0x0800adc8
 8009420:	0800955d 	.word	0x0800955d
 8009424:	20001328 	.word	0x20001328

08009428 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	; 0x28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009436:	2300      	movs	r3, #0
 8009438:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	623b      	str	r3, [r7, #32]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009456:	4b1a      	ldr	r3, [pc, #104]	; (80094c0 <xTimerGenericCommand+0x98>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d02a      	beq.n	80094b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b05      	cmp	r3, #5
 800946e:	dc18      	bgt.n	80094a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009470:	f7ff feb2 	bl	80091d8 <xTaskGetSchedulerState>
 8009474:	4603      	mov	r3, r0
 8009476:	2b02      	cmp	r3, #2
 8009478:	d109      	bne.n	800948e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800947a:	4b11      	ldr	r3, [pc, #68]	; (80094c0 <xTimerGenericCommand+0x98>)
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f107 0110 	add.w	r1, r7, #16
 8009482:	2300      	movs	r3, #0
 8009484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009486:	f7fe fca1 	bl	8007dcc <xQueueGenericSend>
 800948a:	6278      	str	r0, [r7, #36]	; 0x24
 800948c:	e012      	b.n	80094b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <xTimerGenericCommand+0x98>)
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	f107 0110 	add.w	r1, r7, #16
 8009496:	2300      	movs	r3, #0
 8009498:	2200      	movs	r2, #0
 800949a:	f7fe fc97 	bl	8007dcc <xQueueGenericSend>
 800949e:	6278      	str	r0, [r7, #36]	; 0x24
 80094a0:	e008      	b.n	80094b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094a2:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <xTimerGenericCommand+0x98>)
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	f107 0110 	add.w	r1, r7, #16
 80094aa:	2300      	movs	r3, #0
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	f7fe fd8b 	bl	8007fc8 <xQueueGenericSendFromISR>
 80094b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3728      	adds	r7, #40	; 0x28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20001324 	.word	0x20001324

080094c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ce:	4b22      	ldr	r3, [pc, #136]	; (8009558 <prvProcessExpiredTimer+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	3304      	adds	r3, #4
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fe fb47 	bl	8007b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d022      	beq.n	8009536 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	699a      	ldr	r2, [r3, #24]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	18d1      	adds	r1, r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	6978      	ldr	r0, [r7, #20]
 80094fe:	f000 f8d1 	bl	80096a4 <prvInsertTimerInActiveList>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01f      	beq.n	8009548 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	2100      	movs	r1, #0
 8009512:	6978      	ldr	r0, [r7, #20]
 8009514:	f7ff ff88 	bl	8009428 <xTimerGenericCommand>
 8009518:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d113      	bne.n	8009548 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800953c:	f023 0301 	bic.w	r3, r3, #1
 8009540:	b2da      	uxtb	r2, r3
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	6978      	ldr	r0, [r7, #20]
 800954e:	4798      	blx	r3
}
 8009550:	bf00      	nop
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	2000131c 	.word	0x2000131c

0800955c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009564:	f107 0308 	add.w	r3, r7, #8
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f857 	bl	800961c <prvGetNextExpireTime>
 800956e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f803 	bl	8009580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800957a:	f000 f8d5 	bl	8009728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800957e:	e7f1      	b.n	8009564 <prvTimerTask+0x8>

08009580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800958a:	f7ff fa43 	bl	8008a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800958e:	f107 0308 	add.w	r3, r7, #8
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f866 	bl	8009664 <prvSampleTimeNow>
 8009598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d130      	bne.n	8009602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <prvProcessTimerOrBlockTask+0x3c>
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d806      	bhi.n	80095bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095ae:	f7ff fa3f 	bl	8008a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff ff85 	bl	80094c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095ba:	e024      	b.n	8009606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095c2:	4b13      	ldr	r3, [pc, #76]	; (8009610 <prvProcessTimerOrBlockTask+0x90>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <prvProcessTimerOrBlockTask+0x50>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <prvProcessTimerOrBlockTask+0x52>
 80095d0:	2300      	movs	r3, #0
 80095d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095d4:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <prvProcessTimerOrBlockTask+0x94>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	4619      	mov	r1, r3
 80095e2:	f7fe ffa7 	bl	8008534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095e6:	f7ff fa23 	bl	8008a30 <xTaskResumeAll>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095f0:	4b09      	ldr	r3, [pc, #36]	; (8009618 <prvProcessTimerOrBlockTask+0x98>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
}
 8009600:	e001      	b.n	8009606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009602:	f7ff fa15 	bl	8008a30 <xTaskResumeAll>
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20001320 	.word	0x20001320
 8009614:	20001324 	.word	0x20001324
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009624:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <prvGetNextExpireTime+0x44>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <prvGetNextExpireTime+0x16>
 800962e:	2201      	movs	r2, #1
 8009630:	e000      	b.n	8009634 <prvGetNextExpireTime+0x18>
 8009632:	2200      	movs	r2, #0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d105      	bne.n	800964c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009640:	4b07      	ldr	r3, [pc, #28]	; (8009660 <prvGetNextExpireTime+0x44>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e001      	b.n	8009650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	2000131c 	.word	0x2000131c

08009664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800966c:	f7ff fa7e 	bl	8008b6c <xTaskGetTickCount>
 8009670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009672:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <prvSampleTimeNow+0x3c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	429a      	cmp	r2, r3
 800967a:	d205      	bcs.n	8009688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800967c:	f000 f936 	bl	80098ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	e002      	b.n	800968e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800968e:	4a04      	ldr	r2, [pc, #16]	; (80096a0 <prvSampleTimeNow+0x3c>)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009694:	68fb      	ldr	r3, [r7, #12]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	2000132c 	.word	0x2000132c

080096a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d812      	bhi.n	80096f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d302      	bcc.n	80096de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e01b      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <prvInsertTimerInActiveList+0x7c>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fe fa08 	bl	8007afe <vListInsert>
 80096ee:	e012      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d206      	bcs.n	8009706 <prvInsertTimerInActiveList+0x62>
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d302      	bcc.n	8009706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	e007      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009706:	4b07      	ldr	r3, [pc, #28]	; (8009724 <prvInsertTimerInActiveList+0x80>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7fe f9f4 	bl	8007afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009716:	697b      	ldr	r3, [r7, #20]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20001320 	.word	0x20001320
 8009724:	2000131c 	.word	0x2000131c

08009728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08e      	sub	sp, #56	; 0x38
 800972c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972e:	e0ca      	b.n	80098c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	da18      	bge.n	8009768 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	3304      	adds	r3, #4
 800973a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	61fb      	str	r3, [r7, #28]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800975e:	6850      	ldr	r0, [r2, #4]
 8009760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009762:	6892      	ldr	r2, [r2, #8]
 8009764:	4611      	mov	r1, r2
 8009766:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f2c0 80aa 	blt.w	80098c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe f9f5 	bl	8007b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009786:	463b      	mov	r3, r7
 8009788:	4618      	mov	r0, r3
 800978a:	f7ff ff6b 	bl	8009664 <prvSampleTimeNow>
 800978e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b09      	cmp	r3, #9
 8009794:	f200 8097 	bhi.w	80098c6 <prvProcessReceivedCommands+0x19e>
 8009798:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <prvProcessReceivedCommands+0x78>)
 800979a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979e:	bf00      	nop
 80097a0:	080097c9 	.word	0x080097c9
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	0800983d 	.word	0x0800983d
 80097b0:	08009851 	.word	0x08009851
 80097b4:	0800989b 	.word	0x0800989b
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097c9 	.word	0x080097c9
 80097c0:	0800983d 	.word	0x0800983d
 80097c4:	08009851 	.word	0x08009851
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ce:	f043 0301 	orr.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	18d1      	adds	r1, r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e8:	f7ff ff5c 	bl	80096a4 <prvInsertTimerInActiveList>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d069      	beq.n	80098c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d05e      	beq.n	80098c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	441a      	add	r2, r3
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	2100      	movs	r1, #0
 8009818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981a:	f7ff fe05 	bl	8009428 <xTimerGenericCommand>
 800981e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d14f      	bne.n	80098c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	61bb      	str	r3, [r7, #24]
}
 8009838:	bf00      	nop
 800983a:	e7fe      	b.n	800983a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	b2da      	uxtb	r2, r3
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800984e:	e03a      	b.n	80098c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009856:	f043 0301 	orr.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	617b      	str	r3, [r7, #20]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	699a      	ldr	r2, [r3, #24]
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	18d1      	adds	r1, r2, r3
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009894:	f7ff ff06 	bl	80096a4 <prvInsertTimerInActiveList>
					break;
 8009898:	e015      	b.n	80098c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d103      	bne.n	80098b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80098a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098aa:	f000 fbe1 	bl	800a070 <vPortFree>
 80098ae:	e00a      	b.n	80098c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098c2:	e000      	b.n	80098c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80098c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098c6:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <prvProcessReceivedCommands+0x1c0>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	1d39      	adds	r1, r7, #4
 80098cc:	2200      	movs	r2, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fc16 	bl	8008100 <xQueueReceive>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f47f af2a 	bne.w	8009730 <prvProcessReceivedCommands+0x8>
	}
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	3730      	adds	r7, #48	; 0x30
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20001324 	.word	0x20001324

080098ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098f2:	e048      	b.n	8009986 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098f4:	4b2d      	ldr	r3, [pc, #180]	; (80099ac <prvSwitchTimerLists+0xc0>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098fe:	4b2b      	ldr	r3, [pc, #172]	; (80099ac <prvSwitchTimerLists+0xc0>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3304      	adds	r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe f92f 	bl	8007b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	d02e      	beq.n	8009986 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4413      	add	r3, r2
 8009930:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	429a      	cmp	r2, r3
 8009938:	d90e      	bls.n	8009958 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009946:	4b19      	ldr	r3, [pc, #100]	; (80099ac <prvSwitchTimerLists+0xc0>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3304      	adds	r3, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fe f8d4 	bl	8007afe <vListInsert>
 8009956:	e016      	b.n	8009986 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009958:	2300      	movs	r3, #0
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fd60 	bl	8009428 <xTimerGenericCommand>
 8009968:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	603b      	str	r3, [r7, #0]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <prvSwitchTimerLists+0xc0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1b1      	bne.n	80098f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009990:	4b06      	ldr	r3, [pc, #24]	; (80099ac <prvSwitchTimerLists+0xc0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <prvSwitchTimerLists+0xc4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvSwitchTimerLists+0xc0>)
 800999c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800999e:	4a04      	ldr	r2, [pc, #16]	; (80099b0 <prvSwitchTimerLists+0xc4>)
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000131c 	.word	0x2000131c
 80099b0:	20001320 	.word	0x20001320

080099b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099ba:	f000 f96b 	bl	8009c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099be:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <prvCheckForValidListAndQueue+0x60>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d120      	bne.n	8009a08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099c6:	4814      	ldr	r0, [pc, #80]	; (8009a18 <prvCheckForValidListAndQueue+0x64>)
 80099c8:	f7fe f848 	bl	8007a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099cc:	4813      	ldr	r0, [pc, #76]	; (8009a1c <prvCheckForValidListAndQueue+0x68>)
 80099ce:	f7fe f845 	bl	8007a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <prvCheckForValidListAndQueue+0x6c>)
 80099d4:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <prvCheckForValidListAndQueue+0x64>)
 80099d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099d8:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <prvCheckForValidListAndQueue+0x70>)
 80099da:	4a10      	ldr	r2, [pc, #64]	; (8009a1c <prvCheckForValidListAndQueue+0x68>)
 80099dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099de:	2300      	movs	r3, #0
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <prvCheckForValidListAndQueue+0x74>)
 80099e4:	4a11      	ldr	r2, [pc, #68]	; (8009a2c <prvCheckForValidListAndQueue+0x78>)
 80099e6:	2110      	movs	r1, #16
 80099e8:	200a      	movs	r0, #10
 80099ea:	f7fe f953 	bl	8007c94 <xQueueGenericCreateStatic>
 80099ee:	4603      	mov	r3, r0
 80099f0:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <prvCheckForValidListAndQueue+0x60>)
 80099f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvCheckForValidListAndQueue+0x60>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <prvCheckForValidListAndQueue+0x60>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	490b      	ldr	r1, [pc, #44]	; (8009a30 <prvCheckForValidListAndQueue+0x7c>)
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fd6c 	bl	80084e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a08:	f000 f974 	bl	8009cf4 <vPortExitCritical>
}
 8009a0c:	bf00      	nop
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20001324 	.word	0x20001324
 8009a18:	200012f4 	.word	0x200012f4
 8009a1c:	20001308 	.word	0x20001308
 8009a20:	2000131c 	.word	0x2000131c
 8009a24:	20001320 	.word	0x20001320
 8009a28:	200013d0 	.word	0x200013d0
 8009a2c:	20001330 	.word	0x20001330
 8009a30:	0800add0 	.word	0x0800add0

08009a34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3b04      	subs	r3, #4
 8009a44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3b04      	subs	r3, #4
 8009a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f023 0201 	bic.w	r2, r3, #1
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3b04      	subs	r3, #4
 8009a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a64:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <pxPortInitialiseStack+0x64>)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3b14      	subs	r3, #20
 8009a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3b04      	subs	r3, #4
 8009a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f06f 0202 	mvn.w	r2, #2
 8009a82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3b20      	subs	r3, #32
 8009a88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	08009a9d 	.word	0x08009a9d

08009a9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aa6:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <prvTaskExitError+0x54>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d00a      	beq.n	8009ac6 <prvTaskExitError+0x2a>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	60fb      	str	r3, [r7, #12]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <prvTaskExitError+0x28>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	60bb      	str	r3, [r7, #8]
}
 8009ad8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ada:	bf00      	nop
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0fc      	beq.n	8009adc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	20000098 	.word	0x20000098
	...

08009b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b00:	4b07      	ldr	r3, [pc, #28]	; (8009b20 <pxCurrentTCBConst2>)
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	6808      	ldr	r0, [r1, #0]
 8009b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0a:	f380 8809 	msr	PSP, r0
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f04f 0000 	mov.w	r0, #0
 8009b16:	f380 8811 	msr	BASEPRI, r0
 8009b1a:	4770      	bx	lr
 8009b1c:	f3af 8000 	nop.w

08009b20 <pxCurrentTCBConst2>:
 8009b20:	20000df4 	.word	0x20000df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop

08009b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b28:	4808      	ldr	r0, [pc, #32]	; (8009b4c <prvPortStartFirstTask+0x24>)
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	f380 8808 	msr	MSP, r0
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f380 8814 	msr	CONTROL, r0
 8009b3a:	b662      	cpsie	i
 8009b3c:	b661      	cpsie	f
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	df00      	svc	0
 8009b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b4a:	bf00      	nop
 8009b4c:	e000ed08 	.word	0xe000ed08

08009b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b56:	4b46      	ldr	r3, [pc, #280]	; (8009c70 <xPortStartScheduler+0x120>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a46      	ldr	r2, [pc, #280]	; (8009c74 <xPortStartScheduler+0x124>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10a      	bne.n	8009b76 <xPortStartScheduler+0x26>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	613b      	str	r3, [r7, #16]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b76:	4b3e      	ldr	r3, [pc, #248]	; (8009c70 <xPortStartScheduler+0x120>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a3f      	ldr	r2, [pc, #252]	; (8009c78 <xPortStartScheduler+0x128>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10a      	bne.n	8009b96 <xPortStartScheduler+0x46>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	60fb      	str	r3, [r7, #12]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b96:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <xPortStartScheduler+0x12c>)
 8009b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	22ff      	movs	r2, #255	; 0xff
 8009ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b31      	ldr	r3, [pc, #196]	; (8009c80 <xPortStartScheduler+0x130>)
 8009bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bbe:	4b31      	ldr	r3, [pc, #196]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bc4:	e009      	b.n	8009bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bc6:	4b2f      	ldr	r3, [pc, #188]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	4a2d      	ldr	r2, [pc, #180]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d0ef      	beq.n	8009bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009be6:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <xPortStartScheduler+0x134>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f1c3 0307 	rsb	r3, r3, #7
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d00a      	beq.n	8009c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60bb      	str	r3, [r7, #8]
}
 8009c04:	bf00      	nop
 8009c06:	e7fe      	b.n	8009c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c08:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c12:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c1a:	4a1a      	ldr	r2, [pc, #104]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c26:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a14      	ldr	r2, [pc, #80]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c3e:	f000 f8dd 	bl	8009dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c42:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <xPortStartScheduler+0x13c>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c48:	f000 f8fc 	bl	8009e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c4c:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <xPortStartScheduler+0x140>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <xPortStartScheduler+0x140>)
 8009c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c58:	f7ff ff66 	bl	8009b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c5c:	f7ff f850 	bl	8008d00 <vTaskSwitchContext>
	prvTaskExitError();
 8009c60:	f7ff ff1c 	bl	8009a9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	e000ed00 	.word	0xe000ed00
 8009c74:	410fc271 	.word	0x410fc271
 8009c78:	410fc270 	.word	0x410fc270
 8009c7c:	e000e400 	.word	0xe000e400
 8009c80:	20001420 	.word	0x20001420
 8009c84:	20001424 	.word	0x20001424
 8009c88:	e000ed20 	.word	0xe000ed20
 8009c8c:	20000098 	.word	0x20000098
 8009c90:	e000ef34 	.word	0xe000ef34

08009c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	607b      	str	r3, [r7, #4]
}
 8009cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cae:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <vPortEnterCritical+0x58>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <vPortEnterCritical+0x58>)
 8009cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <vPortEnterCritical+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d10f      	bne.n	8009ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <vPortEnterCritical+0x5c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <vPortEnterCritical+0x4a>
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000098 	.word	0x20000098
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cfa:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <vPortExitCritical+0x50>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <vPortExitCritical+0x24>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	607b      	str	r3, [r7, #4]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <vPortExitCritical+0x50>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4a09      	ldr	r2, [pc, #36]	; (8009d44 <vPortExitCritical+0x50>)
 8009d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <vPortExitCritical+0x50>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <vPortExitCritical+0x42>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	f383 8811 	msr	BASEPRI, r3
}
 8009d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000098 	.word	0x20000098
	...

08009d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d50:	f3ef 8009 	mrs	r0, PSP
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <pxCurrentTCBConst>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	f01e 0f10 	tst.w	lr, #16
 8009d60:	bf08      	it	eq
 8009d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	6010      	str	r0, [r2, #0]
 8009d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d74:	f380 8811 	msr	BASEPRI, r0
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f7fe ffbe 	bl	8008d00 <vTaskSwitchContext>
 8009d84:	f04f 0000 	mov.w	r0, #0
 8009d88:	f380 8811 	msr	BASEPRI, r0
 8009d8c:	bc09      	pop	{r0, r3}
 8009d8e:	6819      	ldr	r1, [r3, #0]
 8009d90:	6808      	ldr	r0, [r1, #0]
 8009d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d96:	f01e 0f10 	tst.w	lr, #16
 8009d9a:	bf08      	it	eq
 8009d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009da0:	f380 8809 	msr	PSP, r0
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst>:
 8009db0:	20000df4 	.word	0x20000df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	607b      	str	r3, [r7, #4]
}
 8009dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dd2:	f7fe fedb 	bl	8008b8c <xTaskIncrementTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <xPortSysTickHandler+0x40>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f383 8811 	msr	BASEPRI, r3
}
 8009dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <vPortSetupTimerInterrupt+0x34>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <vPortSetupTimerInterrupt+0x38>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <vPortSetupTimerInterrupt+0x3c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <vPortSetupTimerInterrupt+0x40>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	099b      	lsrs	r3, r3, #6
 8009e18:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <vPortSetupTimerInterrupt+0x44>)
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <vPortSetupTimerInterrupt+0x34>)
 8009e20:	2207      	movs	r2, #7
 8009e22:	601a      	str	r2, [r3, #0]
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	e000e010 	.word	0xe000e010
 8009e34:	e000e018 	.word	0xe000e018
 8009e38:	20000000 	.word	0x20000000
 8009e3c:	10624dd3 	.word	0x10624dd3
 8009e40:	e000e014 	.word	0xe000e014

08009e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e54 <vPortEnableVFP+0x10>
 8009e48:	6801      	ldr	r1, [r0, #0]
 8009e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e4e:	6001      	str	r1, [r0, #0]
 8009e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e52:	bf00      	nop
 8009e54:	e000ed88 	.word	0xe000ed88

08009e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e5e:	f3ef 8305 	mrs	r3, IPSR
 8009e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b0f      	cmp	r3, #15
 8009e68:	d914      	bls.n	8009e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <vPortValidateInterruptPriority+0x70>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e74:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <vPortValidateInterruptPriority+0x74>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	7afa      	ldrb	r2, [r7, #11]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d20a      	bcs.n	8009e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	607b      	str	r3, [r7, #4]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e94:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <vPortValidateInterruptPriority+0x78>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <vPortValidateInterruptPriority+0x7c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d90a      	bls.n	8009eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	603b      	str	r3, [r7, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <vPortValidateInterruptPriority+0x60>
	}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	e000e3f0 	.word	0xe000e3f0
 8009ecc:	20001420 	.word	0x20001420
 8009ed0:	e000ed0c 	.word	0xe000ed0c
 8009ed4:	20001424 	.word	0x20001424

08009ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ee4:	f7fe fd96 	bl	8008a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ee8:	4b5b      	ldr	r3, [pc, #364]	; (800a058 <pvPortMalloc+0x180>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ef0:	f000 f920 	bl	800a134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ef4:	4b59      	ldr	r3, [pc, #356]	; (800a05c <pvPortMalloc+0x184>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8093 	bne.w	800a028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01d      	beq.n	8009f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f08:	2208      	movs	r2, #8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d014      	beq.n	8009f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f023 0307 	bic.w	r3, r3, #7
 8009f20:	3308      	adds	r3, #8
 8009f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <pvPortMalloc+0x6c>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	617b      	str	r3, [r7, #20]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d06e      	beq.n	800a028 <pvPortMalloc+0x150>
 8009f4a:	4b45      	ldr	r3, [pc, #276]	; (800a060 <pvPortMalloc+0x188>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d869      	bhi.n	800a028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f54:	4b43      	ldr	r3, [pc, #268]	; (800a064 <pvPortMalloc+0x18c>)
 8009f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f58:	4b42      	ldr	r3, [pc, #264]	; (800a064 <pvPortMalloc+0x18c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f5e:	e004      	b.n	8009f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <pvPortMalloc+0xa4>
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f1      	bne.n	8009f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f7c:	4b36      	ldr	r3, [pc, #216]	; (800a058 <pvPortMalloc+0x180>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d050      	beq.n	800a028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	4413      	add	r3, r2
 8009f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d91f      	bls.n	8009fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4413      	add	r3, r2
 8009fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	613b      	str	r3, [r7, #16]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	1ad2      	subs	r2, r2, r3
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fe2:	69b8      	ldr	r0, [r7, #24]
 8009fe4:	f000 f908 	bl	800a1f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fe8:	4b1d      	ldr	r3, [pc, #116]	; (800a060 <pvPortMalloc+0x188>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	; (800a060 <pvPortMalloc+0x188>)
 8009ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <pvPortMalloc+0x188>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <pvPortMalloc+0x190>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d203      	bcs.n	800a00a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a002:	4b17      	ldr	r3, [pc, #92]	; (800a060 <pvPortMalloc+0x188>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a18      	ldr	r2, [pc, #96]	; (800a068 <pvPortMalloc+0x190>)
 800a008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <pvPortMalloc+0x184>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	431a      	orrs	r2, r3
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <pvPortMalloc+0x194>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3301      	adds	r3, #1
 800a024:	4a11      	ldr	r2, [pc, #68]	; (800a06c <pvPortMalloc+0x194>)
 800a026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a028:	f7fe fd02 	bl	8008a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <pvPortMalloc+0x174>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60fb      	str	r3, [r7, #12]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <pvPortMalloc+0x172>
	return pvReturn;
 800a04c:	69fb      	ldr	r3, [r7, #28]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3728      	adds	r7, #40	; 0x28
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20005030 	.word	0x20005030
 800a05c:	20005044 	.word	0x20005044
 800a060:	20005034 	.word	0x20005034
 800a064:	20005028 	.word	0x20005028
 800a068:	20005038 	.word	0x20005038
 800a06c:	2000503c 	.word	0x2000503c

0800a070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d04d      	beq.n	800a11e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a082:	2308      	movs	r3, #8
 800a084:	425b      	negs	r3, r3
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4413      	add	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	4b24      	ldr	r3, [pc, #144]	; (800a128 <vPortFree+0xb8>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4013      	ands	r3, r2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <vPortFree+0x44>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	60fb      	str	r3, [r7, #12]
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <vPortFree+0x62>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60bb      	str	r3, [r7, #8]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	4b14      	ldr	r3, [pc, #80]	; (800a128 <vPortFree+0xb8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d01e      	beq.n	800a11e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11a      	bne.n	800a11e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <vPortFree+0xb8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	401a      	ands	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0f8:	f7fe fc8c 	bl	8008a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <vPortFree+0xbc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4413      	add	r3, r2
 800a106:	4a09      	ldr	r2, [pc, #36]	; (800a12c <vPortFree+0xbc>)
 800a108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a10a:	6938      	ldr	r0, [r7, #16]
 800a10c:	f000 f874 	bl	800a1f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <vPortFree+0xc0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a06      	ldr	r2, [pc, #24]	; (800a130 <vPortFree+0xc0>)
 800a118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a11a:	f7fe fc89 	bl	8008a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a11e:	bf00      	nop
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20005044 	.word	0x20005044
 800a12c:	20005034 	.word	0x20005034
 800a130:	20005040 	.word	0x20005040

0800a134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a13a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a13e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <prvHeapInit+0xac>)
 800a142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00c      	beq.n	800a168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3307      	adds	r3, #7
 800a152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	4a1f      	ldr	r2, [pc, #124]	; (800a1e0 <prvHeapInit+0xac>)
 800a164:	4413      	add	r3, r2
 800a166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a16c:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <prvHeapInit+0xb0>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <prvHeapInit+0xb0>)
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a180:	2208      	movs	r2, #8
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <prvHeapInit+0xb4>)
 800a194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <prvHeapInit+0xb4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a19e:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <prvHeapInit+0xb8>)
 800a1c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <prvHeapInit+0xbc>)
 800a1ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1cc:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <prvHeapInit+0xc0>)
 800a1ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	20001428 	.word	0x20001428
 800a1e4:	20005028 	.word	0x20005028
 800a1e8:	20005030 	.word	0x20005030
 800a1ec:	20005038 	.word	0x20005038
 800a1f0:	20005034 	.word	0x20005034
 800a1f4:	20005044 	.word	0x20005044

0800a1f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a200:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <prvInsertBlockIntoFreeList+0xac>)
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e002      	b.n	800a20c <prvInsertBlockIntoFreeList+0x14>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	429a      	cmp	r2, r3
 800a214:	d8f7      	bhi.n	800a206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	4413      	add	r3, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d108      	bne.n	800a23a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	441a      	add	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d118      	bne.n	800a280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d00d      	beq.n	800a276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	e008      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e003      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d002      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20005028 	.word	0x20005028
 800a2a8:	20005030 	.word	0x20005030

0800a2ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4912      	ldr	r1, [pc, #72]	; (800a2fc <MX_USB_DEVICE_Init+0x50>)
 800a2b4:	4812      	ldr	r0, [pc, #72]	; (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2b6:	f7fb ff6f 	bl	8006198 <USBD_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2c0:	f7f6 fc24 	bl	8000b0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2c4:	490f      	ldr	r1, [pc, #60]	; (800a304 <MX_USB_DEVICE_Init+0x58>)
 800a2c6:	480e      	ldr	r0, [pc, #56]	; (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2c8:	f7fb ff96 	bl	80061f8 <USBD_RegisterClass>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2d2:	f7f6 fc1b 	bl	8000b0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2d6:	490c      	ldr	r1, [pc, #48]	; (800a308 <MX_USB_DEVICE_Init+0x5c>)
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2da:	f7fb fecd 	bl	8006078 <USBD_CDC_RegisterInterface>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2e4:	f7f6 fc12 	bl	8000b0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2ea:	f7fb ffbb 	bl	8006264 <USBD_Start>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2f4:	f7f6 fc0a 	bl	8000b0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2f8:	bf00      	nop
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	200000b0 	.word	0x200000b0
 800a300:	20005048 	.word	0x20005048
 800a304:	20000018 	.word	0x20000018
 800a308:	2000009c 	.word	0x2000009c

0800a30c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a310:	2200      	movs	r2, #0
 800a312:	4905      	ldr	r1, [pc, #20]	; (800a328 <CDC_Init_FS+0x1c>)
 800a314:	4805      	ldr	r0, [pc, #20]	; (800a32c <CDC_Init_FS+0x20>)
 800a316:	f7fb fec9 	bl	80060ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a31a:	4905      	ldr	r1, [pc, #20]	; (800a330 <CDC_Init_FS+0x24>)
 800a31c:	4803      	ldr	r0, [pc, #12]	; (800a32c <CDC_Init_FS+0x20>)
 800a31e:	f7fb fee7 	bl	80060f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a324:	4618      	mov	r0, r3
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20005b24 	.word	0x20005b24
 800a32c:	20005048 	.word	0x20005048
 800a330:	20005324 	.word	0x20005324

0800a334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	4613      	mov	r3, r2
 800a352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b23      	cmp	r3, #35	; 0x23
 800a358:	d84a      	bhi.n	800a3f0 <CDC_Control_FS+0xac>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <CDC_Control_FS+0x1c>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a3f1 	.word	0x0800a3f1
 800a364:	0800a3f1 	.word	0x0800a3f1
 800a368:	0800a3f1 	.word	0x0800a3f1
 800a36c:	0800a3f1 	.word	0x0800a3f1
 800a370:	0800a3f1 	.word	0x0800a3f1
 800a374:	0800a3f1 	.word	0x0800a3f1
 800a378:	0800a3f1 	.word	0x0800a3f1
 800a37c:	0800a3f1 	.word	0x0800a3f1
 800a380:	0800a3f1 	.word	0x0800a3f1
 800a384:	0800a3f1 	.word	0x0800a3f1
 800a388:	0800a3f1 	.word	0x0800a3f1
 800a38c:	0800a3f1 	.word	0x0800a3f1
 800a390:	0800a3f1 	.word	0x0800a3f1
 800a394:	0800a3f1 	.word	0x0800a3f1
 800a398:	0800a3f1 	.word	0x0800a3f1
 800a39c:	0800a3f1 	.word	0x0800a3f1
 800a3a0:	0800a3f1 	.word	0x0800a3f1
 800a3a4:	0800a3f1 	.word	0x0800a3f1
 800a3a8:	0800a3f1 	.word	0x0800a3f1
 800a3ac:	0800a3f1 	.word	0x0800a3f1
 800a3b0:	0800a3f1 	.word	0x0800a3f1
 800a3b4:	0800a3f1 	.word	0x0800a3f1
 800a3b8:	0800a3f1 	.word	0x0800a3f1
 800a3bc:	0800a3f1 	.word	0x0800a3f1
 800a3c0:	0800a3f1 	.word	0x0800a3f1
 800a3c4:	0800a3f1 	.word	0x0800a3f1
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f1 	.word	0x0800a3f1
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a3f1 	.word	0x0800a3f1
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f1 	.word	0x0800a3f1
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f1 	.word	0x0800a3f1
 800a3e8:	0800a3f1 	.word	0x0800a3f1
 800a3ec:	0800a3f1 	.word	0x0800a3f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3f0:	bf00      	nop
  }

  return (USBD_OK);
 800a3f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	4805      	ldr	r0, [pc, #20]	; (800a424 <CDC_Receive_FS+0x24>)
 800a40e:	f7fb fe6f 	bl	80060f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a412:	4804      	ldr	r0, [pc, #16]	; (800a424 <CDC_Receive_FS+0x24>)
 800a414:	f7fb fe8a 	bl	800612c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a418:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20005048 	.word	0x20005048

0800a428 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
	...

0800a44c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2212      	movs	r2, #18
 800a45c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a45e:	4b03      	ldr	r3, [pc, #12]	; (800a46c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	200000cc 	.word	0x200000cc

0800a470 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	6039      	str	r1, [r7, #0]
 800a47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2204      	movs	r2, #4
 800a480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a482:	4b03      	ldr	r3, [pc, #12]	; (800a490 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	200000e0 	.word	0x200000e0

0800a494 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4907      	ldr	r1, [pc, #28]	; (800a4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4aa:	4808      	ldr	r0, [pc, #32]	; (800a4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a4ac:	f7fd f886 	bl	80075bc <USBD_GetString>
 800a4b0:	e004      	b.n	800a4bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4904      	ldr	r1, [pc, #16]	; (800a4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a4b8:	f7fd f880 	bl	80075bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20006324 	.word	0x20006324
 800a4cc:	0800add8 	.word	0x0800add8

0800a4d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	4904      	ldr	r1, [pc, #16]	; (800a4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4e0:	4804      	ldr	r0, [pc, #16]	; (800a4f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4e2:	f7fd f86b 	bl	80075bc <USBD_GetString>
  return USBD_StrDesc;
 800a4e6:	4b02      	ldr	r3, [pc, #8]	; (800a4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20006324 	.word	0x20006324
 800a4f4:	0800adf0 	.word	0x0800adf0

0800a4f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	6039      	str	r1, [r7, #0]
 800a502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	221a      	movs	r2, #26
 800a508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a50a:	f000 f843 	bl	800a594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a50e:	4b02      	ldr	r3, [pc, #8]	; (800a518 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	200000e4 	.word	0x200000e4

0800a51c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d105      	bne.n	800a53a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4907      	ldr	r1, [pc, #28]	; (800a550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a532:	4808      	ldr	r0, [pc, #32]	; (800a554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a534:	f7fd f842 	bl	80075bc <USBD_GetString>
 800a538:	e004      	b.n	800a544 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a540:	f7fd f83c 	bl	80075bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a544:	4b02      	ldr	r3, [pc, #8]	; (800a550 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20006324 	.word	0x20006324
 800a554:	0800ae04 	.word	0x0800ae04

0800a558 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d105      	bne.n	800a576 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	4907      	ldr	r1, [pc, #28]	; (800a58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a570:	f7fd f824 	bl	80075bc <USBD_GetString>
 800a574:	e004      	b.n	800a580 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	4904      	ldr	r1, [pc, #16]	; (800a58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a57a:	4805      	ldr	r0, [pc, #20]	; (800a590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a57c:	f7fd f81e 	bl	80075bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a580:	4b02      	ldr	r3, [pc, #8]	; (800a58c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20006324 	.word	0x20006324
 800a590:	0800ae10 	.word	0x0800ae10

0800a594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a59a:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <Get_SerialNum+0x44>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <Get_SerialNum+0x48>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5a6:	4b0e      	ldr	r3, [pc, #56]	; (800a5e0 <Get_SerialNum+0x4c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	4909      	ldr	r1, [pc, #36]	; (800a5e4 <Get_SerialNum+0x50>)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f814 	bl	800a5ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	4908      	ldr	r1, [pc, #32]	; (800a5e8 <Get_SerialNum+0x54>)
 800a5c8:	68b8      	ldr	r0, [r7, #8]
 800a5ca:	f000 f80f 	bl	800a5ec <IntToUnicode>
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	1fff7a10 	.word	0x1fff7a10
 800a5dc:	1fff7a14 	.word	0x1fff7a14
 800a5e0:	1fff7a18 	.word	0x1fff7a18
 800a5e4:	200000e6 	.word	0x200000e6
 800a5e8:	200000f6 	.word	0x200000f6

0800a5ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
 800a602:	e027      	b.n	800a654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	0f1b      	lsrs	r3, r3, #28
 800a608:	2b09      	cmp	r3, #9
 800a60a:	d80b      	bhi.n	800a624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	0f1b      	lsrs	r3, r3, #28
 800a610:	b2da      	uxtb	r2, r3
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4619      	mov	r1, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	440b      	add	r3, r1
 800a61c:	3230      	adds	r2, #48	; 0x30
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	e00a      	b.n	800a63a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	0f1b      	lsrs	r3, r3, #28
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4619      	mov	r1, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	440b      	add	r3, r1
 800a634:	3237      	adds	r2, #55	; 0x37
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	3301      	adds	r3, #1
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	4413      	add	r3, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	3301      	adds	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
 800a654:	7dfa      	ldrb	r2, [r7, #23]
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d3d3      	bcc.n	800a604 <IntToUnicode+0x18>
  }
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	; 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a674:	f107 0314 	add.w	r3, r7, #20
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	605a      	str	r2, [r3, #4]
 800a67e:	609a      	str	r2, [r3, #8]
 800a680:	60da      	str	r2, [r3, #12]
 800a682:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a68c:	d13a      	bne.n	800a704 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a68e:	2300      	movs	r3, #0
 800a690:	613b      	str	r3, [r7, #16]
 800a692:	4b1e      	ldr	r3, [pc, #120]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	4a1d      	ldr	r2, [pc, #116]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	6313      	str	r3, [r2, #48]	; 0x30
 800a69e:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6bc:	230a      	movs	r3, #10
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c0:	f107 0314 	add.w	r3, r7, #20
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4812      	ldr	r0, [pc, #72]	; (800a710 <HAL_PCD_MspInit+0xa4>)
 800a6c8:	f7f6 fece 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6cc:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d0:	4a0e      	ldr	r2, [pc, #56]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d6:	6353      	str	r3, [r2, #52]	; 0x34
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e0:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e6:	6453      	str	r3, [r2, #68]	; 0x44
 800a6e8:	4b08      	ldr	r3, [pc, #32]	; (800a70c <HAL_PCD_MspInit+0xa0>)
 800a6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2105      	movs	r1, #5
 800a6f8:	2043      	movs	r0, #67	; 0x43
 800a6fa:	f7f6 fe8b 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6fe:	2043      	movs	r0, #67	; 0x43
 800a700:	f7f6 fea4 	bl	800144c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a704:	bf00      	nop
 800a706:	3728      	adds	r7, #40	; 0x28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	40023800 	.word	0x40023800
 800a710:	40020000 	.word	0x40020000

0800a714 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fb fde7 	bl	80062fe <USBD_LL_SetupStage>
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	6879      	ldr	r1, [r7, #4]
 800a74e:	4613      	mov	r3, r2
 800a750:	00db      	lsls	r3, r3, #3
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	440b      	add	r3, r1
 800a758:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	4619      	mov	r1, r3
 800a762:	f7fb fe21 	bl	80063a8 <USBD_LL_DataOutStage>
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	460b      	mov	r3, r1
 800a778:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4613      	mov	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	334c      	adds	r3, #76	; 0x4c
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	4619      	mov	r1, r3
 800a796:	f7fb feba 	bl	800650e <USBD_LL_DataInStage>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fb ffee 	bl	8006792 <USBD_LL_SOF>
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]
 800a7d6:	e008      	b.n	800a7ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d102      	bne.n	800a7e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
 800a7e4:	e001      	b.n	800a7ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a7e6:	f7f6 f991 	bl	8000b0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7f0:	7bfa      	ldrb	r2, [r7, #15]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb ff8e 	bl	8006716 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a800:	4618      	mov	r0, r3
 800a802:	f7fb ff36 	bl	8006672 <USBD_LL_Reset>
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
	...

0800a810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb ff89 	bl	8006736 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a836:	f043 0301 	orr.w	r3, r3, #1
 800a83a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <HAL_PCD_SuspendCallback+0x48>)
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	4a03      	ldr	r2, [pc, #12]	; (800a858 <HAL_PCD_SuspendCallback+0x48>)
 800a84a:	f043 0306 	orr.w	r3, r3, #6
 800a84e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed00 	.word	0xe000ed00

0800a85c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fb ff79 	bl	8006762 <USBD_LL_Resume>
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fb ffd1 	bl	8006836 <USBD_LL_IsoOUTIncomplete>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ae:	78fa      	ldrb	r2, [r7, #3]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fb ff8d 	bl	80067d2 <USBD_LL_IsoINIncomplete>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fb ffe3 	bl	800689a <USBD_LL_DevConnected>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fb ffe0 	bl	80068b0 <USBD_LL_DevDisconnected>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d13c      	bne.n	800a982 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a908:	4a20      	ldr	r2, [pc, #128]	; (800a98c <USBD_LL_Init+0x94>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1e      	ldr	r2, [pc, #120]	; (800a98c <USBD_LL_Init+0x94>)
 800a914:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a918:	4b1c      	ldr	r3, [pc, #112]	; (800a98c <USBD_LL_Init+0x94>)
 800a91a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a91e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a920:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <USBD_LL_Init+0x94>)
 800a922:	2204      	movs	r2, #4
 800a924:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <USBD_LL_Init+0x94>)
 800a928:	2202      	movs	r2, #2
 800a92a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a92c:	4b17      	ldr	r3, [pc, #92]	; (800a98c <USBD_LL_Init+0x94>)
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <USBD_LL_Init+0x94>)
 800a934:	2202      	movs	r2, #2
 800a936:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <USBD_LL_Init+0x94>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a93e:	4b13      	ldr	r3, [pc, #76]	; (800a98c <USBD_LL_Init+0x94>)
 800a940:	2200      	movs	r2, #0
 800a942:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <USBD_LL_Init+0x94>)
 800a946:	2200      	movs	r2, #0
 800a948:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a94a:	4b10      	ldr	r3, [pc, #64]	; (800a98c <USBD_LL_Init+0x94>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a950:	4b0e      	ldr	r3, [pc, #56]	; (800a98c <USBD_LL_Init+0x94>)
 800a952:	2200      	movs	r2, #0
 800a954:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a956:	480d      	ldr	r0, [pc, #52]	; (800a98c <USBD_LL_Init+0x94>)
 800a958:	f7f6 ff3b 	bl	80017d2 <HAL_PCD_Init>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a962:	f7f6 f8d3 	bl	8000b0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a966:	2180      	movs	r1, #128	; 0x80
 800a968:	4808      	ldr	r0, [pc, #32]	; (800a98c <USBD_LL_Init+0x94>)
 800a96a:	f7f8 f992 	bl	8002c92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a96e:	2240      	movs	r2, #64	; 0x40
 800a970:	2100      	movs	r1, #0
 800a972:	4806      	ldr	r0, [pc, #24]	; (800a98c <USBD_LL_Init+0x94>)
 800a974:	f7f8 f946 	bl	8002c04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a978:	2280      	movs	r2, #128	; 0x80
 800a97a:	2101      	movs	r1, #1
 800a97c:	4803      	ldr	r0, [pc, #12]	; (800a98c <USBD_LL_Init+0x94>)
 800a97e:	f7f8 f941 	bl	8002c04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20006524 	.word	0x20006524

0800a990 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f7 f830 	bl	8001a0c <HAL_PCD_Start>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f942 	bl	800ac3c <USBD_Get_USB_Status>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	70fb      	strb	r3, [r7, #3]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70bb      	strb	r3, [r7, #2]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9ee:	78bb      	ldrb	r3, [r7, #2]
 800a9f0:	883a      	ldrh	r2, [r7, #0]
 800a9f2:	78f9      	ldrb	r1, [r7, #3]
 800a9f4:	f7f7 fd01 	bl	80023fa <HAL_PCD_EP_Open>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f91c 	bl	800ac3c <USBD_Get_USB_Status>
 800aa04:	4603      	mov	r3, r0
 800aa06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7f7 fd4a 	bl	80024ca <HAL_PCD_EP_Close>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f8fd 	bl	800ac3c <USBD_Get_USB_Status>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f7 fe22 	bl	80026b8 <HAL_PCD_EP_SetStall>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f8de 	bl	800ac3c <USBD_Get_USB_Status>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f7 fe67 	bl	8002780 <HAL_PCD_EP_ClrStall>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 f8bf 	bl	800ac3c <USBD_Get_USB_Status>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aade:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da0b      	bge.n	800ab00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	333e      	adds	r3, #62	; 0x3e
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	e00b      	b.n	800ab18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	440b      	add	r3, r1
 800ab12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7f7 fc34 	bl	80023b0 <HAL_PCD_SetAddress>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 f874 	bl	800ac3c <USBD_Get_USB_Status>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b086      	sub	sp, #24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab80:	7af9      	ldrb	r1, [r7, #11]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f7f7 fd4d 	bl	8002624 <HAL_PCD_EP_Transmit>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f853 	bl	800ac3c <USBD_Get_USB_Status>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	460b      	mov	r3, r1
 800abb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abc2:	7af9      	ldrb	r1, [r7, #11]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	f7f7 fcc9 	bl	800255e <HAL_PCD_EP_Receive>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 f832 	bl	800ac3c <USBD_Get_USB_Status>
 800abd8:	4603      	mov	r3, r0
 800abda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abdc:	7dbb      	ldrb	r3, [r7, #22]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f7 fcf9 	bl	80025f4 <HAL_PCD_EP_GetRxCount>
 800ac02:	4603      	mov	r3, r0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac14:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <USBD_static_malloc+0x18>)
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20006a30 	.word	0x20006a30

0800ac28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]

}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d817      	bhi.n	800ac80 <USBD_Get_USB_Status+0x44>
 800ac50:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <USBD_Get_USB_Status+0x1c>)
 800ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac56:	bf00      	nop
 800ac58:	0800ac69 	.word	0x0800ac69
 800ac5c:	0800ac6f 	.word	0x0800ac6f
 800ac60:	0800ac75 	.word	0x0800ac75
 800ac64:	0800ac7b 	.word	0x0800ac7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e00b      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e008      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac74:	2301      	movs	r3, #1
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	e005      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac7e:	e002      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac80:	2303      	movs	r3, #3
 800ac82:	73fb      	strb	r3, [r7, #15]
    break;
 800ac84:	bf00      	nop
  }
  return usb_status;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <__libc_init_array>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	4d0d      	ldr	r5, [pc, #52]	; (800accc <__libc_init_array+0x38>)
 800ac98:	4c0d      	ldr	r4, [pc, #52]	; (800acd0 <__libc_init_array+0x3c>)
 800ac9a:	1b64      	subs	r4, r4, r5
 800ac9c:	10a4      	asrs	r4, r4, #2
 800ac9e:	2600      	movs	r6, #0
 800aca0:	42a6      	cmp	r6, r4
 800aca2:	d109      	bne.n	800acb8 <__libc_init_array+0x24>
 800aca4:	4d0b      	ldr	r5, [pc, #44]	; (800acd4 <__libc_init_array+0x40>)
 800aca6:	4c0c      	ldr	r4, [pc, #48]	; (800acd8 <__libc_init_array+0x44>)
 800aca8:	f000 f82e 	bl	800ad08 <_init>
 800acac:	1b64      	subs	r4, r4, r5
 800acae:	10a4      	asrs	r4, r4, #2
 800acb0:	2600      	movs	r6, #0
 800acb2:	42a6      	cmp	r6, r4
 800acb4:	d105      	bne.n	800acc2 <__libc_init_array+0x2e>
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbc:	4798      	blx	r3
 800acbe:	3601      	adds	r6, #1
 800acc0:	e7ee      	b.n	800aca0 <__libc_init_array+0xc>
 800acc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc6:	4798      	blx	r3
 800acc8:	3601      	adds	r6, #1
 800acca:	e7f2      	b.n	800acb2 <__libc_init_array+0x1e>
 800accc:	0800af74 	.word	0x0800af74
 800acd0:	0800af74 	.word	0x0800af74
 800acd4:	0800af74 	.word	0x0800af74
 800acd8:	0800af78 	.word	0x0800af78

0800acdc <memcpy>:
 800acdc:	440a      	add	r2, r1
 800acde:	4291      	cmp	r1, r2
 800ace0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ace4:	d100      	bne.n	800ace8 <memcpy+0xc>
 800ace6:	4770      	bx	lr
 800ace8:	b510      	push	{r4, lr}
 800acea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf2:	4291      	cmp	r1, r2
 800acf4:	d1f9      	bne.n	800acea <memcpy+0xe>
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <memset>:
 800acf8:	4402      	add	r2, r0
 800acfa:	4603      	mov	r3, r0
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d100      	bne.n	800ad02 <memset+0xa>
 800ad00:	4770      	bx	lr
 800ad02:	f803 1b01 	strb.w	r1, [r3], #1
 800ad06:	e7f9      	b.n	800acfc <memset+0x4>

0800ad08 <_init>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr

0800ad14 <_fini>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	bf00      	nop
 800ad18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1a:	bc08      	pop	{r3}
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	4770      	bx	lr
