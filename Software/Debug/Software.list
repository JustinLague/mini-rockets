
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c740  0800c740  0001c740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9bc  0800c9bc  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9bc  0800c9bc  0001c9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c4  0800c9c4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800c9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00006c8c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006d8c  20006d8c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e88  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c4f  00000000  00000000  00046fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0004cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c20  00000000  00000000  0004ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d65  00000000  00000000  000506f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027099  00000000  00000000  00078455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6489  00000000  00000000  0009f4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175977  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ecc  00000000  00000000  001759c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c728 	.word	0x0800c728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800c728 	.word	0x0800c728

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_frsub>:
 80001e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__addsf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_fsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001ec <__addsf3>:
 80001ec:	0042      	lsls	r2, r0, #1
 80001ee:	bf1f      	itttt	ne
 80001f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f4:	ea92 0f03 	teqne	r2, r3
 80001f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000200:	d06a      	beq.n	80002d8 <__addsf3+0xec>
 8000202:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000206:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800020a:	bfc1      	itttt	gt
 800020c:	18d2      	addgt	r2, r2, r3
 800020e:	4041      	eorgt	r1, r0
 8000210:	4048      	eorgt	r0, r1
 8000212:	4041      	eorgt	r1, r0
 8000214:	bfb8      	it	lt
 8000216:	425b      	neglt	r3, r3
 8000218:	2b19      	cmp	r3, #25
 800021a:	bf88      	it	hi
 800021c:	4770      	bxhi	lr
 800021e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000226:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4240      	negne	r0, r0
 800022e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000232:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000236:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4249      	negne	r1, r1
 800023e:	ea92 0f03 	teq	r2, r3
 8000242:	d03f      	beq.n	80002c4 <__addsf3+0xd8>
 8000244:	f1a2 0201 	sub.w	r2, r2, #1
 8000248:	fa41 fc03 	asr.w	ip, r1, r3
 800024c:	eb10 000c 	adds.w	r0, r0, ip
 8000250:	f1c3 0320 	rsb	r3, r3, #32
 8000254:	fa01 f103 	lsl.w	r1, r1, r3
 8000258:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800025c:	d502      	bpl.n	8000264 <__addsf3+0x78>
 800025e:	4249      	negs	r1, r1
 8000260:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000264:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000268:	d313      	bcc.n	8000292 <__addsf3+0xa6>
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d306      	bcc.n	800027e <__addsf3+0x92>
 8000270:	0840      	lsrs	r0, r0, #1
 8000272:	ea4f 0131 	mov.w	r1, r1, rrx
 8000276:	f102 0201 	add.w	r2, r2, #1
 800027a:	2afe      	cmp	r2, #254	; 0xfe
 800027c:	d251      	bcs.n	8000322 <__addsf3+0x136>
 800027e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	ea40 0003 	orr.w	r0, r0, r3
 8000290:	4770      	bx	lr
 8000292:	0049      	lsls	r1, r1, #1
 8000294:	eb40 0000 	adc.w	r0, r0, r0
 8000298:	3a01      	subs	r2, #1
 800029a:	bf28      	it	cs
 800029c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002a0:	d2ed      	bcs.n	800027e <__addsf3+0x92>
 80002a2:	fab0 fc80 	clz	ip, r0
 80002a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002aa:	ebb2 020c 	subs.w	r2, r2, ip
 80002ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80002b2:	bfaa      	itet	ge
 80002b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b8:	4252      	neglt	r2, r2
 80002ba:	4318      	orrge	r0, r3
 80002bc:	bfbc      	itt	lt
 80002be:	40d0      	lsrlt	r0, r2
 80002c0:	4318      	orrlt	r0, r3
 80002c2:	4770      	bx	lr
 80002c4:	f092 0f00 	teq	r2, #0
 80002c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002cc:	bf06      	itte	eq
 80002ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002d2:	3201      	addeq	r2, #1
 80002d4:	3b01      	subne	r3, #1
 80002d6:	e7b5      	b.n	8000244 <__addsf3+0x58>
 80002d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002e0:	bf18      	it	ne
 80002e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e6:	d021      	beq.n	800032c <__addsf3+0x140>
 80002e8:	ea92 0f03 	teq	r2, r3
 80002ec:	d004      	beq.n	80002f8 <__addsf3+0x10c>
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf08      	it	eq
 80002f4:	4608      	moveq	r0, r1
 80002f6:	4770      	bx	lr
 80002f8:	ea90 0f01 	teq	r0, r1
 80002fc:	bf1c      	itt	ne
 80002fe:	2000      	movne	r0, #0
 8000300:	4770      	bxne	lr
 8000302:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000306:	d104      	bne.n	8000312 <__addsf3+0x126>
 8000308:	0040      	lsls	r0, r0, #1
 800030a:	bf28      	it	cs
 800030c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000310:	4770      	bx	lr
 8000312:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000316:	bf3c      	itt	cc
 8000318:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800031c:	4770      	bxcc	lr
 800031e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000322:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	4770      	bx	lr
 800032c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000330:	bf16      	itet	ne
 8000332:	4608      	movne	r0, r1
 8000334:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000338:	4601      	movne	r1, r0
 800033a:	0242      	lsls	r2, r0, #9
 800033c:	bf06      	itte	eq
 800033e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000342:	ea90 0f01 	teqeq	r0, r1
 8000346:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800034a:	4770      	bx	lr

0800034c <__aeabi_ui2f>:
 800034c:	f04f 0300 	mov.w	r3, #0
 8000350:	e004      	b.n	800035c <__aeabi_i2f+0x8>
 8000352:	bf00      	nop

08000354 <__aeabi_i2f>:
 8000354:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000358:	bf48      	it	mi
 800035a:	4240      	negmi	r0, r0
 800035c:	ea5f 0c00 	movs.w	ip, r0
 8000360:	bf08      	it	eq
 8000362:	4770      	bxeq	lr
 8000364:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000368:	4601      	mov	r1, r0
 800036a:	f04f 0000 	mov.w	r0, #0
 800036e:	e01c      	b.n	80003aa <__aeabi_l2f+0x2a>

08000370 <__aeabi_ul2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	e00a      	b.n	8000394 <__aeabi_l2f+0x14>
 800037e:	bf00      	nop

08000380 <__aeabi_l2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__aeabi_l2f+0x14>
 800038e:	4240      	negs	r0, r0
 8000390:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000394:	ea5f 0c01 	movs.w	ip, r1
 8000398:	bf02      	ittt	eq
 800039a:	4684      	moveq	ip, r0
 800039c:	4601      	moveq	r1, r0
 800039e:	2000      	moveq	r0, #0
 80003a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003a4:	bf08      	it	eq
 80003a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ae:	fabc f28c 	clz	r2, ip
 80003b2:	3a08      	subs	r2, #8
 80003b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b8:	db10      	blt.n	80003dc <__aeabi_l2f+0x5c>
 80003ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80003be:	4463      	add	r3, ip
 80003c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c4:	f1c2 0220 	rsb	r2, r2, #32
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	fa20 f202 	lsr.w	r2, r0, r2
 80003d0:	eb43 0002 	adc.w	r0, r3, r2
 80003d4:	bf08      	it	eq
 80003d6:	f020 0001 	biceq.w	r0, r0, #1
 80003da:	4770      	bx	lr
 80003dc:	f102 0220 	add.w	r2, r2, #32
 80003e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003ec:	fa21 f202 	lsr.w	r2, r1, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003fa:	4770      	bx	lr

080003fc <__aeabi_uldivmod>:
 80003fc:	b953      	cbnz	r3, 8000414 <__aeabi_uldivmod+0x18>
 80003fe:	b94a      	cbnz	r2, 8000414 <__aeabi_uldivmod+0x18>
 8000400:	2900      	cmp	r1, #0
 8000402:	bf08      	it	eq
 8000404:	2800      	cmpeq	r0, #0
 8000406:	bf1c      	itt	ne
 8000408:	f04f 31ff 	movne.w	r1, #4294967295
 800040c:	f04f 30ff 	movne.w	r0, #4294967295
 8000410:	f000 b974 	b.w	80006fc <__aeabi_idiv0>
 8000414:	f1ad 0c08 	sub.w	ip, sp, #8
 8000418:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000428:	b004      	add	sp, #16
 800042a:	4770      	bx	lr

0800042c <__udivmoddi4>:
 800042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000430:	9d08      	ldr	r5, [sp, #32]
 8000432:	4604      	mov	r4, r0
 8000434:	468e      	mov	lr, r1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d14d      	bne.n	80004d6 <__udivmoddi4+0xaa>
 800043a:	428a      	cmp	r2, r1
 800043c:	4694      	mov	ip, r2
 800043e:	d969      	bls.n	8000514 <__udivmoddi4+0xe8>
 8000440:	fab2 f282 	clz	r2, r2
 8000444:	b152      	cbz	r2, 800045c <__udivmoddi4+0x30>
 8000446:	fa01 f302 	lsl.w	r3, r1, r2
 800044a:	f1c2 0120 	rsb	r1, r2, #32
 800044e:	fa20 f101 	lsr.w	r1, r0, r1
 8000452:	fa0c fc02 	lsl.w	ip, ip, r2
 8000456:	ea41 0e03 	orr.w	lr, r1, r3
 800045a:	4094      	lsls	r4, r2
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	0c21      	lsrs	r1, r4, #16
 8000462:	fbbe f6f8 	udiv	r6, lr, r8
 8000466:	fa1f f78c 	uxth.w	r7, ip
 800046a:	fb08 e316 	mls	r3, r8, r6, lr
 800046e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000472:	fb06 f107 	mul.w	r1, r6, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d90a      	bls.n	8000490 <__udivmoddi4+0x64>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000482:	f080 811f 	bcs.w	80006c4 <__udivmoddi4+0x298>
 8000486:	4299      	cmp	r1, r3
 8000488:	f240 811c 	bls.w	80006c4 <__udivmoddi4+0x298>
 800048c:	3e02      	subs	r6, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb00 f707 	mul.w	r7, r0, r7
 80004a4:	42a7      	cmp	r7, r4
 80004a6:	d90a      	bls.n	80004be <__udivmoddi4+0x92>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	f080 810a 	bcs.w	80006c8 <__udivmoddi4+0x29c>
 80004b4:	42a7      	cmp	r7, r4
 80004b6:	f240 8107 	bls.w	80006c8 <__udivmoddi4+0x29c>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004c2:	1be4      	subs	r4, r4, r7
 80004c4:	2600      	movs	r6, #0
 80004c6:	b11d      	cbz	r5, 80004d0 <__udivmoddi4+0xa4>
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	2300      	movs	r3, #0
 80004cc:	e9c5 4300 	strd	r4, r3, [r5]
 80004d0:	4631      	mov	r1, r6
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0xc2>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80ef 	beq.w	80006be <__udivmoddi4+0x292>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x160>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0xd4>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80f9 	bhi.w	80006f2 <__udivmoddi4+0x2c6>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0303 	sbc.w	r3, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	469e      	mov	lr, r3
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0e0      	beq.n	80004d0 <__udivmoddi4+0xa4>
 800050e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000512:	e7dd      	b.n	80004d0 <__udivmoddi4+0xa4>
 8000514:	b902      	cbnz	r2, 8000518 <__udivmoddi4+0xec>
 8000516:	deff      	udf	#255	; 0xff
 8000518:	fab2 f282 	clz	r2, r2
 800051c:	2a00      	cmp	r2, #0
 800051e:	f040 8092 	bne.w	8000646 <__udivmoddi4+0x21a>
 8000522:	eba1 010c 	sub.w	r1, r1, ip
 8000526:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	2601      	movs	r6, #1
 8000530:	0c20      	lsrs	r0, r4, #16
 8000532:	fbb1 f3f7 	udiv	r3, r1, r7
 8000536:	fb07 1113 	mls	r1, r7, r3, r1
 800053a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800053e:	fb0e f003 	mul.w	r0, lr, r3
 8000542:	4288      	cmp	r0, r1
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x12c>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f103 38ff 	add.w	r8, r3, #4294967295
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x12a>
 8000550:	4288      	cmp	r0, r1
 8000552:	f200 80cb 	bhi.w	80006ec <__udivmoddi4+0x2c0>
 8000556:	4643      	mov	r3, r8
 8000558:	1a09      	subs	r1, r1, r0
 800055a:	b2a4      	uxth	r4, r4
 800055c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000560:	fb07 1110 	mls	r1, r7, r0, r1
 8000564:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000568:	fb0e fe00 	mul.w	lr, lr, r0
 800056c:	45a6      	cmp	lr, r4
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x156>
 8000570:	eb1c 0404 	adds.w	r4, ip, r4
 8000574:	f100 31ff 	add.w	r1, r0, #4294967295
 8000578:	d202      	bcs.n	8000580 <__udivmoddi4+0x154>
 800057a:	45a6      	cmp	lr, r4
 800057c:	f200 80bb 	bhi.w	80006f6 <__udivmoddi4+0x2ca>
 8000580:	4608      	mov	r0, r1
 8000582:	eba4 040e 	sub.w	r4, r4, lr
 8000586:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x9a>
 800058c:	f1c6 0720 	rsb	r7, r6, #32
 8000590:	40b3      	lsls	r3, r6
 8000592:	fa22 fc07 	lsr.w	ip, r2, r7
 8000596:	ea4c 0c03 	orr.w	ip, ip, r3
 800059a:	fa20 f407 	lsr.w	r4, r0, r7
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	431c      	orrs	r4, r3
 80005a4:	40f9      	lsrs	r1, r7
 80005a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005aa:	fa00 f306 	lsl.w	r3, r0, r6
 80005ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80005b2:	0c20      	lsrs	r0, r4, #16
 80005b4:	fa1f fe8c 	uxth.w	lr, ip
 80005b8:	fb09 1118 	mls	r1, r9, r8, r1
 80005bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005c0:	fb08 f00e 	mul.w	r0, r8, lr
 80005c4:	4288      	cmp	r0, r1
 80005c6:	fa02 f206 	lsl.w	r2, r2, r6
 80005ca:	d90b      	bls.n	80005e4 <__udivmoddi4+0x1b8>
 80005cc:	eb1c 0101 	adds.w	r1, ip, r1
 80005d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80005d4:	f080 8088 	bcs.w	80006e8 <__udivmoddi4+0x2bc>
 80005d8:	4288      	cmp	r0, r1
 80005da:	f240 8085 	bls.w	80006e8 <__udivmoddi4+0x2bc>
 80005de:	f1a8 0802 	sub.w	r8, r8, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	1a09      	subs	r1, r1, r0
 80005e6:	b2a4      	uxth	r4, r4
 80005e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80005ec:	fb09 1110 	mls	r1, r9, r0, r1
 80005f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f8:	458e      	cmp	lr, r1
 80005fa:	d908      	bls.n	800060e <__udivmoddi4+0x1e2>
 80005fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000600:	f100 34ff 	add.w	r4, r0, #4294967295
 8000604:	d26c      	bcs.n	80006e0 <__udivmoddi4+0x2b4>
 8000606:	458e      	cmp	lr, r1
 8000608:	d96a      	bls.n	80006e0 <__udivmoddi4+0x2b4>
 800060a:	3802      	subs	r0, #2
 800060c:	4461      	add	r1, ip
 800060e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000612:	fba0 9402 	umull	r9, r4, r0, r2
 8000616:	eba1 010e 	sub.w	r1, r1, lr
 800061a:	42a1      	cmp	r1, r4
 800061c:	46c8      	mov	r8, r9
 800061e:	46a6      	mov	lr, r4
 8000620:	d356      	bcc.n	80006d0 <__udivmoddi4+0x2a4>
 8000622:	d053      	beq.n	80006cc <__udivmoddi4+0x2a0>
 8000624:	b15d      	cbz	r5, 800063e <__udivmoddi4+0x212>
 8000626:	ebb3 0208 	subs.w	r2, r3, r8
 800062a:	eb61 010e 	sbc.w	r1, r1, lr
 800062e:	fa01 f707 	lsl.w	r7, r1, r7
 8000632:	fa22 f306 	lsr.w	r3, r2, r6
 8000636:	40f1      	lsrs	r1, r6
 8000638:	431f      	orrs	r7, r3
 800063a:	e9c5 7100 	strd	r7, r1, [r5]
 800063e:	2600      	movs	r6, #0
 8000640:	4631      	mov	r1, r6
 8000642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000646:	f1c2 0320 	rsb	r3, r2, #32
 800064a:	40d8      	lsrs	r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	fa21 f303 	lsr.w	r3, r1, r3
 8000654:	4091      	lsls	r1, r2
 8000656:	4301      	orrs	r1, r0
 8000658:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065c:	fa1f fe8c 	uxth.w	lr, ip
 8000660:	fbb3 f0f7 	udiv	r0, r3, r7
 8000664:	fb07 3610 	mls	r6, r7, r0, r3
 8000668:	0c0b      	lsrs	r3, r1, #16
 800066a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800066e:	fb00 f60e 	mul.w	r6, r0, lr
 8000672:	429e      	cmp	r6, r3
 8000674:	fa04 f402 	lsl.w	r4, r4, r2
 8000678:	d908      	bls.n	800068c <__udivmoddi4+0x260>
 800067a:	eb1c 0303 	adds.w	r3, ip, r3
 800067e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000682:	d22f      	bcs.n	80006e4 <__udivmoddi4+0x2b8>
 8000684:	429e      	cmp	r6, r3
 8000686:	d92d      	bls.n	80006e4 <__udivmoddi4+0x2b8>
 8000688:	3802      	subs	r0, #2
 800068a:	4463      	add	r3, ip
 800068c:	1b9b      	subs	r3, r3, r6
 800068e:	b289      	uxth	r1, r1
 8000690:	fbb3 f6f7 	udiv	r6, r3, r7
 8000694:	fb07 3316 	mls	r3, r7, r6, r3
 8000698:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800069c:	fb06 f30e 	mul.w	r3, r6, lr
 80006a0:	428b      	cmp	r3, r1
 80006a2:	d908      	bls.n	80006b6 <__udivmoddi4+0x28a>
 80006a4:	eb1c 0101 	adds.w	r1, ip, r1
 80006a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80006ac:	d216      	bcs.n	80006dc <__udivmoddi4+0x2b0>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d914      	bls.n	80006dc <__udivmoddi4+0x2b0>
 80006b2:	3e02      	subs	r6, #2
 80006b4:	4461      	add	r1, ip
 80006b6:	1ac9      	subs	r1, r1, r3
 80006b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006bc:	e738      	b.n	8000530 <__udivmoddi4+0x104>
 80006be:	462e      	mov	r6, r5
 80006c0:	4628      	mov	r0, r5
 80006c2:	e705      	b.n	80004d0 <__udivmoddi4+0xa4>
 80006c4:	4606      	mov	r6, r0
 80006c6:	e6e3      	b.n	8000490 <__udivmoddi4+0x64>
 80006c8:	4618      	mov	r0, r3
 80006ca:	e6f8      	b.n	80004be <__udivmoddi4+0x92>
 80006cc:	454b      	cmp	r3, r9
 80006ce:	d2a9      	bcs.n	8000624 <__udivmoddi4+0x1f8>
 80006d0:	ebb9 0802 	subs.w	r8, r9, r2
 80006d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d8:	3801      	subs	r0, #1
 80006da:	e7a3      	b.n	8000624 <__udivmoddi4+0x1f8>
 80006dc:	4646      	mov	r6, r8
 80006de:	e7ea      	b.n	80006b6 <__udivmoddi4+0x28a>
 80006e0:	4620      	mov	r0, r4
 80006e2:	e794      	b.n	800060e <__udivmoddi4+0x1e2>
 80006e4:	4640      	mov	r0, r8
 80006e6:	e7d1      	b.n	800068c <__udivmoddi4+0x260>
 80006e8:	46d0      	mov	r8, sl
 80006ea:	e77b      	b.n	80005e4 <__udivmoddi4+0x1b8>
 80006ec:	3b02      	subs	r3, #2
 80006ee:	4461      	add	r1, ip
 80006f0:	e732      	b.n	8000558 <__udivmoddi4+0x12c>
 80006f2:	4630      	mov	r0, r6
 80006f4:	e709      	b.n	800050a <__udivmoddi4+0xde>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	e742      	b.n	8000582 <__udivmoddi4+0x156>

080006fc <__aeabi_idiv0>:
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <initBarometerTask>:
	osMutexRobust,    				    	  // attr_bits
	NULL,                                     // memory for control block
	0U                                        // size for control block
};

void initBarometerTask(SPI_HandleTypeDef hspi1) {
 8000700:	b084      	sub	sp, #16
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
 8000706:	f107 0c08 	add.w	ip, r7, #8
 800070a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	baro_hspi1 = hspi1;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <initBarometerTask+0x48>)
 8000710:	4618      	mov	r0, r3
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2258      	movs	r2, #88	; 0x58
 8000718:	4619      	mov	r1, r3
 800071a:	f00b ffef 	bl	800c6fc <memcpy>

	barometre_mutex_id = osMutexNew(&Barometre_Mutex_attr);
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <initBarometerTask+0x4c>)
 8000720:	f008 fa47 	bl	8008bb2 <osMutexNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <initBarometerTask+0x50>)
 8000728:	6013      	str	r3, [r2, #0]

	osThreadNew(barometerTask, NULL, &barometerHeader_attr);
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <initBarometerTask+0x54>)
 800072c:	2100      	movs	r1, #0
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <initBarometerTask+0x58>)
 8000730:	f008 f992 	bl	8008a58 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init barometer task\r\n");
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <initBarometerTask+0x5c>)
 8000736:	2000      	movs	r0, #0
 8000738:	f001 f8e0 	bl	80018fc <SEGGER_RTT_WriteString>
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	2000014c 	.word	0x2000014c
 800074c:	0800c884 	.word	0x0800c884
 8000750:	200001a4 	.word	0x200001a4
 8000754:	0800c860 	.word	0x0800c860
 8000758:	08000761 	.word	0x08000761
 800075c:	0800c750 	.word	0x0800c750

08000760 <barometerTask>:

__NO_RETURN void barometerTask() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	barometer_init(&barometer, SPI1_CS_ALTIMITER_GPIO_Port, SPI1_CS_ALTIMITER_Pin, &baro_hspi1);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <barometerTask+0x3c>)
 8000766:	2208      	movs	r2, #8
 8000768:	490d      	ldr	r1, [pc, #52]	; (80007a0 <barometerTask+0x40>)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <barometerTask+0x44>)
 800076c:	f000 fcdb 	bl	8001126 <barometer_init>
	barometer_update(&barometer);
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <barometerTask+0x44>)
 8000772:	f000 fe05 	bl	8001380 <barometer_update>

	while(1) {
		osMutexAcquire(barometre_mutex_id, 0U);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <barometerTask+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f008 fa9e 	bl	8008cbe <osMutexAcquire>
			barometer_update(&barometer);
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <barometerTask+0x44>)
 8000784:	f000 fdfc 	bl	8001380 <barometer_update>
		osMutexRelease(barometre_mutex_id);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <barometerTask+0x48>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fae1 	bl	8008d54 <osMutexRelease>

		osDelay(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f008 f9f2 	bl	8008b7c <osDelay>
		osMutexAcquire(barometre_mutex_id, 0U);
 8000798:	e7ed      	b.n	8000776 <barometerTask+0x16>
 800079a:	bf00      	nop
 800079c:	2000014c 	.word	0x2000014c
 80007a0:	40020000 	.word	0x40020000
 80007a4:	2000011c 	.word	0x2000011c
 80007a8:	200001a4 	.word	0x200001a4

080007ac <initBuzzerTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initBuzzerTask() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	osThreadId_t buzzer_id = osThreadNew(buzzerTask, NULL, &buzzerHeader_attr);
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <initBuzzerTask+0x24>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <initBuzzerTask+0x28>)
 80007b8:	f008 f94e 	bl	8008a58 <osThreadNew>
 80007bc:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 80007be:	4906      	ldr	r1, [pc, #24]	; (80007d8 <initBuzzerTask+0x2c>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f001 f89b 	bl	80018fc <SEGGER_RTT_WriteString>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	0800c894 	.word	0x0800c894
 80007d4:	080007dd 	.word	0x080007dd
 80007d8:	0800c768 	.word	0x0800c768

080007dc <buzzerTask>:

__NO_RETURN void buzzerTask() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f008 f9cb 	bl	8008b7c <osDelay>
 80007e6:	e7fb      	b.n	80007e0 <buzzerTask+0x4>

080007e8 <initHeartbeatTask>:
  .priority = (osPriority_t) osPriorityIdle, //Set initial thread priority to high
  .stack_size = 512
};


void initHeartbeatTask() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	osThreadId_t heartbeat_id = osThreadNew(heartbeatTask, NULL, &heartbeatHeader_attr);
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <initHeartbeatTask+0x24>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <initHeartbeatTask+0x28>)
 80007f4:	f008 f930 	bl	8008a58 <osThreadNew>
 80007f8:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init heartbeat task\r\n");
 80007fa:	4906      	ldr	r1, [pc, #24]	; (8000814 <initHeartbeatTask+0x2c>)
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 f87d 	bl	80018fc <SEGGER_RTT_WriteString>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	0800c8b8 	.word	0x0800c8b8
 8000810:	08000819 	.word	0x08000819
 8000814:	0800c778 	.word	0x0800c778

08000818 <heartbeatTask>:

__NO_RETURN void heartbeatTask() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f008 f9ad 	bl	8008b7c <osDelay>
 8000822:	e7fb      	b.n	800081c <heartbeatTask+0x4>

08000824 <initIMUTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 2048
};


void initIMUTask(SPI_HandleTypeDef hspi1) {
 8000824:	b084      	sub	sp, #16
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	f107 0c10 	add.w	ip, r7, #16
 8000830:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadId_t imu_id = osThreadNew(IMUTask, NULL, &imuHeader_attr);
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <initIMUTask+0x34>)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <initIMUTask+0x38>)
 800083a:	f008 f90d 	bl	8008a58 <osThreadNew>
 800083e:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <initIMUTask+0x3c>)
 8000842:	2000      	movs	r0, #0
 8000844:	f001 f85a 	bl	80018fc <SEGGER_RTT_WriteString>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000852:	b004      	add	sp, #16
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	0800c8dc 	.word	0x0800c8dc
 800085c:	08000865 	.word	0x08000865
 8000860:	0800c790 	.word	0x0800c790

08000864 <IMUTask>:

__NO_RETURN void IMUTask() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f008 f987 	bl	8008b7c <osDelay>
 800086e:	e7fb      	b.n	8000868 <IMUTask+0x4>

08000870 <initMainTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 4096
};


void initMainTask() {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	osThreadNew(mainTask, NULL, &mainHeader_attr);
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <initMainTask+0x1c>)
 8000876:	2100      	movs	r1, #0
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <initMainTask+0x20>)
 800087a:	f008 f8ed 	bl	8008a58 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init main task\r\n");
 800087e:	4905      	ldr	r1, [pc, #20]	; (8000894 <initMainTask+0x24>)
 8000880:	2000      	movs	r0, #0
 8000882:	f001 f83b 	bl	80018fc <SEGGER_RTT_WriteString>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	0800c900 	.word	0x0800c900
 8000890:	08000899 	.word	0x08000899
 8000894:	0800c7a0 	.word	0x0800c7a0

08000898 <mainTask>:

__NO_RETURN void mainTask() {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	while(1) {
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800089c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <mainTask+0x18>)
 80008a2:	f001 fb3c 	bl	8001f1e <HAL_GPIO_TogglePin>
		osDelay(500);
 80008a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008aa:	f008 f967 	bl	8008b7c <osDelay>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80008ae:	e7f5      	b.n	800089c <mainTask+0x4>
 80008b0:	40020400 	.word	0x40020400

080008b4 <initMemoryTask>:
  .stack_size = 2048
};

SPI_HandleTypeDef memory_hspi2;

void initMemoryTask(SPI_HandleTypeDef hspi2) {
 80008b4:	b084      	sub	sp, #16
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	f107 0c08 	add.w	ip, r7, #8
 80008be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memory_hspi2 = hspi2;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <initMemoryTask+0x3c>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2258      	movs	r2, #88	; 0x58
 80008cc:	4619      	mov	r1, r3
 80008ce:	f00b ff15 	bl	800c6fc <memcpy>

	osThreadNew(memoryTask, NULL, &memoryHeader_attr);
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <initMemoryTask+0x40>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <initMemoryTask+0x44>)
 80008d8:	f008 f8be 	bl	8008a58 <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init Memory task\r\n");
 80008dc:	4907      	ldr	r1, [pc, #28]	; (80008fc <initMemoryTask+0x48>)
 80008de:	2000      	movs	r0, #0
 80008e0:	f001 f80c 	bl	80018fc <SEGGER_RTT_WriteString>
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b004      	add	sp, #16
 80008ee:	4770      	bx	lr
 80008f0:	200001a8 	.word	0x200001a8
 80008f4:	0800c924 	.word	0x0800c924
 80008f8:	08000901 	.word	0x08000901
 80008fc:	0800c7b4 	.word	0x0800c7b4

08000900 <memoryTask>:

__NO_RETURN void memoryTask() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	memory_init(SPI2_CS_MEMORY_GPIO_Port, SPI2_CS_MEMORY_Pin, &memory_hspi2);
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <memoryTask+0x1c>)
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <memoryTask+0x20>)
 800090c:	f000 fe08 	bl	8001520 <memory_init>

	while(1) {

		send_command();
 8000910:	f000 fe1c 	bl	800154c <send_command>
		osDelay(20);
 8000914:	2014      	movs	r0, #20
 8000916:	f008 f931 	bl	8008b7c <osDelay>
		send_command();
 800091a:	e7f9      	b.n	8000910 <memoryTask+0x10>
 800091c:	200001a8 	.word	0x200001a8
 8000920:	40020400 	.word	0x40020400

08000924 <initUSBTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initUSBTask() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	osThreadId_t usb_id = osThreadNew(USBTask, NULL, &usbHeader_attr);
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <initUSBTask+0x24>)
 800092c:	2100      	movs	r1, #0
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <initUSBTask+0x28>)
 8000930:	f008 f892 	bl	8008a58 <osThreadNew>
 8000934:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init usb task\r\n");
 8000936:	4906      	ldr	r1, [pc, #24]	; (8000950 <initUSBTask+0x2c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f000 ffdf 	bl	80018fc <SEGGER_RTT_WriteString>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	0800c948 	.word	0x0800c948
 800094c:	08000955 	.word	0x08000955
 8000950:	0800c7c8 	.word	0x0800c7c8

08000954 <USBTask>:

__NO_RETURN void USBTask() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000958:	200a      	movs	r0, #10
 800095a:	f008 f90f 	bl	8008b7c <osDelay>
 800095e:	e7fb      	b.n	8000958 <USBTask+0x4>

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b093      	sub	sp, #76	; 0x4c
 8000964:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 ffdd 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f84b 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 f947 	bl	8000c00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000972:	f000 f8d9 	bl	8000b28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000976:	f000 f90d 	bl	8000b94 <MX_SPI2_Init>
  MX_RTC_Init();
 800097a:	f000 f8af 	bl	8000adc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800097e:	f008 f821 	bl	80089c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <main+0x90>)
 8000984:	2100      	movs	r1, #0
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <main+0x94>)
 8000988:	f008 f866 	bl	8008a58 <osThreadNew>
 800098c:	4603      	mov	r3, r0
 800098e:	4a1a      	ldr	r2, [pc, #104]	; (80009f8 <main+0x98>)
 8000990:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initBarometerTask(hspi1);
 8000992:	4c1a      	ldr	r4, [pc, #104]	; (80009fc <main+0x9c>)
 8000994:	4668      	mov	r0, sp
 8000996:	f104 0310 	add.w	r3, r4, #16
 800099a:	2248      	movs	r2, #72	; 0x48
 800099c:	4619      	mov	r1, r3
 800099e:	f00b fead 	bl	800c6fc <memcpy>
 80009a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a6:	f7ff feab 	bl	8000700 <initBarometerTask>
  initBuzzerTask();
 80009aa:	f7ff feff 	bl	80007ac <initBuzzerTask>
  initHeartbeatTask();
 80009ae:	f7ff ff1b 	bl	80007e8 <initHeartbeatTask>
  initIMUTask(hspi1);
 80009b2:	4c12      	ldr	r4, [pc, #72]	; (80009fc <main+0x9c>)
 80009b4:	4668      	mov	r0, sp
 80009b6:	f104 0310 	add.w	r3, r4, #16
 80009ba:	2248      	movs	r2, #72	; 0x48
 80009bc:	4619      	mov	r1, r3
 80009be:	f00b fe9d 	bl	800c6fc <memcpy>
 80009c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009c6:	f7ff ff2d 	bl	8000824 <initIMUTask>
  initMainTask();
 80009ca:	f7ff ff51 	bl	8000870 <initMainTask>
  initMemoryTask(hspi2);
 80009ce:	4c0c      	ldr	r4, [pc, #48]	; (8000a00 <main+0xa0>)
 80009d0:	4668      	mov	r0, sp
 80009d2:	f104 0310 	add.w	r3, r4, #16
 80009d6:	2248      	movs	r2, #72	; 0x48
 80009d8:	4619      	mov	r1, r3
 80009da:	f00b fe8f 	bl	800c6fc <memcpy>
 80009de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009e2:	f7ff ff67 	bl	80008b4 <initMemoryTask>
  initUSBTask();
 80009e6:	f7ff ff9d 	bl	8000924 <initUSBTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009ea:	f008 f80f 	bl	8008a0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0x8e>
 80009f0:	0800c96c 	.word	0x0800c96c
 80009f4:	08000d7d 	.word	0x08000d7d
 80009f8:	200002d0 	.word	0x200002d0
 80009fc:	20000220 	.word	0x20000220
 8000a00:	20000278 	.word	0x20000278

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00b fe80 	bl	800c718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a60:	2309      	movs	r3, #9
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a78:	2319      	movs	r3, #25
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fcdc 	bl	800344c <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 f98b 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2105      	movs	r1, #5
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 ff3d 	bl	800393c <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ac8:	f000 f974 	bl	8000db4 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_RTC_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <MX_RTC_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_RTC_Init+0x44>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_RTC_Init+0x44>)
 8000aee:	227f      	movs	r2, #127	; 0x7f
 8000af0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_RTC_Init+0x44>)
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_RTC_Init+0x44>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_RTC_Init+0x44>)
 8000b0c:	f003 f9f6 	bl	8003efc <HAL_RTC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b16:	f000 f94d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000200 	.word	0x20000200
 8000b24:	40002800 	.word	0x40002800

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <MX_SPI1_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b7a:	f003 fab9 	bl	80040f0 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f916 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000220 	.word	0x20000220
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000be0:	220a      	movs	r2, #10
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_SPI2_Init+0x64>)
 8000be6:	f003 fa83 	bl	80040f0 <HAL_SPI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 f8e0 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000278 	.word	0x20000278
 8000bfc:	40003800 	.word	0x40003800

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a52      	ldr	r2, [pc, #328]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b50      	ldr	r3, [pc, #320]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a44      	ldr	r2, [pc, #272]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f248 0118 	movw	r1, #32792	; 0x8018
 8000ca8:	4830      	ldr	r0, [pc, #192]	; (8000d6c <MX_GPIO_Init+0x16c>)
 8000caa:	f001 f91f 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8000cb4:	482e      	ldr	r0, [pc, #184]	; (8000d70 <MX_GPIO_Init+0x170>)
 8000cb6:	f001 f919 	bl	8001eec <HAL_GPIO_WritePin>
                          |LED_4_Pin|SENSE_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8000cc0:	482c      	ldr	r0, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x174>)
 8000cc2:	f001 f913 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_1_GPIO_Port, FIRE_1_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2104      	movs	r1, #4
 8000cca:	482b      	ldr	r0, [pc, #172]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000ccc:	f001 f90e 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_ALTIMITER_Pin SPI1_CS_IMU_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin;
 8000cd0:	f248 0318 	movw	r3, #32792	; 0x8018
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <MX_GPIO_Init+0x16c>)
 8000cea:	f000 ff63 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin SENSE_2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000cee:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8000cf2:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|SENSE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <MX_GPIO_Init+0x170>)
 8000d08:	f000 ff54 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_MEMORY_Pin HOLD_Pin CS_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin;
 8000d0c:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <MX_GPIO_Init+0x174>)
 8000d26:	f000 ff45 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FIRE_2_Pin SENSE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_2_Pin|SENSE_1_Pin;
 8000d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_GPIO_Init+0x170>)
 8000d40:	f000 ff38 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_1_Pin;
 8000d44:	2304      	movs	r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FIRE_1_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000d5c:	f000 ff2a 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020400 	.word	0x40020400
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d84:	f00a ffa2 	bl	800bccc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f007 fef7 	bl	8008b7c <osDelay>
 8000d8e:	e7fb      	b.n	8000d88 <StartDefaultTask+0xc>

08000d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da2:	f000 fde1 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40001000 	.word	0x40001000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_MspInit+0x54>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_MspInit+0x54>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_MspInit+0x54>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_MspInit+0x54>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_MspInit+0x54>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_MspInit+0x54>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 feab 	bl	8001b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <HAL_RTC_MspInit+0x4c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d111      	bne.n	8000e5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e40:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 ff76 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e52:	f7ff ffaf 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_RTC_MspInit+0x50>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40002800 	.word	0x40002800
 8000e68:	42470e3c 	.word	0x42470e3c

08000e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a41      	ldr	r2, [pc, #260]	; (8000f90 <HAL_SPI_MspInit+0x124>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12c      	bne.n	8000ee8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	23e0      	movs	r3, #224	; 0xe0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	482d      	ldr	r0, [pc, #180]	; (8000f98 <HAL_SPI_MspInit+0x12c>)
 8000ee2:	f000 fe67 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ee6:	e04f      	b.n	8000f88 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <HAL_SPI_MspInit+0x130>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d14a      	bne.n	8000f88 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_SPI_MspInit+0x128>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f46:	230c      	movs	r3, #12
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f56:	2305      	movs	r3, #5
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <HAL_SPI_MspInit+0x134>)
 8000f62:	f000 fe27 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_SPI_MspInit+0x138>)
 8000f84:	f000 fe16 	bl	8001bb4 <HAL_GPIO_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2036      	movs	r0, #54	; 0x36
 8000fbe:	f000 fdcf 	bl	8001b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fc2:	2036      	movs	r0, #54	; 0x36
 8000fc4:	f000 fde8 	bl	8001b98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_InitTick+0xa4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_InitTick+0xa4>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_InitTick+0xa4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe4:	f107 0210 	add.w	r2, r7, #16
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fe70 	bl	8003cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ff4:	f002 fe5a 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_InitTick+0xa8>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	3b01      	subs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_InitTick+0xac>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_InitTick+0xb0>)
 8001010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_InitTick+0xac>)
 8001014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001018:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_InitTick+0xac>)
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_InitTick+0xac>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_InitTick+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_InitTick+0xac>)
 800102e:	f003 fe07 	bl	8004c40 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_InitTick+0xac>)
 800103a:	f003 fe5b 	bl	8004cf4 <HAL_TIM_Base_Start_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	431bde83 	.word	0x431bde83
 8001054:	200002d4 	.word	0x200002d4
 8001058:	40001000 	.word	0x40001000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM6_DAC_IRQHandler+0x10>)
 800108e:	f003 fea1 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002d4 	.word	0x200002d4

0800109c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <OTG_FS_IRQHandler+0x10>)
 80010a2:	f001 f8a6 	bl	80021f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20006660 	.word	0x20006660

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f00b fad7 	bl	800c6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fc2b 	bl	8000960 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001118:	0800c9cc 	.word	0x0800c9cc
  ldr r2, =_sbss
 800111c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001120:	20006d8c 	.word	0x20006d8c

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>

08001126 <barometer_init>:
/** Initialize the barometer struct
 *
 * @param[in]  barometer  A pointer to an allocated barometer struct
 */
void barometer_init(barometer_t *barometer, GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
    uint32_t i = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]

    //initialise the barometer parameters
    barometer->initialized = 0;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
    barometer->port = port;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	601a      	str	r2, [r3, #0]
    barometer->pin = pin;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	809a      	strh	r2, [r3, #4]
    barometer->spi = spi;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	609a      	str	r2, [r3, #8]
    barometer->pressure = 0;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
    barometer->temperature = 0;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset the barometer
    barometer_reset(barometer);
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f820 	bl	80011a8 <barometer_reset>

    // Read the calibration coefficient
    for (i = 0; i < 6; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e012      	b.n	8001194 <barometer_init+0x6e>
        barometer->calibration[i] = barometer_read_prom(barometer, i + 1);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3301      	adds	r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f843 	bl	8001204 <barometer_read_prom>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3302      	adds	r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	6059      	str	r1, [r3, #4]
    for (i = 0; i < 6; i++) {
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b05      	cmp	r3, #5
 8001198:	d9e9      	bls.n	800116e <barometer_init+0x48>
    }

    //set the handle to initialised
    barometer->initialized = 1;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <barometer_reset>:
/** Send the RESET command to the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_reset(barometer_t *barometer)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    uint8_t tx[3] = { BAROMETER_RESET_COMMAND, 0x00, 0x00 };
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <barometer_reset+0x58>)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	8019      	strh	r1, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	0c12      	lsrs	r2, r2, #16
 80011c0:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	f000 fe8d 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(barometer->spi, tx, 1, 10);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6898      	ldr	r0, [r3, #8]
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	230a      	movs	r3, #10
 80011dc:	2201      	movs	r2, #1
 80011de:	f003 f810 	bl	8004202 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	889b      	ldrh	r3, [r3, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	f000 fe7d 	bl	8001eec <HAL_GPIO_WritePin>

    osDelay(5);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f007 fcc2 	bl	8008b7c <osDelay>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800c7e4 	.word	0x0800c7e4

08001204 <barometer_read_prom>:
 * @param[in]  coef_num   Coefficient number index to be received.
 *
 * @return the coefficient number for the given index
 */
static uint16_t barometer_read_prom(barometer_t *barometer, uint8_t coefficient)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[3] = { ((uint8_t) (PROM_READ_COMMAND + coefficient * 2)), 0, 0 };
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	3350      	adds	r3, #80	; 0x50
 8001214:	b2db      	uxtb	r3, r3
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	733b      	strb	r3, [r7, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	737b      	strb	r3, [r7, #13]
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]
    uint8_t rx[3] = { 0 };
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <barometer_read_prom+0x7c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	813b      	strh	r3, [r7, #8]
 800122a:	2300      	movs	r3, #0
 800122c:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	f000 fe57 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(barometer->spi, tx, rx, (uint16_t) sizeof(tx), 1000);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6898      	ldr	r0, [r3, #8]
 8001242:	f107 0208 	add.w	r2, r7, #8
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	f003 fa23 	bl	800469c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	f000 fe43 	bl	8001eec <HAL_GPIO_WritePin>

    return (rx[1] << 8) + rx[2];
 8001266:	7a7b      	ldrb	r3, [r7, #9]
 8001268:	b29b      	uxth	r3, r3
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b29a      	uxth	r2, r3
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4413      	add	r3, r2
 8001274:	b29b      	uxth	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	0800c7e8 	.word	0x0800c7e8

08001284 <barometer_read_data>:
 * @param[in]  cmd        Determines the timeout to be applied
 *
 * @return a 32-bit value
 */
static uint32_t barometer_read_data(barometer_t *barometer, uint8_t cmd)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
    uint8_t rx[10] = { 0 };
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	809a      	strh	r2, [r3, #4]
    uint8_t tx = CMD_ADC_CONV + cmd;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	3340      	adds	r3, #64	; 0x40
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	72fb      	strb	r3, [r7, #11]

    // Pull CS low to initiate communication
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	f000 fe1b 	bl	8001eec <HAL_GPIO_WritePin>

    // Send conversion command
    HAL_SPI_Transmit(barometer->spi, &tx, 1, 10);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6898      	ldr	r0, [r3, #8]
 80012ba:	f107 010b 	add.w	r1, r7, #11
 80012be:	230a      	movs	r3, #10
 80012c0:	2201      	movs	r2, #1
 80012c2:	f002 ff9e 	bl	8004202 <HAL_SPI_Transmit>

    // Wait necessary conversion time, which depends on the specific command
    switch (cmd & 0x0F) {
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d829      	bhi.n	8001324 <barometer_read_data+0xa0>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <barometer_read_data+0x54>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012fd 	.word	0x080012fd
 80012dc:	08001325 	.word	0x08001325
 80012e0:	08001305 	.word	0x08001305
 80012e4:	08001325 	.word	0x08001325
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	08001325 	.word	0x08001325
 80012f0:	08001315 	.word	0x08001315
 80012f4:	08001325 	.word	0x08001325
 80012f8:	0800131d 	.word	0x0800131d
        case CMD_ADC_256:
            //delay = 900us
            osDelay(1);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f007 fc3d 	bl	8008b7c <osDelay>
            break;
 8001302:	e00f      	b.n	8001324 <barometer_read_data+0xa0>
        case CMD_ADC_512:
            //delay = 3ms;
            osDelay(3);
 8001304:	2003      	movs	r0, #3
 8001306:	f007 fc39 	bl	8008b7c <osDelay>
            break;
 800130a:	e00b      	b.n	8001324 <barometer_read_data+0xa0>
        case CMD_ADC_1024:
            //delay = 4ms;
            osDelay(4);
 800130c:	2004      	movs	r0, #4
 800130e:	f007 fc35 	bl	8008b7c <osDelay>
            break;
 8001312:	e007      	b.n	8001324 <barometer_read_data+0xa0>
        case CMD_ADC_2048:
            //delay = 6ms;
            osDelay(6);
 8001314:	2006      	movs	r0, #6
 8001316:	f007 fc31 	bl	8008b7c <osDelay>
            break;
 800131a:	e003      	b.n	8001324 <barometer_read_data+0xa0>
        case CMD_ADC_4096:
            //delay = 10ms;
            osDelay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f007 fc2d 	bl	8008b7c <osDelay>
            break;
 8001322:	bf00      	nop
    }

    // Pull CS high to finish the conversion
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	f000 fddc 	bl	8001eec <HAL_GPIO_WritePin>
    osDelay(10);
 8001334:	200a      	movs	r0, #10
 8001336:	f007 fc21 	bl	8008b7c <osDelay>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f000 fdd1 	bl	8001eec <HAL_GPIO_WritePin>

    // Receive the data after the conversion
    HAL_SPI_Receive(barometer->spi, rx, 4, 10);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6898      	ldr	r0, [r3, #8]
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	230a      	movs	r3, #10
 8001354:	2204      	movs	r2, #4
 8001356:	f003 f890 	bl	800447a <HAL_SPI_Receive>

    // Pull CS high after read
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	889b      	ldrh	r3, [r3, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	f000 fdc1 	bl	8001eec <HAL_GPIO_WritePin>

    // First byte is not data
    return (rx[1] << 16) | (rx[2] << 8) | rx[3];
 800136a:	7b7b      	ldrb	r3, [r7, #13]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4313      	orrs	r3, r2
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	4313      	orrs	r3, r2
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <barometer_update>:
/** Update the pressure and temperature value from the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_update(barometer_t *barometer)
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b09c      	sub	sp, #112	; 0x70
 8001386:	af00      	add	r7, sp, #0
 8001388:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t delta_temperature;
    int64_t offset, sensitivity;
    float new_pressure;

    // See the chip (MS5607) datasheet for more information on these conversions
    raw_pressure = barometer_read_data(barometer, CMD_ADC_D1 + CMD_ADC_1024);
 800138a:	2104      	movs	r1, #4
 800138c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800138e:	f7ff ff79 	bl	8001284 <barometer_read_data>
 8001392:	66f8      	str	r0, [r7, #108]	; 0x6c
    raw_temperature = barometer_read_data(barometer,  CMD_ADC_D2 + CMD_ADC_1024);
 8001394:	2114      	movs	r1, #20
 8001396:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001398:	f7ff ff74 	bl	8001284 <barometer_read_data>
 800139c:	66b8      	str	r0, [r7, #104]	; 0x68

    // dT = D2 - C5 * 2⁸
    // TEMP = 2000 + dT * C6 / 2²³
    delta_temperature = raw_temperature - (barometer->calibration[4] << 8);
 800139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021a      	lsls	r2, r3, #8
 80013a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	667b      	str	r3, [r7, #100]	; 0x64
    barometer->temperature = (2000 + (delta_temperature * barometer->calibration[5] >> 23)) / 100.0f;
 80013aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	0ddb      	lsrs	r3, r3, #23
 80013b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001518 <barometer_update+0x198>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // OFF = = C2 * 2¹⁷ + (C4 * dT ) / 2⁶
    // SENS = C1 * 2 + (C3 * dT ) / 2⁷
    // PRESSURE = (D1 * SENS / 2²¹ - OFF) / 2¹⁵
    offset = (((int64_t)barometer->calibration[1]) << 17) + (barometer->calibration[3] * delta_temperature >> 6);
 80013d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2200      	movs	r2, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
 80013d8:	637a      	str	r2, [r7, #52]	; 0x34
 80013da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80013de:	460b      	mov	r3, r1
 80013e0:	0bdb      	lsrs	r3, r3, #15
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e4:	460b      	mov	r3, r1
 80013e6:	045b      	lsls	r3, r3, #17
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	2200      	movs	r2, #0
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001402:	4602      	mov	r2, r0
 8001404:	189b      	adds	r3, r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	460b      	mov	r3, r1
 800140a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800140c:	eb42 0303 	adc.w	r3, r2, r3
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001416:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    sensitivity = (((int64_t)barometer->calibration[0]) << 16) + (barometer->calibration[2] * delta_temperature >> 7);
 800141a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	627a      	str	r2, [r7, #36]	; 0x24
 8001424:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001428:	460b      	mov	r3, r1
 800142a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800142e:	460b      	mov	r3, r1
 8001430:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8001434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	09db      	lsrs	r3, r3, #7
 8001440:	2200      	movs	r2, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	61fa      	str	r2, [r7, #28]
 8001446:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800144a:	460b      	mov	r3, r1
 800144c:	eb1a 0303 	adds.w	r3, sl, r3
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	eb4b 0303 	adc.w	r3, fp, r3
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800145e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    //Spike detection to prevent early destruction of the rocket.
    new_pressure = (((raw_pressure * sensitivity >> 21) - offset) >> 15);
 8001462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001464:	2200      	movs	r2, #0
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	617a      	str	r2, [r7, #20]
 800146a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001470:	465a      	mov	r2, fp
 8001472:	fb02 f203 	mul.w	r2, r2, r3
 8001476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001478:	4651      	mov	r1, sl
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001482:	4651      	mov	r1, sl
 8001484:	fba2 4501 	umull	r4, r5, r2, r1
 8001488:	442b      	add	r3, r5
 800148a:	461d      	mov	r5, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	0d62      	lsrs	r2, r4, #21
 8001496:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800149a:	156b      	asrs	r3, r5, #21
 800149c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80014a0:	ebb2 0800 	subs.w	r8, r2, r0
 80014a4:	eb63 0901 	sbc.w	r9, r3, r1
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 80014b4:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 80014b8:	ea4f 33e9 	mov.w	r3, r9, asr #15
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7fe ff5e 	bl	8000380 <__aeabi_l2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(barometer->pressure > 0) {
 80014c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd16      	ble.n	8001506 <barometer_update+0x186>
    	barometer->pressure = fabs(new_pressure - barometer->pressure) > SPIKE_DETECTION_THRESHOLD ? barometer->pressure : new_pressure;
 80014d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800151c <barometer_update+0x19c>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd02      	ble.n	80014fe <barometer_update+0x17e>
 80014f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	e000      	b.n	8001500 <barometer_update+0x180>
 80014fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001502:	6253      	str	r3, [r2, #36]	; 0x24
    } else {
    	barometer->pressure = new_pressure;
    }
}
 8001504:	e002      	b.n	800150c <barometer_update+0x18c>
    	barometer->pressure = new_pressure;
 8001506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800150c:	bf00      	nop
 800150e:	3770      	adds	r7, #112	; 0x70
 8001510:	46bd      	mov	sp, r7
 8001512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001516:	bf00      	nop
 8001518:	42c80000 	.word	0x42c80000
 800151c:	47c35000 	.word	0x47c35000

08001520 <memory_init>:
#include "memory.h"

SPI_HandleTypeDef memory_spi;


void memory_init(GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	460b      	mov	r3, r1
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	817b      	strh	r3, [r7, #10]
	memory_spi = *spi;
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <memory_init+0x28>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	2358      	movs	r3, #88	; 0x58
 8001538:	461a      	mov	r2, r3
 800153a:	f00b f8df 	bl	800c6fc <memcpy>
	// todo create a stuct for the memory
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000031c 	.word	0x2000031c

0800154c <send_command>:

void send_command() {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
	uint8_t tx[3] = { 0xAA, 0xAA, 0xAA };
 8001552:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <send_command+0x70>)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4611      	mov	r1, r2
 800155a:	8019      	strh	r1, [r3, #0]
 800155c:	3302      	adds	r3, #2
 800155e:	0c12      	lsrs	r2, r2, #16
 8001560:	701a      	strb	r2, [r3, #0]
	uint8_t rx[3] = { 0 };
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <send_command+0x74>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	803b      	strh	r3, [r7, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(SPI2_CS_MEMORY_GPIO_Port, SPI2_CS_MEMORY_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <send_command+0x78>)
 8001574:	f000 fcba 	bl	8001eec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&memory_spi, tx, rx, (uint16_t) sizeof(tx), 1000);
 8001578:	463a      	mov	r2, r7
 800157a:	1d39      	adds	r1, r7, #4
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2303      	movs	r3, #3
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <send_command+0x7c>)
 8001586:	f003 f889 	bl	800469c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_MEMORY_GPIO_Port, SPI2_CS_MEMORY_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <send_command+0x78>)
 8001592:	f000 fcab 	bl	8001eec <HAL_GPIO_WritePin>

	SEGGER_RTT_WriteString(0, rx[0]);
 8001596:	783b      	ldrb	r3, [r7, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f9ae 	bl	80018fc <SEGGER_RTT_WriteString>
	SEGGER_RTT_WriteString(0, rx[1]);
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	4619      	mov	r1, r3
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f9a9 	bl	80018fc <SEGGER_RTT_WriteString>
	SEGGER_RTT_WriteString(0, rx[2]);
 80015aa:	78bb      	ldrb	r3, [r7, #2]
 80015ac:	4619      	mov	r1, r3
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f9a4 	bl	80018fc <SEGGER_RTT_WriteString>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800c7ec 	.word	0x0800c7ec
 80015c0:	0800c7f0 	.word	0x0800c7f0
 80015c4:	40020400 	.word	0x40020400
 80015c8:	2000031c 	.word	0x2000031c

080015cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <_DoInit+0xa0>)
 80015d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80015d6:	22a8      	movs	r2, #168	; 0xa8
 80015d8:	2100      	movs	r1, #0
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f00b f89c 	bl	800c718 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2203      	movs	r2, #3
 80015e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2203      	movs	r2, #3
 80015ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <_DoInit+0xa4>)
 80015f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <_DoInit+0xa8>)
 80015f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <_DoInit+0xa4>)
 8001616:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <_DoInit+0xac>)
 800161c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001636:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	e00c      	b.n	800165a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1c3 030f 	rsb	r3, r3, #15
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <_DoInit+0xb0>)
 8001648:	5cd1      	ldrb	r1, [r2, r3]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	460a      	mov	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3301      	adds	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d9ef      	bls.n	8001640 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001660:	f3bf 8f5f 	dmb	sy
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000374 	.word	0x20000374
 8001670:	0800c7f4 	.word	0x0800c7f4
 8001674:	2000041c 	.word	0x2000041c
 8001678:	2000081c 	.word	0x2000081c
 800167c:	0800c9a8 	.word	0x0800c9a8

08001680 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d905      	bls.n	80016b0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e007      	b.n	80016c0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69b9      	ldr	r1, [r7, #24]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	1acb      	subs	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	3b01      	subs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ca:	4293      	cmp	r3, r2
 80016cc:	bf28      	it	cs
 80016ce:	4613      	movcs	r3, r2
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80016d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	bf28      	it	cs
 80016da:	4613      	movcs	r3, r2
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f00b f805 	bl	800c6fc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	4413      	add	r3, r2
 80016f8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	4413      	add	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	4413      	add	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	d101      	bne.n	8001720 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001720:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1b2      	bne.n	8001696 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001730:	6a3b      	ldr	r3, [r7, #32]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b088      	sub	sp, #32
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d911      	bls.n	8001782 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	6938      	ldr	r0, [r7, #16]
 800176e:	f00a ffc5 	bl	800c6fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001772:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	441a      	add	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001780:	e01f      	b.n	80017c2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	6938      	ldr	r0, [r7, #16]
 8001796:	f00a ffb1 	bl	800c6fc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4619      	mov	r1, r3
 80017b2:	6938      	ldr	r0, [r7, #16]
 80017b4:	f00a ffa2 	bl	800c6fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80017b8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	60da      	str	r2, [r3, #12]
}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d808      	bhi.n	80017f8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad2      	subs	r2, r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4413      	add	r3, r2
 80017f2:	3b01      	subs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e004      	b.n	8001802 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001802:	697b      	ldr	r3, [r7, #20]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <SEGGER_RTT_WriteNoLock+0x9c>)
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d029      	beq.n	800188e <SEGGER_RTT_WriteNoLock+0x7e>
 800183a:	2b02      	cmp	r3, #2
 800183c:	d82e      	bhi.n	800189c <SEGGER_RTT_WriteNoLock+0x8c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <SEGGER_RTT_WriteNoLock+0x38>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d013      	beq.n	800186e <SEGGER_RTT_WriteNoLock+0x5e>
 8001846:	e029      	b.n	800189c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001848:	6978      	ldr	r0, [r7, #20]
 800184a:	f7ff ffbe 	bl	80017ca <_GetAvailWriteSpace>
 800184e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	d202      	bcs.n	800185e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800185c:	e021      	b.n	80018a2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff67 	bl	800173a <_WriteNoCheck>
    break;
 800186c:	e019      	b.n	80018a2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ffab 	bl	80017ca <_GetAvailWriteSpace>
 8001874:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4293      	cmp	r3, r2
 800187c:	bf28      	it	cs
 800187e:	4613      	movcs	r3, r2
 8001880:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	69b9      	ldr	r1, [r7, #24]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff57 	bl	800173a <_WriteNoCheck>
    break;
 800188c:	e009      	b.n	80018a2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	69b9      	ldr	r1, [r7, #24]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff fef4 	bl	8001680 <_WriteBlocking>
 8001898:	61f8      	str	r0, [r7, #28]
    break;
 800189a:	e002      	b.n	80018a2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    break;
 80018a0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80018a2:	69fb      	ldr	r3, [r7, #28]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000374 	.word	0x20000374

080018b0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <SEGGER_RTT_Write+0x48>)
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <SEGGER_RTT_Write+0x1e>
 80018ca:	f7ff fe7f 	bl	80015cc <_DoInit>
  SEGGER_RTT_LOCK();
 80018ce:	f3ef 8311 	mrs	r3, BASEPRI
 80018d2:	f04f 0120 	mov.w	r1, #32
 80018d6:	f381 8811 	msr	BASEPRI, r1
 80018da:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff ff95 	bl	8001810 <SEGGER_RTT_WriteNoLock>
 80018e6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80018ee:	697b      	ldr	r3, [r7, #20]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000374 	.word	0x20000374

080018fc <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8001906:	6838      	ldr	r0, [r7, #0]
 8001908:	f7fe fc62 	bl	80001d0 <strlen>
 800190c:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffcc 	bl	80018b0 <SEGGER_RTT_Write>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f8fc 	bl	8001b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f7ff fb28 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fa32 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	2000082c 	.word	0x2000082c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000082c 	.word	0x2000082c

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff4c 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b72:	f7ff ff61 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f7ff ffb1 	bl	8001ae4 <NVIC_EncodePriority>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff80 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff54 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e16b      	b.n	8001ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 815a 	bne.w	8001ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80b4 	beq.w	8001ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a5f      	ldr	r2, [pc, #380]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x314>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x318>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_GPIO_Init+0x31c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_GPIO_Init+0x324>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_GPIO_Init+0x328>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <HAL_GPIO_Init+0x32c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20a>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae90 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f54:	b08f      	sub	sp, #60	; 0x3c
 8001f56:	af0a      	add	r7, sp, #40	; 0x28
 8001f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e10f      	b.n	8002184 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f00a f884 	bl	800c08c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fa0f 	bl	80053c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	687e      	ldr	r6, [r7, #4]
 8001fb0:	466d      	mov	r5, sp
 8001fb2:	f106 0410 	add.w	r4, r6, #16
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc6:	1d33      	adds	r3, r6, #4
 8001fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f003 f8e6 	bl	800519c <USB_CoreInit>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0d0      	b.n	8002184 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 f9fd 	bl	80053e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e04a      	b.n	800208a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	333d      	adds	r3, #61	; 0x3d
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	333c      	adds	r3, #60	; 0x3c
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	b298      	uxth	r0, r3
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3344      	adds	r3, #68	; 0x44
 8002030:	4602      	mov	r2, r0
 8002032:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3340      	adds	r3, #64	; 0x40
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3348      	adds	r3, #72	; 0x48
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	334c      	adds	r3, #76	; 0x4c
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3354      	adds	r3, #84	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3af      	bcc.n	8001ff4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e044      	b.n	8002124 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d3b5      	bcc.n	800209a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	687e      	ldr	r6, [r7, #4]
 8002136:	466d      	mov	r5, sp
 8002138:	f106 0410 	add.w	r4, r6, #16
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002148:	e885 0003 	stmia.w	r5, {r0, r1}
 800214c:	1d33      	adds	r3, r6, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f003 f995 	bl	8005480 <USB_DevInit>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e00d      	b.n	8002184 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fae4 	bl	800674a <USB_DevDisconnect>

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_Start+0x1c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e020      	b.n	80021ea <HAL_PCD_Start+0x5e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d109      	bne.n	80021cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f8e7 	bl	80053a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fa94 	bl	8006708 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b08d      	sub	sp, #52	; 0x34
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fb52 	bl	80068b2 <USB_GetMode>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 848a 	bne.w	8002b2a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fab6 	bl	800678c <USB_ReadInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8480 	beq.w	8002b28 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f004 faa3 	bl	800678c <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d107      	bne.n	8002260 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f002 0202 	and.w	r2, r2, #2
 800225e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fa91 	bl	800678c <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b10      	cmp	r3, #16
 8002272:	d161      	bne.n	8002338 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0210 	bic.w	r2, r2, #16
 8002282:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	0c5b      	lsrs	r3, r3, #17
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d124      	bne.n	80022fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d035      	beq.n	8002328 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a38      	ldr	r0, [r7, #32]
 80022d0:	f004 f8c8 	bl	8006464 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	441a      	add	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f2:	441a      	add	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	621a      	str	r2, [r3, #32]
 80022f8:	e016      	b.n	8002328 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	0c5b      	lsrs	r3, r3, #17
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	2b06      	cmp	r3, #6
 8002304:	d110      	bne.n	8002328 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800230c:	2208      	movs	r2, #8
 800230e:	4619      	mov	r1, r3
 8002310:	6a38      	ldr	r0, [r7, #32]
 8002312:	f004 f8a7 	bl	8006464 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002322:	441a      	add	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0210 	orr.w	r2, r2, #16
 8002336:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f004 fa25 	bl	800678c <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800234c:	f040 80a7 	bne.w	800249e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fa2a 	bl	80067b2 <USB_ReadDevAllOutEpInterrupt>
 800235e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002360:	e099      	b.n	8002496 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 808e 	beq.w	800248a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fa4e 	bl	800681a <USB_ReadDevOutEPInterrupt>
 800237e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00c      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002396:	461a      	mov	r2, r3
 8002398:	2301      	movs	r3, #1
 800239a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800239c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fec2 	bl	8003128 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2308      	movs	r3, #8
 80023be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 ff98 	bl	80032f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023de:	461a      	mov	r2, r3
 80023e0:	2310      	movs	r3, #16
 80023e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d030      	beq.n	8002450 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d109      	bne.n	800240e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	78db      	ldrb	r3, [r3, #3]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d108      	bne.n	800243e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2200      	movs	r2, #0
 8002430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f009 ff2d 	bl	800c298 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	461a      	mov	r2, r3
 800244c:	2302      	movs	r3, #2
 800244e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	2320      	movs	r3, #32
 800246a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002482:	461a      	mov	r2, r3
 8002484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f af62 	bne.w	8002362 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f972 	bl	800678c <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b2:	f040 80db 	bne.w	800266c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 f993 	bl	80067e6 <USB_ReadDevAllInEpInterrupt>
 80024c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024c6:	e0cd      	b.n	8002664 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80c2 	beq.w	8002658 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 f9b9 	bl	8006856 <USB_ReadDevInEPInterrupt>
 80024e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d057      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	69f9      	ldr	r1, [r7, #28]
 800250c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002510:	4013      	ands	r3, r2
 8002512:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d132      	bne.n	8002594 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	334c      	adds	r3, #76	; 0x4c
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4403      	add	r3, r0
 800254e:	3348      	adds	r3, #72	; 0x48
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4419      	add	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4403      	add	r3, r0
 8002562:	334c      	adds	r3, #76	; 0x4c
 8002564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d113      	bne.n	8002594 <HAL_PCD_IRQHandler+0x3a2>
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800258c:	461a      	mov	r2, r3
 800258e:	2101      	movs	r1, #1
 8002590:	f004 f9c0 	bl	8006914 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f009 fdf7 	bl	800c18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	461a      	mov	r2, r3
 80025b8:	2308      	movs	r3, #8
 80025ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2310      	movs	r3, #16
 80025d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ee:	461a      	mov	r2, r3
 80025f0:	2340      	movs	r3, #64	; 0x40
 80025f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d023      	beq.n	8002646 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	6a38      	ldr	r0, [r7, #32]
 8002602:	f003 f8a1 	bl	8005748 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	3338      	adds	r3, #56	; 0x38
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	78db      	ldrb	r3, [r3, #3]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f009 fe44 	bl	800c2bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002640:	461a      	mov	r2, r3
 8002642:	2302      	movs	r3, #2
 8002644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fcdb 	bl	800300e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3301      	adds	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	f47f af2e 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f004 f88b 	bl	800678c <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800267c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002680:	d122      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026a8:	2100      	movs	r1, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fec2 	bl	8003434 <HAL_PCDEx_LPM_Callback>
 80026b0:	e002      	b.n	80026b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f009 fde2 	bl	800c27c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 f85d 	bl	800678c <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026dc:	d112      	bne.n	8002704 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f009 fd9e 	bl	800c230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002702:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f004 f83f 	bl	800678c <USB_ReadInterrupts>
 800270e:	4603      	mov	r3, r0
 8002710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002718:	f040 80b7 	bne.w	800288a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2110      	movs	r1, #16
 8002736:	4618      	mov	r0, r3
 8002738:	f003 f806 	bl	8005748 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273c:	2300      	movs	r3, #0
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002740:	e046      	b.n	80027d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	461a      	mov	r2, r3
 8002750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002754:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	440a      	add	r2, r1
 800276c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	0151      	lsls	r1, r2, #5
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	440a      	add	r2, r1
 80027c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	3301      	adds	r3, #1
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3b3      	bcc.n	8002742 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002806:	f043 030b 	orr.w	r3, r3, #11
 800280a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f043 030b 	orr.w	r3, r3, #11
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	e015      	b.n	8002850 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002836:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800283a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284a:	f043 030b 	orr.w	r3, r3, #11
 800284e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002862:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002874:	461a      	mov	r2, r3
 8002876:	f004 f84d 	bl	8006914 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ff7c 	bl	800678c <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	d124      	bne.n	80028ea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f812 	bl	80068ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 ffc7 	bl	8005842 <USB_GetDevSpeed>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681c      	ldr	r4, [r3, #0]
 80028c0:	f001 f9e8 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4620      	mov	r0, r4
 80028d0:	f002 fcc6 	bl	8005260 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f009 fc82 	bl	800c1de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 ff4c 	bl	800678c <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d10a      	bne.n	8002914 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f009 fc5f 	bl	800c1c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f002 0208 	and.w	r2, r2, #8
 8002912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 ff37 	bl	800678c <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b80      	cmp	r3, #128	; 0x80
 8002926:	d122      	bne.n	800296e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002934:	2301      	movs	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	e014      	b.n	8002964 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb27 	bl	8002fac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	429a      	cmp	r2, r3
 800296c:	d3e5      	bcc.n	800293a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 ff0a 	bl	800678c <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002982:	d13b      	bne.n	80029fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e02b      	b.n	80029e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d115      	bne.n	80029dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da12      	bge.n	80029dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	333f      	adds	r3, #63	; 0x3f
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fae8 	bl	8002fac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	3301      	adds	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ce      	bcc.n	800298a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fec3 	bl	800678c <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a10:	d155      	bne.n	8002abe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a12:	2301      	movs	r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	e045      	b.n	8002aa4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d12e      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da2b      	bge.n	8002a9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d121      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6053      	str	r3, [r2, #4]
            break;
 8002a9c:	e007      	b.n	8002aae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b4      	bcc.n	8002a18 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 fe62 	bl	800678c <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f009 fc03 	bl	800c2e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fe4c 	bl	800678c <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d115      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f009 fbf3 	bl	800c2fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e000      	b.n	8002b2a <HAL_PCD_IRQHandler+0x938>
      return;
 8002b28:	bf00      	nop
    }
  }
}
 8002b2a:	3734      	adds	r7, #52	; 0x34
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}

08002b30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_PCD_SetAddress+0x1a>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e013      	b.n	8002b72 <HAL_PCD_SetAddress+0x42>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fdaa 	bl	80066bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	803b      	strh	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da0f      	bge.n	8002bc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	3338      	adds	r3, #56	; 0x38
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	705a      	strb	r2, [r3, #1]
 8002bbe:	e00f      	b.n	8002be0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bec:	883a      	ldrh	r2, [r7, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	78ba      	ldrb	r2, [r7, #2]
 8002bf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	785b      	ldrb	r3, [r3, #1]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c0a:	78bb      	ldrb	r3, [r7, #2]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d102      	bne.n	8002c16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_EP_Open+0xaa>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e00e      	b.n	8002c42 <HAL_PCD_EP_Open+0xc8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fe2a 	bl	800588c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c40:	7afb      	ldrb	r3, [r7, #11]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0f      	bge.n	8002c7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3338      	adds	r3, #56	; 0x38
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	705a      	strb	r2, [r3, #1]
 8002c7c:	e00f      	b.n	8002c9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_PCD_EP_Close+0x6e>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e00e      	b.n	8002cd6 <HAL_PCD_EP_Close+0x8c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fe68 	bl	800599c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d20:	7afb      	ldrb	r3, [r7, #11]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	f003 f947 	bl	8005fe4 <USB_EP0StartXfer>
 8002d56:	e008      	b.n	8002d6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6979      	ldr	r1, [r7, #20]
 8002d66:	f002 fef5 	bl	8005b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	460b      	mov	r3, r1
 8002db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	3338      	adds	r3, #56	; 0x38
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2201      	movs	r2, #1
 8002de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	f003 f8e5 	bl	8005fe4 <USB_EP0StartXfer>
 8002e1a:	e008      	b.n	8002e2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	f002 fe93 	bl	8005b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d901      	bls.n	8002e56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e050      	b.n	8002ef8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da0f      	bge.n	8002e7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00d      	b.n	8002e9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_EP_SetStall+0x82>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e01e      	b.n	8002ef8 <HAL_PCD_EP_SetStall+0xc0>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fb23 	bl	8006514 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	b2d9      	uxtb	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f003 fd13 	bl	8006914 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 020f 	and.w	r2, r3, #15
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d901      	bls.n	8002f1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e042      	b.n	8002fa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	da0f      	bge.n	8002f46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	3338      	adds	r3, #56	; 0x38
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	705a      	strb	r2, [r3, #1]
 8002f44:	e00f      	b.n	8002f66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_PCD_EP_ClrStall+0x86>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e00e      	b.n	8002fa4 <HAL_PCD_EP_ClrStall+0xa4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fb2b 	bl	80065f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da0c      	bge.n	8002fda <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	3338      	adds	r3, #56	; 0x38
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e00c      	b.n	8002ff4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 f94a 	bl	8006294 <USB_EPStopXfer>
 8003000:	4603      	mov	r3, r0
 8003002:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003004:	7afb      	ldrb	r3, [r7, #11]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08a      	sub	sp, #40	; 0x28
 8003012:	af02      	add	r7, sp, #8
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3338      	adds	r3, #56	; 0x38
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	429a      	cmp	r2, r3
 8003040:	d901      	bls.n	8003046 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06c      	b.n	8003120 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	d902      	bls.n	8003062 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3303      	adds	r3, #3
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800306a:	e02b      	b.n	80030c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	429a      	cmp	r2, r3
 8003080:	d902      	bls.n	8003088 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3303      	adds	r3, #3
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4603      	mov	r3, r0
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f003 f99e 	bl	80063e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	441a      	add	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d809      	bhi.n	80030ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d203      	bcs.n	80030ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1be      	bne.n	800306c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d811      	bhi.n	800311e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	2201      	movs	r2, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	43db      	mvns	r3, r3
 8003114:	6939      	ldr	r1, [r7, #16]
 8003116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800311a:	4013      	ands	r3, r2
 800311c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	333c      	adds	r3, #60	; 0x3c
 8003140:	3304      	adds	r3, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d17b      	bne.n	8003256 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f240 80b9 	bls.w	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b3 	beq.w	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318a:	461a      	mov	r2, r3
 800318c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	e0a7      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2320      	movs	r3, #32
 80031ae:	6093      	str	r3, [r2, #8]
 80031b0:	e098      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 8093 	bne.w	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d90f      	bls.n	80031e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	e07e      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	440b      	add	r3, r1
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d114      	bne.n	8003248 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003230:	461a      	mov	r2, r3
 8003232:	2101      	movs	r1, #1
 8003234:	f003 fb6e 	bl	8006914 <USB_EP0_OutStart>
 8003238:	e006      	b.n	8003248 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f008 ff82 	bl	800c158 <HAL_PCD_DataOutStageCallback>
 8003254:	e046      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d124      	bne.n	80032a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	6093      	str	r3, [r2, #8]
 800327c:	e032      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	2320      	movs	r3, #32
 8003298:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f008 ff59 	bl	800c158 <HAL_PCD_DataOutStageCallback>
 80032a6:	e01d      	b.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d114      	bne.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d0:	461a      	mov	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f003 fb1e 	bl	8006914 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f008 ff3a 	bl	800c158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	4f54300a 	.word	0x4f54300a
 80032f4:	4f54310a 	.word	0x4f54310a

080032f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	333c      	adds	r3, #60	; 0x3c
 8003310:	3304      	adds	r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <PCD_EP_OutSetupPacket_int+0x88>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d90e      	bls.n	800334c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f008 fef1 	bl	800c134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <PCD_EP_OutSetupPacket_int+0x88>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d90c      	bls.n	8003374 <PCD_EP_OutSetupPacket_int+0x7c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d108      	bne.n	8003374 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800336c:	461a      	mov	r2, r3
 800336e:	2101      	movs	r1, #1
 8003370:	f003 fad0 	bl	8006914 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	4f54300a 	.word	0x4f54300a

08003384 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
 8003390:	4613      	mov	r3, r2
 8003392:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033a2:	883b      	ldrh	r3, [r7, #0]
 80033a4:	0419      	lsls	r1, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
 80033b0:	e028      	b.n	8003404 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e00d      	b.n	80033e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	3340      	adds	r3, #64	; 0x40
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	3301      	adds	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3ec      	bcc.n	80033c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033ec:	883b      	ldrh	r3, [r7, #0]
 80033ee:	0418      	lsls	r0, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4302      	orrs	r2, r0
 80033fc:	3340      	adds	r3, #64	; 0x40
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e267      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d075      	beq.n	8003556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800346a:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b04      	cmp	r3, #4
 8003474:	d00c      	beq.n	8003490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800347e:	2b08      	cmp	r3, #8
 8003480:	d112      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003482:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348e:	d10b      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05b      	beq.n	8003554 <HAL_RCC_OscConfig+0x108>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d157      	bne.n	8003554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e242      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x74>
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a75      	ldr	r2, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0xb0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x98>
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6f      	ldr	r2, [pc, #444]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6c      	ldr	r2, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0xb0>
 80034e4:	4b69      	ldr	r3, [pc, #420]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a68      	ldr	r2, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fa44 	bl	8001990 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fa40 	bl	8001990 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e207      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b5b      	ldr	r3, [pc, #364]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0xc0>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fa30 	bl	8001990 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fa2c 	bl	8001990 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1f3      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	4b51      	ldr	r3, [pc, #324]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0xe8>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d063      	beq.n	800362a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003562:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357a:	4b44      	ldr	r3, [pc, #272]	; (800368c <HAL_RCC_OscConfig+0x240>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d116      	bne.n	80035b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x152>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e1c7      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	e03a      	b.n	800362a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x244>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe f9e5 	bl	8001990 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe f9e1 	bl	8001990 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1a8      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4925      	ldr	r1, [pc, #148]	; (800368c <HAL_RCC_OscConfig+0x240>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_OscConfig+0x244>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe f9c4 	bl	8001990 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360c:	f7fe f9c0 	bl	8001990 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e187      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d036      	beq.n	80036a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_RCC_OscConfig+0x248>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe f9a4 	bl	8001990 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364c:	f7fe f9a0 	bl	8001990 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e167      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x240>)
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x200>
 800366a:	e01b      	b.n	80036a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_OscConfig+0x248>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe f98d 	bl	8001990 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	e00e      	b.n	8003698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367a:	f7fe f989 	bl	8001990 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d907      	bls.n	8003698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e150      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
 800368c:	40023800 	.word	0x40023800
 8003690:	42470000 	.word	0x42470000
 8003694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ea      	bne.n	800367a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8097 	beq.w	80037e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b6:	4b81      	ldr	r3, [pc, #516]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4b7d      	ldr	r3, [pc, #500]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a7c      	ldr	r2, [pc, #496]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b7a      	ldr	r3, [pc, #488]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b77      	ldr	r3, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x474>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ee:	4b74      	ldr	r3, [pc, #464]	; (80038c0 <HAL_RCC_OscConfig+0x474>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a73      	ldr	r2, [pc, #460]	; (80038c0 <HAL_RCC_OscConfig+0x474>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7fe f949 	bl	8001990 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fe f945 	bl	8001990 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e10c      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b6a      	ldr	r3, [pc, #424]	; (80038c0 <HAL_RCC_OscConfig+0x474>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x2ea>
 8003728:	4b64      	ldr	r3, [pc, #400]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a63      	ldr	r2, [pc, #396]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	e01c      	b.n	8003770 <HAL_RCC_OscConfig+0x324>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b05      	cmp	r3, #5
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x30c>
 800373e:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a5e      	ldr	r2, [pc, #376]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
 800374a:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a5b      	ldr	r2, [pc, #364]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0x324>
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a57      	ldr	r2, [pc, #348]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	4b55      	ldr	r3, [pc, #340]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a54      	ldr	r2, [pc, #336]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fe f90a 	bl	8001990 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fe f906 	bl	8001990 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0cb      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	4b49      	ldr	r3, [pc, #292]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ee      	beq.n	8003780 <HAL_RCC_OscConfig+0x334>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fe f8f4 	bl	8001990 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe f8f0 	bl	8001990 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0b5      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ee      	bne.n	80037ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	4a38      	ldr	r2, [pc, #224]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a1 	beq.w	800392c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d05c      	beq.n	80038b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d141      	bne.n	8003882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x478>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe f8c4 	bl	8001990 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380c:	f7fe f8c0 	bl	8001990 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e087      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	491b      	ldr	r1, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x478>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f899 	bl	8001990 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe f895 	bl	8001990 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e05c      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x416>
 8003880:	e054      	b.n	800392c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_RCC_OscConfig+0x478>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe f882 	bl	8001990 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe f87e 	bl	8001990 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e045      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_OscConfig+0x470>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x444>
 80038ae:	e03d      	b.n	800392c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e038      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40007000 	.word	0x40007000
 80038c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x4ec>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d028      	beq.n	8003928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d121      	bne.n	8003928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d11a      	bne.n	8003928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003900:	4293      	cmp	r3, r2
 8003902:	d111      	bne.n	8003928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	3b01      	subs	r3, #1
 8003912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0cc      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b68      	ldr	r3, [pc, #416]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d90c      	bls.n	8003978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b8      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800399a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a8:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	494d      	ldr	r1, [pc, #308]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d044      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d119      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07f      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e06f      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e067      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4934      	ldr	r1, [pc, #208]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd ffb0 	bl	8001990 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd ffac 	bl	8001990 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e04f      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d20c      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e032      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4916      	ldr	r1, [pc, #88]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	490e      	ldr	r1, [pc, #56]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ac2:	f000 f821 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	490a      	ldr	r1, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	5ccb      	ldrb	r3, [r1, r3]
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fa60 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023c00 	.word	0x40023c00
 8003af8:	40023800 	.word	0x40023800
 8003afc:	0800c990 	.word	0x0800c990
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b0c:	b090      	sub	sp, #64	; 0x40
 8003b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
 8003b14:	2300      	movs	r3, #0
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b18:	2300      	movs	r3, #0
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b20:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d00d      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x40>
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	f200 80a1 	bhi.w	8003c74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x34>
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b3a:	e09b      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b40:	e09b      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b42:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b46:	e098      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b48:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b52:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d028      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	099b      	lsrs	r3, r3, #6
 8003b64:	2200      	movs	r2, #0
 8003b66:	623b      	str	r3, [r7, #32]
 8003b68:	627a      	str	r2, [r7, #36]	; 0x24
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b70:	2100      	movs	r1, #0
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b74:	fb03 f201 	mul.w	r2, r3, r1
 8003b78:	2300      	movs	r3, #0
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a43      	ldr	r2, [pc, #268]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b82:	fba0 1202 	umull	r1, r2, r0, r2
 8003b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b88:	460a      	mov	r2, r1
 8003b8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8e:	4413      	add	r3, r2
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2200      	movs	r2, #0
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	61fa      	str	r2, [r7, #28]
 8003b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ba2:	f7fc fc2b 	bl	80003fc <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4613      	mov	r3, r2
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bae:	e053      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	617a      	str	r2, [r7, #20]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bc2:	f04f 0b00 	mov.w	fp, #0
 8003bc6:	4652      	mov	r2, sl
 8003bc8:	465b      	mov	r3, fp
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd8:	0150      	lsls	r0, r2, #5
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	ebb2 080a 	subs.w	r8, r2, sl
 8003be2:	eb63 090b 	sbc.w	r9, r3, fp
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bfa:	ebb2 0408 	subs.w	r4, r2, r8
 8003bfe:	eb63 0509 	sbc.w	r5, r3, r9
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	00eb      	lsls	r3, r5, #3
 8003c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c10:	00e2      	lsls	r2, r4, #3
 8003c12:	4614      	mov	r4, r2
 8003c14:	461d      	mov	r5, r3
 8003c16:	eb14 030a 	adds.w	r3, r4, sl
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	eb45 030b 	adc.w	r3, r5, fp
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	028b      	lsls	r3, r1, #10
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c38:	4621      	mov	r1, r4
 8003c3a:	028a      	lsls	r2, r1, #10
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	2200      	movs	r2, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	60fa      	str	r2, [r7, #12]
 8003c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c4c:	f7fc fbd6 	bl	80003fc <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4613      	mov	r3, r2
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3740      	adds	r7, #64	; 0x40
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	017d7840 	.word	0x017d7840

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000000 	.word	0x20000000

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800c9a0 	.word	0x0800c9a0

08003cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	08db      	lsrs	r3, r3, #3
 8003d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_RCC_GetClockConfig+0x60>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0207 	and.w	r2, r3, #7
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40023c00 	.word	0x40023c00

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d035      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d60:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fe13 	bl	8001990 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d6e:	f7fd fe0f 	bl	8001990 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0b0      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d80:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	019a      	lsls	r2, r3, #6
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	071b      	lsls	r3, r3, #28
 8003d98:	4955      	ldr	r1, [pc, #340]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da0:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fdf3 	bl	8001990 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dae:	f7fd fdef 	bl	8001990 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e090      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8083 	beq.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a43      	ldr	r2, [pc, #268]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a3e      	ldr	r2, [pc, #248]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e02:	f7fd fdc5 	bl	8001990 <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fd fdc1 	bl	8001990 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e062      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e1c:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02f      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d028      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d114      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fd8f 	bl	8001990 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd fd8b 	bl	8001990 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e02a      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]
 8003ec0:	e005      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ecc:	6093      	str	r3, [r2, #8]
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eda:	4905      	ldr	r1, [pc, #20]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	42470068 	.word	0x42470068
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42470e40 	.word	0x42470e40

08003efc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e066      	b.n	8003fe0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7f5b      	ldrb	r3, [r3, #29]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc ff78 	bl	8000e18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	22ca      	movs	r2, #202	; 0xca
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2253      	movs	r2, #83	; 0x53
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f87a 	bl	8004038 <RTC_EnterInitMode>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d12c      	bne.n	8003fa8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68d2      	ldr	r2, [r2, #12]
 8003f88:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6919      	ldr	r1, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f881 	bl	80040a6 <RTC_ExitInitMode>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d113      	bne.n	8003fd6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	22ff      	movs	r2, #255	; 0xff
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004002:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004004:	f7fd fcc4 	bl	8001990 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800400a:	e009      	b.n	8004020 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800400c:	f7fd fcc0 	bl	8001990 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401a:	d901      	bls.n	8004020 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e007      	b.n	8004030 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ee      	beq.n	800400c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d122      	bne.n	800409c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004064:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004066:	f7fd fc93 	bl	8001990 <HAL_GetTick>
 800406a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800406c:	e00c      	b.n	8004088 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800406e:	f7fd fc8f 	bl	8001990 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407c:	d904      	bls.n	8004088 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <RTC_EnterInitMode+0x64>
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d1e8      	bne.n	800406e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff89 	bl	8003fe8 <HAL_RTC_WaitForSynchro>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2204      	movs	r2, #4
 80040e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07b      	b.n	80041fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004112:	d009      	beq.n	8004128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
 800411a:	e005      	b.n	8004128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc fe92 	bl	8000e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	ea42 0103 	orr.w	r1, r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0104 	and.w	r1, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f003 0210 	and.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_SPI_Transmit+0x22>
 8004220:	2302      	movs	r3, #2
 8004222:	e126      	b.n	8004472 <HAL_SPI_Transmit+0x270>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800422c:	f7fd fbb0 	bl	8001990 <HAL_GetTick>
 8004230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004246:	e10b      	b.n	8004460 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Transmit+0x52>
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004258:	e102      	b.n	8004460 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d10f      	bne.n	80042c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d007      	beq.n	80042e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e8:	d14b      	bne.n	8004382 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Transmit+0xf6>
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d13e      	bne.n	8004376 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800431c:	e02b      	b.n	8004376 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d112      	bne.n	8004352 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004350:	e011      	b.n	8004376 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004352:	f7fd fb1d 	bl	8001990 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d803      	bhi.n	800436a <HAL_SPI_Transmit+0x168>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d102      	bne.n	8004370 <HAL_SPI_Transmit+0x16e>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004374:	e074      	b.n	8004460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ce      	bne.n	800431e <HAL_SPI_Transmit+0x11c>
 8004380:	e04c      	b.n	800441c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Transmit+0x18e>
 800438a:	8afb      	ldrh	r3, [r7, #22]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d140      	bne.n	8004412 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043b6:	e02c      	b.n	8004412 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d113      	bne.n	80043ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80043ec:	e011      	b.n	8004412 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ee:	f7fd facf 	bl	8001990 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d803      	bhi.n	8004406 <HAL_SPI_Transmit+0x204>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d102      	bne.n	800440c <HAL_SPI_Transmit+0x20a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004410:	e026      	b.n	8004460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1cd      	bne.n	80043b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fbcb 	bl	8004bbc <SPI_EndRxTxTransaction>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e000      	b.n	8004460 <HAL_SPI_Transmit+0x25e>
  }

error:
 800445e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004470:	7ffb      	ldrb	r3, [r7, #31]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af02      	add	r7, sp, #8
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004496:	d112      	bne.n	80044be <HAL_SPI_Receive+0x44>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2204      	movs	r2, #4
 80044a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f8f1 	bl	800469c <HAL_SPI_TransmitReceive>
 80044ba:	4603      	mov	r3, r0
 80044bc:	e0ea      	b.n	8004694 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_Receive+0x52>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e0e3      	b.n	8004694 <HAL_SPI_Receive+0x21a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d4:	f7fd fa5c 	bl	8001990 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
 80044e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044ea:	e0ca      	b.n	8004682 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Receive+0x7e>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044fc:	e0c1      	b.n	8004682 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2204      	movs	r2, #4
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	d10f      	bne.n	8004566 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d007      	beq.n	8004584 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004582:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d162      	bne.n	8004652 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800458c:	e02e      	b.n	80045ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d115      	bne.n	80045c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f103 020c 	add.w	r2, r3, #12
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c6:	e011      	b.n	80045ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c8:	f7fd f9e2 	bl	8001990 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d803      	bhi.n	80045e0 <HAL_SPI_Receive+0x166>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d102      	bne.n	80045e6 <HAL_SPI_Receive+0x16c>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045ea:	e04a      	b.n	8004682 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1cb      	bne.n	800458e <HAL_SPI_Receive+0x114>
 80045f6:	e031      	b.n	800465c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d113      	bne.n	800462e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	b292      	uxth	r2, r2
 8004612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	1c9a      	adds	r2, r3, #2
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800462c:	e011      	b.n	8004652 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462e:	f7fd f9af 	bl	8001990 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d803      	bhi.n	8004646 <HAL_SPI_Receive+0x1cc>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d102      	bne.n	800464c <HAL_SPI_Receive+0x1d2>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004650:	e017      	b.n	8004682 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1cd      	bne.n	80045f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa45 	bl	8004af0 <SPI_EndRxTransaction>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
 800467e:	e000      	b.n	8004682 <HAL_SPI_Receive+0x208>
  }

error :
 8004680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08c      	sub	sp, #48	; 0x30
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046aa:	2301      	movs	r3, #1
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x26>
 80046be:	2302      	movs	r3, #2
 80046c0:	e18a      	b.n	80049d8 <HAL_SPI_TransmitReceive+0x33c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ca:	f7fd f961 	bl	8001990 <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d00f      	beq.n	800470c <HAL_SPI_TransmitReceive+0x70>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f2:	d107      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x68>
 80046fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004704:	2302      	movs	r3, #2
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800470a:	e15b      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_SPI_TransmitReceive+0x82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_TransmitReceive+0x82>
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004724:	e14e      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2205      	movs	r2, #5
 8004736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	887a      	ldrh	r2, [r7, #2]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	887a      	ldrh	r2, [r7, #2]
 8004750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d007      	beq.n	800478e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004796:	d178      	bne.n	800488a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_SPI_TransmitReceive+0x10a>
 80047a0:	8b7b      	ldrh	r3, [r7, #26]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d166      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ca:	e053      	b.n	8004874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d11b      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x176>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <HAL_SPI_TransmitReceive+0x176>
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d113      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d119      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x1b8>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	b292      	uxth	r2, r2
 8004836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004850:	2301      	movs	r3, #1
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004854:	f7fd f89c 	bl	8001990 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004860:	429a      	cmp	r2, r3
 8004862:	d807      	bhi.n	8004874 <HAL_SPI_TransmitReceive+0x1d8>
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d003      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004872:	e0a7      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1a6      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x130>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1a1      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x130>
 8004888:	e07c      	b.n	8004984 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x1fc>
 8004892:	8b7b      	ldrh	r3, [r7, #26]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d16b      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048be:	e057      	b.n	8004970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d11c      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x26c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d017      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x26c>
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d114      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d119      	bne.n	800494a <HAL_SPI_TransmitReceive+0x2ae>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d014      	beq.n	800494a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004946:	2301      	movs	r3, #1
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800494a:	f7fd f821 	bl	8001990 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_TransmitReceive+0x2c6>
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d102      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x2cc>
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800496e:	e029      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1a2      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x224>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d19d      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f917 	bl	8004bbc <SPI_EndRxTxTransaction>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049a0:	e010      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	e000      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3730      	adds	r7, #48	; 0x30
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049f0:	f7fc ffce 	bl	8001990 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a00:	f7fc ffc6 	bl	8001990 <HAL_GetTick>
 8004a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a06:	4b39      	ldr	r3, [pc, #228]	; (8004aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	015b      	lsls	r3, r3, #5
 8004a0c:	0d1b      	lsrs	r3, r3, #20
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a16:	e054      	b.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d050      	beq.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a20:	f7fc ffb6 	bl	8001990 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d902      	bls.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d13d      	bne.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4e:	d111      	bne.n	8004a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d004      	beq.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d107      	bne.n	8004a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7c:	d10f      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e017      	b.n	8004ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d19b      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000000 	.word	0x20000000

08004af0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b04:	d111      	bne.n	8004b2a <SPI_EndRxTransaction+0x3a>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0e:	d004      	beq.n	8004b1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d107      	bne.n	8004b2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d12a      	bne.n	8004b8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d012      	beq.n	8004b64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff ff49 	bl	80049e0 <SPI_WaitFlagStateUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02d      	beq.n	8004bb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e026      	b.n	8004bb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff36 	bl	80049e0 <SPI_WaitFlagStateUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01a      	beq.n	8004bb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e013      	b.n	8004bb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2101      	movs	r1, #1
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff ff23 	bl	80049e0 <SPI_WaitFlagStateUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e000      	b.n	8004bb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <SPI_EndRxTxTransaction+0x7c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <SPI_EndRxTxTransaction+0x80>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0d5b      	lsrs	r3, r3, #21
 8004bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be6:	d112      	bne.n	8004c0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fef4 	bl	80049e0 <SPI_WaitFlagStateUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e00f      	b.n	8004c2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d0f2      	beq.n	8004c0e <SPI_EndRxTxTransaction+0x52>
 8004c28:	e000      	b.n	8004c2c <SPI_EndRxTxTransaction+0x70>
        break;
 8004c2a:	bf00      	nop
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	165e9f81 	.word	0x165e9f81

08004c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e041      	b.n	8004cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f839 	bl	8004cde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 f9d8 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e04e      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d01d      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d010      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e007      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0202 	mvn.w	r2, #2
 8004e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8ee 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8e0 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8f1 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8c4 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8b6 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8c7 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0208 	mvn.w	r2, #8
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f89a 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f88c 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f89d 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f870 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f862 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f873 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0201 	mvn.w	r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb ff1c 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f902 	bl	8005188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f838 	bl	8005020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0220 	mvn.w	r2, #32
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8cc 	bl	8005174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a40      	ldr	r2, [pc, #256]	; (8005148 <TIM_Base_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005052:	d00f      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a3d      	ldr	r2, [pc, #244]	; (800514c <TIM_Base_SetConfig+0x118>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <TIM_Base_SetConfig+0x120>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a3a      	ldr	r2, [pc, #232]	; (8005158 <TIM_Base_SetConfig+0x124>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2f      	ldr	r2, [pc, #188]	; (8005148 <TIM_Base_SetConfig+0x114>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d027      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <TIM_Base_SetConfig+0x118>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d023      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2b      	ldr	r2, [pc, #172]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01f      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <TIM_Base_SetConfig+0x120>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a29      	ldr	r2, [pc, #164]	; (8005158 <TIM_Base_SetConfig+0x124>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d017      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a28      	ldr	r2, [pc, #160]	; (800515c <TIM_Base_SetConfig+0x128>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <TIM_Base_SetConfig+0x12c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00f      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <TIM_Base_SetConfig+0x130>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <TIM_Base_SetConfig+0x134>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a24      	ldr	r2, [pc, #144]	; (800516c <TIM_Base_SetConfig+0x138>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <TIM_Base_SetConfig+0x13c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0xf8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <TIM_Base_SetConfig+0x124>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40010400 	.word	0x40010400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800
 8005168:	40001800 	.word	0x40001800
 800516c:	40001c00 	.word	0x40001c00
 8005170:	40002000 	.word	0x40002000

08005174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800519c:	b084      	sub	sp, #16
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	f107 001c 	add.w	r0, r7, #28
 80051aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d122      	bne.n	80051fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d105      	bne.n	80051ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fbee 	bl	80069d0 <USB_CoreReset>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e01a      	b.n	8005230 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f001 fbe2 	bl	80069d0 <USB_CoreReset>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
 8005222:	e005      	b.n	8005230 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10b      	bne.n	800524e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f043 0206 	orr.w	r2, r3, #6
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800525a:	b004      	add	sp, #16
 800525c:	4770      	bx	lr
	...

08005260 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d165      	bne.n	8005340 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a41      	ldr	r2, [pc, #260]	; (800537c <USB_SetTurnaroundTime+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d906      	bls.n	800528a <USB_SetTurnaroundTime+0x2a>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a40      	ldr	r2, [pc, #256]	; (8005380 <USB_SetTurnaroundTime+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d202      	bcs.n	800528a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005284:	230f      	movs	r3, #15
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e062      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4a3c      	ldr	r2, [pc, #240]	; (8005380 <USB_SetTurnaroundTime+0x120>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d306      	bcc.n	80052a0 <USB_SetTurnaroundTime+0x40>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4a3b      	ldr	r2, [pc, #236]	; (8005384 <USB_SetTurnaroundTime+0x124>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d202      	bcs.n	80052a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800529a:	230e      	movs	r3, #14
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e057      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4a38      	ldr	r2, [pc, #224]	; (8005384 <USB_SetTurnaroundTime+0x124>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d306      	bcc.n	80052b6 <USB_SetTurnaroundTime+0x56>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a37      	ldr	r2, [pc, #220]	; (8005388 <USB_SetTurnaroundTime+0x128>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d202      	bcs.n	80052b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052b0:	230d      	movs	r3, #13
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e04c      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a33      	ldr	r2, [pc, #204]	; (8005388 <USB_SetTurnaroundTime+0x128>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d306      	bcc.n	80052cc <USB_SetTurnaroundTime+0x6c>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a32      	ldr	r2, [pc, #200]	; (800538c <USB_SetTurnaroundTime+0x12c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d802      	bhi.n	80052cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052c6:	230c      	movs	r3, #12
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e041      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a2f      	ldr	r2, [pc, #188]	; (800538c <USB_SetTurnaroundTime+0x12c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d906      	bls.n	80052e2 <USB_SetTurnaroundTime+0x82>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <USB_SetTurnaroundTime+0x130>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d802      	bhi.n	80052e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052dc:	230b      	movs	r3, #11
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e036      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <USB_SetTurnaroundTime+0x130>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d906      	bls.n	80052f8 <USB_SetTurnaroundTime+0x98>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a29      	ldr	r2, [pc, #164]	; (8005394 <USB_SetTurnaroundTime+0x134>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d802      	bhi.n	80052f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052f2:	230a      	movs	r3, #10
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e02b      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a26      	ldr	r2, [pc, #152]	; (8005394 <USB_SetTurnaroundTime+0x134>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d906      	bls.n	800530e <USB_SetTurnaroundTime+0xae>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a25      	ldr	r2, [pc, #148]	; (8005398 <USB_SetTurnaroundTime+0x138>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d202      	bcs.n	800530e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005308:	2309      	movs	r3, #9
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e020      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <USB_SetTurnaroundTime+0x138>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d306      	bcc.n	8005324 <USB_SetTurnaroundTime+0xc4>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a20      	ldr	r2, [pc, #128]	; (800539c <USB_SetTurnaroundTime+0x13c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800531e:	2308      	movs	r3, #8
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e015      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a1d      	ldr	r2, [pc, #116]	; (800539c <USB_SetTurnaroundTime+0x13c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d906      	bls.n	800533a <USB_SetTurnaroundTime+0xda>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <USB_SetTurnaroundTime+0x140>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d202      	bcs.n	800533a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005334:	2307      	movs	r3, #7
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e00a      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800533a:	2306      	movs	r3, #6
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e007      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005346:	2309      	movs	r3, #9
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e001      	b.n	8005350 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800534c:	2309      	movs	r3, #9
 800534e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	029b      	lsls	r3, r3, #10
 8005364:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	00d8acbf 	.word	0x00d8acbf
 8005380:	00e4e1c0 	.word	0x00e4e1c0
 8005384:	00f42400 	.word	0x00f42400
 8005388:	01067380 	.word	0x01067380
 800538c:	011a499f 	.word	0x011a499f
 8005390:	01312cff 	.word	0x01312cff
 8005394:	014ca43f 	.word	0x014ca43f
 8005398:	016e3600 	.word	0x016e3600
 800539c:	01a6ab1f 	.word	0x01a6ab1f
 80053a0:	01e84800 	.word	0x01e84800

080053a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f043 0201 	orr.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d115      	bne.n	8005436 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005416:	2001      	movs	r0, #1
 8005418:	f7fc fac6 	bl	80019a8 <HAL_Delay>
      ms++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fa45 	bl	80068b2 <USB_GetMode>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d01e      	beq.n	800546c <USB_SetCurrentMode+0x84>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b31      	cmp	r3, #49	; 0x31
 8005432:	d9f0      	bls.n	8005416 <USB_SetCurrentMode+0x2e>
 8005434:	e01a      	b.n	800546c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d115      	bne.n	8005468 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005448:	2001      	movs	r0, #1
 800544a:	f7fc faad 	bl	80019a8 <HAL_Delay>
      ms++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fa2c 	bl	80068b2 <USB_GetMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <USB_SetCurrentMode+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b31      	cmp	r3, #49	; 0x31
 8005464:	d9f0      	bls.n	8005448 <USB_SetCurrentMode+0x60>
 8005466:	e001      	b.n	800546c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e005      	b.n	8005478 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b32      	cmp	r3, #50	; 0x32
 8005470:	d101      	bne.n	8005476 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005480:	b084      	sub	sp, #16
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800548e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	e009      	b.n	80054b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3340      	adds	r3, #64	; 0x40
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3301      	adds	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b0e      	cmp	r3, #14
 80054b8:	d9f2      	bls.n	80054a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11c      	bne.n	80054fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ce:	f043 0302 	orr.w	r3, r3, #2
 80054d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
 80054f8:	e00b      	b.n	8005512 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	4619      	mov	r1, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552c:	461a      	mov	r2, r3
 800552e:	680b      	ldr	r3, [r1, #0]
 8005530:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b01      	cmp	r3, #1
 8005536:	d10c      	bne.n	8005552 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800553e:	2100      	movs	r1, #0
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f965 	bl	8005810 <USB_SetDevSpeed>
 8005546:	e008      	b.n	800555a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005548:	2101      	movs	r1, #1
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f960 	bl	8005810 <USB_SetDevSpeed>
 8005550:	e003      	b.n	800555a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005552:	2103      	movs	r1, #3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f95b 	bl	8005810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800555a:	2110      	movs	r1, #16
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8f3 	bl	8005748 <USB_FlushTxFifo>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f91f 	bl	80057b0 <USB_FlushRxFifo>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	461a      	mov	r2, r3
 800559c:	2300      	movs	r3, #0
 800559e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	e043      	b.n	800562e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055bc:	d118      	bne.n	80055f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	e013      	b.n	8005602 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e008      	b.n	8005602 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	2300      	movs	r3, #0
 8005612:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	461a      	mov	r2, r3
 8005622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3301      	adds	r3, #1
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d3b7      	bcc.n	80055a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e043      	b.n	80056c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005652:	d118      	bne.n	8005686 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	461a      	mov	r2, r3
 8005668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e013      	b.n	8005698 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e008      	b.n	8005698 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	461a      	mov	r2, r3
 8005694:	2300      	movs	r3, #0
 8005696:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3301      	adds	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d3b7      	bcc.n	800563c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f043 0210 	orr.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <USB_DevInit+0x2c4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f043 0208 	orr.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d107      	bne.n	8005734 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800572c:	f043 0304 	orr.w	r3, r3, #4
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005740:	b004      	add	sp, #16
 8005742:	4770      	bx	lr
 8005744:	803c3800 	.word	0x803c3800

08005748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <USB_FlushTxFifo+0x64>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e01b      	b.n	80057a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	daf2      	bge.n	8005756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	019b      	lsls	r3, r3, #6
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <USB_FlushTxFifo+0x64>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e006      	b.n	80057a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d0f0      	beq.n	8005780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	00030d40 	.word	0x00030d40

080057b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <USB_FlushRxFifo+0x5c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e018      	b.n	8005800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	daf2      	bge.n	80057bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2210      	movs	r2, #16
 80057de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <USB_FlushRxFifo+0x5c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e006      	b.n	8005800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d0f0      	beq.n	80057e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	00030d40 	.word	0x00030d40

08005810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
 8005866:	e00a      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d002      	beq.n	8005874 <USB_GetDevSpeed+0x32>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d102      	bne.n	800587a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005874:	2302      	movs	r3, #2
 8005876:	75fb      	strb	r3, [r7, #23]
 8005878:	e001      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800587a:	230f      	movs	r3, #15
 800587c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d13a      	bne.n	800591e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d155      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005904:	4313      	orrs	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e036      	b.n	800598c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2101      	movs	r1, #1
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4313      	orrs	r3, r2
 800593e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11a      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	791b      	ldrb	r3, [r3, #4]
 8005970:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005972:	430b      	orrs	r3, r1
 8005974:	4313      	orrs	r3, r2
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d161      	bne.n	8005a7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ce:	d11f      	bne.n	8005a10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <USB_DeactivateEndpoint+0x1b0>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
 8005a7a:	e060      	b.n	8005b3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a92:	d11f      	bne.n	8005ad4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ab2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	43db      	mvns	r3, r3
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af4:	4013      	ands	r3, r2
 8005af6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	43db      	mvns	r3, r3
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0159      	lsls	r1, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	4619      	mov	r1, r3
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <USB_DeactivateEndpoint+0x1b4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	ec337800 	.word	0xec337800
 8005b50:	eff37800 	.word	0xeff37800

08005b54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 815c 	bne.w	8005e2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d132      	bne.n	8005be4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	0cdb      	lsrs	r3, r3, #19
 8005bde:	04db      	lsls	r3, r3, #19
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	e074      	b.n	8005cce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	0cdb      	lsrs	r3, r3, #19
 8005c00:	04db      	lsls	r3, r3, #19
 8005c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	440b      	add	r3, r1
 8005c40:	1e59      	subs	r1, r3, #1
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c4c:	4b9d      	ldr	r3, [pc, #628]	; (8005ec4 <USB_EPStartXfer+0x370>)
 8005c4e:	400b      	ands	r3, r1
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	0148      	lsls	r0, r1, #5
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	4401      	add	r1, r0
 8005c58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	0148      	lsls	r0, r1, #5
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	4401      	add	r1, r0
 8005c7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d11f      	bne.n	8005cce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ccc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d14b      	bne.n	8005d6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d128      	bne.n	8005d4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d110      	bne.n	8005d2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e00f      	b.n	8005d4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e133      	b.n	8005fd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d015      	beq.n	8005dc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 811b 	beq.w	8005fd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	634b      	str	r3, [r1, #52]	; 0x34
 8005dbe:	e109      	b.n	8005fd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e00f      	b.n	8005e12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6919      	ldr	r1, [r3, #16]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	b298      	uxth	r0, r3
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fade 	bl	80063e8 <USB_WritePacket>
 8005e2c:	e0d2      	b.n	8005fd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	0cdb      	lsrs	r3, r3, #19
 8005e4a:	04db      	lsls	r3, r3, #19
 8005e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d126      	bne.n	8005ec8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	0148      	lsls	r0, r1, #5
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	4401      	add	r1, r0
 8005e98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ebe:	6113      	str	r3, [r2, #16]
 8005ec0:	e03a      	b.n	8005f38 <USB_EPStartXfer+0x3e4>
 8005ec2:	bf00      	nop
 8005ec4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	1e5a      	subs	r2, r3, #1
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	8afa      	ldrh	r2, [r7, #22]
 8005ee4:	fb03 f202 	mul.w	r2, r3, r2
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	8afb      	ldrh	r3, [r7, #22]
 8005efc:	04d9      	lsls	r1, r3, #19
 8005efe:	4b38      	ldr	r3, [pc, #224]	; (8005fe0 <USB_EPStartXfer+0x48c>)
 8005f00:	400b      	ands	r3, r1
 8005f02:	69b9      	ldr	r1, [r7, #24]
 8005f04:	0148      	lsls	r0, r1, #5
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	4401      	add	r1, r0
 8005f0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f28:	69b9      	ldr	r1, [r7, #24]
 8005f2a:	0148      	lsls	r0, r1, #5
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	4401      	add	r1, r0
 8005f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d10d      	bne.n	8005f5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6919      	ldr	r1, [r3, #16]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	460a      	mov	r2, r1
 8005f58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	791b      	ldrb	r3, [r3, #4]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d128      	bne.n	8005fb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e00f      	b.n	8005fb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	1ff80000 	.word	0x1ff80000

08005fe4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	f040 80ce 	bne.w	80061a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d132      	bne.n	8006074 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800602c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	440a      	add	r2, r1
 8006068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606c:	0cdb      	lsrs	r3, r3, #19
 800606e:	04db      	lsls	r3, r3, #19
 8006070:	6113      	str	r3, [r2, #16]
 8006072:	e04e      	b.n	8006112 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	0cdb      	lsrs	r3, r3, #19
 8006090:	04db      	lsls	r3, r3, #19
 8006092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d903      	bls.n	80060cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006102:	6939      	ldr	r1, [r7, #16]
 8006104:	0148      	lsls	r0, r1, #5
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	4401      	add	r1, r0
 800610a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800610e:	4313      	orrs	r3, r2
 8006110:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d11e      	bne.n	8006156 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	461a      	mov	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e097      	b.n	8006286 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006174:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8083 	beq.w	8006286 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f303 	lsl.w	r3, r1, r3
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800619c:	4313      	orrs	r3, r2
 800619e:	634b      	str	r3, [r1, #52]	; 0x34
 80061a0:	e071      	b.n	8006286 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	0cdb      	lsrs	r3, r3, #19
 80061be:	04db      	lsls	r3, r3, #19
 80061c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006234:	6939      	ldr	r1, [r7, #16]
 8006236:	0148      	lsls	r0, r1, #5
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	4401      	add	r1, r0
 800623c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006240:	4313      	orrs	r3, r2
 8006242:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10d      	bne.n	8006266 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6919      	ldr	r1, [r3, #16]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	460a      	mov	r2, r1
 8006264:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006280:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006284:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d14a      	bne.n	8006348 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ca:	f040 8086 	bne.w	80063da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006314:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006322:	4293      	cmp	r3, r2
 8006324:	d902      	bls.n	800632c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
          break;
 800632a:	e056      	b.n	80063da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006344:	d0e7      	beq.n	8006316 <USB_EPStopXfer+0x82>
 8006346:	e048      	b.n	80063da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800635c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006360:	d13b      	bne.n	80063da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006384:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	7812      	ldrb	r2, [r2, #0]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d902      	bls.n	80063c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
          break;
 80063be:	e00c      	b.n	80063da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d8:	d0e7      	beq.n	80063aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b089      	sub	sp, #36	; 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4611      	mov	r1, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	460b      	mov	r3, r1
 80063f8:	71fb      	strb	r3, [r7, #7]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006406:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d123      	bne.n	8006456 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800640e:	88bb      	ldrh	r3, [r7, #4]
 8006410:	3303      	adds	r3, #3
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e018      	b.n	800644e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	031a      	lsls	r2, r3, #12
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006428:	461a      	mov	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	3301      	adds	r3, #1
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	429a      	cmp	r2, r3
 8006454:	d3e2      	bcc.n	800641c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3724      	adds	r7, #36	; 0x24
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006464:	b480      	push	{r7}
 8006466:	b08b      	sub	sp, #44	; 0x2c
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	b29b      	uxth	r3, r3
 8006480:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800648a:	2300      	movs	r3, #0
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	e014      	b.n	80064ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	601a      	str	r2, [r3, #0]
    pDest++;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	3301      	adds	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	3301      	adds	r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	3301      	adds	r3, #1
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d3e6      	bcc.n	8006490 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064c2:	8bfb      	ldrh	r3, [r7, #30]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01e      	beq.n	8006506 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d2:	461a      	mov	r2, r3
 80064d4:	f107 0310 	add.w	r3, r7, #16
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	701a      	strb	r2, [r3, #0]
      i++;
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	3301      	adds	r3, #1
 80064f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	3301      	adds	r3, #1
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064fa:	8bfb      	ldrh	r3, [r7, #30]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006500:	8bfb      	ldrh	r3, [r7, #30]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ea      	bne.n	80064dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006508:	4618      	mov	r0, r3
 800650a:	372c      	adds	r7, #44	; 0x2c
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d12c      	bne.n	800658a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db12      	blt.n	8006568 <USB_EPSetStall+0x54>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006562:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006566:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e02b      	b.n	80065e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	db12      	blt.n	80065c2 <USB_EPSetStall+0xae>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d128      	bne.n	800665e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	440a      	add	r2, r1
 8006622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800662a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d003      	beq.n	800663c <USB_EPClearStall+0x4c>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	791b      	ldrb	r3, [r3, #4]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d138      	bne.n	80066ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e027      	b.n	80066ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800667c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d003      	beq.n	800668e <USB_EPClearStall+0x9e>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d10f      	bne.n	80066ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f023 0302 	bic.w	r3, r3, #2
 800673a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006764:	f023 0303 	bic.w	r3, r3, #3
 8006768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4013      	ands	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	0c1b      	lsrs	r3, r3, #16
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	b29b      	uxth	r3, r3
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4013      	ands	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006848:	68bb      	ldr	r3, [r7, #8]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006856:	b480      	push	{r7}
 8006858:	b087      	sub	sp, #28
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	fa22 f303 	lsr.w	r3, r2, r3
 8006886:	01db      	lsls	r3, r3, #7
 8006888:	b2db      	uxtb	r3, r3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4013      	ands	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068a4:	68bb      	ldr	r3, [r7, #8]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0301 	and.w	r3, r3, #1
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068ec:	f023 0307 	bic.w	r3, r3, #7
 80068f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	460b      	mov	r3, r1
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	333c      	adds	r3, #60	; 0x3c
 800692a:	3304      	adds	r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4a26      	ldr	r2, [pc, #152]	; (80069cc <USB_EP0_OutStart+0xb8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d90a      	bls.n	800694e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006948:	d101      	bne.n	800694e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e037      	b.n	80069be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800696c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697c:	f043 0318 	orr.w	r3, r3, #24
 8006980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006994:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d10f      	bne.n	80069bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	4f54300a 	.word	0x4f54300a

080069d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <USB_CoreReset+0x64>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e01b      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	daf2      	bge.n	80069dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f043 0201 	orr.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <USB_CoreReset+0x64>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e006      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d0f0      	beq.n	8006a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	00030d40 	.word	0x00030d40

08006a38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a48:	f005 fdf0 	bl	800c62c <USBD_static_malloc>
 8006a4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32b0      	adds	r2, #176	; 0xb0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a64:	2302      	movs	r3, #2
 8006a66:	e0d4      	b.n	8006c12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f005 fe52 	bl	800c718 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32b0      	adds	r2, #176	; 0xb0
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	32b0      	adds	r2, #176	; 0xb0
 8006a8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7c1b      	ldrb	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d138      	bne.n	8006b12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aa0:	4b5e      	ldr	r3, [pc, #376]	; (8006c1c <USBD_CDC_Init+0x1e4>)
 8006aa2:	7819      	ldrb	r1, [r3, #0]
 8006aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f005 fc9b 	bl	800c3e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ab0:	4b5a      	ldr	r3, [pc, #360]	; (8006c1c <USBD_CDC_Init+0x1e4>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3324      	adds	r3, #36	; 0x24
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aca:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006acc:	7819      	ldrb	r1, [r3, #0]
 8006ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f005 fc86 	bl	800c3e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006af2:	2201      	movs	r2, #1
 8006af4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006af6:	4b4b      	ldr	r3, [pc, #300]	; (8006c24 <USBD_CDC_Init+0x1ec>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 020f 	and.w	r2, r3, #15
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	3326      	adds	r3, #38	; 0x26
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e035      	b.n	8006b7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b12:	4b42      	ldr	r3, [pc, #264]	; (8006c1c <USBD_CDC_Init+0x1e4>)
 8006b14:	7819      	ldrb	r1, [r3, #0]
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	2202      	movs	r2, #2
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f005 fc63 	bl	800c3e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b20:	4b3e      	ldr	r3, [pc, #248]	; (8006c1c <USBD_CDC_Init+0x1e4>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3324      	adds	r3, #36	; 0x24
 8006b36:	2201      	movs	r2, #1
 8006b38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	2202      	movs	r2, #2
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f005 fc4f 	bl	800c3e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b48:	4b35      	ldr	r3, [pc, #212]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b60:	2201      	movs	r2, #1
 8006b62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b64:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <USBD_CDC_Init+0x1ec>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3326      	adds	r3, #38	; 0x26
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b7e:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <USBD_CDC_Init+0x1ec>)
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	2308      	movs	r3, #8
 8006b84:	2203      	movs	r2, #3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f005 fc2d 	bl	800c3e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <USBD_CDC_Init+0x1ec>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3324      	adds	r3, #36	; 0x24
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	33b0      	adds	r3, #176	; 0xb0
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e018      	b.n	8006c12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7c1b      	ldrb	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006bea:	7819      	ldrb	r1, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f005 fce4 	bl	800c5c4 <USBD_LL_PrepareReceive>
 8006bfc:	e008      	b.n	8006c10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bfe:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <USBD_CDC_Init+0x1e8>)
 8006c00:	7819      	ldrb	r1, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f005 fcda 	bl	800c5c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000093 	.word	0x20000093
 8006c20:	20000094 	.word	0x20000094
 8006c24:	20000095 	.word	0x20000095

08006c28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c34:	4b3a      	ldr	r3, [pc, #232]	; (8006d20 <USBD_CDC_DeInit+0xf8>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f005 fbf9 	bl	800c432 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c40:	4b37      	ldr	r3, [pc, #220]	; (8006d20 <USBD_CDC_DeInit+0xf8>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3324      	adds	r3, #36	; 0x24
 8006c56:	2200      	movs	r2, #0
 8006c58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c5a:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <USBD_CDC_DeInit+0xfc>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f005 fbe6 	bl	800c432 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c66:	4b2f      	ldr	r3, [pc, #188]	; (8006d24 <USBD_CDC_DeInit+0xfc>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c7e:	2200      	movs	r2, #0
 8006c80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c82:	4b29      	ldr	r3, [pc, #164]	; (8006d28 <USBD_CDC_DeInit+0x100>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f005 fbd2 	bl	800c432 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <USBD_CDC_DeInit+0x100>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3324      	adds	r3, #36	; 0x24
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ca8:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <USBD_CDC_DeInit+0x100>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3326      	adds	r3, #38	; 0x26
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	32b0      	adds	r2, #176	; 0xb0
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01f      	beq.n	8006d14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	33b0      	adds	r3, #176	; 0xb0
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32b0      	adds	r2, #176	; 0xb0
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f005 fca6 	bl	800c648 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32b0      	adds	r2, #176	; 0xb0
 8006d06:	2100      	movs	r1, #0
 8006d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000093 	.word	0x20000093
 8006d24:	20000094 	.word	0x20000094
 8006d28:	20000095 	.word	0x20000095

08006d2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	32b0      	adds	r2, #176	; 0xb0
 8006d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e0bf      	b.n	8006edc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d050      	beq.n	8006e0a <USBD_CDC_Setup+0xde>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	f040 80af 	bne.w	8006ecc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	88db      	ldrh	r3, [r3, #6]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d03a      	beq.n	8006dec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	b25b      	sxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	da1b      	bge.n	8006db8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	33b0      	adds	r3, #176	; 0xb0
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	88d2      	ldrh	r2, [r2, #6]
 8006d9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	88db      	ldrh	r3, [r3, #6]
 8006da2:	2b07      	cmp	r3, #7
 8006da4:	bf28      	it	cs
 8006da6:	2307      	movcs	r3, #7
 8006da8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	89fa      	ldrh	r2, [r7, #14]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fd43 	bl	800883c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006db6:	e090      	b.n	8006eda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785a      	ldrb	r2, [r3, #1]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8006dc8:	d803      	bhi.n	8006dd2 <USBD_CDC_Setup+0xa6>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	e000      	b.n	8006dd4 <USBD_CDC_Setup+0xa8>
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dda:	6939      	ldr	r1, [r7, #16]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006de2:	461a      	mov	r2, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fd55 	bl	8008894 <USBD_CtlPrepareRx>
      break;
 8006dea:	e076      	b.n	8006eda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	33b0      	adds	r3, #176	; 0xb0
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	7850      	ldrb	r0, [r2, #1]
 8006e02:	2200      	movs	r2, #0
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	4798      	blx	r3
      break;
 8006e08:	e067      	b.n	8006eda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b0b      	cmp	r3, #11
 8006e10:	d851      	bhi.n	8006eb6 <USBD_CDC_Setup+0x18a>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_CDC_Setup+0xec>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e49 	.word	0x08006e49
 8006e1c:	08006ec5 	.word	0x08006ec5
 8006e20:	08006eb7 	.word	0x08006eb7
 8006e24:	08006eb7 	.word	0x08006eb7
 8006e28:	08006eb7 	.word	0x08006eb7
 8006e2c:	08006eb7 	.word	0x08006eb7
 8006e30:	08006eb7 	.word	0x08006eb7
 8006e34:	08006eb7 	.word	0x08006eb7
 8006e38:	08006eb7 	.word	0x08006eb7
 8006e3c:	08006eb7 	.word	0x08006eb7
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e9d 	.word	0x08006e9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d107      	bne.n	8006e64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e54:	f107 030a 	add.w	r3, r7, #10
 8006e58:	2202      	movs	r2, #2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fced 	bl	800883c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e62:	e032      	b.n	8006eca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fc77 	bl	800875a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e70:	e02b      	b.n	8006eca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d107      	bne.n	8006e8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e7e:	f107 030d 	add.w	r3, r7, #13
 8006e82:	2201      	movs	r2, #1
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fcd8 	bl	800883c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e8c:	e01d      	b.n	8006eca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fc62 	bl	800875a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e96:	2303      	movs	r3, #3
 8006e98:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9a:	e016      	b.n	8006eca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d00f      	beq.n	8006ec8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fc55 	bl	800875a <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006eb4:	e008      	b.n	8006ec8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fc4e 	bl	800875a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec2:	e002      	b.n	8006eca <USBD_CDC_Setup+0x19e>
          break;
 8006ec4:	bf00      	nop
 8006ec6:	e008      	b.n	8006eda <USBD_CDC_Setup+0x1ae>
          break;
 8006ec8:	bf00      	nop
      }
      break;
 8006eca:	e006      	b.n	8006eda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fc43 	bl	800875a <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	32b0      	adds	r2, #176	; 0xb0
 8006f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e065      	b.n	8006fda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	32b0      	adds	r2, #176	; 0xb0
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	3318      	adds	r3, #24
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02f      	beq.n	8006f98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3318      	adds	r3, #24
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	f003 010f 	and.w	r1, r3, #15
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	440b      	add	r3, r1
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4403      	add	r3, r0
 8006f60:	3348      	adds	r3, #72	; 0x48
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d112      	bne.n	8006f98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3318      	adds	r3, #24
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f8a:	78f9      	ldrb	r1, [r7, #3]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f005 faf6 	bl	800c582 <USBD_LL_Transmit>
 8006f96:	e01f      	b.n	8006fd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	33b0      	adds	r3, #176	; 0xb0
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d010      	beq.n	8006fd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	33b0      	adds	r3, #176	; 0xb0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32b0      	adds	r2, #176	; 0xb0
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32b0      	adds	r2, #176	; 0xb0
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e01a      	b.n	800704a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f005 faf4 	bl	800c606 <USBD_LL_GetRxDataSize>
 800701e:	4602      	mov	r2, r0
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	33b0      	adds	r3, #176	; 0xb0
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007044:	4611      	mov	r1, r2
 8007046:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	32b0      	adds	r2, #176	; 0xb0
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e025      	b.n	80070c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	33b0      	adds	r3, #176	; 0xb0
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <USBD_CDC_EP0_RxReady+0x6c>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800708e:	2bff      	cmp	r3, #255	; 0xff
 8007090:	d015      	beq.n	80070be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	33b0      	adds	r3, #176	; 0xb0
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070b2:	b292      	uxth	r2, r2
 80070b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070d0:	2182      	movs	r1, #130	; 0x82
 80070d2:	4818      	ldr	r0, [pc, #96]	; (8007134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070d4:	f000 fd09 	bl	8007aea <USBD_GetEpDesc>
 80070d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070da:	2101      	movs	r1, #1
 80070dc:	4815      	ldr	r0, [pc, #84]	; (8007134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070de:	f000 fd04 	bl	8007aea <USBD_GetEpDesc>
 80070e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070e4:	2181      	movs	r1, #129	; 0x81
 80070e6:	4813      	ldr	r0, [pc, #76]	; (8007134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070e8:	f000 fcff 	bl	8007aea <USBD_GetEpDesc>
 80070ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2210      	movs	r2, #16
 80070f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d006      	beq.n	800710e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2200      	movs	r2, #0
 8007104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007108:	711a      	strb	r2, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711c:	711a      	strb	r2, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2243      	movs	r2, #67	; 0x43
 8007126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000050 	.word	0x20000050

08007138 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007140:	2182      	movs	r1, #130	; 0x82
 8007142:	4818      	ldr	r0, [pc, #96]	; (80071a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007144:	f000 fcd1 	bl	8007aea <USBD_GetEpDesc>
 8007148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800714a:	2101      	movs	r1, #1
 800714c:	4815      	ldr	r0, [pc, #84]	; (80071a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800714e:	f000 fccc 	bl	8007aea <USBD_GetEpDesc>
 8007152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007154:	2181      	movs	r1, #129	; 0x81
 8007156:	4813      	ldr	r0, [pc, #76]	; (80071a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007158:	f000 fcc7 	bl	8007aea <USBD_GetEpDesc>
 800715c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2210      	movs	r2, #16
 8007168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d006      	beq.n	800717e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2200      	movs	r2, #0
 8007174:	711a      	strb	r2, [r3, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f042 0202 	orr.w	r2, r2, #2
 800717c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d006      	beq.n	8007192 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	711a      	strb	r2, [r3, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f042 0202 	orr.w	r2, r2, #2
 8007190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2243      	movs	r2, #67	; 0x43
 8007196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007198:	4b02      	ldr	r3, [pc, #8]	; (80071a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000050 	.word	0x20000050

080071a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b0:	2182      	movs	r1, #130	; 0x82
 80071b2:	4818      	ldr	r0, [pc, #96]	; (8007214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071b4:	f000 fc99 	bl	8007aea <USBD_GetEpDesc>
 80071b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ba:	2101      	movs	r1, #1
 80071bc:	4815      	ldr	r0, [pc, #84]	; (8007214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071be:	f000 fc94 	bl	8007aea <USBD_GetEpDesc>
 80071c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071c4:	2181      	movs	r1, #129	; 0x81
 80071c6:	4813      	ldr	r0, [pc, #76]	; (8007214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071c8:	f000 fc8f 	bl	8007aea <USBD_GetEpDesc>
 80071cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2210      	movs	r2, #16
 80071d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d006      	beq.n	80071ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e8:	711a      	strb	r2, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071fc:	711a      	strb	r2, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2243      	movs	r2, #67	; 0x43
 8007206:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000050 	.word	0x20000050

08007218 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	220a      	movs	r2, #10
 8007224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007226:	4b03      	ldr	r3, [pc, #12]	; (8007234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	2000000c 	.word	0x2000000c

08007238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	e009      	b.n	8007260 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	; 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	32b0      	adds	r2, #176	; 0xb0
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	e008      	b.n	80072a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	32b0      	adds	r2, #176	; 0xb0
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e004      	b.n	80072de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32b0      	adds	r2, #176	; 0xb0
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32b0      	adds	r2, #176	; 0xb0
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	e018      	b.n	800734c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7c1b      	ldrb	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007322:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <USBD_CDC_ReceivePacket+0x68>)
 8007324:	7819      	ldrb	r1, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800732c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f005 f947 	bl	800c5c4 <USBD_LL_PrepareReceive>
 8007336:	e008      	b.n	800734a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <USBD_CDC_ReceivePacket+0x68>)
 800733a:	7819      	ldrb	r1, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f005 f93d 	bl	800c5c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000094 	.word	0x20000094

08007358 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e01f      	b.n	80073b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	79fa      	ldrb	r2, [r7, #7]
 80073a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f004 ffb7 	bl	800c318 <USBD_LL_Init>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e025      	b.n	800741c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32ae      	adds	r2, #174	; 0xae
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00f      	beq.n	800740c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32ae      	adds	r2, #174	; 0xae
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	f107 020e 	add.w	r2, r7, #14
 8007400:	4610      	mov	r0, r2
 8007402:	4798      	blx	r3
 8007404:	4602      	mov	r2, r0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f004 ffbf 	bl	800c3b0 <USBD_LL_Start>
 8007432:	4603      	mov	r3, r0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	4611      	mov	r1, r2
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	4611      	mov	r1, r2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 f908 	bl	80086e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074e4:	461a      	mov	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d01a      	beq.n	8007530 <USBD_LL_SetupStage+0x72>
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d822      	bhi.n	8007544 <USBD_LL_SetupStage+0x86>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <USBD_LL_SetupStage+0x4a>
 8007502:	2b01      	cmp	r3, #1
 8007504:	d00a      	beq.n	800751c <USBD_LL_SetupStage+0x5e>
 8007506:	e01d      	b.n	8007544 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fb5f 	bl	8007bd4 <USBD_StdDevReq>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
      break;
 800751a:	e020      	b.n	800755e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fbc7 	bl	8007cb8 <USBD_StdItfReq>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
      break;
 800752e:	e016      	b.n	800755e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc29 	bl	8007d90 <USBD_StdEPReq>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
      break;
 8007542:	e00c      	b.n	800755e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800754a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800754e:	b2db      	uxtb	r3, r3
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f004 ff8c 	bl	800c470 <USBD_LL_StallEP>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
      break;
 800755c:	bf00      	nop
  }

  return ret;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	460b      	mov	r3, r1
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d16e      	bne.n	800765e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800758e:	2b03      	cmp	r3, #3
 8007590:	f040 8098 	bne.w	80076c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d913      	bls.n	80075c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bf28      	it	cs
 80075ba:	4613      	movcs	r3, r2
 80075bc:	461a      	mov	r2, r3
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f001 f984 	bl	80088ce <USBD_CtlContinueRx>
 80075c6:	e07d      	b.n	80076c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d014      	beq.n	8007600 <USBD_LL_DataOutStage+0x98>
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d81d      	bhi.n	8007616 <USBD_LL_DataOutStage+0xae>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <USBD_LL_DataOutStage+0x7c>
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d003      	beq.n	80075ea <USBD_LL_DataOutStage+0x82>
 80075e2:	e018      	b.n	8007616 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75bb      	strb	r3, [r7, #22]
            break;
 80075e8:	e018      	b.n	800761c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fa5e 	bl	8007ab6 <USBD_CoreFindIF>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75bb      	strb	r3, [r7, #22]
            break;
 80075fe:	e00d      	b.n	800761c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007606:	b2db      	uxtb	r3, r3
 8007608:	4619      	mov	r1, r3
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa60 	bl	8007ad0 <USBD_CoreFindEP>
 8007610:	4603      	mov	r3, r0
 8007612:	75bb      	strb	r3, [r7, #22]
            break;
 8007614:	e002      	b.n	800761c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	75bb      	strb	r3, [r7, #22]
            break;
 800761a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800761c:	7dbb      	ldrb	r3, [r7, #22]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d119      	bne.n	8007656 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d113      	bne.n	8007656 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800762e:	7dba      	ldrb	r2, [r7, #22]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	32ae      	adds	r2, #174	; 0xae
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800763e:	7dba      	ldrb	r2, [r7, #22]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007646:	7dba      	ldrb	r2, [r7, #22]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	32ae      	adds	r2, #174	; 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f001 f94a 	bl	80088f0 <USBD_CtlSendStatus>
 800765c:	e032      	b.n	80076c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007664:	b2db      	uxtb	r3, r3
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fa31 	bl	8007ad0 <USBD_CoreFindEP>
 800766e:	4603      	mov	r3, r0
 8007670:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007672:	7dbb      	ldrb	r3, [r7, #22]
 8007674:	2bff      	cmp	r3, #255	; 0xff
 8007676:	d025      	beq.n	80076c4 <USBD_LL_DataOutStage+0x15c>
 8007678:	7dbb      	ldrb	r3, [r7, #22]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d122      	bne.n	80076c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b03      	cmp	r3, #3
 8007688:	d117      	bne.n	80076ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800768a:	7dba      	ldrb	r2, [r7, #22]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	32ae      	adds	r2, #174	; 0xae
 8007690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00f      	beq.n	80076ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800769a:	7dba      	ldrb	r2, [r7, #22]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076a2:	7dba      	ldrb	r2, [r7, #22]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	32ae      	adds	r2, #174	; 0xae
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	7afa      	ldrb	r2, [r7, #11]
 80076b0:	4611      	mov	r1, r2
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	e000      	b.n	80076c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	460b      	mov	r3, r1
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d16f      	bne.n	80077c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3314      	adds	r3, #20
 80076e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d15a      	bne.n	80077a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d914      	bls.n	8007728 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	461a      	mov	r2, r3
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 f8ac 	bl	8008872 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f004 ff4f 	bl	800c5c4 <USBD_LL_PrepareReceive>
 8007726:	e03f      	b.n	80077a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	429a      	cmp	r2, r3
 8007732:	d11c      	bne.n	800776e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800773c:	429a      	cmp	r2, r3
 800773e:	d316      	bcc.n	800776e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800774a:	429a      	cmp	r2, r3
 800774c:	d20f      	bcs.n	800776e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 f88d 	bl	8008872 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007760:	2300      	movs	r3, #0
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f004 ff2c 	bl	800c5c4 <USBD_LL_PrepareReceive>
 800776c:	e01c      	b.n	80077a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b03      	cmp	r3, #3
 8007778:	d10f      	bne.n	800779a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800779a:	2180      	movs	r1, #128	; 0x80
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f004 fe67 	bl	800c470 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f001 f8b7 	bl	8008916 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d03a      	beq.n	8007828 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fe42 	bl	800743c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077c0:	e032      	b.n	8007828 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f97f 	bl	8007ad0 <USBD_CoreFindEP>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	2bff      	cmp	r3, #255	; 0xff
 80077da:	d025      	beq.n	8007828 <USBD_LL_DataInStage+0x15a>
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d122      	bne.n	8007828 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d11c      	bne.n	8007828 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077ee:	7dfa      	ldrb	r2, [r7, #23]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	32ae      	adds	r2, #174	; 0xae
 80077f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d014      	beq.n	8007828 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077fe:	7dfa      	ldrb	r2, [r7, #23]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007806:	7dfa      	ldrb	r2, [r7, #23]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	32ae      	adds	r2, #174	; 0xae
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	7afa      	ldrb	r2, [r7, #11]
 8007814:	4611      	mov	r1, r2
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3
 800781a:	4603      	mov	r3, r0
 800781c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800781e:	7dbb      	ldrb	r3, [r7, #22]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007824:	7dbb      	ldrb	r3, [r7, #22]
 8007826:	e000      	b.n	800782a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d014      	beq.n	8007898 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6852      	ldr	r2, [r2, #4]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	4611      	mov	r1, r2
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f004 fda1 	bl	800c3e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2240      	movs	r2, #64	; 0x40
 80078b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078b4:	2340      	movs	r3, #64	; 0x40
 80078b6:	2200      	movs	r2, #0
 80078b8:	2180      	movs	r1, #128	; 0x80
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f004 fd93 	bl	800c3e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2240      	movs	r2, #64	; 0x40
 80078ca:	621a      	str	r2, [r3, #32]

  return ret;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	b2da      	uxtb	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2204      	movs	r2, #4
 8007910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b04      	cmp	r3, #4
 8007934:	d106      	bne.n	8007944 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d110      	bne.n	8007988 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	32ae      	adds	r2, #174	; 0xae
 80079a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e01c      	b.n	80079ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d115      	bne.n	80079ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	32ae      	adds	r2, #174	; 0xae
 80079ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	32ae      	adds	r2, #174	; 0xae
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	4611      	mov	r1, r2
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	32ae      	adds	r2, #174	; 0xae
 8007a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e01c      	b.n	8007a52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d115      	bne.n	8007a50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	; 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	32ae      	adds	r2, #174	; 0xae
 8007a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6852      	ldr	r2, [r2, #4]
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ac2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007adc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d920      	bls.n	8007b54 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b1a:	e013      	b.n	8007b44 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b1c:	f107 030a 	add.w	r3, r7, #10
 8007b20:	4619      	mov	r1, r3
 8007b22:	6978      	ldr	r0, [r7, #20]
 8007b24:	f000 f81b 	bl	8007b5e <USBD_GetNextDesc>
 8007b28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d108      	bne.n	8007b44 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	789b      	ldrb	r3, [r3, #2]
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d008      	beq.n	8007b52 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	897b      	ldrh	r3, [r7, #10]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d8e5      	bhi.n	8007b1c <USBD_GetEpDesc+0x32>
 8007b50:	e000      	b.n	8007b54 <USBD_GetEpDesc+0x6a>
          break;
 8007b52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b54:	693b      	ldr	r3, [r7, #16]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	881a      	ldrh	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	3301      	adds	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bb6:	8a3b      	ldrh	r3, [r7, #16]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d005      	beq.n	8007bfa <USBD_StdDevReq+0x26>
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d857      	bhi.n	8007ca2 <USBD_StdDevReq+0xce>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <USBD_StdDevReq+0x42>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d153      	bne.n	8007ca2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	32ae      	adds	r2, #174	; 0xae
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
      break;
 8007c14:	e04a      	b.n	8007cac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d83b      	bhi.n	8007c96 <USBD_StdDevReq+0xc2>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <USBD_StdDevReq+0x50>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007c8d 	.word	0x08007c8d
 8007c2c:	08007c97 	.word	0x08007c97
 8007c30:	08007c83 	.word	0x08007c83
 8007c34:	08007c97 	.word	0x08007c97
 8007c38:	08007c57 	.word	0x08007c57
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c97 	.word	0x08007c97
 8007c44:	08007c6f 	.word	0x08007c6f
 8007c48:	08007c61 	.word	0x08007c61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa3c 	bl	80080cc <USBD_GetDescriptor>
          break;
 8007c54:	e024      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fba1 	bl	80083a0 <USBD_SetAddress>
          break;
 8007c5e:	e01f      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fbe0 	bl	8008428 <USBD_SetConfig>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c6c:	e018      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fc83 	bl	800857c <USBD_GetConfig>
          break;
 8007c76:	e013      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fcb4 	bl	80085e8 <USBD_GetStatus>
          break;
 8007c80:	e00e      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fce3 	bl	8008650 <USBD_SetFeature>
          break;
 8007c8a:	e009      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fd07 	bl	80086a2 <USBD_ClrFeature>
          break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fd5e 	bl	800875a <USBD_CtlError>
          break;
 8007c9e:	bf00      	nop
      }
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd58 	bl	800875a <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d005      	beq.n	8007cde <USBD_StdItfReq+0x26>
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d852      	bhi.n	8007d7c <USBD_StdItfReq+0xc4>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <USBD_StdItfReq+0x26>
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d14e      	bne.n	8007d7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d840      	bhi.n	8007d6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	889b      	ldrh	r3, [r3, #4]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d836      	bhi.n	8007d64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	889b      	ldrh	r3, [r3, #4]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fed9 	bl	8007ab6 <USBD_CoreFindIF>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2bff      	cmp	r3, #255	; 0xff
 8007d0c:	d01d      	beq.n	8007d4a <USBD_StdItfReq+0x92>
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11a      	bne.n	8007d4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d14:	7bba      	ldrb	r2, [r7, #14]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	32ae      	adds	r2, #174	; 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00f      	beq.n	8007d44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d24:	7bba      	ldrb	r2, [r7, #14]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d2c:	7bba      	ldrb	r2, [r7, #14]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	32ae      	adds	r2, #174	; 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d42:	e004      	b.n	8007d4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d48:	e001      	b.n	8007d4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d110      	bne.n	8007d78 <USBD_StdItfReq+0xc0>
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fdc7 	bl	80088f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d62:	e009      	b.n	8007d78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fcf7 	bl	800875a <USBD_CtlError>
          break;
 8007d6c:	e004      	b.n	8007d78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fcf2 	bl	800875a <USBD_CtlError>
          break;
 8007d76:	e000      	b.n	8007d7a <USBD_StdItfReq+0xc2>
          break;
 8007d78:	bf00      	nop
      }
      break;
 8007d7a:	e004      	b.n	8007d86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fceb 	bl	800875a <USBD_CtlError>
      break;
 8007d84:	bf00      	nop
  }

  return ret;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	889b      	ldrh	r3, [r3, #4]
 8007da2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d007      	beq.n	8007dc0 <USBD_StdEPReq+0x30>
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	f200 817f 	bhi.w	80080b4 <USBD_StdEPReq+0x324>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d02a      	beq.n	8007e10 <USBD_StdEPReq+0x80>
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	f040 817a 	bne.w	80080b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fe83 	bl	8007ad0 <USBD_CoreFindEP>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dce:	7b7b      	ldrb	r3, [r7, #13]
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	f000 8174 	beq.w	80080be <USBD_StdEPReq+0x32e>
 8007dd6:	7b7b      	ldrb	r3, [r7, #13]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 8170 	bne.w	80080be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007dde:	7b7a      	ldrb	r2, [r7, #13]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007de6:	7b7a      	ldrb	r2, [r7, #13]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8163 	beq.w	80080be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007df8:	7b7a      	ldrb	r2, [r7, #13]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32ae      	adds	r2, #174	; 0xae
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e0e:	e156      	b.n	80080be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d008      	beq.n	8007e2a <USBD_StdEPReq+0x9a>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	f300 8145 	bgt.w	80080a8 <USBD_StdEPReq+0x318>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 809b 	beq.w	8007f5a <USBD_StdEPReq+0x1ca>
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d03c      	beq.n	8007ea2 <USBD_StdEPReq+0x112>
 8007e28:	e13e      	b.n	80080a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d002      	beq.n	8007e3c <USBD_StdEPReq+0xac>
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d016      	beq.n	8007e68 <USBD_StdEPReq+0xd8>
 8007e3a:	e02c      	b.n	8007e96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <USBD_StdEPReq+0xce>
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d00a      	beq.n	8007e5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f004 fb0f 	bl	800c470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f004 fb0b 	bl	800c470 <USBD_LL_StallEP>
 8007e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e5c:	e020      	b.n	8007ea0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc7a 	bl	800875a <USBD_CtlError>
              break;
 8007e66:	e01b      	b.n	8007ea0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <USBD_StdEPReq+0xfe>
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b80      	cmp	r3, #128	; 0x80
 8007e7a:	d008      	beq.n	8007e8e <USBD_StdEPReq+0xfe>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	88db      	ldrh	r3, [r3, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f004 faf1 	bl	800c470 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fd2e 	bl	80088f0 <USBD_CtlSendStatus>

              break;
 8007e94:	e004      	b.n	8007ea0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc5e 	bl	800875a <USBD_CtlError>
              break;
 8007e9e:	bf00      	nop
          }
          break;
 8007ea0:	e107      	b.n	80080b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d002      	beq.n	8007eb4 <USBD_StdEPReq+0x124>
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d016      	beq.n	8007ee0 <USBD_StdEPReq+0x150>
 8007eb2:	e04b      	b.n	8007f4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <USBD_StdEPReq+0x146>
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b80      	cmp	r3, #128	; 0x80
 8007ebe:	d00a      	beq.n	8007ed6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f004 fad3 	bl	800c470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f004 facf 	bl	800c470 <USBD_LL_StallEP>
 8007ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ed4:	e040      	b.n	8007f58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc3e 	bl	800875a <USBD_CtlError>
              break;
 8007ede:	e03b      	b.n	8007f58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	885b      	ldrh	r3, [r3, #2]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d136      	bne.n	8007f56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f004 fad9 	bl	800c4ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fcf7 	bl	80088f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fde2 	bl	8007ad0 <USBD_CoreFindEP>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f10:	7b7b      	ldrb	r3, [r7, #13]
 8007f12:	2bff      	cmp	r3, #255	; 0xff
 8007f14:	d01f      	beq.n	8007f56 <USBD_StdEPReq+0x1c6>
 8007f16:	7b7b      	ldrb	r3, [r7, #13]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d11c      	bne.n	8007f56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f1c:	7b7a      	ldrb	r2, [r7, #13]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f24:	7b7a      	ldrb	r2, [r7, #13]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	; 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f34:	7b7a      	ldrb	r2, [r7, #13]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	32ae      	adds	r2, #174	; 0xae
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f4a:	e004      	b.n	8007f56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fc03 	bl	800875a <USBD_CtlError>
              break;
 8007f54:	e000      	b.n	8007f58 <USBD_StdEPReq+0x1c8>
              break;
 8007f56:	bf00      	nop
          }
          break;
 8007f58:	e0ab      	b.n	80080b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d002      	beq.n	8007f6c <USBD_StdEPReq+0x1dc>
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d032      	beq.n	8007fd0 <USBD_StdEPReq+0x240>
 8007f6a:	e097      	b.n	800809c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d007      	beq.n	8007f82 <USBD_StdEPReq+0x1f2>
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d004      	beq.n	8007f82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fbed 	bl	800875a <USBD_CtlError>
                break;
 8007f80:	e091      	b.n	80080a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da0b      	bge.n	8007fa2 <USBD_StdEPReq+0x212>
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	3310      	adds	r3, #16
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	e00b      	b.n	8007fba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3304      	adds	r3, #4
 8007fba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc37 	bl	800883c <USBD_CtlSendData>
              break;
 8007fce:	e06a      	b.n	80080a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da11      	bge.n	8007ffc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	f003 020f 	and.w	r2, r3, #15
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d117      	bne.n	8008022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fbb0 	bl	800875a <USBD_CtlError>
                  break;
 8007ffa:	e054      	b.n	80080a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f003 020f 	and.w	r2, r3, #15
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	440b      	add	r3, r1
 800800e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb9d 	bl	800875a <USBD_CtlError>
                  break;
 8008020:	e041      	b.n	80080a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	da0b      	bge.n	8008042 <USBD_StdEPReq+0x2b2>
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	3310      	adds	r3, #16
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	3304      	adds	r3, #4
 8008040:	e00b      	b.n	800805a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008048:	4613      	mov	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	4413      	add	r3, r2
 8008058:	3304      	adds	r3, #4
 800805a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <USBD_StdEPReq+0x2d8>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d103      	bne.n	8008070 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e00e      	b.n	800808e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f004 fa39 	bl	800c4ec <USBD_LL_IsStallEP>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e002      	b.n	800808e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2202      	movs	r2, #2
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fbd1 	bl	800883c <USBD_CtlSendData>
              break;
 800809a:	e004      	b.n	80080a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fb5b 	bl	800875a <USBD_CtlError>
              break;
 80080a4:	bf00      	nop
          }
          break;
 80080a6:	e004      	b.n	80080b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb55 	bl	800875a <USBD_CtlError>
          break;
 80080b0:	bf00      	nop
      }
      break;
 80080b2:	e005      	b.n	80080c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fb4f 	bl	800875a <USBD_CtlError>
      break;
 80080bc:	e000      	b.n	80080c0 <USBD_StdEPReq+0x330>
      break;
 80080be:	bf00      	nop
  }

  return ret;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	f200 8128 	bhi.w	8008342 <USBD_GetDescriptor+0x276>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBD_GetDescriptor+0x2c>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008115 	.word	0x08008115
 80080fc:	0800812d 	.word	0x0800812d
 8008100:	0800816d 	.word	0x0800816d
 8008104:	08008343 	.word	0x08008343
 8008108:	08008343 	.word	0x08008343
 800810c:	080082e3 	.word	0x080082e3
 8008110:	0800830f 	.word	0x0800830f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	7c12      	ldrb	r2, [r2, #16]
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
      break;
 800812a:	e112      	b.n	8008352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7c1b      	ldrb	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	f107 0208 	add.w	r2, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	2202      	movs	r2, #2
 800814c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800814e:	e100      	b.n	8008352 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	f107 0208 	add.w	r2, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	2202      	movs	r2, #2
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	e0f2      	b.n	8008352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	885b      	ldrh	r3, [r3, #2]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b05      	cmp	r3, #5
 8008174:	f200 80ac 	bhi.w	80082d0 <USBD_GetDescriptor+0x204>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBD_GetDescriptor+0xb4>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	08008199 	.word	0x08008199
 8008184:	080081cd 	.word	0x080081cd
 8008188:	08008201 	.word	0x08008201
 800818c:	08008235 	.word	0x08008235
 8008190:	08008269 	.word	0x08008269
 8008194:	0800829d 	.word	0x0800829d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7c12      	ldrb	r2, [r2, #16]
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ba:	e091      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 facb 	bl	800875a <USBD_CtlError>
            err++;
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	3301      	adds	r3, #1
 80081c8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ca:	e089      	b.n	80082e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7c12      	ldrb	r2, [r2, #16]
 80081e4:	f107 0108 	add.w	r1, r7, #8
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ee:	e077      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fab1 	bl	800875a <USBD_CtlError>
            err++;
 80081f8:	7afb      	ldrb	r3, [r7, #11]
 80081fa:	3301      	adds	r3, #1
 80081fc:	72fb      	strb	r3, [r7, #11]
          break;
 80081fe:	e06f      	b.n	80082e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7c12      	ldrb	r2, [r2, #16]
 8008218:	f107 0108 	add.w	r1, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008222:	e05d      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa97 	bl	800875a <USBD_CtlError>
            err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
          break;
 8008232:	e055      	b.n	80082e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	7c12      	ldrb	r2, [r2, #16]
 800824c:	f107 0108 	add.w	r1, r7, #8
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
 8008254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008256:	e043      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa7d 	bl	800875a <USBD_CtlError>
            err++;
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	3301      	adds	r3, #1
 8008264:	72fb      	strb	r3, [r7, #11]
          break;
 8008266:	e03b      	b.n	80082e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800828a:	e029      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa63 	bl	800875a <USBD_CtlError>
            err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
          break;
 800829a:	e021      	b.n	80082e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7c12      	ldrb	r2, [r2, #16]
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082be:	e00f      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa49 	bl	800875a <USBD_CtlError>
            err++;
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	3301      	adds	r3, #1
 80082cc:	72fb      	strb	r3, [r7, #11]
          break;
 80082ce:	e007      	b.n	80082e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa41 	bl	800875a <USBD_CtlError>
          err++;
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	3301      	adds	r3, #1
 80082dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80082de:	bf00      	nop
      }
      break;
 80082e0:	e037      	b.n	8008352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7c1b      	ldrb	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	f107 0208 	add.w	r2, r7, #8
 80082f6:	4610      	mov	r0, r2
 80082f8:	4798      	blx	r3
 80082fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082fc:	e029      	b.n	8008352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fa2a 	bl	800875a <USBD_CtlError>
        err++;
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	3301      	adds	r3, #1
 800830a:	72fb      	strb	r3, [r7, #11]
      break;
 800830c:	e021      	b.n	8008352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	7c1b      	ldrb	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10d      	bne.n	8008332 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f107 0208 	add.w	r2, r7, #8
 8008322:	4610      	mov	r0, r2
 8008324:	4798      	blx	r3
 8008326:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	2207      	movs	r2, #7
 800832e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008330:	e00f      	b.n	8008352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa10 	bl	800875a <USBD_CtlError>
        err++;
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	3301      	adds	r3, #1
 800833e:	72fb      	strb	r3, [r7, #11]
      break;
 8008340:	e007      	b.n	8008352 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa08 	bl	800875a <USBD_CtlError>
      err++;
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	3301      	adds	r3, #1
 800834e:	72fb      	strb	r3, [r7, #11]
      break;
 8008350:	bf00      	nop
  }

  if (err != 0U)
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11e      	bne.n	8008396 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	88db      	ldrh	r3, [r3, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d016      	beq.n	800838e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008360:	893b      	ldrh	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00e      	beq.n	8008384 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	88da      	ldrh	r2, [r3, #6]
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	4293      	cmp	r3, r2
 800836e:	bf28      	it	cs
 8008370:	4613      	movcs	r3, r2
 8008372:	b29b      	uxth	r3, r3
 8008374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008376:	893b      	ldrh	r3, [r7, #8]
 8008378:	461a      	mov	r2, r3
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa5d 	bl	800883c <USBD_CtlSendData>
 8008382:	e009      	b.n	8008398 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9e7 	bl	800875a <USBD_CtlError>
 800838c:	e004      	b.n	8008398 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 faae 	bl	80088f0 <USBD_CtlSendStatus>
 8008394:	e000      	b.n	8008398 <USBD_GetDescriptor+0x2cc>
    return;
 8008396:	bf00      	nop
  }
}
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop

080083a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	889b      	ldrh	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d131      	bne.n	8008416 <USBD_SetAddress+0x76>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88db      	ldrh	r3, [r3, #6]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d12d      	bne.n	8008416 <USBD_SetAddress+0x76>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	885b      	ldrh	r3, [r3, #2]
 80083be:	2b7f      	cmp	r3, #127	; 0x7f
 80083c0:	d829      	bhi.n	8008416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	885b      	ldrh	r3, [r3, #2]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d104      	bne.n	80083e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9bc 	bl	800875a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e2:	e01d      	b.n	8008420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7bfa      	ldrb	r2, [r7, #15]
 80083e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f004 f8a7 	bl	800c544 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa7a 	bl	80088f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840a:	e009      	b.n	8008420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008414:	e004      	b.n	8008420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f99e 	bl	800875a <USBD_CtlError>
  }
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	4b4e      	ldr	r3, [pc, #312]	; (8008578 <USBD_SetConfig+0x150>)
 800843e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008440:	4b4d      	ldr	r3, [pc, #308]	; (8008578 <USBD_SetConfig+0x150>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d905      	bls.n	8008454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f985 	bl	800875a <USBD_CtlError>
    return USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	e08c      	b.n	800856e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d002      	beq.n	8008466 <USBD_SetConfig+0x3e>
 8008460:	2b03      	cmp	r3, #3
 8008462:	d029      	beq.n	80084b8 <USBD_SetConfig+0x90>
 8008464:	e075      	b.n	8008552 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008466:	4b44      	ldr	r3, [pc, #272]	; (8008578 <USBD_SetConfig+0x150>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d020      	beq.n	80084b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800846e:	4b42      	ldr	r3, [pc, #264]	; (8008578 <USBD_SetConfig+0x150>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008478:	4b3f      	ldr	r3, [pc, #252]	; (8008578 <USBD_SetConfig+0x150>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fe ffe7 	bl	8007452 <USBD_SetClassConfig>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f962 	bl	800875a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800849e:	e065      	b.n	800856c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fa25 	bl	80088f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2203      	movs	r2, #3
 80084aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ae:	e05d      	b.n	800856c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa1d 	bl	80088f0 <USBD_CtlSendStatus>
      break;
 80084b6:	e059      	b.n	800856c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084b8:	4b2f      	ldr	r3, [pc, #188]	; (8008578 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d112      	bne.n	80084e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80084c8:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <USBD_SetConfig+0x150>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084d2:	4b29      	ldr	r3, [pc, #164]	; (8008578 <USBD_SetConfig+0x150>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fe ffd6 	bl	800748a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa06 	bl	80088f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084e4:	e042      	b.n	800856c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <USBD_SetConfig+0x150>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d02a      	beq.n	800854a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fe ffc4 	bl	800748a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <USBD_SetConfig+0x150>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <USBD_SetConfig+0x150>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fe ff9d 	bl	8007452 <USBD_SetClassConfig>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00f      	beq.n	8008542 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f918 	bl	800875a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fe ffa9 	bl	800748a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008540:	e014      	b.n	800856c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9d4 	bl	80088f0 <USBD_CtlSendStatus>
      break;
 8008548:	e010      	b.n	800856c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f9d0 	bl	80088f0 <USBD_CtlSendStatus>
      break;
 8008550:	e00c      	b.n	800856c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f900 	bl	800875a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800855a:	4b07      	ldr	r3, [pc, #28]	; (8008578 <USBD_SetConfig+0x150>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe ff92 	bl	800748a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	73fb      	strb	r3, [r7, #15]
      break;
 800856a:	bf00      	nop
  }

  return ret;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000830 	.word	0x20000830

0800857c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d004      	beq.n	8008598 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8e2 	bl	800875a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008596:	e023      	b.n	80085e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	dc02      	bgt.n	80085aa <USBD_GetConfig+0x2e>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc03      	bgt.n	80085b0 <USBD_GetConfig+0x34>
 80085a8:	e015      	b.n	80085d6 <USBD_GetConfig+0x5a>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d00b      	beq.n	80085c6 <USBD_GetConfig+0x4a>
 80085ae:	e012      	b.n	80085d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3308      	adds	r3, #8
 80085ba:	2201      	movs	r2, #1
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f93c 	bl	800883c <USBD_CtlSendData>
        break;
 80085c4:	e00c      	b.n	80085e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3304      	adds	r3, #4
 80085ca:	2201      	movs	r2, #1
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f934 	bl	800883c <USBD_CtlSendData>
        break;
 80085d4:	e004      	b.n	80085e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8be 	bl	800875a <USBD_CtlError>
        break;
 80085de:	bf00      	nop
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d81e      	bhi.n	800863e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	88db      	ldrh	r3, [r3, #6]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d004      	beq.n	8008612 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8a5 	bl	800875a <USBD_CtlError>
        break;
 8008610:	e01a      	b.n	8008648 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f043 0202 	orr.w	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	330c      	adds	r3, #12
 8008632:	2202      	movs	r2, #2
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f900 	bl	800883c <USBD_CtlSendData>
      break;
 800863c:	e004      	b.n	8008648 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f88a 	bl	800875a <USBD_CtlError>
      break;
 8008646:	bf00      	nop
  }
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	885b      	ldrh	r3, [r3, #2]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d107      	bne.n	8008672 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f940 	bl	80088f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008670:	e013      	b.n	800869a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d10b      	bne.n	8008692 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	889b      	ldrh	r3, [r3, #4]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	b29b      	uxth	r3, r3
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f930 	bl	80088f0 <USBD_CtlSendStatus>
}
 8008690:	e003      	b.n	800869a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f860 	bl	800875a <USBD_CtlError>
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d80b      	bhi.n	80086d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d10c      	bne.n	80086dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f910 	bl	80088f0 <USBD_CtlSendStatus>
      }
      break;
 80086d0:	e004      	b.n	80086dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f840 	bl	800875a <USBD_CtlError>
      break;
 80086da:	e000      	b.n	80086de <USBD_ClrFeature+0x3c>
      break;
 80086dc:	bf00      	nop
  }
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	781a      	ldrb	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781a      	ldrb	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff fa41 	bl	8007b98 <SWAPBYTE>
 8008716:	4603      	mov	r3, r0
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fa34 	bl	8007b98 <SWAPBYTE>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7ff fa27 	bl	8007b98 <SWAPBYTE>
 800874a:	4603      	mov	r3, r0
 800874c:	461a      	mov	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	80da      	strh	r2, [r3, #6]
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008764:	2180      	movs	r1, #128	; 0x80
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f003 fe82 	bl	800c470 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f003 fe7e 	bl	800c470 <USBD_LL_StallEP>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d036      	beq.n	8008800 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008796:	6938      	ldr	r0, [r7, #16]
 8008798:	f000 f836 	bl	8008808 <USBD_GetLen>
 800879c:	4603      	mov	r3, r0
 800879e:	3301      	adds	r3, #1
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	4413      	add	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	7812      	ldrb	r2, [r2, #0]
 80087b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	3301      	adds	r3, #1
 80087ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	2203      	movs	r2, #3
 80087c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	3301      	adds	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087cc:	e013      	b.n	80087f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	4413      	add	r3, r2
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	7812      	ldrb	r2, [r2, #0]
 80087d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3301      	adds	r3, #1
 80087de:	613b      	str	r3, [r7, #16]
    idx++;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	3301      	adds	r3, #1
 80087e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4413      	add	r3, r2
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	3301      	adds	r3, #1
 80087f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e7      	bne.n	80087ce <USBD_GetString+0x52>
 80087fe:	e000      	b.n	8008802 <USBD_GetString+0x86>
    return;
 8008800:	bf00      	nop
  }
}
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008818:	e005      	b.n	8008826 <USBD_GetLen+0x1e>
  {
    len++;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	3301      	adds	r3, #1
 800881e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	3301      	adds	r3, #1
 8008824:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f5      	bne.n	800881a <USBD_GetLen+0x12>
  }

  return len;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2202      	movs	r2, #2
 800884c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f003 fe8d 	bl	800c582 <USBD_LL_Transmit>

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	2100      	movs	r1, #0
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f003 fe7c 	bl	800c582 <USBD_LL_Transmit>

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2203      	movs	r2, #3
 80088a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	2100      	movs	r1, #0
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f003 fe80 	bl	800c5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	2100      	movs	r1, #0
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f003 fe6f 	bl	800c5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2204      	movs	r2, #4
 80088fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008900:	2300      	movs	r3, #0
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f003 fe3b 	bl	800c582 <USBD_LL_Transmit>

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2205      	movs	r2, #5
 8008922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008926:	2300      	movs	r3, #0
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f003 fe49 	bl	800c5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <__NVIC_SetPriority>:
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894c:	2b00      	cmp	r3, #0
 800894e:	db0a      	blt.n	8008966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	b2da      	uxtb	r2, r3
 8008954:	490c      	ldr	r1, [pc, #48]	; (8008988 <__NVIC_SetPriority+0x4c>)
 8008956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895a:	0112      	lsls	r2, r2, #4
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	440b      	add	r3, r1
 8008960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008964:	e00a      	b.n	800897c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	b2da      	uxtb	r2, r3
 800896a:	4908      	ldr	r1, [pc, #32]	; (800898c <__NVIC_SetPriority+0x50>)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	3b04      	subs	r3, #4
 8008974:	0112      	lsls	r2, r2, #4
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	440b      	add	r3, r1
 800897a:	761a      	strb	r2, [r3, #24]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	e000e100 	.word	0xe000e100
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <SysTick_Handler+0x1c>)
 8008996:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008998:	f002 f830 	bl	800a9fc <xTaskGetSchedulerState>
 800899c:	4603      	mov	r3, r0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d001      	beq.n	80089a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089a2:	f002 ff19 	bl	800b7d8 <xPortSysTickHandler>
  }
}
 80089a6:	bf00      	nop
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	e000e010 	.word	0xe000e010

080089b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089b4:	2100      	movs	r1, #0
 80089b6:	f06f 0004 	mvn.w	r0, #4
 80089ba:	f7ff ffbf 	bl	800893c <__NVIC_SetPriority>
#endif
}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ca:	f3ef 8305 	mrs	r3, IPSR
 80089ce:	603b      	str	r3, [r7, #0]
  return(result);
 80089d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089d6:	f06f 0305 	mvn.w	r3, #5
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	e00c      	b.n	80089f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089de:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <osKernelInitialize+0x44>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d105      	bne.n	80089f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089e6:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <osKernelInitialize+0x44>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	e002      	b.n	80089f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089f8:	687b      	ldr	r3, [r7, #4]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000834 	.word	0x20000834

08008a0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a12:	f3ef 8305 	mrs	r3, IPSR
 8008a16:	603b      	str	r3, [r7, #0]
  return(result);
 8008a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a1e:	f06f 0305 	mvn.w	r3, #5
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e010      	b.n	8008a48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <osKernelStart+0x48>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d109      	bne.n	8008a42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a2e:	f7ff ffbf 	bl	80089b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a32:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <osKernelStart+0x48>)
 8008a34:	2202      	movs	r2, #2
 8008a36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a38:	f001 fb88 	bl	800a14c <vTaskStartScheduler>
      stat = osOK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	e002      	b.n	8008a48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a48:	687b      	ldr	r3, [r7, #4]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000834 	.word	0x20000834

08008a58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08e      	sub	sp, #56	; 0x38
 8008a5c:	af04      	add	r7, sp, #16
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a68:	f3ef 8305 	mrs	r3, IPSR
 8008a6c:	617b      	str	r3, [r7, #20]
  return(result);
 8008a6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d17e      	bne.n	8008b72 <osThreadNew+0x11a>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d07b      	beq.n	8008b72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a7a:	2380      	movs	r3, #128	; 0x80
 8008a7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a7e:	2318      	movs	r3, #24
 8008a80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d045      	beq.n	8008b1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <osThreadNew+0x48>
        name = attr->name;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d008      	beq.n	8008ac6 <osThreadNew+0x6e>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b38      	cmp	r3, #56	; 0x38
 8008ab8:	d805      	bhi.n	8008ac6 <osThreadNew+0x6e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <osThreadNew+0x72>
        return (NULL);
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e054      	b.n	8008b74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	089b      	lsrs	r3, r3, #2
 8008ad8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <osThreadNew+0xa8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b5b      	cmp	r3, #91	; 0x5b
 8008ae8:	d90a      	bls.n	8008b00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <osThreadNew+0xa8>
        mem = 1;
 8008afa:	2301      	movs	r3, #1
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	e010      	b.n	8008b22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10c      	bne.n	8008b22 <osThreadNew+0xca>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <osThreadNew+0xca>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d104      	bne.n	8008b22 <osThreadNew+0xca>
          mem = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	e001      	b.n	8008b22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d110      	bne.n	8008b4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b30:	9202      	str	r2, [sp, #8]
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6a3a      	ldr	r2, [r7, #32]
 8008b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f001 f92e 	bl	8009da0 <xTaskCreateStatic>
 8008b44:	4603      	mov	r3, r0
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	e013      	b.n	8008b72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d110      	bne.n	8008b72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	f107 0310 	add.w	r3, r7, #16
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f001 f979 	bl	8009e5a <xTaskCreate>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d001      	beq.n	8008b72 <osThreadNew+0x11a>
            hTask = NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b72:	693b      	ldr	r3, [r7, #16]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3728      	adds	r7, #40	; 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b84:	f3ef 8305 	mrs	r3, IPSR
 8008b88:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <osDelay+0x1c>
    stat = osErrorISR;
 8008b90:	f06f 0305 	mvn.w	r3, #5
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e007      	b.n	8008ba8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fa9e 	bl	800a0e4 <vTaskDelay>
    }
  }

  return (stat);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b088      	sub	sp, #32
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bbe:	f3ef 8305 	mrs	r3, IPSR
 8008bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bc4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d174      	bne.n	8008cb4 <osMutexNew+0x102>
    if (attr != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	e001      	b.n	8008bdc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <osMutexNew+0x3a>
      rmtx = 1U;
 8008be6:	2301      	movs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e001      	b.n	8008bf0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d15c      	bne.n	8008cb4 <osMutexNew+0x102>
      mem = -1;
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d015      	beq.n	8008c32 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d006      	beq.n	8008c1c <osMutexNew+0x6a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b4f      	cmp	r3, #79	; 0x4f
 8008c14:	d902      	bls.n	8008c1c <osMutexNew+0x6a>
          mem = 1;
 8008c16:	2301      	movs	r3, #1
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	e00c      	b.n	8008c36 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d108      	bne.n	8008c36 <osMutexNew+0x84>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <osMutexNew+0x84>
            mem = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	e001      	b.n	8008c36 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d112      	bne.n	8008c62 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	4619      	mov	r1, r3
 8008c48:	2004      	movs	r0, #4
 8008c4a:	f000 fb18 	bl	800927e <xQueueCreateMutexStatic>
 8008c4e:	61f8      	str	r0, [r7, #28]
 8008c50:	e016      	b.n	8008c80 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	4619      	mov	r1, r3
 8008c58:	2001      	movs	r0, #1
 8008c5a:	f000 fb10 	bl	800927e <xQueueCreateMutexStatic>
 8008c5e:	61f8      	str	r0, [r7, #28]
 8008c60:	e00e      	b.n	8008c80 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10b      	bne.n	8008c80 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d004      	beq.n	8008c78 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008c6e:	2004      	movs	r0, #4
 8008c70:	f000 faed 	bl	800924e <xQueueCreateMutex>
 8008c74:	61f8      	str	r0, [r7, #28]
 8008c76:	e003      	b.n	8008c80 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f000 fae8 	bl	800924e <xQueueCreateMutex>
 8008c7e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <osMutexNew+0xee>
        if (attr != NULL) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <osMutexNew+0xe2>
          name = attr->name;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e001      	b.n	8008c98 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008c98:	68f9      	ldr	r1, [r7, #12]
 8008c9a:	69f8      	ldr	r0, [r7, #28]
 8008c9c:	f001 f822 	bl	8009ce4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d006      	beq.n	8008cb4 <osMutexNew+0x102>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f043 0301 	orr.w	r3, r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b086      	sub	sp, #24
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f023 0301 	bic.w	r3, r3, #1
 8008cce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cdc:	f3ef 8305 	mrs	r3, IPSR
 8008ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ce2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008ce8:	f06f 0305 	mvn.w	r3, #5
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e02c      	b.n	8008d4a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008cf6:	f06f 0303 	mvn.w	r3, #3
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	e025      	b.n	8008d4a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d011      	beq.n	8008d28 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6938      	ldr	r0, [r7, #16]
 8008d08:	f000 fb08 	bl	800931c <xQueueTakeMutexRecursive>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d01b      	beq.n	8008d4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008d18:	f06f 0301 	mvn.w	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	e014      	b.n	8008d4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008d20:	f06f 0302 	mvn.w	r3, #2
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e010      	b.n	8008d4a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6938      	ldr	r0, [r7, #16]
 8008d2c:	f000 fda6 	bl	800987c <xQueueSemaphoreTake>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d009      	beq.n	8008d4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008d3c:	f06f 0301 	mvn.w	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	e002      	b.n	8008d4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008d44:	f06f 0302 	mvn.w	r3, #2
 8008d48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008d4a:	697b      	ldr	r3, [r7, #20]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d70:	f3ef 8305 	mrs	r3, IPSR
 8008d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d76:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008d7c:	f06f 0305 	mvn.w	r3, #5
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	e01f      	b.n	8008dc4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008d8a:	f06f 0303 	mvn.w	r3, #3
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e018      	b.n	8008dc4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008d98:	6938      	ldr	r0, [r7, #16]
 8008d9a:	f000 fa8b 	bl	80092b4 <xQueueGiveMutexRecursive>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d00f      	beq.n	8008dc4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008da4:	f06f 0302 	mvn.w	r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	e00b      	b.n	8008dc4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008dac:	2300      	movs	r3, #0
 8008dae:	2200      	movs	r2, #0
 8008db0:	2100      	movs	r1, #0
 8008db2:	6938      	ldr	r0, [r7, #16]
 8008db4:	f000 fae8 	bl	8009388 <xQueueGenericSend>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d002      	beq.n	8008dc4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008dbe:	f06f 0302 	mvn.w	r3, #2
 8008dc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008dc4:	697b      	ldr	r3, [r7, #20]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4a07      	ldr	r2, [pc, #28]	; (8008dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8008de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4a06      	ldr	r2, [pc, #24]	; (8008e00 <vApplicationGetIdleTaskMemory+0x30>)
 8008de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2280      	movs	r2, #128	; 0x80
 8008dec:	601a      	str	r2, [r3, #0]
}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000838 	.word	0x20000838
 8008e00:	20000894 	.word	0x20000894

08008e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a07      	ldr	r2, [pc, #28]	; (8008e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4a06      	ldr	r2, [pc, #24]	; (8008e34 <vApplicationGetTimerTaskMemory+0x30>)
 8008e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	20000a94 	.word	0x20000a94
 8008e34:	20000af0 	.word	0x20000af0

08008e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f103 0208 	add.w	r2, r3, #8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f103 0208 	add.w	r2, r3, #8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f103 0208 	add.w	r2, r3, #8
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	e00c      	b.n	8008f14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3308      	adds	r3, #8
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e002      	b.n	8008f08 <vListInsert+0x2e>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d2f6      	bcs.n	8008f02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6892      	ldr	r2, [r2, #8]
 8008f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6852      	ldr	r2, [r2, #4]
 8008f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d103      	bne.n	8008f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fc6:	bf00      	nop
 8008fc8:	e7fe      	b.n	8008fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008fca:	f002 fb73 	bl	800b6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	441a      	add	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	68f9      	ldr	r1, [r7, #12]
 8008ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009000:	fb01 f303 	mul.w	r3, r1, r3
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	22ff      	movs	r2, #255	; 0xff
 800900e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	22ff      	movs	r2, #255	; 0xff
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d114      	bne.n	800904a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01a      	beq.n	800905e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3310      	adds	r3, #16
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fb17 	bl	800a660 <xTaskRemoveFromEventList>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <xQueueGenericReset+0xcc>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	e009      	b.n	800905e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3310      	adds	r3, #16
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fef2 	bl	8008e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3324      	adds	r3, #36	; 0x24
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff feed 	bl	8008e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f002 fb59 	bl	800b714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009062:	2301      	movs	r3, #1
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	e000ed04 	.word	0xe000ed04

08009070 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08e      	sub	sp, #56	; 0x38
 8009074:	af02      	add	r7, sp, #8
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10a      	bne.n	800909a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <xQueueGenericCreateStatic+0x52>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <xQueueGenericCreateStatic+0x56>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <xQueueGenericCreateStatic+0x58>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	623b      	str	r3, [r7, #32]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <xQueueGenericCreateStatic+0x7e>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <xQueueGenericCreateStatic+0x82>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <xQueueGenericCreateStatic+0x84>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	61fb      	str	r3, [r7, #28]
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800910e:	2350      	movs	r3, #80	; 0x50
 8009110:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b50      	cmp	r3, #80	; 0x50
 8009116:	d00a      	beq.n	800912e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	61bb      	str	r3, [r7, #24]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800912e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00d      	beq.n	8009156 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009142:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f83f 	bl	80091d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009158:	4618      	mov	r0, r3
 800915a:	3730      	adds	r7, #48	; 0x30
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	4613      	mov	r3, r2
 800916c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3350      	adds	r3, #80	; 0x50
 8009198:	4618      	mov	r0, r3
 800919a:	f002 fbad 	bl	800b8f8 <pvPortMalloc>
 800919e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d011      	beq.n	80091ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	3350      	adds	r3, #80	; 0x50
 80091ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091b8:	79fa      	ldrb	r2, [r7, #7]
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4613      	mov	r3, r2
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f805 	bl	80091d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091ca:	69bb      	ldr	r3, [r7, #24]
	}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3720      	adds	r7, #32
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	e002      	b.n	80091f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009202:	2101      	movs	r1, #1
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f7ff fecb 	bl	8008fa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009212:	bf00      	nop
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800923a:	2300      	movs	r3, #0
 800923c:	2200      	movs	r2, #0
 800923e:	2100      	movs	r1, #0
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f8a1 	bl	8009388 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	4603      	mov	r3, r0
 8009256:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009258:	2301      	movs	r3, #1
 800925a:	617b      	str	r3, [r7, #20]
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	461a      	mov	r2, r3
 8009264:	6939      	ldr	r1, [r7, #16]
 8009266:	6978      	ldr	r0, [r7, #20]
 8009268:	f7ff ff7a 	bl	8009160 <xQueueGenericCreate>
 800926c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff ffd3 	bl	800921a <prvInitialiseMutex>

		return xNewQueue;
 8009274:	68fb      	ldr	r3, [r7, #12]
	}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800927e:	b580      	push	{r7, lr}
 8009280:	b088      	sub	sp, #32
 8009282:	af02      	add	r7, sp, #8
 8009284:	4603      	mov	r3, r0
 8009286:	6039      	str	r1, [r7, #0]
 8009288:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800928a:	2301      	movs	r3, #1
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2200      	movs	r2, #0
 800929a:	6939      	ldr	r1, [r7, #16]
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	f7ff fee7 	bl	8009070 <xQueueGenericCreateStatic>
 80092a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ffb8 	bl	800921a <prvInitialiseMutex>

		return xNewQueue;
 80092aa:	68fb      	ldr	r3, [r7, #12]
	}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80092b4:	b590      	push	{r4, r7, lr}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	60fb      	str	r3, [r7, #12]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	689c      	ldr	r4, [r3, #8]
 80092e0:	f001 fb7c 	bl	800a9dc <xTaskGetCurrentTaskHandle>
 80092e4:	4603      	mov	r3, r0
 80092e6:	429c      	cmp	r4, r3
 80092e8:	d111      	bne.n	800930e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	1e5a      	subs	r2, r3, #1
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6938      	ldr	r0, [r7, #16]
 8009304:	f000 f840 	bl	8009388 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009308:	2301      	movs	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	e001      	b.n	8009312 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800930e:	2300      	movs	r3, #0
 8009310:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009312:	697b      	ldr	r3, [r7, #20]
	}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}

0800931c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800931c:	b590      	push	{r4, r7, lr}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	689c      	ldr	r4, [r3, #8]
 800934a:	f001 fb47 	bl	800a9dc <xTaskGetCurrentTaskHandle>
 800934e:	4603      	mov	r3, r0
 8009350:	429c      	cmp	r4, r3
 8009352:	d107      	bne.n	8009364 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800935e:	2301      	movs	r3, #1
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	e00c      	b.n	800937e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6938      	ldr	r0, [r7, #16]
 8009368:	f000 fa88 	bl	800987c <xQueueSemaphoreTake>
 800936c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800937e:	697b      	ldr	r3, [r7, #20]
	}
 8009380:	4618      	mov	r0, r3
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	bd90      	pop	{r4, r7, pc}

08009388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08e      	sub	sp, #56	; 0x38
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009396:	2300      	movs	r3, #0
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericSend+0x32>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <xQueueGenericSend+0x40>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <xQueueGenericSend+0x44>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <xQueueGenericSend+0x46>
 80093cc:	2300      	movs	r3, #0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <xQueueGenericSend+0x60>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d103      	bne.n	80093f6 <xQueueGenericSend+0x6e>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <xQueueGenericSend+0x72>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <xQueueGenericSend+0x74>
 80093fa:	2300      	movs	r3, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xQueueGenericSend+0x8e>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	623b      	str	r3, [r7, #32]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009416:	f001 faf1 	bl	800a9fc <xTaskGetSchedulerState>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <xQueueGenericSend+0x9e>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <xQueueGenericSend+0xa2>
 8009426:	2301      	movs	r3, #1
 8009428:	e000      	b.n	800942c <xQueueGenericSend+0xa4>
 800942a:	2300      	movs	r3, #0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <xQueueGenericSend+0xbe>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	61fb      	str	r3, [r7, #28]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009446:	f002 f935 	bl	800b6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009452:	429a      	cmp	r2, r3
 8009454:	d302      	bcc.n	800945c <xQueueGenericSend+0xd4>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d129      	bne.n	80094b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009462:	f000 fb2f 	bl	8009ac4 <prvCopyDataToQueue>
 8009466:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	d010      	beq.n	8009492 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	3324      	adds	r3, #36	; 0x24
 8009474:	4618      	mov	r0, r3
 8009476:	f001 f8f3 	bl	800a660 <xTaskRemoveFromEventList>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d013      	beq.n	80094a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009480:	4b3f      	ldr	r3, [pc, #252]	; (8009580 <xQueueGenericSend+0x1f8>)
 8009482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	e00a      	b.n	80094a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009498:	4b39      	ldr	r3, [pc, #228]	; (8009580 <xQueueGenericSend+0x1f8>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094a8:	f002 f934 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e063      	b.n	8009578 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094b6:	f002 f92d 	bl	800b714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e05c      	b.n	8009578 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d106      	bne.n	80094d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094c4:	f107 0314 	add.w	r3, r7, #20
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f92d 	bl	800a728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094ce:	2301      	movs	r3, #1
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094d2:	f002 f91f 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094d6:	f000 fe9f 	bl	800a218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094da:	f002 f8eb 	bl	800b6b4 <vPortEnterCritical>
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d103      	bne.n	80094f4 <xQueueGenericSend+0x16c>
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d103      	bne.n	800950a <xQueueGenericSend+0x182>
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950a:	f002 f903 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800950e:	1d3a      	adds	r2, r7, #4
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f001 f91c 	bl	800a754 <xTaskCheckForTimeOut>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d124      	bne.n	800956c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009524:	f000 fbc6 	bl	8009cb4 <prvIsQueueFull>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d018      	beq.n	8009560 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	3310      	adds	r3, #16
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f001 f842 	bl	800a5c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800953c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800953e:	f000 fb51 	bl	8009be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009542:	f000 fe77 	bl	800a234 <xTaskResumeAll>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f47f af7c 	bne.w	8009446 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <xQueueGenericSend+0x1f8>)
 8009550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	e772      	b.n	8009446 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009562:	f000 fb3f 	bl	8009be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009566:	f000 fe65 	bl	800a234 <xTaskResumeAll>
 800956a:	e76c      	b.n	8009446 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800956c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800956e:	f000 fb39 	bl	8009be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009572:	f000 fe5f 	bl	800a234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009578:	4618      	mov	r0, r3
 800957a:	3738      	adds	r7, #56	; 0x38
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	e000ed04 	.word	0xe000ed04

08009584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b090      	sub	sp, #64	; 0x40
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d103      	bne.n	80095c0 <xQueueGenericSendFromISR+0x3c>
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <xQueueGenericSendFromISR+0x40>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e000      	b.n	80095c6 <xQueueGenericSendFromISR+0x42>
 80095c4:	2300      	movs	r3, #0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d103      	bne.n	80095ee <xQueueGenericSendFromISR+0x6a>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <xQueueGenericSendFromISR+0x6e>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueGenericSendFromISR+0x70>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	623b      	str	r3, [r7, #32]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800960e:	f002 f933 	bl	800b878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009612:	f3ef 8211 	mrs	r2, BASEPRI
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	61fa      	str	r2, [r7, #28]
 8009628:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800962a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800962c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	429a      	cmp	r2, r3
 8009638:	d302      	bcc.n	8009640 <xQueueGenericSendFromISR+0xbc>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d12f      	bne.n	80096a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009656:	f000 fa35 	bl	8009ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800965a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d112      	bne.n	800968a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	d016      	beq.n	800969a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800966c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966e:	3324      	adds	r3, #36	; 0x24
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fff5 	bl	800a660 <xTaskRemoveFromEventList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00e      	beq.n	800969a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e007      	b.n	800969a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800968a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800968e:	3301      	adds	r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	b25a      	sxtb	r2, r3
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800969a:	2301      	movs	r3, #1
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800969e:	e001      	b.n	80096a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3740      	adds	r7, #64	; 0x40
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08c      	sub	sp, #48	; 0x30
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <xQueueReceive+0x30>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	623b      	str	r3, [r7, #32]
}
 80096e8:	bf00      	nop
 80096ea:	e7fe      	b.n	80096ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <xQueueReceive+0x3e>
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <xQueueReceive+0x42>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <xQueueReceive+0x44>
 80096fe:	2300      	movs	r3, #0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xQueueReceive+0x5e>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61fb      	str	r3, [r7, #28]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971a:	f001 f96f 	bl	800a9fc <xTaskGetSchedulerState>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d102      	bne.n	800972a <xQueueReceive+0x6e>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <xQueueReceive+0x72>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueReceive+0x74>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueReceive+0x8e>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61bb      	str	r3, [r7, #24]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f001 ffb3 	bl	800b6b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01f      	beq.n	800979a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800975a:	68b9      	ldr	r1, [r7, #8]
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f000 fa1b 	bl	8009b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	1e5a      	subs	r2, r3, #1
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	3310      	adds	r3, #16
 8009776:	4618      	mov	r0, r3
 8009778:	f000 ff72 	bl	800a660 <xTaskRemoveFromEventList>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009782:	4b3d      	ldr	r3, [pc, #244]	; (8009878 <xQueueReceive+0x1bc>)
 8009784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009792:	f001 ffbf 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8009796:	2301      	movs	r3, #1
 8009798:	e069      	b.n	800986e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097a0:	f001 ffb8 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e062      	b.n	800986e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ae:	f107 0310 	add.w	r3, r7, #16
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 ffb8 	bl	800a728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097bc:	f001 ffaa 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c0:	f000 fd2a 	bl	800a218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c4:	f001 ff76 	bl	800b6b4 <vPortEnterCritical>
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0x122>
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d103      	bne.n	80097f4 <xQueueReceive+0x138>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097f4:	f001 ff8e 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f8:	1d3a      	adds	r2, r7, #4
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f000 ffa7 	bl	800a754 <xTaskCheckForTimeOut>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d123      	bne.n	8009854 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800980c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980e:	f000 fa3b 	bl	8009c88 <prvIsQueueEmpty>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fecd 	bl	800a5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009828:	f000 f9dc 	bl	8009be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800982c:	f000 fd02 	bl	800a234 <xTaskResumeAll>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d189      	bne.n	800974a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <xQueueReceive+0x1bc>)
 8009838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	e780      	b.n	800974a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	f000 f9cb 	bl	8009be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800984e:	f000 fcf1 	bl	800a234 <xTaskResumeAll>
 8009852:	e77a      	b.n	800974a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009856:	f000 f9c5 	bl	8009be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800985a:	f000 fceb 	bl	800a234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800985e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009860:	f000 fa12 	bl	8009c88 <prvIsQueueEmpty>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f af6f 	beq.w	800974a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800986c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800986e:	4618      	mov	r0, r3
 8009870:	3730      	adds	r7, #48	; 0x30
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800988e:	2300      	movs	r3, #0
 8009890:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	623b      	str	r3, [r7, #32]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	61fb      	str	r3, [r7, #28]
}
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098cc:	f001 f896 	bl	800a9fc <xTaskGetSchedulerState>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d102      	bne.n	80098dc <xQueueSemaphoreTake+0x60>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <xQueueSemaphoreTake+0x64>
 80098dc:	2301      	movs	r3, #1
 80098de:	e000      	b.n	80098e2 <xQueueSemaphoreTake+0x66>
 80098e0:	2300      	movs	r3, #0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	61bb      	str	r3, [r7, #24]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098fc:	f001 feda 	bl	800b6b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	2b00      	cmp	r3, #0
 800990a:	d024      	beq.n	8009956 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800991c:	f001 f9e4 	bl	800ace8 <pvTaskIncrementMutexHeldCount>
 8009920:	4602      	mov	r2, r0
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00f      	beq.n	800994e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	3310      	adds	r3, #16
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fe94 	bl	800a660 <xTaskRemoveFromEventList>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800993e:	4b54      	ldr	r3, [pc, #336]	; (8009a90 <xQueueSemaphoreTake+0x214>)
 8009940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800994e:	f001 fee1 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8009952:	2301      	movs	r3, #1
 8009954:	e097      	b.n	8009a86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d111      	bne.n	8009980 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	617b      	str	r3, [r7, #20]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009978:	f001 fecc 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800997c:	2300      	movs	r3, #0
 800997e:	e082      	b.n	8009a86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009986:	f107 030c 	add.w	r3, r7, #12
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fecc 	bl	800a728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009990:	2301      	movs	r3, #1
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009994:	f001 febe 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009998:	f000 fc3e 	bl	800a218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800999c:	f001 fe8a 	bl	800b6b4 <vPortEnterCritical>
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099a6:	b25b      	sxtb	r3, r3
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d103      	bne.n	80099b6 <xQueueSemaphoreTake+0x13a>
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d103      	bne.n	80099cc <xQueueSemaphoreTake+0x150>
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099cc:	f001 fea2 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099d0:	463a      	mov	r2, r7
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 febb 	bl	800a754 <xTaskCheckForTimeOut>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d132      	bne.n	8009a4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099e6:	f000 f94f 	bl	8009c88 <prvIsQueueEmpty>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d026      	beq.n	8009a3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80099f8:	f001 fe5c 	bl	800b6b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f001 f819 	bl	800aa38 <xTaskPriorityInherit>
 8009a06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a08:	f001 fe84 	bl	800b714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	3324      	adds	r3, #36	; 0x24
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fdd3 	bl	800a5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a1c:	f000 f8e2 	bl	8009be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a20:	f000 fc08 	bl	800a234 <xTaskResumeAll>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f47f af68 	bne.w	80098fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009a2c:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <xQueueSemaphoreTake+0x214>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	e75e      	b.n	80098fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a40:	f000 f8d0 	bl	8009be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a44:	f000 fbf6 	bl	800a234 <xTaskResumeAll>
 8009a48:	e758      	b.n	80098fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a4c:	f000 f8ca 	bl	8009be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a50:	f000 fbf0 	bl	800a234 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a56:	f000 f917 	bl	8009c88 <prvIsQueueEmpty>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f43f af4d 	beq.w	80098fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00d      	beq.n	8009a84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a68:	f001 fe24 	bl	800b6b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a6e:	f000 f811 	bl	8009a94 <prvGetDisinheritPriorityAfterTimeout>
 8009a72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f8b2 	bl	800abe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a80:	f001 fe48 	bl	800b714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3738      	adds	r7, #56	; 0x38
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e001      	b.n	8009ab6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
	}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10d      	bne.n	8009afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d14d      	bne.n	8009b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 f80a 	bl	800ab08 <xTaskPriorityDisinherit>
 8009af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	609a      	str	r2, [r3, #8]
 8009afc:	e043      	b.n	8009b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d119      	bne.n	8009b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6858      	ldr	r0, [r3, #4]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	f002 fdf4 	bl	800c6fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	441a      	add	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d32b      	bcc.n	8009b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	605a      	str	r2, [r3, #4]
 8009b36:	e026      	b.n	8009b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68d8      	ldr	r0, [r3, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b40:	461a      	mov	r2, r3
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	f002 fdda 	bl	800c6fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b50:	425b      	negs	r3, r3
 8009b52:	441a      	add	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d207      	bcs.n	8009b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	425b      	negs	r3, r3
 8009b6e:	441a      	add	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d105      	bne.n	8009b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b8e:	697b      	ldr	r3, [r7, #20]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d018      	beq.n	8009bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	441a      	add	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d303      	bcc.n	8009bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68d9      	ldr	r1, [r3, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6838      	ldr	r0, [r7, #0]
 8009bd8:	f002 fd90 	bl	800c6fc <memcpy>
	}
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bec:	f001 fd62 	bl	800b6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bf8:	e011      	b.n	8009c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d012      	beq.n	8009c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3324      	adds	r3, #36	; 0x24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fd2a 	bl	800a660 <xTaskRemoveFromEventList>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c12:	f000 fe01 	bl	800a818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dce9      	bgt.n	8009bfa <prvUnlockQueue+0x16>
 8009c26:	e000      	b.n	8009c2a <prvUnlockQueue+0x46>
					break;
 8009c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c32:	f001 fd6f 	bl	800b714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c36:	f001 fd3d 	bl	800b6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c42:	e011      	b.n	8009c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d012      	beq.n	8009c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3310      	adds	r3, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fd05 	bl	800a660 <xTaskRemoveFromEventList>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c5c:	f000 fddc 	bl	800a818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dce9      	bgt.n	8009c44 <prvUnlockQueue+0x60>
 8009c70:	e000      	b.n	8009c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	22ff      	movs	r2, #255	; 0xff
 8009c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c7c:	f001 fd4a 	bl	800b714 <vPortExitCritical>
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c90:	f001 fd10 	bl	800b6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e001      	b.n	8009ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ca6:	f001 fd35 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009caa:	68fb      	ldr	r3, [r7, #12]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cbc:	f001 fcfa 	bl	800b6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d102      	bne.n	8009cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	e001      	b.n	8009cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cd6:	f001 fd1d 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e014      	b.n	8009d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cf4:	4a0f      	ldr	r2, [pc, #60]	; (8009d34 <vQueueAddToRegistry+0x50>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10b      	bne.n	8009d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d00:	490c      	ldr	r1, [pc, #48]	; (8009d34 <vQueueAddToRegistry+0x50>)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d0a:	4a0a      	ldr	r2, [pc, #40]	; (8009d34 <vQueueAddToRegistry+0x50>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	4413      	add	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d16:	e006      	b.n	8009d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	d9e7      	bls.n	8009cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000ef0 	.word	0x20000ef0

08009d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d48:	f001 fcb4 	bl	800b6b4 <vPortEnterCritical>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d103      	bne.n	8009d62 <vQueueWaitForMessageRestricted+0x2a>
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d68:	b25b      	sxtb	r3, r3
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d103      	bne.n	8009d78 <vQueueWaitForMessageRestricted+0x40>
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d78:	f001 fccc 	bl	800b714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	3324      	adds	r3, #36	; 0x24
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 fc3b 	bl	800a608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d92:	6978      	ldr	r0, [r7, #20]
 8009d94:	f7ff ff26 	bl	8009be4 <prvUnlockQueue>
	}
 8009d98:	bf00      	nop
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08e      	sub	sp, #56	; 0x38
 8009da4:	af04      	add	r7, sp, #16
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <xTaskCreateStatic+0x2a>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	623b      	str	r3, [r7, #32]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	61fb      	str	r3, [r7, #28]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009de6:	235c      	movs	r3, #92	; 0x5c
 8009de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b5c      	cmp	r3, #92	; 0x5c
 8009dee:	d00a      	beq.n	8009e06 <xTaskCreateStatic+0x66>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	61bb      	str	r3, [r7, #24]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d01e      	beq.n	8009e4c <xTaskCreateStatic+0xac>
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01b      	beq.n	8009e4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	2202      	movs	r2, #2
 8009e22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e26:	2300      	movs	r3, #0
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	9302      	str	r3, [sp, #8]
 8009e2e:	f107 0314 	add.w	r3, r7, #20
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f850 	bl	8009ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e46:	f000 f8dd 	bl	800a004 <prvAddNewTaskToReadyList>
 8009e4a:	e001      	b.n	8009e50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e50:	697b      	ldr	r3, [r7, #20]
	}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3728      	adds	r7, #40	; 0x28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b08c      	sub	sp, #48	; 0x30
 8009e5e:	af04      	add	r7, sp, #16
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4613      	mov	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e6a:	88fb      	ldrh	r3, [r7, #6]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fd42 	bl	800b8f8 <pvPortMalloc>
 8009e74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00e      	beq.n	8009e9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e7c:	205c      	movs	r0, #92	; 0x5c
 8009e7e:	f001 fd3b 	bl	800b8f8 <pvPortMalloc>
 8009e82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e90:	e005      	b.n	8009e9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e92:	6978      	ldr	r0, [r7, #20]
 8009e94:	f001 fdfc 	bl	800ba90 <vPortFree>
 8009e98:	e001      	b.n	8009e9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009eac:	88fa      	ldrh	r2, [r7, #6]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9303      	str	r3, [sp, #12]
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	9302      	str	r3, [sp, #8]
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f80e 	bl	8009ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ec8:	69f8      	ldr	r0, [r7, #28]
 8009eca:	f000 f89b 	bl	800a004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	e002      	b.n	8009eda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009eda:	69bb      	ldr	r3, [r7, #24]
	}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	461a      	mov	r2, r3
 8009efc:	21a5      	movs	r1, #165	; 0xa5
 8009efe:	f002 fc0b 	bl	800c718 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	f023 0307 	bic.w	r3, r3, #7
 8009f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	f003 0307 	and.w	r3, r3, #7
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00a      	beq.n	8009f3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	617b      	str	r3, [r7, #20]
}
 8009f38:	bf00      	nop
 8009f3a:	e7fe      	b.n	8009f3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01f      	beq.n	8009f82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f42:	2300      	movs	r3, #0
 8009f44:	61fb      	str	r3, [r7, #28]
 8009f46:	e012      	b.n	8009f6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	7819      	ldrb	r1, [r3, #0]
 8009f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	4413      	add	r3, r2
 8009f56:	3334      	adds	r3, #52	; 0x34
 8009f58:	460a      	mov	r2, r1
 8009f5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d006      	beq.n	8009f76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	2b0f      	cmp	r3, #15
 8009f72:	d9e9      	bls.n	8009f48 <prvInitialiseNewTask+0x64>
 8009f74:	e000      	b.n	8009f78 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f80:	e003      	b.n	8009f8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2b37      	cmp	r3, #55	; 0x37
 8009f8e:	d901      	bls.n	8009f94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f90:	2337      	movs	r3, #55	; 0x37
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe ff64 	bl	8008e78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	3318      	adds	r3, #24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe ff5f 	bl	8008e78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	68f9      	ldr	r1, [r7, #12]
 8009fe2:	69b8      	ldr	r0, [r7, #24]
 8009fe4:	f001 fa36 	bl	800b454 <pxPortInitialiseStack>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ffa:	bf00      	nop
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a00c:	f001 fb52 	bl	800b6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a010:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3301      	adds	r3, #1
 800a016:	4a2c      	ldr	r2, [pc, #176]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a01a:	4b2c      	ldr	r3, [pc, #176]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a022:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a028:	4b27      	ldr	r3, [pc, #156]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d110      	bne.n	800a052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a030:	f000 fc16 	bl	800a860 <prvInitialiseTaskLists>
 800a034:	e00d      	b.n	800a052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a036:	4b26      	ldr	r3, [pc, #152]	; (800a0d0 <prvAddNewTaskToReadyList+0xcc>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a03e:	4b23      	ldr	r3, [pc, #140]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d802      	bhi.n	800a052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a04c:	4a1f      	ldr	r2, [pc, #124]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a052:	4b20      	ldr	r3, [pc, #128]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a05a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a05c:	4b1d      	ldr	r3, [pc, #116]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <prvAddNewTaskToReadyList+0xd4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d903      	bls.n	800a078 <prvAddNewTaskToReadyList+0x74>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <prvAddNewTaskToReadyList+0xd4>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <prvAddNewTaskToReadyList+0xd8>)
 800a086:	441a      	add	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe feff 	bl	8008e92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a094:	f001 fb3e 	bl	800b714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <prvAddNewTaskToReadyList+0xcc>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00e      	beq.n	800a0be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d207      	bcs.n	800a0be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <prvAddNewTaskToReadyList+0xdc>)
 800a0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001404 	.word	0x20001404
 800a0cc:	20000f30 	.word	0x20000f30
 800a0d0:	20001410 	.word	0x20001410
 800a0d4:	20001420 	.word	0x20001420
 800a0d8:	2000140c 	.word	0x2000140c
 800a0dc:	20000f34 	.word	0x20000f34
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <vTaskDelay+0x60>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <vTaskDelay+0x30>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	60bb      	str	r3, [r7, #8]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a114:	f000 f880 	bl	800a218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a118:	2100      	movs	r1, #0
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fdf8 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a120:	f000 f888 	bl	800a234 <xTaskResumeAll>
 800a124:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d107      	bne.n	800a13c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <vTaskDelay+0x64>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a13c:	bf00      	nop
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	2000142c 	.word	0x2000142c
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a15a:	463a      	mov	r2, r7
 800a15c:	1d39      	adds	r1, r7, #4
 800a15e:	f107 0308 	add.w	r3, r7, #8
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fe34 	bl	8008dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	9202      	str	r2, [sp, #8]
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	2300      	movs	r3, #0
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	460a      	mov	r2, r1
 800a17a:	4921      	ldr	r1, [pc, #132]	; (800a200 <vTaskStartScheduler+0xb4>)
 800a17c:	4821      	ldr	r0, [pc, #132]	; (800a204 <vTaskStartScheduler+0xb8>)
 800a17e:	f7ff fe0f 	bl	8009da0 <xTaskCreateStatic>
 800a182:	4603      	mov	r3, r0
 800a184:	4a20      	ldr	r2, [pc, #128]	; (800a208 <vTaskStartScheduler+0xbc>)
 800a186:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a188:	4b1f      	ldr	r3, [pc, #124]	; (800a208 <vTaskStartScheduler+0xbc>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e001      	b.n	800a19a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d102      	bne.n	800a1a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1a0:	f000 fe0a 	bl	800adb8 <xTimerCreateTimerTask>
 800a1a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d116      	bne.n	800a1da <vTaskStartScheduler+0x8e>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	613b      	str	r3, [r7, #16]
}
 800a1be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1c0:	4b12      	ldr	r3, [pc, #72]	; (800a20c <vTaskStartScheduler+0xc0>)
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1c8:	4b11      	ldr	r3, [pc, #68]	; (800a210 <vTaskStartScheduler+0xc4>)
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1ce:	4b11      	ldr	r3, [pc, #68]	; (800a214 <vTaskStartScheduler+0xc8>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1d4:	f001 f9cc 	bl	800b570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1d8:	e00e      	b.n	800a1f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d10a      	bne.n	800a1f8 <vTaskStartScheduler+0xac>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	60fb      	str	r3, [r7, #12]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vTaskStartScheduler+0xaa>
}
 800a1f8:	bf00      	nop
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	0800c800 	.word	0x0800c800
 800a204:	0800a831 	.word	0x0800a831
 800a208:	20001428 	.word	0x20001428
 800a20c:	20001424 	.word	0x20001424
 800a210:	20001410 	.word	0x20001410
 800a214:	20001408 	.word	0x20001408

0800a218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a21c:	4b04      	ldr	r3, [pc, #16]	; (800a230 <vTaskSuspendAll+0x18>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	4a03      	ldr	r2, [pc, #12]	; (800a230 <vTaskSuspendAll+0x18>)
 800a224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	2000142c 	.word	0x2000142c

0800a234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a242:	4b42      	ldr	r3, [pc, #264]	; (800a34c <xTaskResumeAll+0x118>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <xTaskResumeAll+0x2c>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	603b      	str	r3, [r7, #0]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a260:	f001 fa28 	bl	800b6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a264:	4b39      	ldr	r3, [pc, #228]	; (800a34c <xTaskResumeAll+0x118>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3b01      	subs	r3, #1
 800a26a:	4a38      	ldr	r2, [pc, #224]	; (800a34c <xTaskResumeAll+0x118>)
 800a26c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a26e:	4b37      	ldr	r3, [pc, #220]	; (800a34c <xTaskResumeAll+0x118>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d162      	bne.n	800a33c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a276:	4b36      	ldr	r3, [pc, #216]	; (800a350 <xTaskResumeAll+0x11c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d05e      	beq.n	800a33c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a27e:	e02f      	b.n	800a2e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a280:	4b34      	ldr	r3, [pc, #208]	; (800a354 <xTaskResumeAll+0x120>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3318      	adds	r3, #24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fe5d 	bl	8008f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fe58 	bl	8008f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <xTaskResumeAll+0x124>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d903      	bls.n	800a2b0 <xTaskResumeAll+0x7c>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a2a      	ldr	r2, [pc, #168]	; (800a358 <xTaskResumeAll+0x124>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a27      	ldr	r2, [pc, #156]	; (800a35c <xTaskResumeAll+0x128>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe fde3 	bl	8008e92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	4b23      	ldr	r3, [pc, #140]	; (800a360 <xTaskResumeAll+0x12c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d302      	bcc.n	800a2e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2da:	4b22      	ldr	r3, [pc, #136]	; (800a364 <xTaskResumeAll+0x130>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <xTaskResumeAll+0x120>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1cb      	bne.n	800a280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2ee:	f000 fb55 	bl	800a99c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <xTaskResumeAll+0x134>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d010      	beq.n	800a320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2fe:	f000 f847 	bl	800a390 <xTaskIncrementTick>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a308:	4b16      	ldr	r3, [pc, #88]	; (800a364 <xTaskResumeAll+0x130>)
 800a30a:	2201      	movs	r2, #1
 800a30c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3b01      	subs	r3, #1
 800a312:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f1      	bne.n	800a2fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a31a:	4b13      	ldr	r3, [pc, #76]	; (800a368 <xTaskResumeAll+0x134>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a320:	4b10      	ldr	r3, [pc, #64]	; (800a364 <xTaskResumeAll+0x130>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <xTaskResumeAll+0x138>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a33c:	f001 f9ea 	bl	800b714 <vPortExitCritical>

	return xAlreadyYielded;
 800a340:	68bb      	ldr	r3, [r7, #8]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	2000142c 	.word	0x2000142c
 800a350:	20001404 	.word	0x20001404
 800a354:	200013c4 	.word	0x200013c4
 800a358:	2000140c 	.word	0x2000140c
 800a35c:	20000f34 	.word	0x20000f34
 800a360:	20000f30 	.word	0x20000f30
 800a364:	20001418 	.word	0x20001418
 800a368:	20001414 	.word	0x20001414
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a376:	4b05      	ldr	r3, [pc, #20]	; (800a38c <xTaskGetTickCount+0x1c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a37c:	687b      	ldr	r3, [r7, #4]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20001408 	.word	0x20001408

0800a390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a39a:	4b4f      	ldr	r3, [pc, #316]	; (800a4d8 <xTaskIncrementTick+0x148>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 808f 	bne.w	800a4c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3a4:	4b4d      	ldr	r3, [pc, #308]	; (800a4dc <xTaskIncrementTick+0x14c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3ac:	4a4b      	ldr	r2, [pc, #300]	; (800a4dc <xTaskIncrementTick+0x14c>)
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d120      	bne.n	800a3fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3b8:	4b49      	ldr	r3, [pc, #292]	; (800a4e0 <xTaskIncrementTick+0x150>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	603b      	str	r3, [r7, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <xTaskIncrementTick+0x46>
 800a3d8:	4b41      	ldr	r3, [pc, #260]	; (800a4e0 <xTaskIncrementTick+0x150>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	4b41      	ldr	r3, [pc, #260]	; (800a4e4 <xTaskIncrementTick+0x154>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a3f      	ldr	r2, [pc, #252]	; (800a4e0 <xTaskIncrementTick+0x150>)
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	4a3f      	ldr	r2, [pc, #252]	; (800a4e4 <xTaskIncrementTick+0x154>)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4b3e      	ldr	r3, [pc, #248]	; (800a4e8 <xTaskIncrementTick+0x158>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	4a3d      	ldr	r2, [pc, #244]	; (800a4e8 <xTaskIncrementTick+0x158>)
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	f000 fad1 	bl	800a99c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3fa:	4b3c      	ldr	r3, [pc, #240]	; (800a4ec <xTaskIncrementTick+0x15c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	429a      	cmp	r2, r3
 800a402:	d349      	bcc.n	800a498 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a404:	4b36      	ldr	r3, [pc, #216]	; (800a4e0 <xTaskIncrementTick+0x150>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a40e:	4b37      	ldr	r3, [pc, #220]	; (800a4ec <xTaskIncrementTick+0x15c>)
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	601a      	str	r2, [r3, #0]
					break;
 800a416:	e03f      	b.n	800a498 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a418:	4b31      	ldr	r3, [pc, #196]	; (800a4e0 <xTaskIncrementTick+0x150>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d203      	bcs.n	800a438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a430:	4a2e      	ldr	r2, [pc, #184]	; (800a4ec <xTaskIncrementTick+0x15c>)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a436:	e02f      	b.n	800a498 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fd85 	bl	8008f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	d004      	beq.n	800a454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3318      	adds	r3, #24
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fd7c 	bl	8008f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	4b25      	ldr	r3, [pc, #148]	; (800a4f0 <xTaskIncrementTick+0x160>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d903      	bls.n	800a468 <xTaskIncrementTick+0xd8>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	4a22      	ldr	r2, [pc, #136]	; (800a4f0 <xTaskIncrementTick+0x160>)
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4a1f      	ldr	r2, [pc, #124]	; (800a4f4 <xTaskIncrementTick+0x164>)
 800a476:	441a      	add	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fe fd07 	bl	8008e92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	4b1b      	ldr	r3, [pc, #108]	; (800a4f8 <xTaskIncrementTick+0x168>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	429a      	cmp	r2, r3
 800a490:	d3b8      	bcc.n	800a404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a492:	2301      	movs	r3, #1
 800a494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	e7b5      	b.n	800a404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a498:	4b17      	ldr	r3, [pc, #92]	; (800a4f8 <xTaskIncrementTick+0x168>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49e:	4915      	ldr	r1, [pc, #84]	; (800a4f4 <xTaskIncrementTick+0x164>)
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d901      	bls.n	800a4b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4b4:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <xTaskIncrementTick+0x16c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e004      	b.n	800a4cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <xTaskIncrementTick+0x170>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	4a0d      	ldr	r2, [pc, #52]	; (800a500 <xTaskIncrementTick+0x170>)
 800a4ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4cc:	697b      	ldr	r3, [r7, #20]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2000142c 	.word	0x2000142c
 800a4dc:	20001408 	.word	0x20001408
 800a4e0:	200013bc 	.word	0x200013bc
 800a4e4:	200013c0 	.word	0x200013c0
 800a4e8:	2000141c 	.word	0x2000141c
 800a4ec:	20001424 	.word	0x20001424
 800a4f0:	2000140c 	.word	0x2000140c
 800a4f4:	20000f34 	.word	0x20000f34
 800a4f8:	20000f30 	.word	0x20000f30
 800a4fc:	20001418 	.word	0x20001418
 800a500:	20001414 	.word	0x20001414

0800a504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a50a:	4b28      	ldr	r3, [pc, #160]	; (800a5ac <vTaskSwitchContext+0xa8>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a512:	4b27      	ldr	r3, [pc, #156]	; (800a5b0 <vTaskSwitchContext+0xac>)
 800a514:	2201      	movs	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a518:	e041      	b.n	800a59e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a51a:	4b25      	ldr	r3, [pc, #148]	; (800a5b0 <vTaskSwitchContext+0xac>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a520:	4b24      	ldr	r3, [pc, #144]	; (800a5b4 <vTaskSwitchContext+0xb0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	e010      	b.n	800a54a <vTaskSwitchContext+0x46>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10a      	bne.n	800a544 <vTaskSwitchContext+0x40>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
}
 800a540:	bf00      	nop
 800a542:	e7fe      	b.n	800a542 <vTaskSwitchContext+0x3e>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3b01      	subs	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	491b      	ldr	r1, [pc, #108]	; (800a5b8 <vTaskSwitchContext+0xb4>)
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	440b      	add	r3, r1
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0e4      	beq.n	800a528 <vTaskSwitchContext+0x24>
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4a13      	ldr	r2, [pc, #76]	; (800a5b8 <vTaskSwitchContext+0xb4>)
 800a56a:	4413      	add	r3, r2
 800a56c:	60bb      	str	r3, [r7, #8]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	605a      	str	r2, [r3, #4]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	3308      	adds	r3, #8
 800a580:	429a      	cmp	r2, r3
 800a582:	d104      	bne.n	800a58e <vTaskSwitchContext+0x8a>
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	605a      	str	r2, [r3, #4]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4a09      	ldr	r2, [pc, #36]	; (800a5bc <vTaskSwitchContext+0xb8>)
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <vTaskSwitchContext+0xb0>)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6013      	str	r3, [r2, #0]
}
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	2000142c 	.word	0x2000142c
 800a5b0:	20001418 	.word	0x20001418
 800a5b4:	2000140c 	.word	0x2000140c
 800a5b8:	20000f34 	.word	0x20000f34
 800a5bc:	20000f30 	.word	0x20000f30

0800a5c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60fb      	str	r3, [r7, #12]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <vTaskPlaceOnEventList+0x44>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3318      	adds	r3, #24
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fe fc73 	bl	8008eda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	6838      	ldr	r0, [r7, #0]
 800a5f8:	f000 fb8a 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
}
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000f30 	.word	0x20000f30

0800a608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	617b      	str	r3, [r7, #20]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a630:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <vTaskPlaceOnEventListRestricted+0x54>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3318      	adds	r3, #24
 800a636:	4619      	mov	r1, r3
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f7fe fc2a 	bl	8008e92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	68b8      	ldr	r0, [r7, #8]
 800a64e:	f000 fb5f 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
	}
 800a652:	bf00      	nop
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000f30 	.word	0x20000f30

0800a660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60fb      	str	r3, [r7, #12]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	3318      	adds	r3, #24
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fc5b 	bl	8008f4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a696:	4b1e      	ldr	r3, [pc, #120]	; (800a710 <xTaskRemoveFromEventList+0xb0>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d11d      	bne.n	800a6da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fc52 	bl	8008f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ac:	4b19      	ldr	r3, [pc, #100]	; (800a714 <xTaskRemoveFromEventList+0xb4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d903      	bls.n	800a6bc <xTaskRemoveFromEventList+0x5c>
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	4a16      	ldr	r2, [pc, #88]	; (800a714 <xTaskRemoveFromEventList+0xb4>)
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4a13      	ldr	r2, [pc, #76]	; (800a718 <xTaskRemoveFromEventList+0xb8>)
 800a6ca:	441a      	add	r2, r3
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f7fe fbdd 	bl	8008e92 <vListInsertEnd>
 800a6d8:	e005      	b.n	800a6e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	3318      	adds	r3, #24
 800a6de:	4619      	mov	r1, r3
 800a6e0:	480e      	ldr	r0, [pc, #56]	; (800a71c <xTaskRemoveFromEventList+0xbc>)
 800a6e2:	f7fe fbd6 	bl	8008e92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <xTaskRemoveFromEventList+0xc0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d905      	bls.n	800a700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <xTaskRemoveFromEventList+0xc4>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e001      	b.n	800a704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a704:	697b      	ldr	r3, [r7, #20]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	2000142c 	.word	0x2000142c
 800a714:	2000140c 	.word	0x2000140c
 800a718:	20000f34 	.word	0x20000f34
 800a71c:	200013c4 	.word	0x200013c4
 800a720:	20000f30 	.word	0x20000f30
 800a724:	20001418 	.word	0x20001418

0800a728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a730:	4b06      	ldr	r3, [pc, #24]	; (800a74c <vTaskInternalSetTimeOutState+0x24>)
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a738:	4b05      	ldr	r3, [pc, #20]	; (800a750 <vTaskInternalSetTimeOutState+0x28>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	605a      	str	r2, [r3, #4]
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	2000141c 	.word	0x2000141c
 800a750:	20001408 	.word	0x20001408

0800a754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	613b      	str	r3, [r7, #16]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10a      	bne.n	800a796 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a796:	f000 ff8d 	bl	800b6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a79a:	4b1d      	ldr	r3, [pc, #116]	; (800a810 <xTaskCheckForTimeOut+0xbc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b2:	d102      	bne.n	800a7ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	e023      	b.n	800a802 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4b15      	ldr	r3, [pc, #84]	; (800a814 <xTaskCheckForTimeOut+0xc0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d007      	beq.n	800a7d6 <xTaskCheckForTimeOut+0x82>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d302      	bcc.n	800a7d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	61fb      	str	r3, [r7, #28]
 800a7d4:	e015      	b.n	800a802 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d20b      	bcs.n	800a7f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ff9b 	bl	800a728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	e004      	b.n	800a802 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7fe:	2301      	movs	r3, #1
 800a800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a802:	f000 ff87 	bl	800b714 <vPortExitCritical>

	return xReturn;
 800a806:	69fb      	ldr	r3, [r7, #28]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3720      	adds	r7, #32
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20001408 	.word	0x20001408
 800a814:	2000141c 	.word	0x2000141c

0800a818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a81c:	4b03      	ldr	r3, [pc, #12]	; (800a82c <vTaskMissedYield+0x14>)
 800a81e:	2201      	movs	r2, #1
 800a820:	601a      	str	r2, [r3, #0]
}
 800a822:	bf00      	nop
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20001418 	.word	0x20001418

0800a830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a838:	f000 f852 	bl	800a8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <prvIdleTask+0x28>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d9f9      	bls.n	800a838 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <prvIdleTask+0x2c>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a854:	e7f0      	b.n	800a838 <prvIdleTask+0x8>
 800a856:	bf00      	nop
 800a858:	20000f34 	.word	0x20000f34
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a866:	2300      	movs	r3, #0
 800a868:	607b      	str	r3, [r7, #4]
 800a86a:	e00c      	b.n	800a886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4a12      	ldr	r2, [pc, #72]	; (800a8c0 <prvInitialiseTaskLists+0x60>)
 800a878:	4413      	add	r3, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fadc 	bl	8008e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3301      	adds	r3, #1
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b37      	cmp	r3, #55	; 0x37
 800a88a:	d9ef      	bls.n	800a86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a88c:	480d      	ldr	r0, [pc, #52]	; (800a8c4 <prvInitialiseTaskLists+0x64>)
 800a88e:	f7fe fad3 	bl	8008e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a892:	480d      	ldr	r0, [pc, #52]	; (800a8c8 <prvInitialiseTaskLists+0x68>)
 800a894:	f7fe fad0 	bl	8008e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a898:	480c      	ldr	r0, [pc, #48]	; (800a8cc <prvInitialiseTaskLists+0x6c>)
 800a89a:	f7fe facd 	bl	8008e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a89e:	480c      	ldr	r0, [pc, #48]	; (800a8d0 <prvInitialiseTaskLists+0x70>)
 800a8a0:	f7fe faca 	bl	8008e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8a4:	480b      	ldr	r0, [pc, #44]	; (800a8d4 <prvInitialiseTaskLists+0x74>)
 800a8a6:	f7fe fac7 	bl	8008e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8aa:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <prvInitialiseTaskLists+0x78>)
 800a8ac:	4a05      	ldr	r2, [pc, #20]	; (800a8c4 <prvInitialiseTaskLists+0x64>)
 800a8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8b0:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <prvInitialiseTaskLists+0x7c>)
 800a8b2:	4a05      	ldr	r2, [pc, #20]	; (800a8c8 <prvInitialiseTaskLists+0x68>)
 800a8b4:	601a      	str	r2, [r3, #0]
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000f34 	.word	0x20000f34
 800a8c4:	20001394 	.word	0x20001394
 800a8c8:	200013a8 	.word	0x200013a8
 800a8cc:	200013c4 	.word	0x200013c4
 800a8d0:	200013d8 	.word	0x200013d8
 800a8d4:	200013f0 	.word	0x200013f0
 800a8d8:	200013bc 	.word	0x200013bc
 800a8dc:	200013c0 	.word	0x200013c0

0800a8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e6:	e019      	b.n	800a91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8e8:	f000 fee4 	bl	800b6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <prvCheckTasksWaitingTermination+0x50>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fb27 	bl	8008f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <prvCheckTasksWaitingTermination+0x54>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3b01      	subs	r3, #1
 800a904:	4a0b      	ldr	r2, [pc, #44]	; (800a934 <prvCheckTasksWaitingTermination+0x54>)
 800a906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a908:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <prvCheckTasksWaitingTermination+0x58>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	4a0a      	ldr	r2, [pc, #40]	; (800a938 <prvCheckTasksWaitingTermination+0x58>)
 800a910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a912:	f000 feff 	bl	800b714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f810 	bl	800a93c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <prvCheckTasksWaitingTermination+0x58>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e1      	bne.n	800a8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	200013d8 	.word	0x200013d8
 800a934:	20001404 	.word	0x20001404
 800a938:	200013ec 	.word	0x200013ec

0800a93c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d108      	bne.n	800a960 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	4618      	mov	r0, r3
 800a954:	f001 f89c 	bl	800ba90 <vPortFree>
				vPortFree( pxTCB );
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 f899 	bl	800ba90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a95e:	e018      	b.n	800a992 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a966:	2b01      	cmp	r3, #1
 800a968:	d103      	bne.n	800a972 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 f890 	bl	800ba90 <vPortFree>
	}
 800a970:	e00f      	b.n	800a992 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d00a      	beq.n	800a992 <prvDeleteTCB+0x56>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	60fb      	str	r3, [r7, #12]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <prvDeleteTCB+0x54>
	}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <prvResetNextTaskUnblockTime+0x38>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d104      	bne.n	800a9b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9b4:	e008      	b.n	800a9c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b6:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <prvResetNextTaskUnblockTime+0x38>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	4a04      	ldr	r2, [pc, #16]	; (800a9d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a9c6:	6013      	str	r3, [r2, #0]
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	200013bc 	.word	0x200013bc
 800a9d8:	20001424 	.word	0x20001424

0800a9dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a9e2:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <xTaskGetCurrentTaskHandle+0x1c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a9e8:	687b      	ldr	r3, [r7, #4]
	}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	20000f30 	.word	0x20000f30

0800a9fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa02:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <xTaskGetSchedulerState+0x34>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d102      	bne.n	800aa10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	e008      	b.n	800aa22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa10:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <xTaskGetSchedulerState+0x38>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	607b      	str	r3, [r7, #4]
 800aa1c:	e001      	b.n	800aa22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa22:	687b      	ldr	r3, [r7, #4]
	}
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20001410 	.word	0x20001410
 800aa34:	2000142c 	.word	0x2000142c

0800aa38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d051      	beq.n	800aaf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa52:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <xTaskPriorityInherit+0xc4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d241      	bcs.n	800aae0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	db06      	blt.n	800aa72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa64:	4b25      	ldr	r3, [pc, #148]	; (800aafc <xTaskPriorityInherit+0xc4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6959      	ldr	r1, [r3, #20]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4a1f      	ldr	r2, [pc, #124]	; (800ab00 <xTaskPriorityInherit+0xc8>)
 800aa84:	4413      	add	r3, r2
 800aa86:	4299      	cmp	r1, r3
 800aa88:	d122      	bne.n	800aad0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fa5c 	bl	8008f4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa94:	4b19      	ldr	r3, [pc, #100]	; (800aafc <xTaskPriorityInherit+0xc4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <xTaskPriorityInherit+0xcc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d903      	bls.n	800aab2 <xTaskPriorityInherit+0x7a>
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaae:	4a15      	ldr	r2, [pc, #84]	; (800ab04 <xTaskPriorityInherit+0xcc>)
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4a10      	ldr	r2, [pc, #64]	; (800ab00 <xTaskPriorityInherit+0xc8>)
 800aac0:	441a      	add	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7fe f9e2 	bl	8008e92 <vListInsertEnd>
 800aace:	e004      	b.n	800aada <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <xTaskPriorityInherit+0xc4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aada:	2301      	movs	r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e008      	b.n	800aaf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <xTaskPriorityInherit+0xc4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d201      	bcs.n	800aaf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
	}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20000f30 	.word	0x20000f30
 800ab00:	20000f34 	.word	0x20000f34
 800ab04:	2000140c 	.word	0x2000140c

0800ab08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d056      	beq.n	800abcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab1e:	4b2e      	ldr	r3, [pc, #184]	; (800abd8 <xTaskPriorityDisinherit+0xd0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d00a      	beq.n	800ab3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	60fb      	str	r3, [r7, #12]
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10a      	bne.n	800ab5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60bb      	str	r3, [r7, #8]
}
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab60:	1e5a      	subs	r2, r3, #1
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d02c      	beq.n	800abcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d128      	bne.n	800abcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe f9e4 	bl	8008f4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <xTaskPriorityDisinherit+0xd4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d903      	bls.n	800abac <xTaskPriorityDisinherit+0xa4>
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	4a0c      	ldr	r2, [pc, #48]	; (800abdc <xTaskPriorityDisinherit+0xd4>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4a09      	ldr	r2, [pc, #36]	; (800abe0 <xTaskPriorityDisinherit+0xd8>)
 800abba:	441a      	add	r2, r3
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fe f965 	bl	8008e92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abc8:	2301      	movs	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abcc:	697b      	ldr	r3, [r7, #20]
	}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000f30 	.word	0x20000f30
 800abdc:	2000140c 	.word	0x2000140c
 800abe0:	20000f34 	.word	0x20000f34

0800abe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800abf2:	2301      	movs	r3, #1
 800abf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d06a      	beq.n	800acd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	60fb      	str	r3, [r7, #12]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d902      	bls.n	800ac2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	61fb      	str	r3, [r7, #28]
 800ac28:	e002      	b.n	800ac30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d04b      	beq.n	800acd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d146      	bne.n	800acd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ac44:	4b25      	ldr	r3, [pc, #148]	; (800acdc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d10a      	bne.n	800ac64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	60bb      	str	r3, [r7, #8]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	db04      	blt.n	800ac82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	6959      	ldr	r1, [r3, #20]
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac92:	4413      	add	r3, r2
 800ac94:	4299      	cmp	r1, r3
 800ac96:	d11c      	bne.n	800acd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe f955 	bl	8008f4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d903      	bls.n	800acb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb2:	4a0c      	ldr	r2, [pc, #48]	; (800ace4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4a07      	ldr	r2, [pc, #28]	; (800ace0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800acc4:	441a      	add	r2, r3
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	3304      	adds	r3, #4
 800acca:	4619      	mov	r1, r3
 800accc:	4610      	mov	r0, r2
 800acce:	f7fe f8e0 	bl	8008e92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acd2:	bf00      	nop
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000f30 	.word	0x20000f30
 800ace0:	20000f34 	.word	0x20000f34
 800ace4:	2000140c 	.word	0x2000140c

0800ace8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <pvTaskIncrementMutexHeldCount+0x24>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d004      	beq.n	800acfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <pvTaskIncrementMutexHeldCount+0x24>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acfa:	3201      	adds	r2, #1
 800acfc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800acfe:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ad00:	681b      	ldr	r3, [r3, #0]
	}
 800ad02:	4618      	mov	r0, r3
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000f30 	.word	0x20000f30

0800ad10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad1a:	4b21      	ldr	r3, [pc, #132]	; (800ada0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad20:	4b20      	ldr	r3, [pc, #128]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe f910 	bl	8008f4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d10a      	bne.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad3a:	4b1a      	ldr	r3, [pc, #104]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4819      	ldr	r0, [pc, #100]	; (800ada8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad44:	f7fe f8a5 	bl	8008e92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad48:	e026      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad52:	4b14      	ldr	r3, [pc, #80]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d209      	bcs.n	800ad76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad62:	4b12      	ldr	r3, [pc, #72]	; (800adac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fe f8b3 	bl	8008eda <vListInsert>
}
 800ad74:	e010      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe f8a9 	bl	8008eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d202      	bcs.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad92:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20001408 	.word	0x20001408
 800ada4:	20000f30 	.word	0x20000f30
 800ada8:	200013f0 	.word	0x200013f0
 800adac:	200013c0 	.word	0x200013c0
 800adb0:	200013bc 	.word	0x200013bc
 800adb4:	20001424 	.word	0x20001424

0800adb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	; 0x28
 800adbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adc2:	f000 fb07 	bl	800b3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adc6:	4b1c      	ldr	r3, [pc, #112]	; (800ae38 <xTimerCreateTimerTask+0x80>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d021      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800add6:	1d3a      	adds	r2, r7, #4
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	f107 030c 	add.w	r3, r7, #12
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe f80f 	bl	8008e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	9202      	str	r2, [sp, #8]
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	2302      	movs	r3, #2
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	460a      	mov	r2, r1
 800adf8:	4910      	ldr	r1, [pc, #64]	; (800ae3c <xTimerCreateTimerTask+0x84>)
 800adfa:	4811      	ldr	r0, [pc, #68]	; (800ae40 <xTimerCreateTimerTask+0x88>)
 800adfc:	f7fe ffd0 	bl	8009da0 <xTaskCreateStatic>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <xTimerCreateTimerTask+0x8c>)
 800ae04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <xTimerCreateTimerTask+0x8c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	613b      	str	r3, [r7, #16]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae2e:	697b      	ldr	r3, [r7, #20]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20001460 	.word	0x20001460
 800ae3c:	0800c808 	.word	0x0800c808
 800ae40:	0800af7d 	.word	0x0800af7d
 800ae44:	20001464 	.word	0x20001464

0800ae48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	; 0x28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae76:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <xTimerGenericCommand+0x98>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02a      	beq.n	800aed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b05      	cmp	r3, #5
 800ae8e:	dc18      	bgt.n	800aec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae90:	f7ff fdb4 	bl	800a9fc <xTaskGetSchedulerState>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d109      	bne.n	800aeae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae9a:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <xTimerGenericCommand+0x98>)
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f107 0110 	add.w	r1, r7, #16
 800aea2:	2300      	movs	r3, #0
 800aea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea6:	f7fe fa6f 	bl	8009388 <xQueueGenericSend>
 800aeaa:	6278      	str	r0, [r7, #36]	; 0x24
 800aeac:	e012      	b.n	800aed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeae:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <xTimerGenericCommand+0x98>)
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	f107 0110 	add.w	r1, r7, #16
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7fe fa65 	bl	8009388 <xQueueGenericSend>
 800aebe:	6278      	str	r0, [r7, #36]	; 0x24
 800aec0:	e008      	b.n	800aed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aec2:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <xTimerGenericCommand+0x98>)
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	f107 0110 	add.w	r1, r7, #16
 800aeca:	2300      	movs	r3, #0
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	f7fe fb59 	bl	8009584 <xQueueGenericSendFromISR>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3728      	adds	r7, #40	; 0x28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20001460 	.word	0x20001460

0800aee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeee:	4b22      	ldr	r3, [pc, #136]	; (800af78 <prvProcessExpiredTimer+0x94>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe f825 	bl	8008f4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d022      	beq.n	800af56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	18d1      	adds	r1, r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	6978      	ldr	r0, [r7, #20]
 800af1e:	f000 f8d1 	bl	800b0c4 <prvInsertTimerInActiveList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01f      	beq.n	800af68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af28:	2300      	movs	r3, #0
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	2100      	movs	r1, #0
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	f7ff ff88 	bl	800ae48 <xTimerGenericCommand>
 800af38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d113      	bne.n	800af68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	60fb      	str	r3, [r7, #12]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f023 0301 	bic.w	r3, r3, #1
 800af60:	b2da      	uxtb	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	6978      	ldr	r0, [r7, #20]
 800af6e:	4798      	blx	r3
}
 800af70:	bf00      	nop
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20001458 	.word	0x20001458

0800af7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f857 	bl	800b03c <prvGetNextExpireTime>
 800af8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f803 	bl	800afa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af9a:	f000 f8d5 	bl	800b148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af9e:	e7f1      	b.n	800af84 <prvTimerTask+0x8>

0800afa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afaa:	f7ff f935 	bl	800a218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f866 	bl	800b084 <prvSampleTimeNow>
 800afb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d130      	bne.n	800b022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d806      	bhi.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afce:	f7ff f931 	bl	800a234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ff85 	bl	800aee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afda:	e024      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afe2:	4b13      	ldr	r3, [pc, #76]	; (800b030 <prvProcessTimerOrBlockTask+0x90>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <prvProcessTimerOrBlockTask+0x50>
 800afec:	2301      	movs	r3, #1
 800afee:	e000      	b.n	800aff2 <prvProcessTimerOrBlockTask+0x52>
 800aff0:	2300      	movs	r3, #0
 800aff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aff4:	4b0f      	ldr	r3, [pc, #60]	; (800b034 <prvProcessTimerOrBlockTask+0x94>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	f7fe fe99 	bl	8009d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b006:	f7ff f915 	bl	800a234 <xTaskResumeAll>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b010:	4b09      	ldr	r3, [pc, #36]	; (800b038 <prvProcessTimerOrBlockTask+0x98>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
}
 800b020:	e001      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b022:	f7ff f907 	bl	800a234 <xTaskResumeAll>
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000145c 	.word	0x2000145c
 800b034:	20001460 	.word	0x20001460
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <prvGetNextExpireTime+0x44>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <prvGetNextExpireTime+0x16>
 800b04e:	2201      	movs	r2, #1
 800b050:	e000      	b.n	800b054 <prvGetNextExpireTime+0x18>
 800b052:	2200      	movs	r2, #0
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <prvGetNextExpireTime+0x44>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	e001      	b.n	800b070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b070:	68fb      	ldr	r3, [r7, #12]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	20001458 	.word	0x20001458

0800b084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b08c:	f7ff f970 	bl	800a370 <xTaskGetTickCount>
 800b090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b092:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <prvSampleTimeNow+0x3c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d205      	bcs.n	800b0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b09c:	f000 f936 	bl	800b30c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e002      	b.n	800b0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0ae:	4a04      	ldr	r2, [pc, #16]	; (800b0c0 <prvSampleTimeNow+0x3c>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20001468 	.word	0x20001468

0800b0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d812      	bhi.n	800b110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	e01b      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0fe:	4b10      	ldr	r3, [pc, #64]	; (800b140 <prvInsertTimerInActiveList+0x7c>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3304      	adds	r3, #4
 800b106:	4619      	mov	r1, r3
 800b108:	4610      	mov	r0, r2
 800b10a:	f7fd fee6 	bl	8008eda <vListInsert>
 800b10e:	e012      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d206      	bcs.n	800b126 <prvInsertTimerInActiveList+0x62>
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e007      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <prvInsertTimerInActiveList+0x80>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fd fed2 	bl	8008eda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b136:	697b      	ldr	r3, [r7, #20]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	2000145c 	.word	0x2000145c
 800b144:	20001458 	.word	0x20001458

0800b148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08e      	sub	sp, #56	; 0x38
 800b14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14e:	e0ca      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	da18      	bge.n	800b188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b156:	1d3b      	adds	r3, r7, #4
 800b158:	3304      	adds	r3, #4
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61fb      	str	r3, [r7, #28]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b17e:	6850      	ldr	r0, [r2, #4]
 800b180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b182:	6892      	ldr	r2, [r2, #8]
 800b184:	4611      	mov	r1, r2
 800b186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f2c0 80aa 	blt.w	800b2e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fd fed3 	bl	8008f4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff ff6b 	bl	800b084 <prvSampleTimeNow>
 800b1ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	f200 8097 	bhi.w	800b2e6 <prvProcessReceivedCommands+0x19e>
 800b1b8:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <prvProcessReceivedCommands+0x78>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1e9 	.word	0x0800b1e9
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b25d 	.word	0x0800b25d
 800b1d0:	0800b271 	.word	0x0800b271
 800b1d4:	0800b2bb 	.word	0x0800b2bb
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b1e9 	.word	0x0800b1e9
 800b1e0:	0800b25d 	.word	0x0800b25d
 800b1e4:	0800b271 	.word	0x0800b271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	18d1      	adds	r1, r2, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b208:	f7ff ff5c 	bl	800b0c4 <prvInsertTimerInActiveList>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d069      	beq.n	800b2e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05e      	beq.n	800b2e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	441a      	add	r2, r3
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b23a:	f7ff fe05 	bl	800ae48 <xTimerGenericCommand>
 800b23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d14f      	bne.n	800b2e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	61bb      	str	r3, [r7, #24]
}
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	b2da      	uxtb	r2, r3
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b26e:	e03a      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b276:	f043 0301 	orr.w	r3, r3, #1
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10a      	bne.n	800b2a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	617b      	str	r3, [r7, #20]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	18d1      	adds	r1, r2, r3
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b4:	f7ff ff06 	bl	800b0c4 <prvInsertTimerInActiveList>
					break;
 800b2b8:	e015      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c0:	f003 0302 	and.w	r3, r3, #2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d103      	bne.n	800b2d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ca:	f000 fbe1 	bl	800ba90 <vPortFree>
 800b2ce:	e00a      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2e2:	e000      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2e6:	4b08      	ldr	r3, [pc, #32]	; (800b308 <prvProcessReceivedCommands+0x1c0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	1d39      	adds	r1, r7, #4
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe f9e4 	bl	80096bc <xQueueReceive>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f47f af2a 	bne.w	800b150 <prvProcessReceivedCommands+0x8>
	}
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20001460 	.word	0x20001460

0800b30c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b312:	e048      	b.n	800b3a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31e:	4b2b      	ldr	r3, [pc, #172]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fd fe0d 	bl	8008f4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d02e      	beq.n	800b3a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	429a      	cmp	r2, r3
 800b358:	d90e      	bls.n	800b378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b366:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7fd fdb2 	bl	8008eda <vListInsert>
 800b376:	e016      	b.n	800b3a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	2100      	movs	r1, #0
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fd60 	bl	800ae48 <xTimerGenericCommand>
 800b388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10a      	bne.n	800b3a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	603b      	str	r3, [r7, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1b1      	bne.n	800b314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3b0:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvSwitchTimerLists+0xc4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a04      	ldr	r2, [pc, #16]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3be:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSwitchTimerLists+0xc4>)
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	6013      	str	r3, [r2, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20001458 	.word	0x20001458
 800b3d0:	2000145c 	.word	0x2000145c

0800b3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3da:	f000 f96b 	bl	800b6b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3de:	4b15      	ldr	r3, [pc, #84]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d120      	bne.n	800b428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3e6:	4814      	ldr	r0, [pc, #80]	; (800b438 <prvCheckForValidListAndQueue+0x64>)
 800b3e8:	f7fd fd26 	bl	8008e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3ec:	4813      	ldr	r0, [pc, #76]	; (800b43c <prvCheckForValidListAndQueue+0x68>)
 800b3ee:	f7fd fd23 	bl	8008e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3f2:	4b13      	ldr	r3, [pc, #76]	; (800b440 <prvCheckForValidListAndQueue+0x6c>)
 800b3f4:	4a10      	ldr	r2, [pc, #64]	; (800b438 <prvCheckForValidListAndQueue+0x64>)
 800b3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3f8:	4b12      	ldr	r3, [pc, #72]	; (800b444 <prvCheckForValidListAndQueue+0x70>)
 800b3fa:	4a10      	ldr	r2, [pc, #64]	; (800b43c <prvCheckForValidListAndQueue+0x68>)
 800b3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3fe:	2300      	movs	r3, #0
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	4b11      	ldr	r3, [pc, #68]	; (800b448 <prvCheckForValidListAndQueue+0x74>)
 800b404:	4a11      	ldr	r2, [pc, #68]	; (800b44c <prvCheckForValidListAndQueue+0x78>)
 800b406:	2110      	movs	r1, #16
 800b408:	200a      	movs	r0, #10
 800b40a:	f7fd fe31 	bl	8009070 <xQueueGenericCreateStatic>
 800b40e:	4603      	mov	r3, r0
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	490b      	ldr	r1, [pc, #44]	; (800b450 <prvCheckForValidListAndQueue+0x7c>)
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fc5e 	bl	8009ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b428:	f000 f974 	bl	800b714 <vPortExitCritical>
}
 800b42c:	bf00      	nop
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20001460 	.word	0x20001460
 800b438:	20001430 	.word	0x20001430
 800b43c:	20001444 	.word	0x20001444
 800b440:	20001458 	.word	0x20001458
 800b444:	2000145c 	.word	0x2000145c
 800b448:	2000150c 	.word	0x2000150c
 800b44c:	2000146c 	.word	0x2000146c
 800b450:	0800c810 	.word	0x0800c810

0800b454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3b04      	subs	r3, #4
 800b464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3b04      	subs	r3, #4
 800b472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f023 0201 	bic.w	r2, r3, #1
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b04      	subs	r3, #4
 800b482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b484:	4a0c      	ldr	r2, [pc, #48]	; (800b4b8 <pxPortInitialiseStack+0x64>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3b14      	subs	r3, #20
 800b48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f06f 0202 	mvn.w	r2, #2
 800b4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3b20      	subs	r3, #32
 800b4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	0800b4bd 	.word	0x0800b4bd

0800b4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <prvTaskExitError+0x54>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d00a      	beq.n	800b4e6 <prvTaskExitError+0x2a>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <prvTaskExitError+0x28>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60bb      	str	r3, [r7, #8]
}
 800b4f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4fa:	bf00      	nop
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0fc      	beq.n	800b4fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20000098 	.word	0x20000098
	...

0800b520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <pxCurrentTCBConst2>)
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	6808      	ldr	r0, [r1, #0]
 800b526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52a:	f380 8809 	msr	PSP, r0
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f04f 0000 	mov.w	r0, #0
 800b536:	f380 8811 	msr	BASEPRI, r0
 800b53a:	4770      	bx	lr
 800b53c:	f3af 8000 	nop.w

0800b540 <pxCurrentTCBConst2>:
 800b540:	20000f30 	.word	0x20000f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop

0800b548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b548:	4808      	ldr	r0, [pc, #32]	; (800b56c <prvPortStartFirstTask+0x24>)
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	6800      	ldr	r0, [r0, #0]
 800b54e:	f380 8808 	msr	MSP, r0
 800b552:	f04f 0000 	mov.w	r0, #0
 800b556:	f380 8814 	msr	CONTROL, r0
 800b55a:	b662      	cpsie	i
 800b55c:	b661      	cpsie	f
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	df00      	svc	0
 800b568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b56a:	bf00      	nop
 800b56c:	e000ed08 	.word	0xe000ed08

0800b570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b576:	4b46      	ldr	r3, [pc, #280]	; (800b690 <xPortStartScheduler+0x120>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a46      	ldr	r2, [pc, #280]	; (800b694 <xPortStartScheduler+0x124>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d10a      	bne.n	800b596 <xPortStartScheduler+0x26>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	613b      	str	r3, [r7, #16]
}
 800b592:	bf00      	nop
 800b594:	e7fe      	b.n	800b594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b596:	4b3e      	ldr	r3, [pc, #248]	; (800b690 <xPortStartScheduler+0x120>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a3f      	ldr	r2, [pc, #252]	; (800b698 <xPortStartScheduler+0x128>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10a      	bne.n	800b5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60fb      	str	r3, [r7, #12]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5b6:	4b39      	ldr	r3, [pc, #228]	; (800b69c <xPortStartScheduler+0x12c>)
 800b5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b31      	ldr	r3, [pc, #196]	; (800b6a0 <xPortStartScheduler+0x130>)
 800b5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5de:	4b31      	ldr	r3, [pc, #196]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5e4:	e009      	b.n	800b5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b5e6:	4b2f      	ldr	r3, [pc, #188]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	4a2d      	ldr	r2, [pc, #180]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b602:	2b80      	cmp	r3, #128	; 0x80
 800b604:	d0ef      	beq.n	800b5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b606:	4b27      	ldr	r3, [pc, #156]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1c3 0307 	rsb	r3, r3, #7
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d00a      	beq.n	800b628 <xPortStartScheduler+0xb8>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60bb      	str	r3, [r7, #8]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b628:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	021b      	lsls	r3, r3, #8
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b63a:	4a1a      	ldr	r2, [pc, #104]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a17      	ldr	r2, [pc, #92]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a14      	ldr	r2, [pc, #80]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b65e:	f000 f8dd 	bl	800b81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b662:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <xPortStartScheduler+0x13c>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b668:	f000 f8fc 	bl	800b864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b66c:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <xPortStartScheduler+0x140>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0f      	ldr	r2, [pc, #60]	; (800b6b0 <xPortStartScheduler+0x140>)
 800b672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b678:	f7ff ff66 	bl	800b548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b67c:	f7fe ff42 	bl	800a504 <vTaskSwitchContext>
	prvTaskExitError();
 800b680:	f7ff ff1c 	bl	800b4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	e000ed00 	.word	0xe000ed00
 800b694:	410fc271 	.word	0x410fc271
 800b698:	410fc270 	.word	0x410fc270
 800b69c:	e000e400 	.word	0xe000e400
 800b6a0:	2000155c 	.word	0x2000155c
 800b6a4:	20001560 	.word	0x20001560
 800b6a8:	e000ed20 	.word	0xe000ed20
 800b6ac:	20000098 	.word	0x20000098
 800b6b0:	e000ef34 	.word	0xe000ef34

0800b6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	607b      	str	r3, [r7, #4]
}
 800b6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <vPortEnterCritical+0x58>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <vPortEnterCritical+0x58>)
 800b6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <vPortEnterCritical+0x58>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10f      	bne.n	800b700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6e0:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <vPortEnterCritical+0x5c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	603b      	str	r3, [r7, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vPortEnterCritical+0x4a>
	}
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	20000098 	.word	0x20000098
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b71a:	4b12      	ldr	r3, [pc, #72]	; (800b764 <vPortExitCritical+0x50>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <vPortExitCritical+0x24>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	607b      	str	r3, [r7, #4]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b738:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <vPortExitCritical+0x50>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a09      	ldr	r2, [pc, #36]	; (800b764 <vPortExitCritical+0x50>)
 800b740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b742:	4b08      	ldr	r3, [pc, #32]	; (800b764 <vPortExitCritical+0x50>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <vPortExitCritical+0x42>
 800b74a:	2300      	movs	r3, #0
 800b74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f383 8811 	msr	BASEPRI, r3
}
 800b754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000098 	.word	0x20000098
	...

0800b770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b770:	f3ef 8009 	mrs	r0, PSP
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <pxCurrentTCBConst>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f01e 0f10 	tst.w	lr, #16
 800b780:	bf08      	it	eq
 800b782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	6010      	str	r0, [r2, #0]
 800b78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b794:	f380 8811 	msr	BASEPRI, r0
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f7fe feb0 	bl	800a504 <vTaskSwitchContext>
 800b7a4:	f04f 0000 	mov.w	r0, #0
 800b7a8:	f380 8811 	msr	BASEPRI, r0
 800b7ac:	bc09      	pop	{r0, r3}
 800b7ae:	6819      	ldr	r1, [r3, #0]
 800b7b0:	6808      	ldr	r0, [r1, #0]
 800b7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b6:	f01e 0f10 	tst.w	lr, #16
 800b7ba:	bf08      	it	eq
 800b7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7c0:	f380 8809 	msr	PSP, r0
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	f3af 8000 	nop.w

0800b7d0 <pxCurrentTCBConst>:
 800b7d0:	20000f30 	.word	0x20000f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop

0800b7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	607b      	str	r3, [r7, #4]
}
 800b7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7f2:	f7fe fdcd 	bl	800a390 <xTaskIncrementTick>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7fc:	4b06      	ldr	r3, [pc, #24]	; (800b818 <xPortSysTickHandler+0x40>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	2300      	movs	r3, #0
 800b806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	f383 8811 	msr	BASEPRI, r3
}
 800b80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <vPortSetupTimerInterrupt+0x38>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <vPortSetupTimerInterrupt+0x3c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0a      	ldr	r2, [pc, #40]	; (800b85c <vPortSetupTimerInterrupt+0x40>)
 800b832:	fba2 2303 	umull	r2, r3, r2, r3
 800b836:	099b      	lsrs	r3, r3, #6
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <vPortSetupTimerInterrupt+0x44>)
 800b83a:	3b01      	subs	r3, #1
 800b83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b840:	2207      	movs	r2, #7
 800b842:	601a      	str	r2, [r3, #0]
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	e000e010 	.word	0xe000e010
 800b854:	e000e018 	.word	0xe000e018
 800b858:	20000000 	.word	0x20000000
 800b85c:	10624dd3 	.word	0x10624dd3
 800b860:	e000e014 	.word	0xe000e014

0800b864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b874 <vPortEnableVFP+0x10>
 800b868:	6801      	ldr	r1, [r0, #0]
 800b86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b86e:	6001      	str	r1, [r0, #0]
 800b870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b872:	bf00      	nop
 800b874:	e000ed88 	.word	0xe000ed88

0800b878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b87e:	f3ef 8305 	mrs	r3, IPSR
 800b882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b0f      	cmp	r3, #15
 800b888:	d914      	bls.n	800b8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b88a:	4a17      	ldr	r2, [pc, #92]	; (800b8e8 <vPortValidateInterruptPriority+0x70>)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b894:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <vPortValidateInterruptPriority+0x74>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	7afa      	ldrb	r2, [r7, #11]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d20a      	bcs.n	800b8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	607b      	str	r3, [r7, #4]
}
 800b8b0:	bf00      	nop
 800b8b2:	e7fe      	b.n	800b8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <vPortValidateInterruptPriority+0x78>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <vPortValidateInterruptPriority+0x7c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d90a      	bls.n	800b8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	603b      	str	r3, [r7, #0]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <vPortValidateInterruptPriority+0x60>
	}
 800b8da:	bf00      	nop
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	e000e3f0 	.word	0xe000e3f0
 800b8ec:	2000155c 	.word	0x2000155c
 800b8f0:	e000ed0c 	.word	0xe000ed0c
 800b8f4:	20001560 	.word	0x20001560

0800b8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08a      	sub	sp, #40	; 0x28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b900:	2300      	movs	r3, #0
 800b902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b904:	f7fe fc88 	bl	800a218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b908:	4b5b      	ldr	r3, [pc, #364]	; (800ba78 <pvPortMalloc+0x180>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b910:	f000 f920 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b914:	4b59      	ldr	r3, [pc, #356]	; (800ba7c <pvPortMalloc+0x184>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f040 8093 	bne.w	800ba48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01d      	beq.n	800b964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b928:	2208      	movs	r2, #8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b00      	cmp	r3, #0
 800b938:	d014      	beq.n	800b964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f023 0307 	bic.w	r3, r3, #7
 800b940:	3308      	adds	r3, #8
 800b942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <pvPortMalloc+0x6c>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	617b      	str	r3, [r7, #20]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d06e      	beq.n	800ba48 <pvPortMalloc+0x150>
 800b96a:	4b45      	ldr	r3, [pc, #276]	; (800ba80 <pvPortMalloc+0x188>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	429a      	cmp	r2, r3
 800b972:	d869      	bhi.n	800ba48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b974:	4b43      	ldr	r3, [pc, #268]	; (800ba84 <pvPortMalloc+0x18c>)
 800b976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b978:	4b42      	ldr	r3, [pc, #264]	; (800ba84 <pvPortMalloc+0x18c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b97e:	e004      	b.n	800b98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d903      	bls.n	800b99c <pvPortMalloc+0xa4>
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1f1      	bne.n	800b980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b99c:	4b36      	ldr	r3, [pc, #216]	; (800ba78 <pvPortMalloc+0x180>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d050      	beq.n	800ba48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	4413      	add	r3, r2
 800b9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d91f      	bls.n	800ba08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	613b      	str	r3, [r7, #16]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	1ad2      	subs	r2, r2, r3
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba02:	69b8      	ldr	r0, [r7, #24]
 800ba04:	f000 f908 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <pvPortMalloc+0x188>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	4a1b      	ldr	r2, [pc, #108]	; (800ba80 <pvPortMalloc+0x188>)
 800ba14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba16:	4b1a      	ldr	r3, [pc, #104]	; (800ba80 <pvPortMalloc+0x188>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <pvPortMalloc+0x190>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d203      	bcs.n	800ba2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba22:	4b17      	ldr	r3, [pc, #92]	; (800ba80 <pvPortMalloc+0x188>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a18      	ldr	r2, [pc, #96]	; (800ba88 <pvPortMalloc+0x190>)
 800ba28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	4b13      	ldr	r3, [pc, #76]	; (800ba7c <pvPortMalloc+0x184>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	431a      	orrs	r2, r3
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <pvPortMalloc+0x194>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <pvPortMalloc+0x194>)
 800ba46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba48:	f7fe fbf4 	bl	800a234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	f003 0307 	and.w	r3, r3, #7
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <pvPortMalloc+0x174>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60fb      	str	r3, [r7, #12]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <pvPortMalloc+0x172>
	return pvReturn;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3728      	adds	r7, #40	; 0x28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	2000516c 	.word	0x2000516c
 800ba7c:	20005180 	.word	0x20005180
 800ba80:	20005170 	.word	0x20005170
 800ba84:	20005164 	.word	0x20005164
 800ba88:	20005174 	.word	0x20005174
 800ba8c:	20005178 	.word	0x20005178

0800ba90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d04d      	beq.n	800bb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baa2:	2308      	movs	r3, #8
 800baa4:	425b      	negs	r3, r3
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4413      	add	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <vPortFree+0xb8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4013      	ands	r3, r2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <vPortFree+0x44>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	60fb      	str	r3, [r7, #12]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00a      	beq.n	800baf2 <vPortFree+0x62>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60bb      	str	r3, [r7, #8]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <vPortFree+0xb8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4013      	ands	r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01e      	beq.n	800bb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d11a      	bne.n	800bb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <vPortFree+0xb8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	43db      	mvns	r3, r3
 800bb12:	401a      	ands	r2, r3
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb18:	f7fe fb7e 	bl	800a218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <vPortFree+0xbc>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4413      	add	r3, r2
 800bb26:	4a09      	ldr	r2, [pc, #36]	; (800bb4c <vPortFree+0xbc>)
 800bb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb2a:	6938      	ldr	r0, [r7, #16]
 800bb2c:	f000 f874 	bl	800bc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xc0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xc0>)
 800bb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb3a:	f7fe fb7b 	bl	800a234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20005180 	.word	0x20005180
 800bb4c:	20005170 	.word	0x20005170
 800bb50:	2000517c 	.word	0x2000517c

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20001564 	.word	0x20001564
 800bc04:	20005164 	.word	0x20005164
 800bc08:	2000516c 	.word	0x2000516c
 800bc0c:	20005174 	.word	0x20005174
 800bc10:	20005170 	.word	0x20005170
 800bc14:	20005180 	.word	0x20005180

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20005164 	.word	0x20005164
 800bcc8:	2000516c 	.word	0x2000516c

0800bccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4912      	ldr	r1, [pc, #72]	; (800bd1c <MX_USB_DEVICE_Init+0x50>)
 800bcd4:	4812      	ldr	r0, [pc, #72]	; (800bd20 <MX_USB_DEVICE_Init+0x54>)
 800bcd6:	f7fb fb3f 	bl	8007358 <USBD_Init>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bce0:	f7f5 f868 	bl	8000db4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bce4:	490f      	ldr	r1, [pc, #60]	; (800bd24 <MX_USB_DEVICE_Init+0x58>)
 800bce6:	480e      	ldr	r0, [pc, #56]	; (800bd20 <MX_USB_DEVICE_Init+0x54>)
 800bce8:	f7fb fb66 	bl	80073b8 <USBD_RegisterClass>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcf2:	f7f5 f85f 	bl	8000db4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcf6:	490c      	ldr	r1, [pc, #48]	; (800bd28 <MX_USB_DEVICE_Init+0x5c>)
 800bcf8:	4809      	ldr	r0, [pc, #36]	; (800bd20 <MX_USB_DEVICE_Init+0x54>)
 800bcfa:	f7fb fa9d 	bl	8007238 <USBD_CDC_RegisterInterface>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bd04:	f7f5 f856 	bl	8000db4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bd08:	4805      	ldr	r0, [pc, #20]	; (800bd20 <MX_USB_DEVICE_Init+0x54>)
 800bd0a:	f7fb fb8b 	bl	8007424 <USBD_Start>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bd14:	f7f5 f84e 	bl	8000db4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd18:	bf00      	nop
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	200000b0 	.word	0x200000b0
 800bd20:	20005184 	.word	0x20005184
 800bd24:	20000018 	.word	0x20000018
 800bd28:	2000009c 	.word	0x2000009c

0800bd2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bd30:	2200      	movs	r2, #0
 800bd32:	4905      	ldr	r1, [pc, #20]	; (800bd48 <CDC_Init_FS+0x1c>)
 800bd34:	4805      	ldr	r0, [pc, #20]	; (800bd4c <CDC_Init_FS+0x20>)
 800bd36:	f7fb fa99 	bl	800726c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd3a:	4905      	ldr	r1, [pc, #20]	; (800bd50 <CDC_Init_FS+0x24>)
 800bd3c:	4803      	ldr	r0, [pc, #12]	; (800bd4c <CDC_Init_FS+0x20>)
 800bd3e:	f7fb fab7 	bl	80072b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20005c60 	.word	0x20005c60
 800bd4c:	20005184 	.word	0x20005184
 800bd50:	20005460 	.word	0x20005460

0800bd54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd54:	b480      	push	{r7}
 800bd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	71fb      	strb	r3, [r7, #7]
 800bd70:	4613      	mov	r3, r2
 800bd72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	2b23      	cmp	r3, #35	; 0x23
 800bd78:	d84a      	bhi.n	800be10 <CDC_Control_FS+0xac>
 800bd7a:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <CDC_Control_FS+0x1c>)
 800bd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd80:	0800be11 	.word	0x0800be11
 800bd84:	0800be11 	.word	0x0800be11
 800bd88:	0800be11 	.word	0x0800be11
 800bd8c:	0800be11 	.word	0x0800be11
 800bd90:	0800be11 	.word	0x0800be11
 800bd94:	0800be11 	.word	0x0800be11
 800bd98:	0800be11 	.word	0x0800be11
 800bd9c:	0800be11 	.word	0x0800be11
 800bda0:	0800be11 	.word	0x0800be11
 800bda4:	0800be11 	.word	0x0800be11
 800bda8:	0800be11 	.word	0x0800be11
 800bdac:	0800be11 	.word	0x0800be11
 800bdb0:	0800be11 	.word	0x0800be11
 800bdb4:	0800be11 	.word	0x0800be11
 800bdb8:	0800be11 	.word	0x0800be11
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800be11 	.word	0x0800be11
 800bdc4:	0800be11 	.word	0x0800be11
 800bdc8:	0800be11 	.word	0x0800be11
 800bdcc:	0800be11 	.word	0x0800be11
 800bdd0:	0800be11 	.word	0x0800be11
 800bdd4:	0800be11 	.word	0x0800be11
 800bdd8:	0800be11 	.word	0x0800be11
 800bddc:	0800be11 	.word	0x0800be11
 800bde0:	0800be11 	.word	0x0800be11
 800bde4:	0800be11 	.word	0x0800be11
 800bde8:	0800be11 	.word	0x0800be11
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be11 	.word	0x0800be11
 800bdf4:	0800be11 	.word	0x0800be11
 800bdf8:	0800be11 	.word	0x0800be11
 800bdfc:	0800be11 	.word	0x0800be11
 800be00:	0800be11 	.word	0x0800be11
 800be04:	0800be11 	.word	0x0800be11
 800be08:	0800be11 	.word	0x0800be11
 800be0c:	0800be11 	.word	0x0800be11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800be10:	bf00      	nop
  }

  return (USBD_OK);
 800be12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	4805      	ldr	r0, [pc, #20]	; (800be44 <CDC_Receive_FS+0x24>)
 800be2e:	f7fb fa3f 	bl	80072b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be32:	4804      	ldr	r0, [pc, #16]	; (800be44 <CDC_Receive_FS+0x24>)
 800be34:	f7fb fa5a 	bl	80072ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20005184 	.word	0x20005184

0800be48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	4613      	mov	r3, r2
 800be54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
	...

0800be6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	6039      	str	r1, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2212      	movs	r2, #18
 800be7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be7e:	4b03      	ldr	r3, [pc, #12]	; (800be8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	200000cc 	.word	0x200000cc

0800be90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2204      	movs	r2, #4
 800bea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bea2:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	200000e0 	.word	0x200000e0

0800beb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d105      	bne.n	800bed2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4907      	ldr	r1, [pc, #28]	; (800bee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800beca:	4808      	ldr	r0, [pc, #32]	; (800beec <USBD_FS_ProductStrDescriptor+0x38>)
 800becc:	f7fc fc56 	bl	800877c <USBD_GetString>
 800bed0:	e004      	b.n	800bedc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4904      	ldr	r1, [pc, #16]	; (800bee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bed6:	4805      	ldr	r0, [pc, #20]	; (800beec <USBD_FS_ProductStrDescriptor+0x38>)
 800bed8:	f7fc fc50 	bl	800877c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20006460 	.word	0x20006460
 800beec:	0800c818 	.word	0x0800c818

0800bef0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	6039      	str	r1, [r7, #0]
 800befa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	4904      	ldr	r1, [pc, #16]	; (800bf10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf00:	4804      	ldr	r0, [pc, #16]	; (800bf14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf02:	f7fc fc3b 	bl	800877c <USBD_GetString>
  return USBD_StrDesc;
 800bf06:	4b02      	ldr	r3, [pc, #8]	; (800bf10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20006460 	.word	0x20006460
 800bf14:	0800c830 	.word	0x0800c830

0800bf18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	221a      	movs	r2, #26
 800bf28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf2a:	f000 f843 	bl	800bfb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf2e:	4b02      	ldr	r3, [pc, #8]	; (800bf38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	200000e4 	.word	0x200000e4

0800bf3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	6039      	str	r1, [r7, #0]
 800bf46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d105      	bne.n	800bf5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	4907      	ldr	r1, [pc, #28]	; (800bf70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf52:	4808      	ldr	r0, [pc, #32]	; (800bf74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf54:	f7fc fc12 	bl	800877c <USBD_GetString>
 800bf58:	e004      	b.n	800bf64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	4904      	ldr	r1, [pc, #16]	; (800bf70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf5e:	4805      	ldr	r0, [pc, #20]	; (800bf74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf60:	f7fc fc0c 	bl	800877c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf64:	4b02      	ldr	r3, [pc, #8]	; (800bf70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20006460 	.word	0x20006460
 800bf74:	0800c844 	.word	0x0800c844

0800bf78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	6039      	str	r1, [r7, #0]
 800bf82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d105      	bne.n	800bf96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4907      	ldr	r1, [pc, #28]	; (800bfac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf8e:	4808      	ldr	r0, [pc, #32]	; (800bfb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf90:	f7fc fbf4 	bl	800877c <USBD_GetString>
 800bf94:	e004      	b.n	800bfa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf9c:	f7fc fbee 	bl	800877c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfa0:	4b02      	ldr	r3, [pc, #8]	; (800bfac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20006460 	.word	0x20006460
 800bfb0:	0800c850 	.word	0x0800c850

0800bfb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <Get_SerialNum+0x44>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfc0:	4b0e      	ldr	r3, [pc, #56]	; (800bffc <Get_SerialNum+0x48>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfc6:	4b0e      	ldr	r3, [pc, #56]	; (800c000 <Get_SerialNum+0x4c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfda:	2208      	movs	r2, #8
 800bfdc:	4909      	ldr	r1, [pc, #36]	; (800c004 <Get_SerialNum+0x50>)
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 f814 	bl	800c00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	4908      	ldr	r1, [pc, #32]	; (800c008 <Get_SerialNum+0x54>)
 800bfe8:	68b8      	ldr	r0, [r7, #8]
 800bfea:	f000 f80f 	bl	800c00c <IntToUnicode>
  }
}
 800bfee:	bf00      	nop
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	1fff7a10 	.word	0x1fff7a10
 800bffc:	1fff7a14 	.word	0x1fff7a14
 800c000:	1fff7a18 	.word	0x1fff7a18
 800c004:	200000e6 	.word	0x200000e6
 800c008:	200000f6 	.word	0x200000f6

0800c00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c01e:	2300      	movs	r3, #0
 800c020:	75fb      	strb	r3, [r7, #23]
 800c022:	e027      	b.n	800c074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	0f1b      	lsrs	r3, r3, #28
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d80b      	bhi.n	800c044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	0f1b      	lsrs	r3, r3, #28
 800c030:	b2da      	uxtb	r2, r3
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	4619      	mov	r1, r3
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	440b      	add	r3, r1
 800c03c:	3230      	adds	r2, #48	; 0x30
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	e00a      	b.n	800c05a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	0f1b      	lsrs	r3, r3, #28
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	4619      	mov	r1, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	440b      	add	r3, r1
 800c054:	3237      	adds	r2, #55	; 0x37
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	3301      	adds	r3, #1
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	4413      	add	r3, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	3301      	adds	r3, #1
 800c072:	75fb      	strb	r3, [r7, #23]
 800c074:	7dfa      	ldrb	r2, [r7, #23]
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d3d3      	bcc.n	800c024 <IntToUnicode+0x18>
  }
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
	...

0800c08c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08a      	sub	sp, #40	; 0x28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	605a      	str	r2, [r3, #4]
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	60da      	str	r2, [r3, #12]
 800c0a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0ac:	d13a      	bne.n	800c124 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	4b1e      	ldr	r3, [pc, #120]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b6:	4a1d      	ldr	r2, [pc, #116]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0b8:	f043 0301 	orr.w	r3, r3, #1
 800c0bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c0be:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c0ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0dc:	230a      	movs	r3, #10
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0e0:	f107 0314 	add.w	r3, r7, #20
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4812      	ldr	r0, [pc, #72]	; (800c130 <HAL_PCD_MspInit+0xa4>)
 800c0e8:	f7f5 fd64 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0ec:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f0:	4a0e      	ldr	r2, [pc, #56]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f6:	6353      	str	r3, [r2, #52]	; 0x34
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c100:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c106:	6453      	str	r3, [r2, #68]	; 0x44
 800c108:	4b08      	ldr	r3, [pc, #32]	; (800c12c <HAL_PCD_MspInit+0xa0>)
 800c10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c10c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c114:	2200      	movs	r2, #0
 800c116:	2105      	movs	r1, #5
 800c118:	2043      	movs	r0, #67	; 0x43
 800c11a:	f7f5 fd21 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c11e:	2043      	movs	r0, #67	; 0x43
 800c120:	f7f5 fd3a 	bl	8001b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c124:	bf00      	nop
 800c126:	3728      	adds	r7, #40	; 0x28
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	40023800 	.word	0x40023800
 800c130:	40020000 	.word	0x40020000

0800c134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f7fb f9b7 	bl	80074be <USBD_LL_SetupStage>
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c16a:	78fa      	ldrb	r2, [r7, #3]
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	4619      	mov	r1, r3
 800c182:	f7fb f9f1 	bl	8007568 <USBD_LL_DataOutStage>
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c1a0:	78fa      	ldrb	r2, [r7, #3]
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	440b      	add	r3, r1
 800c1ae:	334c      	adds	r3, #76	; 0x4c
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7fb fa8a 	bl	80076ce <USBD_LL_DataInStage>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fb fbbe 	bl	8007952 <USBD_LL_SOF>
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d102      	bne.n	800c1f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73fb      	strb	r3, [r7, #15]
 800c1f6:	e008      	b.n	800c20a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d102      	bne.n	800c206 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c200:	2301      	movs	r3, #1
 800c202:	73fb      	strb	r3, [r7, #15]
 800c204:	e001      	b.n	800c20a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c206:	f7f4 fdd5 	bl	8000db4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c210:	7bfa      	ldrb	r2, [r7, #15]
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f7fb fb5e 	bl	80078d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c220:	4618      	mov	r0, r3
 800c222:	f7fb fb06 	bl	8007832 <USBD_LL_Reset>
}
 800c226:	bf00      	nop
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fb fb59 	bl	80078f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6812      	ldr	r2, [r2, #0]
 800c252:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c256:	f043 0301 	orr.w	r3, r3, #1
 800c25a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d005      	beq.n	800c270 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c264:	4b04      	ldr	r3, [pc, #16]	; (800c278 <HAL_PCD_SuspendCallback+0x48>)
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	4a03      	ldr	r2, [pc, #12]	; (800c278 <HAL_PCD_SuspendCallback+0x48>)
 800c26a:	f043 0306 	orr.w	r3, r3, #6
 800c26e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	e000ed00 	.word	0xe000ed00

0800c27c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fb fb49 	bl	8007922 <USBD_LL_Resume>
}
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fb fba1 	bl	80079f6 <USBD_LL_IsoOUTIncomplete>
}
 800c2b4:	bf00      	nop
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fb fb5d 	bl	8007992 <USBD_LL_IsoINIncomplete>
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fb fbb3 	bl	8007a5a <USBD_LL_DevConnected>
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fb fbb0 	bl	8007a70 <USBD_LL_DevDisconnected>
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d13c      	bne.n	800c3a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c328:	4a20      	ldr	r2, [pc, #128]	; (800c3ac <USBD_LL_Init+0x94>)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a1e      	ldr	r2, [pc, #120]	; (800c3ac <USBD_LL_Init+0x94>)
 800c334:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c338:	4b1c      	ldr	r3, [pc, #112]	; (800c3ac <USBD_LL_Init+0x94>)
 800c33a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c33e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c340:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <USBD_LL_Init+0x94>)
 800c342:	2204      	movs	r2, #4
 800c344:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c346:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <USBD_LL_Init+0x94>)
 800c348:	2202      	movs	r2, #2
 800c34a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c34c:	4b17      	ldr	r3, [pc, #92]	; (800c3ac <USBD_LL_Init+0x94>)
 800c34e:	2200      	movs	r2, #0
 800c350:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c352:	4b16      	ldr	r3, [pc, #88]	; (800c3ac <USBD_LL_Init+0x94>)
 800c354:	2202      	movs	r2, #2
 800c356:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c358:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <USBD_LL_Init+0x94>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c35e:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <USBD_LL_Init+0x94>)
 800c360:	2200      	movs	r2, #0
 800c362:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c364:	4b11      	ldr	r3, [pc, #68]	; (800c3ac <USBD_LL_Init+0x94>)
 800c366:	2200      	movs	r2, #0
 800c368:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c36a:	4b10      	ldr	r3, [pc, #64]	; (800c3ac <USBD_LL_Init+0x94>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c370:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <USBD_LL_Init+0x94>)
 800c372:	2200      	movs	r2, #0
 800c374:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c376:	480d      	ldr	r0, [pc, #52]	; (800c3ac <USBD_LL_Init+0x94>)
 800c378:	f7f5 fdeb 	bl	8001f52 <HAL_PCD_Init>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c382:	f7f4 fd17 	bl	8000db4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c386:	2180      	movs	r1, #128	; 0x80
 800c388:	4808      	ldr	r0, [pc, #32]	; (800c3ac <USBD_LL_Init+0x94>)
 800c38a:	f7f7 f842 	bl	8003412 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c38e:	2240      	movs	r2, #64	; 0x40
 800c390:	2100      	movs	r1, #0
 800c392:	4806      	ldr	r0, [pc, #24]	; (800c3ac <USBD_LL_Init+0x94>)
 800c394:	f7f6 fff6 	bl	8003384 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c398:	2280      	movs	r2, #128	; 0x80
 800c39a:	2101      	movs	r1, #1
 800c39c:	4803      	ldr	r0, [pc, #12]	; (800c3ac <USBD_LL_Init+0x94>)
 800c39e:	f7f6 fff1 	bl	8003384 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20006660 	.word	0x20006660

0800c3b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f5 fee0 	bl	800218c <HAL_PCD_Start>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f942 	bl	800c65c <USBD_Get_USB_Status>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	70fb      	strb	r3, [r7, #3]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	70bb      	strb	r3, [r7, #2]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c40e:	78bb      	ldrb	r3, [r7, #2]
 800c410:	883a      	ldrh	r2, [r7, #0]
 800c412:	78f9      	ldrb	r1, [r7, #3]
 800c414:	f7f6 fbb1 	bl	8002b7a <HAL_PCD_EP_Open>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f91c 	bl	800c65c <USBD_Get_USB_Status>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c428:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	460b      	mov	r3, r1
 800c43c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c44c:	78fa      	ldrb	r2, [r7, #3]
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f7f6 fbfa 	bl	8002c4a <HAL_PCD_EP_Close>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 f8fd 	bl	800c65c <USBD_Get_USB_Status>
 800c462:	4603      	mov	r3, r0
 800c464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c466:	7bbb      	ldrb	r3, [r7, #14]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c48a:	78fa      	ldrb	r2, [r7, #3]
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f6 fcd2 	bl	8002e38 <HAL_PCD_EP_SetStall>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 f8de 	bl	800c65c <USBD_Get_USB_Status>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4c8:	78fa      	ldrb	r2, [r7, #3]
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f6 fd17 	bl	8002f00 <HAL_PCD_EP_ClrStall>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 f8bf 	bl	800c65c <USBD_Get_USB_Status>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c504:	2b00      	cmp	r3, #0
 800c506:	da0b      	bge.n	800c520 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	4613      	mov	r3, r2
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	440b      	add	r3, r1
 800c51a:	333e      	adds	r3, #62	; 0x3e
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	e00b      	b.n	800c538 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c526:	68f9      	ldr	r1, [r7, #12]
 800c528:	4613      	mov	r3, r2
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	4413      	add	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	440b      	add	r3, r1
 800c532:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c55e:	78fa      	ldrb	r2, [r7, #3]
 800c560:	4611      	mov	r1, r2
 800c562:	4618      	mov	r0, r3
 800c564:	f7f6 fae4 	bl	8002b30 <HAL_PCD_SetAddress>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f874 	bl	800c65c <USBD_Get_USB_Status>
 800c574:	4603      	mov	r3, r0
 800c576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c578:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b086      	sub	sp, #24
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
 800c58e:	460b      	mov	r3, r1
 800c590:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5a0:	7af9      	ldrb	r1, [r7, #11]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	f7f6 fbfd 	bl	8002da4 <HAL_PCD_EP_Transmit>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 f853 	bl	800c65c <USBD_Get_USB_Status>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	607a      	str	r2, [r7, #4]
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5e2:	7af9      	ldrb	r1, [r7, #11]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	f7f6 fb79 	bl	8002cde <HAL_PCD_EP_Receive>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 f832 	bl	800c65c <USBD_Get_USB_Status>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b082      	sub	sp, #8
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	4611      	mov	r1, r2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7f6 fba9 	bl	8002d74 <HAL_PCD_EP_GetRxCount>
 800c622:	4603      	mov	r3, r0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c634:	4b03      	ldr	r3, [pc, #12]	; (800c644 <USBD_static_malloc+0x18>)
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20006b6c 	.word	0x20006b6c

0800c648 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]

}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c66a:	79fb      	ldrb	r3, [r7, #7]
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d817      	bhi.n	800c6a0 <USBD_Get_USB_Status+0x44>
 800c670:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <USBD_Get_USB_Status+0x1c>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c689 	.word	0x0800c689
 800c67c:	0800c68f 	.word	0x0800c68f
 800c680:	0800c695 	.word	0x0800c695
 800c684:	0800c69b 	.word	0x0800c69b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]
    break;
 800c68c:	e00b      	b.n	800c6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
    break;
 800c692:	e008      	b.n	800c6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c694:	2301      	movs	r3, #1
 800c696:	73fb      	strb	r3, [r7, #15]
    break;
 800c698:	e005      	b.n	800c6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c69a:	2303      	movs	r3, #3
 800c69c:	73fb      	strb	r3, [r7, #15]
    break;
 800c69e:	e002      	b.n	800c6a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a4:	bf00      	nop
  }
  return usb_status;
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <__libc_init_array>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	4d0d      	ldr	r5, [pc, #52]	; (800c6ec <__libc_init_array+0x38>)
 800c6b8:	4c0d      	ldr	r4, [pc, #52]	; (800c6f0 <__libc_init_array+0x3c>)
 800c6ba:	1b64      	subs	r4, r4, r5
 800c6bc:	10a4      	asrs	r4, r4, #2
 800c6be:	2600      	movs	r6, #0
 800c6c0:	42a6      	cmp	r6, r4
 800c6c2:	d109      	bne.n	800c6d8 <__libc_init_array+0x24>
 800c6c4:	4d0b      	ldr	r5, [pc, #44]	; (800c6f4 <__libc_init_array+0x40>)
 800c6c6:	4c0c      	ldr	r4, [pc, #48]	; (800c6f8 <__libc_init_array+0x44>)
 800c6c8:	f000 f82e 	bl	800c728 <_init>
 800c6cc:	1b64      	subs	r4, r4, r5
 800c6ce:	10a4      	asrs	r4, r4, #2
 800c6d0:	2600      	movs	r6, #0
 800c6d2:	42a6      	cmp	r6, r4
 800c6d4:	d105      	bne.n	800c6e2 <__libc_init_array+0x2e>
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}
 800c6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6dc:	4798      	blx	r3
 800c6de:	3601      	adds	r6, #1
 800c6e0:	e7ee      	b.n	800c6c0 <__libc_init_array+0xc>
 800c6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e6:	4798      	blx	r3
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	e7f2      	b.n	800c6d2 <__libc_init_array+0x1e>
 800c6ec:	0800c9c4 	.word	0x0800c9c4
 800c6f0:	0800c9c4 	.word	0x0800c9c4
 800c6f4:	0800c9c4 	.word	0x0800c9c4
 800c6f8:	0800c9c8 	.word	0x0800c9c8

0800c6fc <memcpy>:
 800c6fc:	440a      	add	r2, r1
 800c6fe:	4291      	cmp	r1, r2
 800c700:	f100 33ff 	add.w	r3, r0, #4294967295
 800c704:	d100      	bne.n	800c708 <memcpy+0xc>
 800c706:	4770      	bx	lr
 800c708:	b510      	push	{r4, lr}
 800c70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c712:	4291      	cmp	r1, r2
 800c714:	d1f9      	bne.n	800c70a <memcpy+0xe>
 800c716:	bd10      	pop	{r4, pc}

0800c718 <memset>:
 800c718:	4402      	add	r2, r0
 800c71a:	4603      	mov	r3, r0
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d100      	bne.n	800c722 <memset+0xa>
 800c720:	4770      	bx	lr
 800c722:	f803 1b01 	strb.w	r1, [r3], #1
 800c726:	e7f9      	b.n	800c71c <memset+0x4>

0800c728 <_init>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	bf00      	nop
 800c72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72e:	bc08      	pop	{r3}
 800c730:	469e      	mov	lr, r3
 800c732:	4770      	bx	lr

0800c734 <_fini>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	bf00      	nop
 800c738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73a:	bc08      	pop	{r3}
 800c73c:	469e      	mov	lr, r3
 800c73e:	4770      	bx	lr
