
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8e4  0800c8e4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8e4  0800c8e4  0001c8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8ec  0800c8ec  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800c8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00006c34  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006d34  20006d34  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ca5  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b5d  00000000  00000000  00046dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0004c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c20  00000000  00000000  0004e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bb3  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026cd9  00000000  00000000  00077fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6486  00000000  00000000  0009ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175132  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ed4  00000000  00000000  00175184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c658 	.word	0x0800c658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800c658 	.word	0x0800c658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_frsub>:
 80001e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__addsf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_fsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001ec <__addsf3>:
 80001ec:	0042      	lsls	r2, r0, #1
 80001ee:	bf1f      	itttt	ne
 80001f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f4:	ea92 0f03 	teqne	r2, r3
 80001f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000200:	d06a      	beq.n	80002d8 <__addsf3+0xec>
 8000202:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000206:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800020a:	bfc1      	itttt	gt
 800020c:	18d2      	addgt	r2, r2, r3
 800020e:	4041      	eorgt	r1, r0
 8000210:	4048      	eorgt	r0, r1
 8000212:	4041      	eorgt	r1, r0
 8000214:	bfb8      	it	lt
 8000216:	425b      	neglt	r3, r3
 8000218:	2b19      	cmp	r3, #25
 800021a:	bf88      	it	hi
 800021c:	4770      	bxhi	lr
 800021e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000226:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4240      	negne	r0, r0
 800022e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000232:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000236:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4249      	negne	r1, r1
 800023e:	ea92 0f03 	teq	r2, r3
 8000242:	d03f      	beq.n	80002c4 <__addsf3+0xd8>
 8000244:	f1a2 0201 	sub.w	r2, r2, #1
 8000248:	fa41 fc03 	asr.w	ip, r1, r3
 800024c:	eb10 000c 	adds.w	r0, r0, ip
 8000250:	f1c3 0320 	rsb	r3, r3, #32
 8000254:	fa01 f103 	lsl.w	r1, r1, r3
 8000258:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800025c:	d502      	bpl.n	8000264 <__addsf3+0x78>
 800025e:	4249      	negs	r1, r1
 8000260:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000264:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000268:	d313      	bcc.n	8000292 <__addsf3+0xa6>
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d306      	bcc.n	800027e <__addsf3+0x92>
 8000270:	0840      	lsrs	r0, r0, #1
 8000272:	ea4f 0131 	mov.w	r1, r1, rrx
 8000276:	f102 0201 	add.w	r2, r2, #1
 800027a:	2afe      	cmp	r2, #254	; 0xfe
 800027c:	d251      	bcs.n	8000322 <__addsf3+0x136>
 800027e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	ea40 0003 	orr.w	r0, r0, r3
 8000290:	4770      	bx	lr
 8000292:	0049      	lsls	r1, r1, #1
 8000294:	eb40 0000 	adc.w	r0, r0, r0
 8000298:	3a01      	subs	r2, #1
 800029a:	bf28      	it	cs
 800029c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002a0:	d2ed      	bcs.n	800027e <__addsf3+0x92>
 80002a2:	fab0 fc80 	clz	ip, r0
 80002a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002aa:	ebb2 020c 	subs.w	r2, r2, ip
 80002ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80002b2:	bfaa      	itet	ge
 80002b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b8:	4252      	neglt	r2, r2
 80002ba:	4318      	orrge	r0, r3
 80002bc:	bfbc      	itt	lt
 80002be:	40d0      	lsrlt	r0, r2
 80002c0:	4318      	orrlt	r0, r3
 80002c2:	4770      	bx	lr
 80002c4:	f092 0f00 	teq	r2, #0
 80002c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002cc:	bf06      	itte	eq
 80002ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002d2:	3201      	addeq	r2, #1
 80002d4:	3b01      	subne	r3, #1
 80002d6:	e7b5      	b.n	8000244 <__addsf3+0x58>
 80002d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002e0:	bf18      	it	ne
 80002e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e6:	d021      	beq.n	800032c <__addsf3+0x140>
 80002e8:	ea92 0f03 	teq	r2, r3
 80002ec:	d004      	beq.n	80002f8 <__addsf3+0x10c>
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf08      	it	eq
 80002f4:	4608      	moveq	r0, r1
 80002f6:	4770      	bx	lr
 80002f8:	ea90 0f01 	teq	r0, r1
 80002fc:	bf1c      	itt	ne
 80002fe:	2000      	movne	r0, #0
 8000300:	4770      	bxne	lr
 8000302:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000306:	d104      	bne.n	8000312 <__addsf3+0x126>
 8000308:	0040      	lsls	r0, r0, #1
 800030a:	bf28      	it	cs
 800030c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000310:	4770      	bx	lr
 8000312:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000316:	bf3c      	itt	cc
 8000318:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800031c:	4770      	bxcc	lr
 800031e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000322:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	4770      	bx	lr
 800032c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000330:	bf16      	itet	ne
 8000332:	4608      	movne	r0, r1
 8000334:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000338:	4601      	movne	r1, r0
 800033a:	0242      	lsls	r2, r0, #9
 800033c:	bf06      	itte	eq
 800033e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000342:	ea90 0f01 	teqeq	r0, r1
 8000346:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800034a:	4770      	bx	lr

0800034c <__aeabi_ui2f>:
 800034c:	f04f 0300 	mov.w	r3, #0
 8000350:	e004      	b.n	800035c <__aeabi_i2f+0x8>
 8000352:	bf00      	nop

08000354 <__aeabi_i2f>:
 8000354:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000358:	bf48      	it	mi
 800035a:	4240      	negmi	r0, r0
 800035c:	ea5f 0c00 	movs.w	ip, r0
 8000360:	bf08      	it	eq
 8000362:	4770      	bxeq	lr
 8000364:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000368:	4601      	mov	r1, r0
 800036a:	f04f 0000 	mov.w	r0, #0
 800036e:	e01c      	b.n	80003aa <__aeabi_l2f+0x2a>

08000370 <__aeabi_ul2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	e00a      	b.n	8000394 <__aeabi_l2f+0x14>
 800037e:	bf00      	nop

08000380 <__aeabi_l2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__aeabi_l2f+0x14>
 800038e:	4240      	negs	r0, r0
 8000390:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000394:	ea5f 0c01 	movs.w	ip, r1
 8000398:	bf02      	ittt	eq
 800039a:	4684      	moveq	ip, r0
 800039c:	4601      	moveq	r1, r0
 800039e:	2000      	moveq	r0, #0
 80003a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003a4:	bf08      	it	eq
 80003a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ae:	fabc f28c 	clz	r2, ip
 80003b2:	3a08      	subs	r2, #8
 80003b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b8:	db10      	blt.n	80003dc <__aeabi_l2f+0x5c>
 80003ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80003be:	4463      	add	r3, ip
 80003c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c4:	f1c2 0220 	rsb	r2, r2, #32
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	fa20 f202 	lsr.w	r2, r0, r2
 80003d0:	eb43 0002 	adc.w	r0, r3, r2
 80003d4:	bf08      	it	eq
 80003d6:	f020 0001 	biceq.w	r0, r0, #1
 80003da:	4770      	bx	lr
 80003dc:	f102 0220 	add.w	r2, r2, #32
 80003e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003ec:	fa21 f202 	lsr.w	r2, r1, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003fa:	4770      	bx	lr

080003fc <__aeabi_uldivmod>:
 80003fc:	b953      	cbnz	r3, 8000414 <__aeabi_uldivmod+0x18>
 80003fe:	b94a      	cbnz	r2, 8000414 <__aeabi_uldivmod+0x18>
 8000400:	2900      	cmp	r1, #0
 8000402:	bf08      	it	eq
 8000404:	2800      	cmpeq	r0, #0
 8000406:	bf1c      	itt	ne
 8000408:	f04f 31ff 	movne.w	r1, #4294967295
 800040c:	f04f 30ff 	movne.w	r0, #4294967295
 8000410:	f000 b974 	b.w	80006fc <__aeabi_idiv0>
 8000414:	f1ad 0c08 	sub.w	ip, sp, #8
 8000418:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800041c:	f000 f806 	bl	800042c <__udivmoddi4>
 8000420:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000428:	b004      	add	sp, #16
 800042a:	4770      	bx	lr

0800042c <__udivmoddi4>:
 800042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000430:	9d08      	ldr	r5, [sp, #32]
 8000432:	4604      	mov	r4, r0
 8000434:	468e      	mov	lr, r1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d14d      	bne.n	80004d6 <__udivmoddi4+0xaa>
 800043a:	428a      	cmp	r2, r1
 800043c:	4694      	mov	ip, r2
 800043e:	d969      	bls.n	8000514 <__udivmoddi4+0xe8>
 8000440:	fab2 f282 	clz	r2, r2
 8000444:	b152      	cbz	r2, 800045c <__udivmoddi4+0x30>
 8000446:	fa01 f302 	lsl.w	r3, r1, r2
 800044a:	f1c2 0120 	rsb	r1, r2, #32
 800044e:	fa20 f101 	lsr.w	r1, r0, r1
 8000452:	fa0c fc02 	lsl.w	ip, ip, r2
 8000456:	ea41 0e03 	orr.w	lr, r1, r3
 800045a:	4094      	lsls	r4, r2
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	0c21      	lsrs	r1, r4, #16
 8000462:	fbbe f6f8 	udiv	r6, lr, r8
 8000466:	fa1f f78c 	uxth.w	r7, ip
 800046a:	fb08 e316 	mls	r3, r8, r6, lr
 800046e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000472:	fb06 f107 	mul.w	r1, r6, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d90a      	bls.n	8000490 <__udivmoddi4+0x64>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000482:	f080 811f 	bcs.w	80006c4 <__udivmoddi4+0x298>
 8000486:	4299      	cmp	r1, r3
 8000488:	f240 811c 	bls.w	80006c4 <__udivmoddi4+0x298>
 800048c:	3e02      	subs	r6, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb00 f707 	mul.w	r7, r0, r7
 80004a4:	42a7      	cmp	r7, r4
 80004a6:	d90a      	bls.n	80004be <__udivmoddi4+0x92>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	f080 810a 	bcs.w	80006c8 <__udivmoddi4+0x29c>
 80004b4:	42a7      	cmp	r7, r4
 80004b6:	f240 8107 	bls.w	80006c8 <__udivmoddi4+0x29c>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004c2:	1be4      	subs	r4, r4, r7
 80004c4:	2600      	movs	r6, #0
 80004c6:	b11d      	cbz	r5, 80004d0 <__udivmoddi4+0xa4>
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	2300      	movs	r3, #0
 80004cc:	e9c5 4300 	strd	r4, r3, [r5]
 80004d0:	4631      	mov	r1, r6
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0xc2>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80ef 	beq.w	80006be <__udivmoddi4+0x292>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x160>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0xd4>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80f9 	bhi.w	80006f2 <__udivmoddi4+0x2c6>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0303 	sbc.w	r3, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	469e      	mov	lr, r3
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0e0      	beq.n	80004d0 <__udivmoddi4+0xa4>
 800050e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000512:	e7dd      	b.n	80004d0 <__udivmoddi4+0xa4>
 8000514:	b902      	cbnz	r2, 8000518 <__udivmoddi4+0xec>
 8000516:	deff      	udf	#255	; 0xff
 8000518:	fab2 f282 	clz	r2, r2
 800051c:	2a00      	cmp	r2, #0
 800051e:	f040 8092 	bne.w	8000646 <__udivmoddi4+0x21a>
 8000522:	eba1 010c 	sub.w	r1, r1, ip
 8000526:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	2601      	movs	r6, #1
 8000530:	0c20      	lsrs	r0, r4, #16
 8000532:	fbb1 f3f7 	udiv	r3, r1, r7
 8000536:	fb07 1113 	mls	r1, r7, r3, r1
 800053a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800053e:	fb0e f003 	mul.w	r0, lr, r3
 8000542:	4288      	cmp	r0, r1
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x12c>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f103 38ff 	add.w	r8, r3, #4294967295
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x12a>
 8000550:	4288      	cmp	r0, r1
 8000552:	f200 80cb 	bhi.w	80006ec <__udivmoddi4+0x2c0>
 8000556:	4643      	mov	r3, r8
 8000558:	1a09      	subs	r1, r1, r0
 800055a:	b2a4      	uxth	r4, r4
 800055c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000560:	fb07 1110 	mls	r1, r7, r0, r1
 8000564:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000568:	fb0e fe00 	mul.w	lr, lr, r0
 800056c:	45a6      	cmp	lr, r4
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x156>
 8000570:	eb1c 0404 	adds.w	r4, ip, r4
 8000574:	f100 31ff 	add.w	r1, r0, #4294967295
 8000578:	d202      	bcs.n	8000580 <__udivmoddi4+0x154>
 800057a:	45a6      	cmp	lr, r4
 800057c:	f200 80bb 	bhi.w	80006f6 <__udivmoddi4+0x2ca>
 8000580:	4608      	mov	r0, r1
 8000582:	eba4 040e 	sub.w	r4, r4, lr
 8000586:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x9a>
 800058c:	f1c6 0720 	rsb	r7, r6, #32
 8000590:	40b3      	lsls	r3, r6
 8000592:	fa22 fc07 	lsr.w	ip, r2, r7
 8000596:	ea4c 0c03 	orr.w	ip, ip, r3
 800059a:	fa20 f407 	lsr.w	r4, r0, r7
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	431c      	orrs	r4, r3
 80005a4:	40f9      	lsrs	r1, r7
 80005a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005aa:	fa00 f306 	lsl.w	r3, r0, r6
 80005ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80005b2:	0c20      	lsrs	r0, r4, #16
 80005b4:	fa1f fe8c 	uxth.w	lr, ip
 80005b8:	fb09 1118 	mls	r1, r9, r8, r1
 80005bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005c0:	fb08 f00e 	mul.w	r0, r8, lr
 80005c4:	4288      	cmp	r0, r1
 80005c6:	fa02 f206 	lsl.w	r2, r2, r6
 80005ca:	d90b      	bls.n	80005e4 <__udivmoddi4+0x1b8>
 80005cc:	eb1c 0101 	adds.w	r1, ip, r1
 80005d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80005d4:	f080 8088 	bcs.w	80006e8 <__udivmoddi4+0x2bc>
 80005d8:	4288      	cmp	r0, r1
 80005da:	f240 8085 	bls.w	80006e8 <__udivmoddi4+0x2bc>
 80005de:	f1a8 0802 	sub.w	r8, r8, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	1a09      	subs	r1, r1, r0
 80005e6:	b2a4      	uxth	r4, r4
 80005e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80005ec:	fb09 1110 	mls	r1, r9, r0, r1
 80005f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f8:	458e      	cmp	lr, r1
 80005fa:	d908      	bls.n	800060e <__udivmoddi4+0x1e2>
 80005fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000600:	f100 34ff 	add.w	r4, r0, #4294967295
 8000604:	d26c      	bcs.n	80006e0 <__udivmoddi4+0x2b4>
 8000606:	458e      	cmp	lr, r1
 8000608:	d96a      	bls.n	80006e0 <__udivmoddi4+0x2b4>
 800060a:	3802      	subs	r0, #2
 800060c:	4461      	add	r1, ip
 800060e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000612:	fba0 9402 	umull	r9, r4, r0, r2
 8000616:	eba1 010e 	sub.w	r1, r1, lr
 800061a:	42a1      	cmp	r1, r4
 800061c:	46c8      	mov	r8, r9
 800061e:	46a6      	mov	lr, r4
 8000620:	d356      	bcc.n	80006d0 <__udivmoddi4+0x2a4>
 8000622:	d053      	beq.n	80006cc <__udivmoddi4+0x2a0>
 8000624:	b15d      	cbz	r5, 800063e <__udivmoddi4+0x212>
 8000626:	ebb3 0208 	subs.w	r2, r3, r8
 800062a:	eb61 010e 	sbc.w	r1, r1, lr
 800062e:	fa01 f707 	lsl.w	r7, r1, r7
 8000632:	fa22 f306 	lsr.w	r3, r2, r6
 8000636:	40f1      	lsrs	r1, r6
 8000638:	431f      	orrs	r7, r3
 800063a:	e9c5 7100 	strd	r7, r1, [r5]
 800063e:	2600      	movs	r6, #0
 8000640:	4631      	mov	r1, r6
 8000642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000646:	f1c2 0320 	rsb	r3, r2, #32
 800064a:	40d8      	lsrs	r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	fa21 f303 	lsr.w	r3, r1, r3
 8000654:	4091      	lsls	r1, r2
 8000656:	4301      	orrs	r1, r0
 8000658:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065c:	fa1f fe8c 	uxth.w	lr, ip
 8000660:	fbb3 f0f7 	udiv	r0, r3, r7
 8000664:	fb07 3610 	mls	r6, r7, r0, r3
 8000668:	0c0b      	lsrs	r3, r1, #16
 800066a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800066e:	fb00 f60e 	mul.w	r6, r0, lr
 8000672:	429e      	cmp	r6, r3
 8000674:	fa04 f402 	lsl.w	r4, r4, r2
 8000678:	d908      	bls.n	800068c <__udivmoddi4+0x260>
 800067a:	eb1c 0303 	adds.w	r3, ip, r3
 800067e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000682:	d22f      	bcs.n	80006e4 <__udivmoddi4+0x2b8>
 8000684:	429e      	cmp	r6, r3
 8000686:	d92d      	bls.n	80006e4 <__udivmoddi4+0x2b8>
 8000688:	3802      	subs	r0, #2
 800068a:	4463      	add	r3, ip
 800068c:	1b9b      	subs	r3, r3, r6
 800068e:	b289      	uxth	r1, r1
 8000690:	fbb3 f6f7 	udiv	r6, r3, r7
 8000694:	fb07 3316 	mls	r3, r7, r6, r3
 8000698:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800069c:	fb06 f30e 	mul.w	r3, r6, lr
 80006a0:	428b      	cmp	r3, r1
 80006a2:	d908      	bls.n	80006b6 <__udivmoddi4+0x28a>
 80006a4:	eb1c 0101 	adds.w	r1, ip, r1
 80006a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80006ac:	d216      	bcs.n	80006dc <__udivmoddi4+0x2b0>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d914      	bls.n	80006dc <__udivmoddi4+0x2b0>
 80006b2:	3e02      	subs	r6, #2
 80006b4:	4461      	add	r1, ip
 80006b6:	1ac9      	subs	r1, r1, r3
 80006b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006bc:	e738      	b.n	8000530 <__udivmoddi4+0x104>
 80006be:	462e      	mov	r6, r5
 80006c0:	4628      	mov	r0, r5
 80006c2:	e705      	b.n	80004d0 <__udivmoddi4+0xa4>
 80006c4:	4606      	mov	r6, r0
 80006c6:	e6e3      	b.n	8000490 <__udivmoddi4+0x64>
 80006c8:	4618      	mov	r0, r3
 80006ca:	e6f8      	b.n	80004be <__udivmoddi4+0x92>
 80006cc:	454b      	cmp	r3, r9
 80006ce:	d2a9      	bcs.n	8000624 <__udivmoddi4+0x1f8>
 80006d0:	ebb9 0802 	subs.w	r8, r9, r2
 80006d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d8:	3801      	subs	r0, #1
 80006da:	e7a3      	b.n	8000624 <__udivmoddi4+0x1f8>
 80006dc:	4646      	mov	r6, r8
 80006de:	e7ea      	b.n	80006b6 <__udivmoddi4+0x28a>
 80006e0:	4620      	mov	r0, r4
 80006e2:	e794      	b.n	800060e <__udivmoddi4+0x1e2>
 80006e4:	4640      	mov	r0, r8
 80006e6:	e7d1      	b.n	800068c <__udivmoddi4+0x260>
 80006e8:	46d0      	mov	r8, sl
 80006ea:	e77b      	b.n	80005e4 <__udivmoddi4+0x1b8>
 80006ec:	3b02      	subs	r3, #2
 80006ee:	4461      	add	r1, ip
 80006f0:	e732      	b.n	8000558 <__udivmoddi4+0x12c>
 80006f2:	4630      	mov	r0, r6
 80006f4:	e709      	b.n	800050a <__udivmoddi4+0xde>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	e742      	b.n	8000582 <__udivmoddi4+0x156>

080006fc <__aeabi_idiv0>:
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <initBarometerTask>:
	osMutexRobust,    				    	  // attr_bits
	NULL,                                     // memory for control block
	0U                                        // size for control block
};

void initBarometerTask(SPI_HandleTypeDef hspi1) {
 8000700:	b084      	sub	sp, #16
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
 8000706:	f107 0c08 	add.w	ip, r7, #8
 800070a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	baro_hspi1 = hspi1;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <initBarometerTask+0x48>)
 8000710:	4618      	mov	r0, r3
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2258      	movs	r2, #88	; 0x58
 8000718:	4619      	mov	r1, r3
 800071a:	f00b ff87 	bl	800c62c <memcpy>

	barometre_mutex_id = osMutexNew(&Barometre_Mutex_attr);
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <initBarometerTask+0x4c>)
 8000720:	f008 f9e1 	bl	8008ae6 <osMutexNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <initBarometerTask+0x50>)
 8000728:	6013      	str	r3, [r2, #0]

	osThreadNew(barometerTask, NULL, &barometerHeader_attr);
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <initBarometerTask+0x54>)
 800072c:	2100      	movs	r1, #0
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <initBarometerTask+0x58>)
 8000730:	f008 f92c 	bl	800898c <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init barometer task\r\n");
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <initBarometerTask+0x5c>)
 8000736:	2000      	movs	r0, #0
 8000738:	f001 f894 	bl	8001864 <SEGGER_RTT_WriteString>
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	2000014c 	.word	0x2000014c
 800074c:	0800c7ac 	.word	0x0800c7ac
 8000750:	200001a4 	.word	0x200001a4
 8000754:	0800c788 	.word	0x0800c788
 8000758:	08000761 	.word	0x08000761
 800075c:	0800c680 	.word	0x0800c680

08000760 <barometerTask>:

__NO_RETURN void barometerTask() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	barometer_init(&barometer, SPI1_CS_ALTIMITER_GPIO_Port, SPI1_CS_ALTIMITER_Pin, &baro_hspi1);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <barometerTask+0x3c>)
 8000766:	2208      	movs	r2, #8
 8000768:	490d      	ldr	r1, [pc, #52]	; (80007a0 <barometerTask+0x40>)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <barometerTask+0x44>)
 800076c:	f000 fcd7 	bl	800111e <barometer_init>
	barometer_update(&barometer);
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <barometerTask+0x44>)
 8000772:	f000 fe01 	bl	8001378 <barometer_update>

	while(1) {
		osMutexAcquire(barometre_mutex_id, 0U);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <barometerTask+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f008 fa38 	bl	8008bf2 <osMutexAcquire>
			barometer_update(&barometer);
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <barometerTask+0x44>)
 8000784:	f000 fdf8 	bl	8001378 <barometer_update>
		osMutexRelease(barometre_mutex_id);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <barometerTask+0x48>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fa7b 	bl	8008c88 <osMutexRelease>

		osDelay(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f008 f98c 	bl	8008ab0 <osDelay>
		osMutexAcquire(barometre_mutex_id, 0U);
 8000798:	e7ed      	b.n	8000776 <barometerTask+0x16>
 800079a:	bf00      	nop
 800079c:	2000014c 	.word	0x2000014c
 80007a0:	40020000 	.word	0x40020000
 80007a4:	2000011c 	.word	0x2000011c
 80007a8:	200001a4 	.word	0x200001a4

080007ac <initBuzzerTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initBuzzerTask() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	osThreadId_t buzzer_id = osThreadNew(buzzerTask, NULL, &buzzerHeader_attr);
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <initBuzzerTask+0x24>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <initBuzzerTask+0x28>)
 80007b8:	f008 f8e8 	bl	800898c <osThreadNew>
 80007bc:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 80007be:	4906      	ldr	r1, [pc, #24]	; (80007d8 <initBuzzerTask+0x2c>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f001 f84f 	bl	8001864 <SEGGER_RTT_WriteString>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	0800c7bc 	.word	0x0800c7bc
 80007d4:	080007dd 	.word	0x080007dd
 80007d8:	0800c698 	.word	0x0800c698

080007dc <buzzerTask>:

__NO_RETURN void buzzerTask() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f008 f965 	bl	8008ab0 <osDelay>
 80007e6:	e7fb      	b.n	80007e0 <buzzerTask+0x4>

080007e8 <initHeartbeatTask>:
  .priority = (osPriority_t) osPriorityIdle, //Set initial thread priority to high
  .stack_size = 512
};


void initHeartbeatTask() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	osThreadId_t heartbeat_id = osThreadNew(heartbeatTask, NULL, &heartbeatHeader_attr);
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <initHeartbeatTask+0x24>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <initHeartbeatTask+0x28>)
 80007f4:	f008 f8ca 	bl	800898c <osThreadNew>
 80007f8:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init heartbeat task\r\n");
 80007fa:	4906      	ldr	r1, [pc, #24]	; (8000814 <initHeartbeatTask+0x2c>)
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 f831 	bl	8001864 <SEGGER_RTT_WriteString>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	0800c7e0 	.word	0x0800c7e0
 8000810:	08000819 	.word	0x08000819
 8000814:	0800c6a8 	.word	0x0800c6a8

08000818 <heartbeatTask>:

__NO_RETURN void heartbeatTask() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f008 f947 	bl	8008ab0 <osDelay>
 8000822:	e7fb      	b.n	800081c <heartbeatTask+0x4>

08000824 <initIMUTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 2048
};


void initIMUTask(SPI_HandleTypeDef hspi1) {
 8000824:	b084      	sub	sp, #16
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	f107 0c10 	add.w	ip, r7, #16
 8000830:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osThreadId_t imu_id = osThreadNew(IMUTask, NULL, &imuHeader_attr);
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <initIMUTask+0x34>)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <initIMUTask+0x38>)
 800083a:	f008 f8a7 	bl	800898c <osThreadNew>
 800083e:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init imu task\r\n");
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <initIMUTask+0x3c>)
 8000842:	2000      	movs	r0, #0
 8000844:	f001 f80e 	bl	8001864 <SEGGER_RTT_WriteString>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000852:	b004      	add	sp, #16
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	0800c804 	.word	0x0800c804
 800085c:	08000865 	.word	0x08000865
 8000860:	0800c6c0 	.word	0x0800c6c0

08000864 <IMUTask>:

__NO_RETURN void IMUTask() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f008 f921 	bl	8008ab0 <osDelay>
 800086e:	e7fb      	b.n	8000868 <IMUTask+0x4>

08000870 <initMainTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 4096
};


void initMainTask() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	osThreadId_t main_id = osThreadNew(mainTask, NULL, &mainHeader_attr);
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <initMainTask+0x24>)
 8000878:	2100      	movs	r1, #0
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <initMainTask+0x28>)
 800087c:	f008 f886 	bl	800898c <osThreadNew>
 8000880:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init main task\r\n");
 8000882:	4906      	ldr	r1, [pc, #24]	; (800089c <initMainTask+0x2c>)
 8000884:	2000      	movs	r0, #0
 8000886:	f000 ffed 	bl	8001864 <SEGGER_RTT_WriteString>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	0800c828 	.word	0x0800c828
 8000898:	080008a1 	.word	0x080008a1
 800089c:	0800c6d0 	.word	0x0800c6d0

080008a0 <mainTask>:

__NO_RETURN void mainTask() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a8:	f008 f902 	bl	8008ab0 <osDelay>
 80008ac:	e7fa      	b.n	80008a4 <mainTask+0x4>
	...

080008b0 <initMemoryTask>:
  .stack_size = 2048
};

SPI_HandleTypeDef memory_hspi2;

void initMemoryTask(SPI_HandleTypeDef hspi2) {
 80008b0:	b084      	sub	sp, #16
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	f107 0c08 	add.w	ip, r7, #8
 80008ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memory_hspi2 = hspi2;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <initMemoryTask+0x3c>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2258      	movs	r2, #88	; 0x58
 80008c8:	4619      	mov	r1, r3
 80008ca:	f00b feaf 	bl	800c62c <memcpy>

	osThreadNew(memoryTask, NULL, &memoryHeader_attr);
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <initMemoryTask+0x40>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <initMemoryTask+0x44>)
 80008d4:	f008 f85a 	bl	800898c <osThreadNew>
	SEGGER_RTT_WriteString(0, "Init Memory task\r\n");
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <initMemoryTask+0x48>)
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 ffc2 	bl	8001864 <SEGGER_RTT_WriteString>
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	0800c84c 	.word	0x0800c84c
 80008f4:	080008fd 	.word	0x080008fd
 80008f8:	0800c6e4 	.word	0x0800c6e4

080008fc <memoryTask>:

__NO_RETURN void memoryTask() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

	memory_init(SPI2_CS_MEMORY_GPIO_Port, SPI2_CS_MEMORY_Pin, &memory_hspi2);
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <memoryTask+0x18>)
 8000902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <memoryTask+0x1c>)
 8000908:	f000 fe06 	bl	8001518 <memory_init>

	while(1) {
		osDelay(10);
 800090c:	200a      	movs	r0, #10
 800090e:	f008 f8cf 	bl	8008ab0 <osDelay>
 8000912:	e7fb      	b.n	800090c <memoryTask+0x10>
 8000914:	200001a8 	.word	0x200001a8
 8000918:	40020400 	.word	0x40020400

0800091c <initUSBTask>:
  .priority = (osPriority_t) osPriorityNormal, //Set initial thread priority to high
  .stack_size = 1024
};


void initUSBTask() {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	osThreadId_t usb_id = osThreadNew(USBTask, NULL, &usbHeader_attr);
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <initUSBTask+0x24>)
 8000924:	2100      	movs	r1, #0
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <initUSBTask+0x28>)
 8000928:	f008 f830 	bl	800898c <osThreadNew>
 800092c:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_WriteString(0, "Init usb task\r\n");
 800092e:	4906      	ldr	r1, [pc, #24]	; (8000948 <initUSBTask+0x2c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f000 ff97 	bl	8001864 <SEGGER_RTT_WriteString>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800c870 	.word	0x0800c870
 8000944:	0800094d 	.word	0x0800094d
 8000948:	0800c6f8 	.word	0x0800c6f8

0800094c <USBTask>:

__NO_RETURN void USBTask() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	while(1) {
		osDelay(10);
 8000950:	200a      	movs	r0, #10
 8000952:	f008 f8ad 	bl	8008ab0 <osDelay>
 8000956:	e7fb      	b.n	8000950 <USBTask+0x4>

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b093      	sub	sp, #76	; 0x4c
 800095c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 ff95 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f84b 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f947 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800096a:	f000 f8d9 	bl	8000b20 <MX_SPI1_Init>
  MX_SPI2_Init();
 800096e:	f000 f90d 	bl	8000b8c <MX_SPI2_Init>
  MX_RTC_Init();
 8000972:	f000 f8af 	bl	8000ad4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000976:	f007 ffbf 	bl	80088f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800097a:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <main+0x90>)
 800097c:	2100      	movs	r1, #0
 800097e:	481b      	ldr	r0, [pc, #108]	; (80009ec <main+0x94>)
 8000980:	f008 f804 	bl	800898c <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <main+0x98>)
 8000988:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initBarometerTask(hspi1);
 800098a:	4c1a      	ldr	r4, [pc, #104]	; (80009f4 <main+0x9c>)
 800098c:	4668      	mov	r0, sp
 800098e:	f104 0310 	add.w	r3, r4, #16
 8000992:	2248      	movs	r2, #72	; 0x48
 8000994:	4619      	mov	r1, r3
 8000996:	f00b fe49 	bl	800c62c <memcpy>
 800099a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800099e:	f7ff feaf 	bl	8000700 <initBarometerTask>
  initBuzzerTask();
 80009a2:	f7ff ff03 	bl	80007ac <initBuzzerTask>
  initHeartbeatTask();
 80009a6:	f7ff ff1f 	bl	80007e8 <initHeartbeatTask>
  initIMUTask(hspi1);
 80009aa:	4c12      	ldr	r4, [pc, #72]	; (80009f4 <main+0x9c>)
 80009ac:	4668      	mov	r0, sp
 80009ae:	f104 0310 	add.w	r3, r4, #16
 80009b2:	2248      	movs	r2, #72	; 0x48
 80009b4:	4619      	mov	r1, r3
 80009b6:	f00b fe39 	bl	800c62c <memcpy>
 80009ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009be:	f7ff ff31 	bl	8000824 <initIMUTask>
  initMainTask();
 80009c2:	f7ff ff55 	bl	8000870 <initMainTask>
  initMemoryTask(hspi2);
 80009c6:	4c0c      	ldr	r4, [pc, #48]	; (80009f8 <main+0xa0>)
 80009c8:	4668      	mov	r0, sp
 80009ca:	f104 0310 	add.w	r3, r4, #16
 80009ce:	2248      	movs	r2, #72	; 0x48
 80009d0:	4619      	mov	r1, r3
 80009d2:	f00b fe2b 	bl	800c62c <memcpy>
 80009d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009da:	f7ff ff69 	bl	80008b0 <initMemoryTask>
  initUSBTask();
 80009de:	f7ff ff9d 	bl	800091c <initUSBTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009e2:	f007 ffad 	bl	8008940 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <main+0x8e>
 80009e8:	0800c894 	.word	0x0800c894
 80009ec:	08000d75 	.word	0x08000d75
 80009f0:	200002d0 	.word	0x200002d0
 80009f4:	20000220 	.word	0x20000220
 80009f8:	20000278 	.word	0x20000278

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00b fe1c 	bl	800c648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <SystemClock_Config+0xd0>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <SystemClock_Config+0xd0>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <SystemClock_Config+0xd0>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a58:	2309      	movs	r3, #9
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a70:	2319      	movs	r3, #25
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fc7a 	bl	8003380 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a92:	f000 f98b 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fedb 	bl	8003870 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ac0:	f000 f974 	bl	8000dac <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	; 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_RTC_Init+0x44>)
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <MX_RTC_Init+0x48>)
 8000adc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_RTC_Init+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_RTC_Init+0x44>)
 8000ae6:	227f      	movs	r2, #127	; 0x7f
 8000ae8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_RTC_Init+0x44>)
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_RTC_Init+0x44>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_RTC_Init+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_RTC_Init+0x44>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_RTC_Init+0x44>)
 8000b04:	f003 f994 	bl	8003e30 <HAL_RTC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b0e:	f000 f94d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000200 	.word	0x20000200
 8000b1c:	40002800 	.word	0x40002800

08000b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_SPI1_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_SPI1_Init+0x64>)
 8000b72:	f003 fa57 	bl	8004024 <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b7c:	f000 f916 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000220 	.word	0x20000220
 8000b88:	40013000 	.word	0x40013000

08000b8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <MX_SPI2_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_SPI2_Init+0x64>)
 8000bde:	f003 fa21 	bl	8004024 <HAL_SPI_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000be8:	f000 f8e0 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000278 	.word	0x20000278
 8000bf4:	40003800 	.word	0x40003800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a52      	ldr	r2, [pc, #328]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <MX_GPIO_Init+0x168>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f248 0118 	movw	r1, #32792	; 0x8018
 8000ca0:	4830      	ldr	r0, [pc, #192]	; (8000d64 <MX_GPIO_Init+0x16c>)
 8000ca2:	f001 f8d7 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8000cac:	482e      	ldr	r0, [pc, #184]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000cae:	f001 f8d1 	bl	8001e54 <HAL_GPIO_WritePin>
                          |LED_4_Pin|SENSE_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8000cb8:	482c      	ldr	r0, [pc, #176]	; (8000d6c <MX_GPIO_Init+0x174>)
 8000cba:	f001 f8cb 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_1_GPIO_Port, FIRE_1_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	482b      	ldr	r0, [pc, #172]	; (8000d70 <MX_GPIO_Init+0x178>)
 8000cc4:	f001 f8c6 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_ALTIMITER_Pin SPI1_CS_IMU_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ALTIMITER_Pin|SPI1_CS_IMU_Pin|BUZZER_Pin;
 8000cc8:	f248 0318 	movw	r3, #32792	; 0x8018
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4820      	ldr	r0, [pc, #128]	; (8000d64 <MX_GPIO_Init+0x16c>)
 8000ce2:	f000 ff1b 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin SENSE_2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin|LED_2_Pin|LED_3_Pin
 8000ce6:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8000cea:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|SENSE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000d00:	f000 ff0c 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_MEMORY_Pin HOLD_Pin CS_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_MEMORY_Pin|HOLD_Pin|CS_Pin|LED_1_Pin;
 8000d04:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_GPIO_Init+0x174>)
 8000d1e:	f000 fefd 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : FIRE_2_Pin SENSE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_2_Pin|SENSE_1_Pin;
 8000d22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000d38:	f000 fef0 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_1_Pin */
  GPIO_InitStruct.Pin = FIRE_1_Pin;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FIRE_1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_GPIO_Init+0x178>)
 8000d54:	f000 fee2 	bl	8001b1c <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d7c:	f00a ff3e 	bl	800bbfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f007 fe95 	bl	8008ab0 <osDelay>
 8000d86:	e7fb      	b.n	8000d80 <StartDefaultTask+0xc>

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 fd99 	bl	80018d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x54>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_MspInit+0x54>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_MspInit+0x54>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 fe63 	bl	8001ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <HAL_RTC_MspInit+0x4c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d111      	bne.n	8000e54 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 ff14 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e4a:	f7ff ffaf 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RTC_MspInit+0x50>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40002800 	.word	0x40002800
 8000e60:	42470e3c 	.word	0x42470e3c

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <HAL_SPI_MspInit+0x124>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12c      	bne.n	8000ee0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a3f      	ldr	r2, [pc, #252]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ebe:	23e0      	movs	r3, #224	; 0xe0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	482d      	ldr	r0, [pc, #180]	; (8000f90 <HAL_SPI_MspInit+0x12c>)
 8000eda:	f000 fe1f 	bl	8001b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ede:	e04f      	b.n	8000f80 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HAL_SPI_MspInit+0x130>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d14a      	bne.n	8000f80 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_SPI_MspInit+0x128>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <HAL_SPI_MspInit+0x134>)
 8000f5a:	f000 fddf 	bl	8001b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f70:	2305      	movs	r3, #5
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <HAL_SPI_MspInit+0x138>)
 8000f7c:	f000 fdce 	bl	8001b1c <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40013000 	.word	0x40013000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40003800 	.word	0x40003800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2036      	movs	r0, #54	; 0x36
 8000fb6:	f000 fd87 	bl	8001ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fba:	2036      	movs	r0, #54	; 0x36
 8000fbc:	f000 fda0 	bl	8001b00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_InitTick+0xa4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <HAL_InitTick+0xa4>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_InitTick+0xa4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fdc:	f107 0210 	add.w	r2, r7, #16
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fe0e 	bl	8003c08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fec:	f002 fdf8 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_InitTick+0xa8>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9b      	lsrs	r3, r3, #18
 8001000:	3b01      	subs	r3, #1
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0xac>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_InitTick+0xb0>)
 8001008:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_InitTick+0xac>)
 800100c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001010:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_InitTick+0xac>)
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_InitTick+0xac>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_InitTick+0xac>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_InitTick+0xac>)
 8001026:	f003 fda5 	bl	8004b74 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d104      	bne.n	800103a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <HAL_InitTick+0xac>)
 8001032:	f003 fdf9 	bl	8004c28 <HAL_TIM_Base_Start_IT>
 8001036:	4603      	mov	r3, r0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	431bde83 	.word	0x431bde83
 800104c:	200002d4 	.word	0x200002d4
 8001050:	40001000 	.word	0x40001000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM6_DAC_IRQHandler+0x10>)
 8001086:	f003 fe3f 	bl	8004d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002d4 	.word	0x200002d4

08001094 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <OTG_FS_IRQHandler+0x10>)
 800109a:	f001 f844 	bl	8002126 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20006608 	.word	0x20006608

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f00b fa73 	bl	800c5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fc2b 	bl	8000958 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001110:	0800c8f4 	.word	0x0800c8f4
  ldr r2, =_sbss
 8001114:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001118:	20006d34 	.word	0x20006d34

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>

0800111e <barometer_init>:
/** Initialize the barometer struct
 *
 * @param[in]  barometer  A pointer to an allocated barometer struct
 */
void barometer_init(barometer_t *barometer, GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	80fb      	strh	r3, [r7, #6]
    uint32_t i = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

    //initialise the barometer parameters
    barometer->initialized = 0;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
    barometer->port = port;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	601a      	str	r2, [r3, #0]
    barometer->pin = pin;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	809a      	strh	r2, [r3, #4]
    barometer->spi = spi;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	609a      	str	r2, [r3, #8]
    barometer->pressure = 0;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
    barometer->temperature = 0;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset the barometer
    barometer_reset(barometer);
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f820 	bl	80011a0 <barometer_reset>

    // Read the calibration coefficient
    for (i = 0; i < 6; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e012      	b.n	800118c <barometer_init+0x6e>
        barometer->calibration[i] = barometer_read_prom(barometer, i + 1);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3301      	adds	r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f000 f843 	bl	80011fc <barometer_read_prom>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3302      	adds	r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	6059      	str	r1, [r3, #4]
    for (i = 0; i < 6; i++) {
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d9e9      	bls.n	8001166 <barometer_init+0x48>
    }

    //set the handle to initialised
    barometer->initialized = 1;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2201      	movs	r2, #1
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <barometer_reset>:
/** Send the RESET command to the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_reset(barometer_t *barometer)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    uint8_t tx[3] = { BAROMETER_RESET_COMMAND, 0x00, 0x00 };
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <barometer_reset+0x58>)
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4611      	mov	r1, r2
 80011b2:	8019      	strh	r1, [r3, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	f000 fe45 	bl	8001e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(barometer->spi, tx, 1, 10);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6898      	ldr	r0, [r3, #8]
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	230a      	movs	r3, #10
 80011d4:	2201      	movs	r2, #1
 80011d6:	f002 ffae 	bl	8004136 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f000 fe35 	bl	8001e54 <HAL_GPIO_WritePin>

    osDelay(5);
 80011ea:	2005      	movs	r0, #5
 80011ec:	f007 fc60 	bl	8008ab0 <osDelay>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800c714 	.word	0x0800c714

080011fc <barometer_read_prom>:
 * @param[in]  coef_num   Coefficient number index to be received.
 *
 * @return the coefficient number for the given index
 */
static uint16_t barometer_read_prom(barometer_t *barometer, uint8_t coefficient)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[3] = { ((uint8_t) (PROM_READ_COMMAND + coefficient * 2)), 0, 0 };
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	3350      	adds	r3, #80	; 0x50
 800120c:	b2db      	uxtb	r3, r3
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	733b      	strb	r3, [r7, #12]
 8001214:	2300      	movs	r3, #0
 8001216:	737b      	strb	r3, [r7, #13]
 8001218:	2300      	movs	r3, #0
 800121a:	73bb      	strb	r3, [r7, #14]
    uint8_t rx[3] = { 0 };
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <barometer_read_prom+0x7c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	813b      	strh	r3, [r7, #8]
 8001222:	2300      	movs	r3, #0
 8001224:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	f000 fe0f 	bl	8001e54 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(barometer->spi, tx, rx, (uint16_t) sizeof(tx), 1000);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2303      	movs	r3, #3
 800124a:	f003 f9c1 	bl	80045d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f000 fdfb 	bl	8001e54 <HAL_GPIO_WritePin>

    return (rx[1] << 8) + rx[2];
 800125e:	7a7b      	ldrb	r3, [r7, #9]
 8001260:	b29b      	uxth	r3, r3
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b29a      	uxth	r2, r3
 8001266:	7abb      	ldrb	r3, [r7, #10]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b29b      	uxth	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800c718 	.word	0x0800c718

0800127c <barometer_read_data>:
 * @param[in]  cmd        Determines the timeout to be applied
 *
 * @return a 32-bit value
 */
static uint32_t barometer_read_data(barometer_t *barometer, uint8_t cmd)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
    uint8_t rx[10] = { 0 };
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	809a      	strh	r2, [r3, #4]
    uint8_t tx = CMD_ADC_CONV + cmd;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	3340      	adds	r3, #64	; 0x40
 800129a:	b2db      	uxtb	r3, r3
 800129c:	72fb      	strb	r3, [r7, #11]

    // Pull CS low to initiate communication
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	f000 fdd3 	bl	8001e54 <HAL_GPIO_WritePin>

    // Send conversion command
    HAL_SPI_Transmit(barometer->spi, &tx, 1, 10);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	f107 010b 	add.w	r1, r7, #11
 80012b6:	230a      	movs	r3, #10
 80012b8:	2201      	movs	r2, #1
 80012ba:	f002 ff3c 	bl	8004136 <HAL_SPI_Transmit>

    // Wait necessary conversion time, which depends on the specific command
    switch (cmd & 0x0F) {
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d829      	bhi.n	800131c <barometer_read_data+0xa0>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <barometer_read_data+0x54>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012f5 	.word	0x080012f5
 80012d4:	0800131d 	.word	0x0800131d
 80012d8:	080012fd 	.word	0x080012fd
 80012dc:	0800131d 	.word	0x0800131d
 80012e0:	08001305 	.word	0x08001305
 80012e4:	0800131d 	.word	0x0800131d
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	0800131d 	.word	0x0800131d
 80012f0:	08001315 	.word	0x08001315
        case CMD_ADC_256:
            //delay = 900us
            osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f007 fbdb 	bl	8008ab0 <osDelay>
            break;
 80012fa:	e00f      	b.n	800131c <barometer_read_data+0xa0>
        case CMD_ADC_512:
            //delay = 3ms;
            osDelay(3);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f007 fbd7 	bl	8008ab0 <osDelay>
            break;
 8001302:	e00b      	b.n	800131c <barometer_read_data+0xa0>
        case CMD_ADC_1024:
            //delay = 4ms;
            osDelay(4);
 8001304:	2004      	movs	r0, #4
 8001306:	f007 fbd3 	bl	8008ab0 <osDelay>
            break;
 800130a:	e007      	b.n	800131c <barometer_read_data+0xa0>
        case CMD_ADC_2048:
            //delay = 6ms;
            osDelay(6);
 800130c:	2006      	movs	r0, #6
 800130e:	f007 fbcf 	bl	8008ab0 <osDelay>
            break;
 8001312:	e003      	b.n	800131c <barometer_read_data+0xa0>
        case CMD_ADC_4096:
            //delay = 10ms;
            osDelay(10);
 8001314:	200a      	movs	r0, #10
 8001316:	f007 fbcb 	bl	8008ab0 <osDelay>
            break;
 800131a:	bf00      	nop
    }

    // Pull CS high to finish the conversion
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f000 fd94 	bl	8001e54 <HAL_GPIO_WritePin>
    osDelay(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f007 fbbf 	bl	8008ab0 <osDelay>
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_RESET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	889b      	ldrh	r3, [r3, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	f000 fd89 	bl	8001e54 <HAL_GPIO_WritePin>

    // Receive the data after the conversion
    HAL_SPI_Receive(barometer->spi, rx, 4, 10);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6898      	ldr	r0, [r3, #8]
 8001346:	f107 010c 	add.w	r1, r7, #12
 800134a:	230a      	movs	r3, #10
 800134c:	2204      	movs	r2, #4
 800134e:	f003 f82e 	bl	80043ae <HAL_SPI_Receive>

    // Pull CS high after read
    HAL_GPIO_WritePin(barometer->port, barometer->pin, GPIO_PIN_SET);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	f000 fd79 	bl	8001e54 <HAL_GPIO_WritePin>

    // First byte is not data
    return (rx[1] << 16) | (rx[2] << 8) | rx[3];
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4313      	orrs	r3, r2
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	4313      	orrs	r3, r2
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <barometer_update>:
/** Update the pressure and temperature value from the barometer
 *
 * @param[in]  barometer  A pointer to the barometer struct
 */
void barometer_update(barometer_t *barometer)
{
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b09c      	sub	sp, #112	; 0x70
 800137e:	af00      	add	r7, sp, #0
 8001380:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t delta_temperature;
    int64_t offset, sensitivity;
    float new_pressure;

    // See the chip (MS5607) datasheet for more information on these conversions
    raw_pressure = barometer_read_data(barometer, CMD_ADC_D1 + CMD_ADC_1024);
 8001382:	2104      	movs	r1, #4
 8001384:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001386:	f7ff ff79 	bl	800127c <barometer_read_data>
 800138a:	66f8      	str	r0, [r7, #108]	; 0x6c
    raw_temperature = barometer_read_data(barometer,  CMD_ADC_D2 + CMD_ADC_1024);
 800138c:	2114      	movs	r1, #20
 800138e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001390:	f7ff ff74 	bl	800127c <barometer_read_data>
 8001394:	66b8      	str	r0, [r7, #104]	; 0x68

    // dT = D2 - C5 * 2⁸
    // TEMP = 2000 + dT * C6 / 2²³
    delta_temperature = raw_temperature - (barometer->calibration[4] << 8);
 8001396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	021a      	lsls	r2, r3, #8
 800139c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	667b      	str	r3, [r7, #100]	; 0x64
    barometer->temperature = (2000 + (delta_temperature * barometer->calibration[5] >> 23)) / 100.0f;
 80013a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	0ddb      	lsrs	r3, r3, #23
 80013ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ba:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001510 <barometer_update+0x198>
 80013be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // OFF = = C2 * 2¹⁷ + (C4 * dT ) / 2⁶
    // SENS = C1 * 2 + (C3 * dT ) / 2⁷
    // PRESSURE = (D1 * SENS / 2²¹ - OFF) / 2¹⁵
    offset = (((int64_t)barometer->calibration[1]) << 17) + (barometer->calibration[3] * delta_temperature >> 6);
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2200      	movs	r2, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
 80013d0:	637a      	str	r2, [r7, #52]	; 0x34
 80013d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80013d6:	460b      	mov	r3, r1
 80013d8:	0bdb      	lsrs	r3, r3, #15
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013dc:	460b      	mov	r3, r1
 80013de:	045b      	lsls	r3, r3, #17
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	2200      	movs	r2, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013fa:	4602      	mov	r2, r0
 80013fc:	189b      	adds	r3, r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	460b      	mov	r3, r1
 8001402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001404:	eb42 0303 	adc.w	r3, r2, r3
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800140e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    sensitivity = (((int64_t)barometer->calibration[0]) << 16) + (barometer->calibration[2] * delta_temperature >> 7);
 8001412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	627a      	str	r2, [r7, #36]	; 0x24
 800141c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001420:	460b      	mov	r3, r1
 8001422:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8001426:	460b      	mov	r3, r1
 8001428:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800142c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	09db      	lsrs	r3, r3, #7
 8001438:	2200      	movs	r2, #0
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	61fa      	str	r2, [r7, #28]
 800143e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001442:	460b      	mov	r3, r1
 8001444:	eb1a 0303 	adds.w	r3, sl, r3
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	eb4b 0303 	adc.w	r3, fp, r3
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001456:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    //Spike detection to prevent early destruction of the rocket.
    new_pressure = (((raw_pressure * sensitivity >> 21) - offset) >> 15);
 800145a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800145c:	2200      	movs	r2, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	617a      	str	r2, [r7, #20]
 8001462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001468:	465a      	mov	r2, fp
 800146a:	fb02 f203 	mul.w	r2, r2, r3
 800146e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001470:	4651      	mov	r1, sl
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800147a:	4651      	mov	r1, sl
 800147c:	fba2 4501 	umull	r4, r5, r2, r1
 8001480:	442b      	add	r3, r5
 8001482:	461d      	mov	r5, r3
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	0d62      	lsrs	r2, r4, #21
 800148e:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 8001492:	156b      	asrs	r3, r5, #21
 8001494:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001498:	ebb2 0800 	subs.w	r8, r2, r0
 800149c:	eb63 0901 	sbc.w	r9, r3, r1
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 80014ac:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 80014b0:	ea4f 33e9 	mov.w	r3, r9, asr #15
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7fe ff62 	bl	8000380 <__aeabi_l2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(barometer->pressure > 0) {
 80014c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	dd16      	ble.n	80014fe <barometer_update+0x186>
    	barometer->pressure = fabs(new_pressure - barometer->pressure) > SPIKE_DETECTION_THRESHOLD ? barometer->pressure : new_pressure;
 80014d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014de:	eef0 7ae7 	vabs.f32	s15, s15
 80014e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001514 <barometer_update+0x19c>
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd02      	ble.n	80014f6 <barometer_update+0x17e>
 80014f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	e000      	b.n	80014f8 <barometer_update+0x180>
 80014f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014fa:	6253      	str	r3, [r2, #36]	; 0x24
    } else {
    	barometer->pressure = new_pressure;
    }
}
 80014fc:	e002      	b.n	8001504 <barometer_update+0x18c>
    	barometer->pressure = new_pressure;
 80014fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001504:	bf00      	nop
 8001506:	3770      	adds	r7, #112	; 0x70
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800150e:	bf00      	nop
 8001510:	42c80000 	.word	0x42c80000
 8001514:	47c35000 	.word	0x47c35000

08001518 <memory_init>:
#include "cmsis_os.h"
#include "memory.h"

void memory_init(GPIO_TypeDef* port, uint16_t pin, SPI_HandleTypeDef* spi) {
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	460b      	mov	r3, r1
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	817b      	strh	r3, [r7, #10]
// todo create a stuct for the memory
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <_DoInit+0xa0>)
 800153c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800153e:	22a8      	movs	r2, #168	; 0xa8
 8001540:	2100      	movs	r1, #0
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f00b f880 	bl	800c648 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2203      	movs	r2, #3
 800154c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2203      	movs	r2, #3
 8001552:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <_DoInit+0xa4>)
 8001558:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <_DoInit+0xa8>)
 800155e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001566:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <_DoInit+0xa4>)
 800157e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <_DoInit+0xac>)
 8001584:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2210      	movs	r2, #16
 800158a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800159e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e00c      	b.n	80015c2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1c3 030f 	rsb	r3, r3, #15
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <_DoInit+0xb0>)
 80015b0:	5cd1      	ldrb	r1, [r2, r3]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d9ef      	bls.n	80015a8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80015c8:	f3bf 8f5f 	dmb	sy
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000031c 	.word	0x2000031c
 80015d8:	0800c71c 	.word	0x0800c71c
 80015dc:	200003c4 	.word	0x200003c4
 80015e0:	200007c4 	.word	0x200007c4
 80015e4:	0800c8d0 	.word	0x0800c8d0

080015e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	d905      	bls.n	8001618 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e007      	b.n	8001628 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	1acb      	subs	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	3b01      	subs	r3, #1
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	4293      	cmp	r3, r2
 8001634:	bf28      	it	cs
 8001636:	4613      	movcs	r3, r2
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4293      	cmp	r3, r2
 8001640:	bf28      	it	cs
 8001642:	4613      	movcs	r3, r2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f00a ffe9 	bl	800c62c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800165a:	6a3a      	ldr	r2, [r7, #32]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	4413      	add	r3, r2
 8001660:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	4413      	add	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	4413      	add	r3, r2
 8001678:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	d101      	bne.n	8001688 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001688:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1b2      	bne.n	80015fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001698:	6a3b      	ldr	r3, [r7, #32]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d911      	bls.n	80016ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	6938      	ldr	r0, [r7, #16]
 80016d6:	f00a ffa9 	bl	800c62c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80016da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	441a      	add	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80016e8:	e01f      	b.n	800172a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6938      	ldr	r0, [r7, #16]
 80016fe:	f00a ff95 	bl	800c62c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4413      	add	r3, r2
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4619      	mov	r1, r3
 800171a:	6938      	ldr	r0, [r7, #16]
 800171c:	f00a ff86 	bl	800c62c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001720:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	60da      	str	r2, [r3, #12]
}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d808      	bhi.n	8001760 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad2      	subs	r2, r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	3b01      	subs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e004      	b.n	800176a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  }
  return r;
 800176a:	697b      	ldr	r3, [r7, #20]
}
 800176c:	4618      	mov	r0, r3
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <SEGGER_RTT_WriteNoLock+0x9c>)
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d029      	beq.n	80017f6 <SEGGER_RTT_WriteNoLock+0x7e>
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d82e      	bhi.n	8001804 <SEGGER_RTT_WriteNoLock+0x8c>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <SEGGER_RTT_WriteNoLock+0x38>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d013      	beq.n	80017d6 <SEGGER_RTT_WriteNoLock+0x5e>
 80017ae:	e029      	b.n	8001804 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffbe 	bl	8001732 <_GetAvailWriteSpace>
 80017b6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d202      	bcs.n	80017c6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80017c4:	e021      	b.n	800180a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	69b9      	ldr	r1, [r7, #24]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff67 	bl	80016a2 <_WriteNoCheck>
    break;
 80017d4:	e019      	b.n	800180a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ffab 	bl	8001732 <_GetAvailWriteSpace>
 80017dc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	bf28      	it	cs
 80017e6:	4613      	movcs	r3, r2
 80017e8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	69b9      	ldr	r1, [r7, #24]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff57 	bl	80016a2 <_WriteNoCheck>
    break;
 80017f4:	e009      	b.n	800180a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff fef4 	bl	80015e8 <_WriteBlocking>
 8001800:	61f8      	str	r0, [r7, #28]
    break;
 8001802:	e002      	b.n	800180a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
    break;
 8001808:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800180a:	69fb      	ldr	r3, [r7, #28]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000031c 	.word	0x2000031c

08001818 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <SEGGER_RTT_Write+0x48>)
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <SEGGER_RTT_Write+0x1e>
 8001832:	f7ff fe7f 	bl	8001534 <_DoInit>
  SEGGER_RTT_LOCK();
 8001836:	f3ef 8311 	mrs	r3, BASEPRI
 800183a:	f04f 0120 	mov.w	r1, #32
 800183e:	f381 8811 	msr	BASEPRI, r1
 8001842:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff ff95 	bl	8001778 <SEGGER_RTT_WriteNoLock>
 800184e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8001856:	697b      	ldr	r3, [r7, #20]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000031c 	.word	0x2000031c

08001864 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f7fe fcae 	bl	80001d0 <strlen>
 8001874:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffcc 	bl	8001818 <SEGGER_RTT_Write>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_Init+0x40>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_Init+0x40>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x40>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f8fc 	bl	8001ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f7ff fb70 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fa7a 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	200007d4 	.word	0x200007d4

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200007d4 	.word	0x200007d4

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff4c 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ada:	f7ff ff61 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	f7ff ffb1 	bl	8001a4c <NVIC_EncodePriority>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff80 	bl	80019f8 <__NVIC_SetPriority>
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff54 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e16b      	b.n	8001e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 815a 	bne.w	8001e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d005      	beq.n	8001b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d017      	beq.n	8001c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d123      	bne.n	8001c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	69b9      	ldr	r1, [r7, #24]
 8001c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80b4 	beq.w	8001e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <HAL_GPIO_Init+0x30c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a5f      	ldr	r2, [pc, #380]	; (8001e28 <HAL_GPIO_Init+0x30c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_GPIO_Init+0x30c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cbe:	4a5b      	ldr	r2, [pc, #364]	; (8001e2c <HAL_GPIO_Init+0x310>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_GPIO_Init+0x314>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02b      	beq.n	8001d42 <HAL_GPIO_Init+0x226>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_GPIO_Init+0x318>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d025      	beq.n	8001d3e <HAL_GPIO_Init+0x222>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_GPIO_Init+0x31c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_GPIO_Init+0x21e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <HAL_GPIO_Init+0x320>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x21a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x216>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_GPIO_Init+0x328>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x212>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x32c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_GPIO_Init+0x330>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x20a>
 8001d22:	2307      	movs	r3, #7
 8001d24:	e00e      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d26:	2308      	movs	r3, #8
 8001d28:	e00c      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	e00a      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d2e:	2305      	movs	r3, #5
 8001d30:	e008      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e004      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x228>
 8001d42:	2300      	movs	r3, #0
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f002 0203 	and.w	r2, r2, #3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d54:	4935      	ldr	r1, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x310>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dda:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f67f ae90 	bls.w	8001b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40021c00 	.word	0x40021c00
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e88:	b08f      	sub	sp, #60	; 0x3c
 8001e8a:	af0a      	add	r7, sp, #40	; 0x28
 8001e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e10f      	b.n	80020b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f00a f882 	bl	800bfbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fa0f 	bl	80052fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	687e      	ldr	r6, [r7, #4]
 8001ee4:	466d      	mov	r5, sp
 8001ee6:	f106 0410 	add.w	r4, r6, #16
 8001eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efa:	1d33      	adds	r3, r6, #4
 8001efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f003 f8e6 	bl	80050d0 <USB_CoreInit>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0d0      	b.n	80020b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f9fd 	bl	800531c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	e04a      	b.n	8001fbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	333d      	adds	r3, #61	; 0x3d
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	333c      	adds	r3, #60	; 0x3c
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	b298      	uxth	r0, r3
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	3344      	adds	r3, #68	; 0x44
 8001f64:	4602      	mov	r2, r0
 8001f66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3340      	adds	r3, #64	; 0x40
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3348      	adds	r3, #72	; 0x48
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	334c      	adds	r3, #76	; 0x4c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3354      	adds	r3, #84	; 0x54
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3af      	bcc.n	8001f28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e044      	b.n	8002058 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3b5      	bcc.n	8001fce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	687e      	ldr	r6, [r7, #4]
 800206a:	466d      	mov	r5, sp
 800206c:	f106 0410 	add.w	r4, r6, #16
 8002070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002080:	1d33      	adds	r3, r6, #4
 8002082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002084:	6838      	ldr	r0, [r7, #0]
 8002086:	f003 f995 	bl	80053b4 <USB_DevInit>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e00d      	b.n	80020b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 fae4 	bl	800667e <USB_DevDisconnect>

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_Start+0x1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	e020      	b.n	800211e <HAL_PCD_Start+0x5e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d109      	bne.n	8002100 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 f8e7 	bl	80052d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fa94 	bl	800663c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002126:	b590      	push	{r4, r7, lr}
 8002128:	b08d      	sub	sp, #52	; 0x34
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fb52 	bl	80067e6 <USB_GetMode>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 848a 	bne.w	8002a5e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 fab6 	bl	80066c0 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8480 	beq.w	8002a5c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f004 faa3 	bl	80066c0 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d107      	bne.n	8002194 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f002 0202 	and.w	r2, r2, #2
 8002192:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f004 fa91 	bl	80066c0 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d161      	bne.n	800226c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 020f 	and.w	r2, r3, #15
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	0c5b      	lsrs	r3, r3, #17
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d124      	bne.n	800222e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d035      	beq.n	800225c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6a38      	ldr	r0, [r7, #32]
 8002204:	f004 f8c8 	bl	8006398 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002214:	441a      	add	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	441a      	add	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	621a      	str	r2, [r3, #32]
 800222c:	e016      	b.n	800225c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	0c5b      	lsrs	r3, r3, #17
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	2b06      	cmp	r3, #6
 8002238:	d110      	bne.n	800225c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002240:	2208      	movs	r2, #8
 8002242:	4619      	mov	r1, r3
 8002244:	6a38      	ldr	r0, [r7, #32]
 8002246:	f004 f8a7 	bl	8006398 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	441a      	add	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0210 	orr.w	r2, r2, #16
 800226a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fa25 	bl	80066c0 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002280:	f040 80a7 	bne.w	80023d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f004 fa2a 	bl	80066e6 <USB_ReadDevAllOutEpInterrupt>
 8002292:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002294:	e099      	b.n	80023ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 808e 	beq.w	80023be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fa4e 	bl	800674e <USB_ReadDevOutEPInterrupt>
 80022b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	2301      	movs	r3, #1
 80022ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fec2 	bl	800305c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	2308      	movs	r3, #8
 80022f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 ff98 	bl	800322c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	461a      	mov	r2, r3
 8002314:	2310      	movs	r3, #16
 8002316:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d030      	beq.n	8002384 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d109      	bne.n	8002342 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002340:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	78db      	ldrb	r3, [r3, #3]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f009 ff2b 	bl	800c1c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	461a      	mov	r2, r3
 8002380:	2302      	movs	r3, #2
 8002382:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	2320      	movs	r3, #32
 800239e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	461a      	mov	r2, r3
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af62 	bne.w	8002296 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 f972 	bl	80066c0 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023e6:	f040 80db 	bne.w	80025a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 f993 	bl	800671a <USB_ReadDevAllInEpInterrupt>
 80023f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023fa:	e0cd      	b.n	8002598 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80c2 	beq.w	800258c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f9b9 	bl	800678a <USB_ReadDevInEPInterrupt>
 8002418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d057      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	2201      	movs	r2, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	69f9      	ldr	r1, [r7, #28]
 8002440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002444:	4013      	ands	r3, r2
 8002446:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	2301      	movs	r3, #1
 8002458:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d132      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	334c      	adds	r3, #76	; 0x4c
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4403      	add	r3, r0
 8002482:	3348      	adds	r3, #72	; 0x48
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4419      	add	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4403      	add	r3, r0
 8002496:	334c      	adds	r3, #76	; 0x4c
 8002498:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d113      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3354      	adds	r3, #84	; 0x54
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c0:	461a      	mov	r2, r3
 80024c2:	2101      	movs	r1, #1
 80024c4:	f004 f9c0 	bl	8006848 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f009 fdf5 	bl	800c0be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ea:	461a      	mov	r2, r3
 80024ec:	2308      	movs	r3, #8
 80024ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	2310      	movs	r3, #16
 800250a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002522:	461a      	mov	r2, r3
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	6a38      	ldr	r0, [r7, #32]
 8002536:	f003 f8a1 	bl	800567c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f009 fe42 	bl	800c1ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002574:	461a      	mov	r2, r3
 8002576:	2302      	movs	r3, #2
 8002578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fcdb 	bl	8002f42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3301      	adds	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f af2e 	bne.w	80023fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 f88b 	bl	80066c0 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b4:	d122      	bne.n	80025fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fec2 	bl	8003368 <HAL_PCDEx_LPM_Callback>
 80025e4:	e002      	b.n	80025ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f009 fde0 	bl	800c1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 f85d 	bl	80066c0 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	d112      	bne.n	8002638 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f009 fd9c 	bl	800c160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002636:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 f83f 	bl	80066c0 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264c:	f040 80b7 	bne.w	80027be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2110      	movs	r1, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f806 	bl	800567c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002674:	e046      	b.n	8002704 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002682:	461a      	mov	r2, r3
 8002684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b6:	461a      	mov	r2, r3
 80026b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	0151      	lsls	r1, r2, #5
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	440a      	add	r2, r1
 80026f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	3301      	adds	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	429a      	cmp	r2, r3
 800270c:	d3b3      	bcc.n	8002676 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002720:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273a:	f043 030b 	orr.w	r3, r3, #11
 800273e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002750:	f043 030b 	orr.w	r3, r3, #11
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	e015      	b.n	8002784 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800276a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800276e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277e:	f043 030b 	orr.w	r3, r3, #11
 8002782:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002792:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002796:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a8:	461a      	mov	r2, r3
 80027aa:	f004 f84d 	bl	8006848 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 ff7c 	bl	80066c0 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d124      	bne.n	800281e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 f812 	bl	8006802 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 ffc7 	bl	8005776 <USB_GetDevSpeed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681c      	ldr	r4, [r3, #0]
 80027f4:	f001 f9e8 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 80027f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4620      	mov	r0, r4
 8002804:	f002 fcc6 	bl	8005194 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f009 fc80 	bl	800c10e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800281c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 ff4c 	bl	80066c0 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d10a      	bne.n	8002848 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f009 fc5d 	bl	800c0f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f002 0208 	and.w	r2, r2, #8
 8002846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 ff37 	bl	80066c0 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d122      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002868:	2301      	movs	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	e014      	b.n	8002898 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb27 	bl	8002ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	3301      	adds	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3e5      	bcc.n	800286e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 ff0a 	bl	80066c0 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b6:	d13b      	bne.n	8002930 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	e02b      	b.n	8002916 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3340      	adds	r3, #64	; 0x40
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d115      	bne.n	8002910 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da12      	bge.n	8002910 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	333f      	adds	r3, #63	; 0x3f
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fae8 	bl	8002ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	429a      	cmp	r2, r3
 800291e:	d3ce      	bcc.n	80028be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800292e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 fec3 	bl	80066c0 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002944:	d155      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002946:	2301      	movs	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e045      	b.n	80029d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d12e      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002974:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	da2b      	bge.n	80029d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002986:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800298a:	429a      	cmp	r2, r3
 800298c:	d121      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6053      	str	r3, [r2, #4]
            break;
 80029d0:	e007      	b.n	80029e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3301      	adds	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b4      	bcc.n	800294c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fe62 	bl	80066c0 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d10a      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f009 fc01 	bl	800c210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fe4c 	bl	80066c0 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d115      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f009 fbf1 	bl	800c22c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	e000      	b.n	8002a5e <HAL_PCD_IRQHandler+0x938>
      return;
 8002a5c:	bf00      	nop
    }
  }
}
 8002a5e:	3734      	adds	r7, #52	; 0x34
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_PCD_SetAddress+0x1a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e013      	b.n	8002aa6 <HAL_PCD_SetAddress+0x42>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fdaa 	bl	80065f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	461a      	mov	r2, r3
 8002abc:	4603      	mov	r3, r0
 8002abe:	70fb      	strb	r3, [r7, #3]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	803b      	strh	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da0f      	bge.n	8002af4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	3338      	adds	r3, #56	; 0x38
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	705a      	strb	r2, [r3, #1]
 8002af2:	e00f      	b.n	8002b14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 020f 	and.w	r2, r3, #15
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b20:	883a      	ldrh	r2, [r7, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	78ba      	ldrb	r2, [r7, #2]
 8002b2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b3e:	78bb      	ldrb	r3, [r7, #2]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d102      	bne.n	8002b4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_PCD_EP_Open+0xaa>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e00e      	b.n	8002b76 <HAL_PCD_EP_Open+0xc8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fe2a 	bl	80057c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b74:	7afb      	ldrb	r3, [r7, #11]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da0f      	bge.n	8002bb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3338      	adds	r3, #56	; 0x38
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	705a      	strb	r2, [r3, #1]
 8002bb0:	e00f      	b.n	8002bd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_PCD_EP_Close+0x6e>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e00e      	b.n	8002c0a <HAL_PCD_EP_Close+0x8c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fe68 	bl	80058d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	3304      	adds	r3, #4
 8002c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c54:	7afb      	ldrb	r3, [r7, #11]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	6979      	ldr	r1, [r7, #20]
 8002c86:	f003 f947 	bl	8005f18 <USB_EP0StartXfer>
 8002c8a:	e008      	b.n	8002c9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	f002 fef5 	bl	8005a88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2201      	movs	r2, #1
 8002d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6979      	ldr	r1, [r7, #20]
 8002d4a:	f003 f8e5 	bl	8005f18 <USB_EP0StartXfer>
 8002d4e:	e008      	b.n	8002d62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	f002 fe93 	bl	8005a88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d901      	bls.n	8002d8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e050      	b.n	8002e2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da0f      	bge.n	8002db2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3338      	adds	r3, #56	; 0x38
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	705a      	strb	r2, [r3, #1]
 8002db0:	e00d      	b.n	8002dce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_PCD_EP_SetStall+0x82>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e01e      	b.n	8002e2c <HAL_PCD_EP_SetStall+0xc0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fb23 	bl	8006448 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	b2d9      	uxtb	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f003 fd13 	bl	8006848 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d901      	bls.n	8002e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e042      	b.n	8002ed8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da0f      	bge.n	8002e7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3338      	adds	r3, #56	; 0x38
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
 8002e78:	e00f      	b.n	8002e9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_EP_ClrStall+0x86>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e00e      	b.n	8002ed8 <HAL_PCD_EP_ClrStall+0xa4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fb2b 	bl	8006524 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da0c      	bge.n	8002f0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3338      	adds	r3, #56	; 0x38
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e00c      	b.n	8002f28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 f94a 	bl	80061c8 <USB_EPStopXfer>
 8002f34:	4603      	mov	r3, r0
 8002f36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08a      	sub	sp, #40	; 0x28
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3338      	adds	r3, #56	; 0x38
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d901      	bls.n	8002f7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06c      	b.n	8003054 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d902      	bls.n	8002f96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3303      	adds	r3, #3
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f9e:	e02b      	b.n	8002ff8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d902      	bls.n	8002fbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	3303      	adds	r3, #3
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6919      	ldr	r1, [r3, #16]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f003 f99e 	bl	800631c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	b29b      	uxth	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	429a      	cmp	r2, r3
 800300c:	d809      	bhi.n	8003022 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003016:	429a      	cmp	r2, r3
 8003018:	d203      	bcs.n	8003022 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1be      	bne.n	8002fa0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	429a      	cmp	r2, r3
 800302c:	d811      	bhi.n	8003052 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	2201      	movs	r2, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	43db      	mvns	r3, r3
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800304e:	4013      	ands	r3, r2
 8003050:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	333c      	adds	r3, #60	; 0x3c
 8003074:	3304      	adds	r3, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d17b      	bne.n	800318a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4a61      	ldr	r2, [pc, #388]	; (8003224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f240 80b9 	bls.w	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80b3 	beq.w	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030be:	461a      	mov	r2, r3
 80030c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c4:	6093      	str	r3, [r2, #8]
 80030c6:	e0a7      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	2320      	movs	r3, #32
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	e098      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 8093 	bne.w	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d90f      	bls.n	800311a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	6093      	str	r3, [r2, #8]
 8003118:	e07e      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	0159      	lsls	r1, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	440b      	add	r3, r1
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	1ad2      	subs	r2, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d114      	bne.n	800317c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003164:	461a      	mov	r2, r3
 8003166:	2101      	movs	r1, #1
 8003168:	f003 fb6e 	bl	8006848 <USB_EP0_OutStart>
 800316c:	e006      	b.n	800317c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	441a      	add	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f008 ff80 	bl	800c088 <HAL_PCD_DataOutStageCallback>
 8003188:	e046      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d124      	bne.n	80031dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	6093      	str	r3, [r2, #8]
 80031b0:	e032      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	2320      	movs	r3, #32
 80031cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f008 ff57 	bl	800c088 <HAL_PCD_DataOutStageCallback>
 80031da:	e01d      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d114      	bne.n	800320c <PCD_EP_OutXfrComplete_int+0x1b0>
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003204:	461a      	mov	r2, r3
 8003206:	2100      	movs	r1, #0
 8003208:	f003 fb1e 	bl	8006848 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f008 ff38 	bl	800c088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	4f54300a 	.word	0x4f54300a
 8003228:	4f54310a 	.word	0x4f54310a

0800322c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	333c      	adds	r3, #60	; 0x3c
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d90e      	bls.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f008 feef 	bl	800c064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d90c      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032a0:	461a      	mov	r2, r3
 80032a2:	2101      	movs	r1, #1
 80032a4:	f003 fad0 	bl	8006848 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	4f54300a 	.word	0x4f54300a

080032b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	0419      	lsls	r1, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
 80032e4:	e028      	b.n	8003338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4413      	add	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e00d      	b.n	8003316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	3301      	adds	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	429a      	cmp	r2, r3
 800331e:	d3ec      	bcc.n	80032fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003320:	883b      	ldrh	r3, [r7, #0]
 8003322:	0418      	lsls	r0, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	3b01      	subs	r3, #1
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4302      	orrs	r2, r0
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e267      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d112      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e242      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6c      	ldr	r2, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b69      	ldr	r3, [pc, #420]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a65      	ldr	r2, [pc, #404]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fa5e 	bl	80018f8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fa5a 	bl	80018f8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e207      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fa4a 	bl	80018f8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fa46 	bl	80018f8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1f3      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b51      	ldr	r3, [pc, #324]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c7      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4937      	ldr	r1, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe f9ff 	bl	80018f8 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe f9fb 	bl	80018f8 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a8      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4925      	ldr	r1, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe f9de 	bl	80018f8 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe f9da 	bl	80018f8 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e187      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d036      	beq.n	80035d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_RCC_OscConfig+0x248>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe f9be 	bl	80018f8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe f9ba 	bl	80018f8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e167      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
 800359e:	e01b      	b.n	80035d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0x248>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f9a7 	bl	80018f8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	e00e      	b.n	80035cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fe f9a3 	bl	80018f8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d907      	bls.n	80035cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e150      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	42470000 	.word	0x42470000
 80035c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ea      	bne.n	80035ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8097 	beq.w	8003714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b7d      	ldr	r3, [pc, #500]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fe f963 	bl	80018f8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe f95f 	bl	80018f8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e10c      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x2ea>
 800365c:	4b64      	ldr	r3, [pc, #400]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	e01c      	b.n	80036a4 <HAL_RCC_OscConfig+0x324>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x30c>
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5b      	ldr	r2, [pc, #364]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0x324>
 800368c:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a57      	ldr	r2, [pc, #348]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b55      	ldr	r3, [pc, #340]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a54      	ldr	r2, [pc, #336]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe f924 	bl	80018f8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe f920 	bl	80018f8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0cb      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ee      	beq.n	80036b4 <HAL_RCC_OscConfig+0x334>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d8:	f7fe f90e 	bl	80018f8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe f90a 	bl	80018f8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0b5      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ee      	bne.n	80036e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a1 	beq.w	8003860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	d05c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d141      	bne.n	80037b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe f8de 	bl	80018f8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe f8da 	bl	80018f8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e087      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	3b01      	subs	r3, #1
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	491b      	ldr	r1, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe f8b3 	bl	80018f8 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe f8af 	bl	80018f8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e05c      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x416>
 80037b4:	e054      	b.n	8003860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe f89c 	bl	80018f8 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe f898 	bl	80018f8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e045      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x444>
 80037e2:	e03d      	b.n	8003860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e038      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x4ec>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d028      	beq.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d121      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d11a      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	3b01      	subs	r3, #1
 8003846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0cc      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d90c      	bls.n	80038ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d044      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d119      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d003      	beq.n	800392e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e067      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4934      	ldr	r1, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fd ffca 	bl	80018f8 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fd ffc6 	bl	80018f8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20c      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fac2 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0800c8b8 	.word	0x0800c8b8
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b090      	sub	sp, #64	; 0x40
 8003a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d00d      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x40>
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	f200 80a1 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a6e:	e09b      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a74:	e09b      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a7a:	e098      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	2200      	movs	r2, #0
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa8:	fb03 f201 	mul.w	r2, r3, r1
 8003aac:	2300      	movs	r3, #0
 8003aae:	fb00 f303 	mul.w	r3, r0, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	460a      	mov	r2, r1
 8003abe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac2:	4413      	add	r3, r2
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	2200      	movs	r2, #0
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ad6:	f7fc fc91 	bl	80003fc <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae2:	e053      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae4:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	2200      	movs	r2, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	617a      	str	r2, [r7, #20]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003af6:	f04f 0b00 	mov.w	fp, #0
 8003afa:	4652      	mov	r2, sl
 8003afc:	465b      	mov	r3, fp
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0c:	0150      	lsls	r0, r2, #5
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	ebb2 080a 	subs.w	r8, r2, sl
 8003b16:	eb63 090b 	sbc.w	r9, r3, fp
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b32:	eb63 0509 	sbc.w	r5, r3, r9
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	00eb      	lsls	r3, r5, #3
 8003b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b44:	00e2      	lsls	r2, r4, #3
 8003b46:	4614      	mov	r4, r2
 8003b48:	461d      	mov	r5, r3
 8003b4a:	eb14 030a 	adds.w	r3, r4, sl
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	eb45 030b 	adc.w	r3, r5, fp
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b62:	4629      	mov	r1, r5
 8003b64:	028b      	lsls	r3, r1, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	028a      	lsls	r2, r1, #10
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	2200      	movs	r2, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b80:	f7fc fc3c 	bl	80003fc <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3740      	adds	r7, #64	; 0x40
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	017d7840 	.word	0x017d7840

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	0800c8c8 	.word	0x0800c8c8

08003c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	220f      	movs	r2, #15
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCC_GetClockConfig+0x60>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40023c00 	.word	0x40023c00

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d035      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fe2d 	bl	80018f8 <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca2:	f7fd fe29 	bl	80018f8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0b0      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	019a      	lsls	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	071b      	lsls	r3, r3, #28
 8003ccc:	4955      	ldr	r1, [pc, #340]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd4:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fe0d 	bl	80018f8 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce2:	f7fd fe09 	bl	80018f8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e090      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8083 	beq.w	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b44      	ldr	r3, [pc, #272]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a43      	ldr	r2, [pc, #268]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fddf 	bl	80018f8 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fddb 	bl	80018f8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e062      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d028      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d114      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fda9 	bl	80018f8 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fda5 	bl	80018f8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e02a      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0e:	4905      	ldr	r1, [pc, #20]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	42470068 	.word	0x42470068
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42470e40 	.word	0x42470e40

08003e30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e066      	b.n	8003f14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f5b      	ldrb	r3, [r3, #29]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc ffda 	bl	8000e10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ca      	movs	r2, #202	; 0xca
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2253      	movs	r2, #83	; 0x53
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f87a 	bl	8003f6c <RTC_EnterInitMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d12c      	bne.n	8003edc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68d2      	ldr	r2, [r2, #12]
 8003ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6919      	ldr	r1, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	041a      	lsls	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f881 	bl	8003fda <RTC_ExitInitMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d113      	bne.n	8003f0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f36:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f38:	f7fd fcde 	bl	80018f8 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f3e:	e009      	b.n	8003f54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f40:	f7fd fcda 	bl	80018f8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4e:	d901      	bls.n	8003f54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e007      	b.n	8003f64 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ee      	beq.n	8003f40 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d122      	bne.n	8003fd0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd fcad 	bl	80018f8 <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fa0:	e00c      	b.n	8003fbc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fa2:	f7fd fca9 	bl	80018f8 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb0:	d904      	bls.n	8003fbc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <RTC_EnterInitMode+0x64>
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d1e8      	bne.n	8003fa2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff89 	bl	8003f1c <HAL_RTC_WaitForSynchro>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07b      	b.n	800412e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004046:	d009      	beq.n	800405c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
 800404e:	e005      	b.n	800405c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fef4 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	ea42 0103 	orr.w	r1, r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0104 	and.w	r1, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0210 	and.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b088      	sub	sp, #32
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_SPI_Transmit+0x22>
 8004154:	2302      	movs	r3, #2
 8004156:	e126      	b.n	80043a6 <HAL_SPI_Transmit+0x270>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004160:	f7fd fbca 	bl	80018f8 <HAL_GetTick>
 8004164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d002      	beq.n	800417c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800417a:	e10b      	b.n	8004394 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_SPI_Transmit+0x52>
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800418c:	e102      	b.n	8004394 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2203      	movs	r2, #3
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d4:	d10f      	bne.n	80041f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d007      	beq.n	8004214 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d14b      	bne.n	80042b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_SPI_Transmit+0xf6>
 8004226:	8afb      	ldrh	r3, [r7, #22]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d13e      	bne.n	80042aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	881a      	ldrh	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004250:	e02b      	b.n	80042aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d112      	bne.n	8004286 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	86da      	strh	r2, [r3, #54]	; 0x36
 8004284:	e011      	b.n	80042aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004286:	f7fd fb37 	bl	80018f8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_Transmit+0x168>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Transmit+0x16e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042a8:	e074      	b.n	8004394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ce      	bne.n	8004252 <HAL_SPI_Transmit+0x11c>
 80042b4:	e04c      	b.n	8004350 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x18e>
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d140      	bne.n	8004346 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ea:	e02c      	b.n	8004346 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d113      	bne.n	8004322 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004320:	e011      	b.n	8004346 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004322:	f7fd fae9 	bl	80018f8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d803      	bhi.n	800433a <HAL_SPI_Transmit+0x204>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d102      	bne.n	8004340 <HAL_SPI_Transmit+0x20a>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004344:	e026      	b.n	8004394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1cd      	bne.n	80042ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fbcb 	bl	8004af0 <SPI_EndRxTxTransaction>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e000      	b.n	8004394 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b088      	sub	sp, #32
 80043b2:	af02      	add	r7, sp, #8
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ca:	d112      	bne.n	80043f2 <HAL_SPI_Receive+0x44>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10e      	bne.n	80043f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2204      	movs	r2, #4
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f8f1 	bl	80045d0 <HAL_SPI_TransmitReceive>
 80043ee:	4603      	mov	r3, r0
 80043f0:	e0ea      	b.n	80045c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_SPI_Receive+0x52>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e0e3      	b.n	80045c8 <HAL_SPI_Receive+0x21a>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004408:	f7fd fa76 	bl	80018f8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800441a:	2302      	movs	r3, #2
 800441c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800441e:	e0ca      	b.n	80045b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_Receive+0x7e>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004430:	e0c1      	b.n	80045b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2204      	movs	r2, #4
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	d10f      	bne.n	800449a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d007      	beq.n	80044b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d162      	bne.n	8004586 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c0:	e02e      	b.n	8004520 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d115      	bne.n	80044fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f103 020c 	add.w	r2, r3, #12
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	7812      	ldrb	r2, [r2, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fa:	e011      	b.n	8004520 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fc:	f7fd f9fc 	bl	80018f8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d803      	bhi.n	8004514 <HAL_SPI_Receive+0x166>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d102      	bne.n	800451a <HAL_SPI_Receive+0x16c>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800451e:	e04a      	b.n	80045b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1cb      	bne.n	80044c2 <HAL_SPI_Receive+0x114>
 800452a:	e031      	b.n	8004590 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d113      	bne.n	8004562 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	b292      	uxth	r2, r2
 8004546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004560:	e011      	b.n	8004586 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004562:	f7fd f9c9 	bl	80018f8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d803      	bhi.n	800457a <HAL_SPI_Receive+0x1cc>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d102      	bne.n	8004580 <HAL_SPI_Receive+0x1d2>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004584:	e017      	b.n	80045b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1cd      	bne.n	800452c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	6839      	ldr	r1, [r7, #0]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fa45 	bl	8004a24 <SPI_EndRxTransaction>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
 80045b2:	e000      	b.n	80045b6 <HAL_SPI_Receive+0x208>
  }

error :
 80045b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045de:	2301      	movs	r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x26>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e18a      	b.n	800490c <HAL_SPI_TransmitReceive+0x33c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045fe:	f7fd f97b 	bl	80018f8 <HAL_GetTick>
 8004602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800461c:	2b01      	cmp	r3, #1
 800461e:	d00f      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x70>
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004626:	d107      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x68>
 8004630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004634:	2b04      	cmp	r3, #4
 8004636:	d003      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004638:	2302      	movs	r3, #2
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800463e:	e15b      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x82>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x82>
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004658:	e14e      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b04      	cmp	r3, #4
 8004664:	d003      	beq.n	800466e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2205      	movs	r2, #5
 800466a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	887a      	ldrh	r2, [r7, #2]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d007      	beq.n	80046c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ca:	d178      	bne.n	80047be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_SPI_TransmitReceive+0x10a>
 80046d4:	8b7b      	ldrh	r3, [r7, #26]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d166      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fe:	e053      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d11b      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x176>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d016      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x176>
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d113      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	d119      	bne.n	8004788 <HAL_SPI_TransmitReceive+0x1b8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d014      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	b292      	uxth	r2, r2
 800476a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004784:	2301      	movs	r3, #1
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004788:	f7fd f8b6 	bl	80018f8 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004794:	429a      	cmp	r2, r3
 8004796:	d807      	bhi.n	80047a8 <HAL_SPI_TransmitReceive+0x1d8>
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d003      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047a6:	e0a7      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1a6      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x130>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1a1      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x130>
 80047bc:	e07c      	b.n	80048b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x1fc>
 80047c6:	8b7b      	ldrh	r3, [r7, #26]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d16b      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	7812      	ldrb	r2, [r2, #0]
 80047d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f2:	e057      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d11c      	bne.n	800483c <HAL_SPI_TransmitReceive+0x26c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d017      	beq.n	800483c <HAL_SPI_TransmitReceive+0x26c>
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d114      	bne.n	800483c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d119      	bne.n	800487e <HAL_SPI_TransmitReceive+0x2ae>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800487a:	2301      	movs	r3, #1
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800487e:	f7fd f83b 	bl	80018f8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800488a:	429a      	cmp	r2, r3
 800488c:	d803      	bhi.n	8004896 <HAL_SPI_TransmitReceive+0x2c6>
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d102      	bne.n	800489c <HAL_SPI_TransmitReceive+0x2cc>
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048a2:	e029      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1a2      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x224>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d19d      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f917 	bl	8004af0 <SPI_EndRxTxTransaction>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048d4:	e010      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	e000      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800490c:	4618      	mov	r0, r3
 800490e:	3730      	adds	r7, #48	; 0x30
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004924:	f7fc ffe8 	bl	80018f8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	4413      	add	r3, r2
 8004932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004934:	f7fc ffe0 	bl	80018f8 <HAL_GetTick>
 8004938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	015b      	lsls	r3, r3, #5
 8004940:	0d1b      	lsrs	r3, r3, #20
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800494a:	e054      	b.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d050      	beq.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004954:	f7fc ffd0 	bl	80018f8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	429a      	cmp	r2, r3
 8004962:	d902      	bls.n	800496a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d13d      	bne.n	80049e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d111      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498c:	d004      	beq.n	8004998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d107      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b0:	d10f      	bne.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e017      	b.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d19b      	bne.n	800494c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000000 	.word	0x20000000

08004a24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a38:	d111      	bne.n	8004a5e <SPI_EndRxTransaction+0x3a>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a42:	d004      	beq.n	8004a4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d107      	bne.n	8004a5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d12a      	bne.n	8004abe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d012      	beq.n	8004a98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff49 	bl	8004914 <SPI_WaitFlagStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02d      	beq.n	8004ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e026      	b.n	8004ae6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff ff36 	bl	8004914 <SPI_WaitFlagStateUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01a      	beq.n	8004ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e013      	b.n	8004ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff ff23 	bl	8004914 <SPI_WaitFlagStateUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e000      	b.n	8004ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <SPI_EndRxTxTransaction+0x7c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <SPI_EndRxTxTransaction+0x80>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	0d5b      	lsrs	r3, r3, #21
 8004b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d112      	bne.n	8004b42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	2180      	movs	r1, #128	; 0x80
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fef4 	bl	8004914 <SPI_WaitFlagStateUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e00f      	b.n	8004b62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d0f2      	beq.n	8004b42 <SPI_EndRxTxTransaction+0x52>
 8004b5c:	e000      	b.n	8004b60 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b5e:	bf00      	nop
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000000 	.word	0x20000000
 8004b70:	165e9f81 	.word	0x165e9f81

08004b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e041      	b.n	8004c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f839 	bl	8004c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f000 f9d8 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e04e      	b.n	8004cde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_TIM_Base_Start_IT+0xc4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40010400 	.word	0x40010400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40001800 	.word	0x40001800

08004d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0202 	mvn.w	r2, #2
 8004d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8ee 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8e0 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8f1 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0204 	mvn.w	r2, #4
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8c4 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8b6 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8c7 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0208 	mvn.w	r2, #8
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2204      	movs	r2, #4
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f89a 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f88c 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f89d 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0210 	mvn.w	r2, #16
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2208      	movs	r2, #8
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f870 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f862 	bl	8004f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f873 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0201 	mvn.w	r2, #1
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fb ff7e 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f902 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f838 	bl	8004f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0220 	mvn.w	r2, #32
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8cc 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a40      	ldr	r2, [pc, #256]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2f      	ldr	r2, [pc, #188]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d027      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d023      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <TIM_Base_SetConfig+0x128>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <TIM_Base_SetConfig+0x130>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a25      	ldr	r2, [pc, #148]	; (800509c <TIM_Base_SetConfig+0x134>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_Base_SetConfig+0x138>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <TIM_Base_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 001c 	add.w	r0, r7, #28
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d122      	bne.n	800512e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fbee 	bl	8006904 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]
 800512c:	e01a      	b.n	8005164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fbe2 	bl	8006904 <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
 8005156:	e005      	b.n	8005164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10b      	bne.n	8005182 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f043 0206 	orr.w	r2, r3, #6
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800518e:	b004      	add	sp, #16
 8005190:	4770      	bx	lr
	...

08005194 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d165      	bne.n	8005274 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4a41      	ldr	r2, [pc, #260]	; (80052b0 <USB_SetTurnaroundTime+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d906      	bls.n	80051be <USB_SetTurnaroundTime+0x2a>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a40      	ldr	r2, [pc, #256]	; (80052b4 <USB_SetTurnaroundTime+0x120>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d202      	bcs.n	80051be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051b8:	230f      	movs	r3, #15
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e062      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <USB_SetTurnaroundTime+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d306      	bcc.n	80051d4 <USB_SetTurnaroundTime+0x40>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4a3b      	ldr	r2, [pc, #236]	; (80052b8 <USB_SetTurnaroundTime+0x124>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d202      	bcs.n	80051d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ce:	230e      	movs	r3, #14
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e057      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <USB_SetTurnaroundTime+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d306      	bcc.n	80051ea <USB_SetTurnaroundTime+0x56>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a37      	ldr	r2, [pc, #220]	; (80052bc <USB_SetTurnaroundTime+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d202      	bcs.n	80051ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051e4:	230d      	movs	r3, #13
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e04c      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4a33      	ldr	r2, [pc, #204]	; (80052bc <USB_SetTurnaroundTime+0x128>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d306      	bcc.n	8005200 <USB_SetTurnaroundTime+0x6c>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a32      	ldr	r2, [pc, #200]	; (80052c0 <USB_SetTurnaroundTime+0x12c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d802      	bhi.n	8005200 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051fa:	230c      	movs	r3, #12
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e041      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <USB_SetTurnaroundTime+0x12c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d906      	bls.n	8005216 <USB_SetTurnaroundTime+0x82>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <USB_SetTurnaroundTime+0x130>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d802      	bhi.n	8005216 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005210:	230b      	movs	r3, #11
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e036      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <USB_SetTurnaroundTime+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d906      	bls.n	800522c <USB_SetTurnaroundTime+0x98>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <USB_SetTurnaroundTime+0x134>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d802      	bhi.n	800522c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005226:	230a      	movs	r3, #10
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e02b      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <USB_SetTurnaroundTime+0x134>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d906      	bls.n	8005242 <USB_SetTurnaroundTime+0xae>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <USB_SetTurnaroundTime+0x138>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d202      	bcs.n	8005242 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800523c:	2309      	movs	r3, #9
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e020      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <USB_SetTurnaroundTime+0x138>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d306      	bcc.n	8005258 <USB_SetTurnaroundTime+0xc4>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <USB_SetTurnaroundTime+0x13c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d802      	bhi.n	8005258 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005252:	2308      	movs	r3, #8
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e015      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <USB_SetTurnaroundTime+0x13c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d906      	bls.n	800526e <USB_SetTurnaroundTime+0xda>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <USB_SetTurnaroundTime+0x140>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d202      	bcs.n	800526e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005268:	2307      	movs	r3, #7
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e00a      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800526e:	2306      	movs	r3, #6
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e007      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d102      	bne.n	8005280 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800527a:	2309      	movs	r3, #9
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e001      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005280:	2309      	movs	r3, #9
 8005282:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	029b      	lsls	r3, r3, #10
 8005298:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	00d8acbf 	.word	0x00d8acbf
 80052b4:	00e4e1c0 	.word	0x00e4e1c0
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	01067380 	.word	0x01067380
 80052c0:	011a499f 	.word	0x011a499f
 80052c4:	01312cff 	.word	0x01312cff
 80052c8:	014ca43f 	.word	0x014ca43f
 80052cc:	016e3600 	.word	0x016e3600
 80052d0:	01a6ab1f 	.word	0x01a6ab1f
 80052d4:	01e84800 	.word	0x01e84800

080052d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d115      	bne.n	800536a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800534a:	2001      	movs	r0, #1
 800534c:	f7fc fae0 	bl	8001910 <HAL_Delay>
      ms++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fa45 	bl	80067e6 <USB_GetMode>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d01e      	beq.n	80053a0 <USB_SetCurrentMode+0x84>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b31      	cmp	r3, #49	; 0x31
 8005366:	d9f0      	bls.n	800534a <USB_SetCurrentMode+0x2e>
 8005368:	e01a      	b.n	80053a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d115      	bne.n	800539c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800537c:	2001      	movs	r0, #1
 800537e:	f7fc fac7 	bl	8001910 <HAL_Delay>
      ms++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fa2c 	bl	80067e6 <USB_GetMode>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <USB_SetCurrentMode+0x84>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b31      	cmp	r3, #49	; 0x31
 8005398:	d9f0      	bls.n	800537c <USB_SetCurrentMode+0x60>
 800539a:	e001      	b.n	80053a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e005      	b.n	80053ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b32      	cmp	r3, #50	; 0x32
 80053a4:	d101      	bne.n	80053aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b4:	b084      	sub	sp, #16
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e009      	b.n	80053e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3340      	adds	r3, #64	; 0x40
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3301      	adds	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0e      	cmp	r3, #14
 80053ec:	d9f2      	bls.n	80053d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11c      	bne.n	800542e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
 800542c:	e00b      	b.n	8005446 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	4619      	mov	r1, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	461a      	mov	r2, r3
 8005462:	680b      	ldr	r3, [r1, #0]
 8005464:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	2b01      	cmp	r3, #1
 800546a:	d10c      	bne.n	8005486 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005472:	2100      	movs	r1, #0
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f965 	bl	8005744 <USB_SetDevSpeed>
 800547a:	e008      	b.n	800548e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800547c:	2101      	movs	r1, #1
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f960 	bl	8005744 <USB_SetDevSpeed>
 8005484:	e003      	b.n	800548e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005486:	2103      	movs	r1, #3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f95b 	bl	8005744 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800548e:	2110      	movs	r1, #16
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8f3 	bl	800567c <USB_FlushTxFifo>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f91f 	bl	80056e4 <USB_FlushRxFifo>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e043      	b.n	8005562 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f0:	d118      	bne.n	8005524 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	461a      	mov	r2, r3
 8005506:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e013      	b.n	8005536 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e008      	b.n	8005536 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800555a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	3301      	adds	r3, #1
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	d3b7      	bcc.n	80054da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e043      	b.n	80055f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005586:	d118      	bne.n	80055ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e013      	b.n	80055cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e008      	b.n	80055cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	461a      	mov	r2, r3
 80055ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3301      	adds	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3b7      	bcc.n	8005570 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005612:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005620:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f043 0210 	orr.w	r2, r3, #16
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <USB_DevInit+0x2c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f043 0208 	orr.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005674:	b004      	add	sp, #16
 8005676:	4770      	bx	lr
 8005678:	803c3800 	.word	0x803c3800

0800567c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <USB_FlushTxFifo+0x64>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e01b      	b.n	80056d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	daf2      	bge.n	800568a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	019b      	lsls	r3, r3, #6
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <USB_FlushTxFifo+0x64>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e006      	b.n	80056d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d0f0      	beq.n	80056b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	00030d40 	.word	0x00030d40

080056e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <USB_FlushRxFifo+0x5c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e018      	b.n	8005734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	daf2      	bge.n	80056f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2210      	movs	r2, #16
 8005712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <USB_FlushRxFifo+0x5c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e006      	b.n	8005734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d0f0      	beq.n	8005714 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	00030d40 	.word	0x00030d40

08005744 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e00a      	b.n	80057b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d002      	beq.n	80057a8 <USB_GetDevSpeed+0x32>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b06      	cmp	r3, #6
 80057a6:	d102      	bne.n	80057ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057a8:	2302      	movs	r3, #2
 80057aa:	75fb      	strb	r3, [r7, #23]
 80057ac:	e001      	b.n	80057b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057ae:	230f      	movs	r3, #15
 80057b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d13a      	bne.n	8005852 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d155      	bne.n	80058c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	791b      	ldrb	r3, [r3, #4]
 800582e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005830:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	4313      	orrs	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e036      	b.n	80058c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	2101      	movs	r1, #1
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11a      	bne.n	80058c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058a6:	430b      	orrs	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d161      	bne.n	80059b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005902:	d11f      	bne.n	8005944 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005922:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005988:	4013      	ands	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	0159      	lsls	r1, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	440b      	add	r3, r1
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	4619      	mov	r1, r3
 80059a8:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <USB_DeactivateEndpoint+0x1b0>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
 80059ae:	e060      	b.n	8005a72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c6:	d11f      	bne.n	8005a08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	2101      	movs	r1, #1
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	43db      	mvns	r3, r3
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a28:	4013      	ands	r3, r2
 8005a2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	43db      	mvns	r3, r3
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	0159      	lsls	r1, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	440b      	add	r3, r1
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <USB_DeactivateEndpoint+0x1b4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	ec337800 	.word	0xec337800
 8005a84:	eff37800 	.word	0xeff37800

08005a88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 815c 	bne.w	8005d62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d132      	bne.n	8005b18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b10:	0cdb      	lsrs	r3, r3, #19
 8005b12:	04db      	lsls	r3, r3, #19
 8005b14:	6113      	str	r3, [r2, #16]
 8005b16:	e074      	b.n	8005c02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	0cdb      	lsrs	r3, r3, #19
 8005b34:	04db      	lsls	r3, r3, #19
 8005b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	440b      	add	r3, r1
 8005b74:	1e59      	subs	r1, r3, #1
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b80:	4b9d      	ldr	r3, [pc, #628]	; (8005df8 <USB_EPStartXfer+0x370>)
 8005b82:	400b      	ands	r3, r1
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	0148      	lsls	r0, r1, #5
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	4401      	add	r1, r0
 8005b8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005baa:	69b9      	ldr	r1, [r7, #24]
 8005bac:	0148      	lsls	r0, r1, #5
 8005bae:	69f9      	ldr	r1, [r7, #28]
 8005bb0:	4401      	add	r1, r0
 8005bb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	791b      	ldrb	r3, [r3, #4]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d11f      	bne.n	8005c02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005be0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d14b      	bne.n	8005ca0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	791b      	ldrb	r3, [r3, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d128      	bne.n	8005c7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d110      	bne.n	8005c5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e00f      	b.n	8005c7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e133      	b.n	8005f08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	791b      	ldrb	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d015      	beq.n	8005cf4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 811b 	beq.w	8005f08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	69f9      	ldr	r1, [r7, #28]
 8005cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8005cf2:	e109      	b.n	8005f08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d110      	bne.n	8005d26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e00f      	b.n	8005d46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6919      	ldr	r1, [r3, #16]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	b298      	uxth	r0, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4603      	mov	r3, r0
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fade 	bl	800631c <USB_WritePacket>
 8005d60:	e0d2      	b.n	8005f08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	0cdb      	lsrs	r3, r3, #19
 8005d7e:	04db      	lsls	r3, r3, #19
 8005d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d126      	bne.n	8005dfc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df2:	6113      	str	r3, [r2, #16]
 8005df4:	e03a      	b.n	8005e6c <USB_EPStartXfer+0x3e4>
 8005df6:	bf00      	nop
 8005df8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	8afa      	ldrh	r2, [r7, #22]
 8005e18:	fb03 f202 	mul.w	r2, r3, r2
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
 8005e30:	04d9      	lsls	r1, r3, #19
 8005e32:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <USB_EPStartXfer+0x48c>)
 8005e34:	400b      	ands	r3, r1
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	0148      	lsls	r0, r1, #5
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	4401      	add	r1, r0
 8005e3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10d      	bne.n	8005e8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d128      	bne.n	8005ee8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d110      	bne.n	8005ec8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00f      	b.n	8005ee8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	1ff80000 	.word	0x1ff80000

08005f18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	f040 80ce 	bne.w	80060d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d132      	bne.n	8005fa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	0cdb      	lsrs	r3, r3, #19
 8005fa2:	04db      	lsls	r3, r3, #19
 8005fa4:	6113      	str	r3, [r2, #16]
 8005fa6:	e04e      	b.n	8006046 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	0cdb      	lsrs	r3, r3, #19
 8005fc4:	04db      	lsls	r3, r3, #19
 8005fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d903      	bls.n	8006000 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800601e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	0148      	lsls	r0, r1, #5
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	4401      	add	r1, r0
 800603e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d11e      	bne.n	800608a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e097      	b.n	80061ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8083 	beq.w	80061ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060d0:	4313      	orrs	r3, r2
 80060d2:	634b      	str	r3, [r1, #52]	; 0x34
 80060d4:	e071      	b.n	80061ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	0cdb      	lsrs	r3, r3, #19
 80060f2:	04db      	lsls	r3, r3, #19
 80060f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006118:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006168:	6939      	ldr	r1, [r7, #16]
 800616a:	0148      	lsls	r0, r1, #5
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	4401      	add	r1, r0
 8006170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006174:	4313      	orrs	r3, r2
 8006176:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10d      	bne.n	800619a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	460a      	mov	r2, r1
 8006198:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d14a      	bne.n	800627c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fe:	f040 8086 	bne.w	800630e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006224:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006248:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f242 7210 	movw	r2, #10000	; 0x2710
 8006256:	4293      	cmp	r3, r2
 8006258:	d902      	bls.n	8006260 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
          break;
 800625e:	e056      	b.n	800630e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006278:	d0e7      	beq.n	800624a <USB_EPStopXfer+0x82>
 800627a:	e048      	b.n	800630e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006294:	d13b      	bne.n	800630e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d902      	bls.n	80062f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e00c      	b.n	800630e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630c:	d0e7      	beq.n	80062de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	460b      	mov	r3, r1
 800632c:	71fb      	strb	r3, [r7, #7]
 800632e:	4613      	mov	r3, r2
 8006330:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800633a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d123      	bne.n	800638a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006342:	88bb      	ldrh	r3, [r7, #4]
 8006344:	3303      	adds	r3, #3
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e018      	b.n	8006382 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	031a      	lsls	r2, r3, #12
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635c:	461a      	mov	r2, r3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3301      	adds	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	3301      	adds	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d3e2      	bcc.n	8006350 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3724      	adds	r7, #36	; 0x24
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006398:	b480      	push	{r7}
 800639a:	b08b      	sub	sp, #44	; 0x2c
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	e014      	b.n	80063ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	3301      	adds	r3, #1
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	3301      	adds	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	3301      	adds	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	3301      	adds	r3, #1
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d3e6      	bcc.n	80063c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01e      	beq.n	800643a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006406:	461a      	mov	r2, r3
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	701a      	strb	r2, [r3, #0]
      i++;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	3301      	adds	r3, #1
 8006426:	623b      	str	r3, [r7, #32]
      pDest++;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	3301      	adds	r3, #1
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800642e:	8bfb      	ldrh	r3, [r7, #30]
 8006430:	3b01      	subs	r3, #1
 8006432:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006434:	8bfb      	ldrh	r3, [r7, #30]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ea      	bne.n	8006410 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800643c:	4618      	mov	r0, r3
 800643e:	372c      	adds	r7, #44	; 0x2c
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d12c      	bne.n	80064be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	db12      	blt.n	800649c <USB_EPSetStall+0x54>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00f      	beq.n	800649c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800649a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e02b      	b.n	8006516 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db12      	blt.n	80064f6 <USB_EPSetStall+0xae>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00f      	beq.n	80064f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d128      	bne.n	8006592 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800655e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	791b      	ldrb	r3, [r3, #4]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d003      	beq.n	8006570 <USB_EPClearStall+0x4c>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	791b      	ldrb	r3, [r3, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d138      	bne.n	80065e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e027      	b.n	80065e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d003      	beq.n	80065c2 <USB_EPClearStall+0x9e>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d10f      	bne.n	80065e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006612:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666a:	f023 0302 	bic.w	r3, r3, #2
 800666e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006698:	f023 0303 	bic.w	r3, r3, #3
 800669c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ac:	f043 0302 	orr.w	r3, r3, #2
 80066b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	0c1b      	lsrs	r3, r3, #16
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	b29b      	uxth	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800677c:	68bb      	ldr	r3, [r7, #8]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678a:	b480      	push	{r7}
 800678c:	b087      	sub	sp, #28
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	01db      	lsls	r3, r3, #7
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067d8:	68bb      	ldr	r3, [r7, #8]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006820:	f023 0307 	bic.w	r3, r3, #7
 8006824:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	460b      	mov	r3, r1
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	333c      	adds	r3, #60	; 0x3c
 800685e:	3304      	adds	r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4a26      	ldr	r2, [pc, #152]	; (8006900 <USB_EP0_OutStart+0xb8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d90a      	bls.n	8006882 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800687c:	d101      	bne.n	8006882 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e037      	b.n	80068f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b0:	f043 0318 	orr.w	r3, r3, #24
 80068b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10f      	bne.n	80068f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	4f54300a 	.word	0x4f54300a

08006904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a13      	ldr	r2, [pc, #76]	; (8006968 <USB_CoreReset+0x64>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e01b      	b.n	800695a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	daf2      	bge.n	8006910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f043 0201 	orr.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a09      	ldr	r2, [pc, #36]	; (8006968 <USB_CoreReset+0x64>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e006      	b.n	800695a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b01      	cmp	r3, #1
 8006956:	d0f0      	beq.n	800693a <USB_CoreReset+0x36>

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	00030d40 	.word	0x00030d40

0800696c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006978:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800697c:	f005 fdee 	bl	800c55c <USBD_static_malloc>
 8006980:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	32b0      	adds	r2, #176	; 0xb0
 8006992:	2100      	movs	r1, #0
 8006994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006998:	2302      	movs	r3, #2
 800699a:	e0d4      	b.n	8006b46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800699c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f005 fe50 	bl	800c648 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32b0      	adds	r2, #176	; 0xb0
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	32b0      	adds	r2, #176	; 0xb0
 80069c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d138      	bne.n	8006a46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069d4:	4b5e      	ldr	r3, [pc, #376]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 80069d6:	7819      	ldrb	r1, [r3, #0]
 80069d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069dc:	2202      	movs	r2, #2
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f005 fc99 	bl	800c316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069e4:	4b5a      	ldr	r3, [pc, #360]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	2201      	movs	r2, #1
 80069fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069fe:	4b55      	ldr	r3, [pc, #340]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a00:	7819      	ldrb	r1, [r3, #0]
 8006a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a06:	2202      	movs	r2, #2
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f005 fc84 	bl	800c316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a0e:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a26:	2201      	movs	r2, #1
 8006a28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a2a:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3326      	adds	r3, #38	; 0x26
 8006a40:	2210      	movs	r2, #16
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e035      	b.n	8006ab2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a46:	4b42      	ldr	r3, [pc, #264]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 8006a48:	7819      	ldrb	r1, [r3, #0]
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f005 fc61 	bl	800c316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a54:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a70:	7819      	ldrb	r1, [r3, #0]
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	2202      	movs	r2, #2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f005 fc4d 	bl	800c316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a94:	2201      	movs	r2, #1
 8006a96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3326      	adds	r3, #38	; 0x26
 8006aae:	2210      	movs	r2, #16
 8006ab0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ab2:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006ab4:	7819      	ldrb	r1, [r3, #0]
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	2203      	movs	r2, #3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f005 fc2b 	bl	800c316 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3324      	adds	r3, #36	; 0x24
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	33b0      	adds	r3, #176	; 0xb0
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e018      	b.n	8006b46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7c1b      	ldrb	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006b1e:	7819      	ldrb	r1, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f005 fce2 	bl	800c4f4 <USBD_LL_PrepareReceive>
 8006b30:	e008      	b.n	8006b44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006b34:	7819      	ldrb	r1, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f005 fcd8 	bl	800c4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000093 	.word	0x20000093
 8006b54:	20000094 	.word	0x20000094
 8006b58:	20000095 	.word	0x20000095

08006b5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b68:	4b3a      	ldr	r3, [pc, #232]	; (8006c54 <USBD_CDC_DeInit+0xf8>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f005 fbf7 	bl	800c362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <USBD_CDC_DeInit+0xf8>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b8e:	4b32      	ldr	r3, [pc, #200]	; (8006c58 <USBD_CDC_DeInit+0xfc>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f005 fbe4 	bl	800c362 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b9a:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <USBD_CDC_DeInit+0xfc>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f005 fbd0 	bl	800c362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	2200      	movs	r2, #0
 8006bda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	3326      	adds	r3, #38	; 0x26
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	32b0      	adds	r2, #176	; 0xb0
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01f      	beq.n	8006c48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33b0      	adds	r3, #176	; 0xb0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f005 fca4 	bl	800c578 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32b0      	adds	r2, #176	; 0xb0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000093 	.word	0x20000093
 8006c58:	20000094 	.word	0x20000094
 8006c5c:	20000095 	.word	0x20000095

08006c60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	32b0      	adds	r2, #176	; 0xb0
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0bf      	b.n	8006e10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d050      	beq.n	8006d3e <USBD_CDC_Setup+0xde>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	f040 80af 	bne.w	8006e00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d03a      	beq.n	8006d20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da1b      	bge.n	8006cec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	33b0      	adds	r3, #176	; 0xb0
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	88d2      	ldrh	r2, [r2, #6]
 8006cd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88db      	ldrh	r3, [r3, #6]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	bf28      	it	cs
 8006cda:	2307      	movcs	r3, #7
 8006cdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	89fa      	ldrh	r2, [r7, #14]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fd43 	bl	8008770 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cea:	e090      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785a      	ldrb	r2, [r3, #1]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b3f      	cmp	r3, #63	; 0x3f
 8006cfc:	d803      	bhi.n	8006d06 <USBD_CDC_Setup+0xa6>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	e000      	b.n	8006d08 <USBD_CDC_Setup+0xa8>
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d0e:	6939      	ldr	r1, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d16:	461a      	mov	r2, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fd55 	bl	80087c8 <USBD_CtlPrepareRx>
      break;
 8006d1e:	e076      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	33b0      	adds	r3, #176	; 0xb0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	7850      	ldrb	r0, [r2, #1]
 8006d36:	2200      	movs	r2, #0
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4798      	blx	r3
      break;
 8006d3c:	e067      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b0b      	cmp	r3, #11
 8006d44:	d851      	bhi.n	8006dea <USBD_CDC_Setup+0x18a>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_CDC_Setup+0xec>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006df9 	.word	0x08006df9
 8006d54:	08006deb 	.word	0x08006deb
 8006d58:	08006deb 	.word	0x08006deb
 8006d5c:	08006deb 	.word	0x08006deb
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006deb 	.word	0x08006deb
 8006d68:	08006deb 	.word	0x08006deb
 8006d6c:	08006deb 	.word	0x08006deb
 8006d70:	08006deb 	.word	0x08006deb
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	08006dd1 	.word	0x08006dd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d107      	bne.n	8006d98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d88:	f107 030a 	add.w	r3, r7, #10
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fced 	bl	8008770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d96:	e032      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fc77 	bl	800868e <USBD_CtlError>
            ret = USBD_FAIL;
 8006da0:	2303      	movs	r3, #3
 8006da2:	75fb      	strb	r3, [r7, #23]
          break;
 8006da4:	e02b      	b.n	8006dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db2:	f107 030d 	add.w	r3, r7, #13
 8006db6:	2201      	movs	r2, #1
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fcd8 	bl	8008770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc0:	e01d      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fc62 	bl	800868e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dce:	e016      	b.n	8006dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d00f      	beq.n	8006dfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fc55 	bl	800868e <USBD_CtlError>
            ret = USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de8:	e008      	b.n	8006dfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fc4e 	bl	800868e <USBD_CtlError>
          ret = USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
          break;
 8006df6:	e002      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
          break;
 8006df8:	bf00      	nop
 8006dfa:	e008      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
          break;
 8006dfc:	bf00      	nop
      }
      break;
 8006dfe:	e006      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fc43 	bl	800868e <USBD_CtlError>
      ret = USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	; 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e065      	b.n	8006f0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32b0      	adds	r2, #176	; 0xb0
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3318      	adds	r3, #24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02f      	beq.n	8006ecc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 020f 	and.w	r2, r3, #15
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3318      	adds	r3, #24
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 010f 	and.w	r1, r3, #15
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	440b      	add	r3, r1
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4403      	add	r3, r0
 8006e94:	3348      	adds	r3, #72	; 0x48
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d112      	bne.n	8006ecc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3318      	adds	r3, #24
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ebe:	78f9      	ldrb	r1, [r7, #3]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f005 faf4 	bl	800c4b2 <USBD_LL_Transmit>
 8006eca:	e01f      	b.n	8006f0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	33b0      	adds	r3, #176	; 0xb0
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	33b0      	adds	r3, #176	; 0xb0
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32b0      	adds	r2, #176	; 0xb0
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32b0      	adds	r2, #176	; 0xb0
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e01a      	b.n	8006f7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f005 faf2 	bl	800c536 <USBD_LL_GetRxDataSize>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	33b0      	adds	r3, #176	; 0xb0
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	32b0      	adds	r2, #176	; 0xb0
 8006f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e025      	b.n	8006ff4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	33b0      	adds	r3, #176	; 0xb0
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01a      	beq.n	8006ff2 <USBD_CDC_EP0_RxReady+0x6c>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fc2:	2bff      	cmp	r3, #255	; 0xff
 8006fc4:	d015      	beq.n	8006ff2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	33b0      	adds	r3, #176	; 0xb0
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007004:	2182      	movs	r1, #130	; 0x82
 8007006:	4818      	ldr	r0, [pc, #96]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007008:	f000 fd09 	bl	8007a1e <USBD_GetEpDesc>
 800700c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800700e:	2101      	movs	r1, #1
 8007010:	4815      	ldr	r0, [pc, #84]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007012:	f000 fd04 	bl	8007a1e <USBD_GetEpDesc>
 8007016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007018:	2181      	movs	r1, #129	; 0x81
 800701a:	4813      	ldr	r0, [pc, #76]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800701c:	f000 fcff 	bl	8007a1e <USBD_GetEpDesc>
 8007020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2210      	movs	r2, #16
 800702c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2200      	movs	r2, #0
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	711a      	strb	r2, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d006      	beq.n	8007056 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007050:	711a      	strb	r2, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2243      	movs	r2, #67	; 0x43
 800705a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000050 	.word	0x20000050

0800706c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007074:	2182      	movs	r1, #130	; 0x82
 8007076:	4818      	ldr	r0, [pc, #96]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007078:	f000 fcd1 	bl	8007a1e <USBD_GetEpDesc>
 800707c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800707e:	2101      	movs	r1, #1
 8007080:	4815      	ldr	r0, [pc, #84]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007082:	f000 fccc 	bl	8007a1e <USBD_GetEpDesc>
 8007086:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007088:	2181      	movs	r1, #129	; 0x81
 800708a:	4813      	ldr	r0, [pc, #76]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800708c:	f000 fcc7 	bl	8007a1e <USBD_GetEpDesc>
 8007090:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2210      	movs	r2, #16
 800709c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2200      	movs	r2, #0
 80070a8:	711a      	strb	r2, [r3, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d006      	beq.n	80070c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	711a      	strb	r2, [r3, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f042 0202 	orr.w	r2, r2, #2
 80070c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2243      	movs	r2, #67	; 0x43
 80070ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070cc:	4b02      	ldr	r3, [pc, #8]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000050 	.word	0x20000050

080070dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e4:	2182      	movs	r1, #130	; 0x82
 80070e6:	4818      	ldr	r0, [pc, #96]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e8:	f000 fc99 	bl	8007a1e <USBD_GetEpDesc>
 80070ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ee:	2101      	movs	r1, #1
 80070f0:	4815      	ldr	r0, [pc, #84]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f2:	f000 fc94 	bl	8007a1e <USBD_GetEpDesc>
 80070f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070f8:	2181      	movs	r1, #129	; 0x81
 80070fa:	4813      	ldr	r0, [pc, #76]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070fc:	f000 fc8f 	bl	8007a1e <USBD_GetEpDesc>
 8007100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2210      	movs	r2, #16
 800710c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2200      	movs	r2, #0
 8007118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711c:	711a      	strb	r2, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007130:	711a      	strb	r2, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2243      	movs	r2, #67	; 0x43
 800713a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000050 	.word	0x20000050

0800714c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220a      	movs	r2, #10
 8007158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800715a:	4b03      	ldr	r3, [pc, #12]	; (8007168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	2000000c 	.word	0x2000000c

0800716c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e009      	b.n	8007194 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	33b0      	adds	r3, #176	; 0xb0
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	32b0      	adds	r2, #176	; 0xb0
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e008      	b.n	80071d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32b0      	adds	r2, #176	; 0xb0
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	e004      	b.n	8007212 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	; 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32b0      	adds	r2, #176	; 0xb0
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	e018      	b.n	8007280 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7c1b      	ldrb	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <USBD_CDC_ReceivePacket+0x68>)
 8007258:	7819      	ldrb	r1, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f005 f945 	bl	800c4f4 <USBD_LL_PrepareReceive>
 800726a:	e008      	b.n	800727e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <USBD_CDC_ReceivePacket+0x68>)
 800726e:	7819      	ldrb	r1, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f005 f93b 	bl	800c4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000094 	.word	0x20000094

0800728c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e01f      	b.n	80072e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	79fa      	ldrb	r2, [r7, #7]
 80072d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f004 ffb5 	bl	800c248 <USBD_LL_Init>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	e025      	b.n	8007350 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32ae      	adds	r2, #174	; 0xae
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00f      	beq.n	8007340 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32ae      	adds	r2, #174	; 0xae
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	f107 020e 	add.w	r2, r7, #14
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	4602      	mov	r2, r0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f004 ffbd 	bl	800c2e0 <USBD_LL_Start>
 8007366:	4603      	mov	r3, r0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	2b00      	cmp	r3, #0
 800739e:	d009      	beq.n	80073b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	78fa      	ldrb	r2, [r7, #3]
 80073aa:	4611      	mov	r1, r2
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	4611      	mov	r1, r2
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f001 f908 	bl	800861a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2b02      	cmp	r3, #2
 800742c:	d01a      	beq.n	8007464 <USBD_LL_SetupStage+0x72>
 800742e:	2b02      	cmp	r3, #2
 8007430:	d822      	bhi.n	8007478 <USBD_LL_SetupStage+0x86>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <USBD_LL_SetupStage+0x4a>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <USBD_LL_SetupStage+0x5e>
 800743a:	e01d      	b.n	8007478 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb5f 	bl	8007b08 <USBD_StdDevReq>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
      break;
 800744e:	e020      	b.n	8007492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fbc7 	bl	8007bec <USBD_StdItfReq>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
      break;
 8007462:	e016      	b.n	8007492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fc29 	bl	8007cc4 <USBD_StdEPReq>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
      break;
 8007476:	e00c      	b.n	8007492 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800747e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f004 ff8a 	bl	800c3a0 <USBD_LL_StallEP>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
      break;
 8007490:	bf00      	nop
  }

  return ret;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	460b      	mov	r3, r1
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d16e      	bne.n	8007592 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f040 8098 	bne.w	80075f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d913      	bls.n	80074fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	1ad2      	subs	r2, r2, r3
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	4293      	cmp	r3, r2
 80074ec:	bf28      	it	cs
 80074ee:	4613      	movcs	r3, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f001 f984 	bl	8008802 <USBD_CtlContinueRx>
 80074fa:	e07d      	b.n	80075f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b02      	cmp	r3, #2
 8007508:	d014      	beq.n	8007534 <USBD_LL_DataOutStage+0x98>
 800750a:	2b02      	cmp	r3, #2
 800750c:	d81d      	bhi.n	800754a <USBD_LL_DataOutStage+0xae>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <USBD_LL_DataOutStage+0x7c>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d003      	beq.n	800751e <USBD_LL_DataOutStage+0x82>
 8007516:	e018      	b.n	800754a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	75bb      	strb	r3, [r7, #22]
            break;
 800751c:	e018      	b.n	8007550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007524:	b2db      	uxtb	r3, r3
 8007526:	4619      	mov	r1, r3
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fa5e 	bl	80079ea <USBD_CoreFindIF>
 800752e:	4603      	mov	r3, r0
 8007530:	75bb      	strb	r3, [r7, #22]
            break;
 8007532:	e00d      	b.n	8007550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4619      	mov	r1, r3
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa60 	bl	8007a04 <USBD_CoreFindEP>
 8007544:	4603      	mov	r3, r0
 8007546:	75bb      	strb	r3, [r7, #22]
            break;
 8007548:	e002      	b.n	8007550 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	75bb      	strb	r3, [r7, #22]
            break;
 800754e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007550:	7dbb      	ldrb	r3, [r7, #22]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d119      	bne.n	800758a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b03      	cmp	r3, #3
 8007560:	d113      	bne.n	800758a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007562:	7dba      	ldrb	r2, [r7, #22]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	32ae      	adds	r2, #174	; 0xae
 8007568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007572:	7dba      	ldrb	r2, [r7, #22]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800757a:	7dba      	ldrb	r2, [r7, #22]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	32ae      	adds	r2, #174	; 0xae
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f001 f94a 	bl	8008824 <USBD_CtlSendStatus>
 8007590:	e032      	b.n	80075f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007598:	b2db      	uxtb	r3, r3
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fa31 	bl	8007a04 <USBD_CoreFindEP>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075a6:	7dbb      	ldrb	r3, [r7, #22]
 80075a8:	2bff      	cmp	r3, #255	; 0xff
 80075aa:	d025      	beq.n	80075f8 <USBD_LL_DataOutStage+0x15c>
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d122      	bne.n	80075f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d117      	bne.n	80075ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075be:	7dba      	ldrb	r2, [r7, #22]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	32ae      	adds	r2, #174	; 0xae
 80075c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00f      	beq.n	80075ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075ce:	7dba      	ldrb	r2, [r7, #22]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075d6:	7dba      	ldrb	r2, [r7, #22]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	32ae      	adds	r2, #174	; 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	7afa      	ldrb	r2, [r7, #11]
 80075e4:	4611      	mov	r1, r2
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	e000      	b.n	80075fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	460b      	mov	r3, r1
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d16f      	bne.n	80076f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3314      	adds	r3, #20
 800761a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007622:	2b02      	cmp	r3, #2
 8007624:	d15a      	bne.n	80076dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	429a      	cmp	r2, r3
 8007630:	d914      	bls.n	800765c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	461a      	mov	r2, r3
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f001 f8ac 	bl	80087a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800764e:	2300      	movs	r3, #0
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f004 ff4d 	bl	800c4f4 <USBD_LL_PrepareReceive>
 800765a:	e03f      	b.n	80076dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	d11c      	bne.n	80076a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007670:	429a      	cmp	r2, r3
 8007672:	d316      	bcc.n	80076a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800767e:	429a      	cmp	r2, r3
 8007680:	d20f      	bcs.n	80076a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f001 f88d 	bl	80087a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f004 ff2a 	bl	800c4f4 <USBD_LL_PrepareReceive>
 80076a0:	e01c      	b.n	80076dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d10f      	bne.n	80076ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ce:	2180      	movs	r1, #128	; 0x80
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f004 fe65 	bl	800c3a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f001 f8b7 	bl	800884a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d03a      	beq.n	800775c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff fe42 	bl	8007370 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076f4:	e032      	b.n	800775c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076f6:	7afb      	ldrb	r3, [r7, #11]
 80076f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f97f 	bl	8007a04 <USBD_CoreFindEP>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	2bff      	cmp	r3, #255	; 0xff
 800770e:	d025      	beq.n	800775c <USBD_LL_DataInStage+0x15a>
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d122      	bne.n	800775c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d11c      	bne.n	800775c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007722:	7dfa      	ldrb	r2, [r7, #23]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	32ae      	adds	r2, #174	; 0xae
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d014      	beq.n	800775c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007732:	7dfa      	ldrb	r2, [r7, #23]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800773a:	7dfa      	ldrb	r2, [r7, #23]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	32ae      	adds	r2, #174	; 0xae
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	7afa      	ldrb	r2, [r7, #11]
 8007748:	4611      	mov	r1, r2
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007752:	7dbb      	ldrb	r3, [r7, #22]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007758:	7dbb      	ldrb	r3, [r7, #22]
 800775a:	e000      	b.n	800775e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d014      	beq.n	80077cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00e      	beq.n	80077cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6852      	ldr	r2, [r2, #4]
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	4611      	mov	r1, r2
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077cc:	2340      	movs	r3, #64	; 0x40
 80077ce:	2200      	movs	r2, #0
 80077d0:	2100      	movs	r1, #0
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f004 fd9f 	bl	800c316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2240      	movs	r2, #64	; 0x40
 80077e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077e8:	2340      	movs	r3, #64	; 0x40
 80077ea:	2200      	movs	r2, #0
 80077ec:	2180      	movs	r1, #128	; 0x80
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f004 fd91 	bl	800c316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2240      	movs	r2, #64	; 0x40
 80077fe:	621a      	str	r2, [r3, #32]

  return ret;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	b2da      	uxtb	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2204      	movs	r2, #4
 8007844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b04      	cmp	r3, #4
 8007868:	d106      	bne.n	8007878 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007870:	b2da      	uxtb	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b03      	cmp	r3, #3
 8007898:	d110      	bne.n	80078bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	32ae      	adds	r2, #174	; 0xae
 80078dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e01c      	b.n	8007922 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d115      	bne.n	8007920 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32ae      	adds	r2, #174	; 0xae
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	32ae      	adds	r2, #174	; 0xae
 8007912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	4611      	mov	r1, r2
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32ae      	adds	r2, #174	; 0xae
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e01c      	b.n	8007986 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b03      	cmp	r3, #3
 8007956:	d115      	bne.n	8007984 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32ae      	adds	r2, #174	; 0xae
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32ae      	adds	r2, #174	; 0xae
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	78fa      	ldrb	r2, [r7, #3]
 800797e:	4611      	mov	r1, r2
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6852      	ldr	r2, [r2, #4]
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b086      	sub	sp, #24
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d920      	bls.n	8007a88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a4e:	e013      	b.n	8007a78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a50:	f107 030a 	add.w	r3, r7, #10
 8007a54:	4619      	mov	r1, r3
 8007a56:	6978      	ldr	r0, [r7, #20]
 8007a58:	f000 f81b 	bl	8007a92 <USBD_GetNextDesc>
 8007a5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d108      	bne.n	8007a78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	789b      	ldrb	r3, [r3, #2]
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d008      	beq.n	8007a86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	897b      	ldrh	r3, [r7, #10]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d8e5      	bhi.n	8007a50 <USBD_GetEpDesc+0x32>
 8007a84:	e000      	b.n	8007a88 <USBD_GetEpDesc+0x6a>
          break;
 8007a86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a88:	693b      	ldr	r3, [r7, #16]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3718      	adds	r7, #24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	881a      	ldrh	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007abe:	68fb      	ldr	r3, [r7, #12]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aea:	8a3b      	ldrh	r3, [r7, #16]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	b21a      	sxth	r2, r3
 8007af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007afa:	89fb      	ldrh	r3, [r7, #14]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b1e:	2b40      	cmp	r3, #64	; 0x40
 8007b20:	d005      	beq.n	8007b2e <USBD_StdDevReq+0x26>
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d857      	bhi.n	8007bd6 <USBD_StdDevReq+0xce>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <USBD_StdDevReq+0x42>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d153      	bne.n	8007bd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	32ae      	adds	r2, #174	; 0xae
 8007b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
      break;
 8007b48:	e04a      	b.n	8007be0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d83b      	bhi.n	8007bca <USBD_StdDevReq+0xc2>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBD_StdDevReq+0x50>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007bc1 	.word	0x08007bc1
 8007b60:	08007bcb 	.word	0x08007bcb
 8007b64:	08007bb7 	.word	0x08007bb7
 8007b68:	08007bcb 	.word	0x08007bcb
 8007b6c:	08007b8b 	.word	0x08007b8b
 8007b70:	08007b81 	.word	0x08007b81
 8007b74:	08007bcb 	.word	0x08007bcb
 8007b78:	08007ba3 	.word	0x08007ba3
 8007b7c:	08007b95 	.word	0x08007b95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa3c 	bl	8008000 <USBD_GetDescriptor>
          break;
 8007b88:	e024      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fba1 	bl	80082d4 <USBD_SetAddress>
          break;
 8007b92:	e01f      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fbe0 	bl	800835c <USBD_SetConfig>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba0:	e018      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fc83 	bl	80084b0 <USBD_GetConfig>
          break;
 8007baa:	e013      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fcb4 	bl	800851c <USBD_GetStatus>
          break;
 8007bb4:	e00e      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fce3 	bl	8008584 <USBD_SetFeature>
          break;
 8007bbe:	e009      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fd07 	bl	80085d6 <USBD_ClrFeature>
          break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fd5e 	bl	800868e <USBD_CtlError>
          break;
 8007bd2:	bf00      	nop
      }
      break;
 8007bd4:	e004      	b.n	8007be0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fd58 	bl	800868e <USBD_CtlError>
      break;
 8007bde:	bf00      	nop
  }

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop

08007bec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d005      	beq.n	8007c12 <USBD_StdItfReq+0x26>
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d852      	bhi.n	8007cb0 <USBD_StdItfReq+0xc4>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <USBD_StdItfReq+0x26>
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d14e      	bne.n	8007cb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d840      	bhi.n	8007ca2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	889b      	ldrh	r3, [r3, #4]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d836      	bhi.n	8007c98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	889b      	ldrh	r3, [r3, #4]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fed9 	bl	80079ea <USBD_CoreFindIF>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2bff      	cmp	r3, #255	; 0xff
 8007c40:	d01d      	beq.n	8007c7e <USBD_StdItfReq+0x92>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c48:	7bba      	ldrb	r2, [r7, #14]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32ae      	adds	r2, #174	; 0xae
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00f      	beq.n	8007c78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c58:	7bba      	ldrb	r2, [r7, #14]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c60:	7bba      	ldrb	r2, [r7, #14]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	32ae      	adds	r2, #174	; 0xae
 8007c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c76:	e004      	b.n	8007c82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c7c:	e001      	b.n	8007c82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	88db      	ldrh	r3, [r3, #6]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d110      	bne.n	8007cac <USBD_StdItfReq+0xc0>
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fdc7 	bl	8008824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c96:	e009      	b.n	8007cac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcf7 	bl	800868e <USBD_CtlError>
          break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fcf2 	bl	800868e <USBD_CtlError>
          break;
 8007caa:	e000      	b.n	8007cae <USBD_StdItfReq+0xc2>
          break;
 8007cac:	bf00      	nop
      }
      break;
 8007cae:	e004      	b.n	8007cba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fceb 	bl	800868e <USBD_CtlError>
      break;
 8007cb8:	bf00      	nop
  }

  return ret;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	889b      	ldrh	r3, [r3, #4]
 8007cd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d007      	beq.n	8007cf4 <USBD_StdEPReq+0x30>
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	f200 817f 	bhi.w	8007fe8 <USBD_StdEPReq+0x324>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02a      	beq.n	8007d44 <USBD_StdEPReq+0x80>
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	f040 817a 	bne.w	8007fe8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff fe83 	bl	8007a04 <USBD_CoreFindEP>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d02:	7b7b      	ldrb	r3, [r7, #13]
 8007d04:	2bff      	cmp	r3, #255	; 0xff
 8007d06:	f000 8174 	beq.w	8007ff2 <USBD_StdEPReq+0x32e>
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8170 	bne.w	8007ff2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d12:	7b7a      	ldrb	r2, [r7, #13]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d1a:	7b7a      	ldrb	r2, [r7, #13]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32ae      	adds	r2, #174	; 0xae
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8163 	beq.w	8007ff2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d2c:	7b7a      	ldrb	r2, [r7, #13]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	32ae      	adds	r2, #174	; 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d42:	e156      	b.n	8007ff2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d008      	beq.n	8007d5e <USBD_StdEPReq+0x9a>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	f300 8145 	bgt.w	8007fdc <USBD_StdEPReq+0x318>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 809b 	beq.w	8007e8e <USBD_StdEPReq+0x1ca>
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d03c      	beq.n	8007dd6 <USBD_StdEPReq+0x112>
 8007d5c:	e13e      	b.n	8007fdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d002      	beq.n	8007d70 <USBD_StdEPReq+0xac>
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d016      	beq.n	8007d9c <USBD_StdEPReq+0xd8>
 8007d6e:	e02c      	b.n	8007dca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <USBD_StdEPReq+0xce>
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d00a      	beq.n	8007d92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f004 fb0d 	bl	800c3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d86:	2180      	movs	r1, #128	; 0x80
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f004 fb09 	bl	800c3a0 <USBD_LL_StallEP>
 8007d8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d90:	e020      	b.n	8007dd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc7a 	bl	800868e <USBD_CtlError>
              break;
 8007d9a:	e01b      	b.n	8007dd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	885b      	ldrh	r3, [r3, #2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10e      	bne.n	8007dc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <USBD_StdEPReq+0xfe>
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b80      	cmp	r3, #128	; 0x80
 8007dae:	d008      	beq.n	8007dc2 <USBD_StdEPReq+0xfe>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f004 faef 	bl	800c3a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fd2e 	bl	8008824 <USBD_CtlSendStatus>

              break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc5e 	bl	800868e <USBD_CtlError>
              break;
 8007dd2:	bf00      	nop
          }
          break;
 8007dd4:	e107      	b.n	8007fe6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <USBD_StdEPReq+0x124>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d016      	beq.n	8007e14 <USBD_StdEPReq+0x150>
 8007de6:	e04b      	b.n	8007e80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <USBD_StdEPReq+0x146>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d00a      	beq.n	8007e0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f004 fad1 	bl	800c3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f004 facd 	bl	800c3a0 <USBD_LL_StallEP>
 8007e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e08:	e040      	b.n	8007e8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc3e 	bl	800868e <USBD_CtlError>
              break;
 8007e12:	e03b      	b.n	8007e8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	885b      	ldrh	r3, [r3, #2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d136      	bne.n	8007e8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f004 fad7 	bl	800c3de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcf7 	bl	8008824 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff fde2 	bl	8007a04 <USBD_CoreFindEP>
 8007e40:	4603      	mov	r3, r0
 8007e42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e44:	7b7b      	ldrb	r3, [r7, #13]
 8007e46:	2bff      	cmp	r3, #255	; 0xff
 8007e48:	d01f      	beq.n	8007e8a <USBD_StdEPReq+0x1c6>
 8007e4a:	7b7b      	ldrb	r3, [r7, #13]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d11c      	bne.n	8007e8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e50:	7b7a      	ldrb	r2, [r7, #13]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e58:	7b7a      	ldrb	r2, [r7, #13]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d010      	beq.n	8007e8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	; 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e7e:	e004      	b.n	8007e8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fc03 	bl	800868e <USBD_CtlError>
              break;
 8007e88:	e000      	b.n	8007e8c <USBD_StdEPReq+0x1c8>
              break;
 8007e8a:	bf00      	nop
          }
          break;
 8007e8c:	e0ab      	b.n	8007fe6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d002      	beq.n	8007ea0 <USBD_StdEPReq+0x1dc>
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d032      	beq.n	8007f04 <USBD_StdEPReq+0x240>
 8007e9e:	e097      	b.n	8007fd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <USBD_StdEPReq+0x1f2>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b80      	cmp	r3, #128	; 0x80
 8007eaa:	d004      	beq.n	8007eb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fbed 	bl	800868e <USBD_CtlError>
                break;
 8007eb4:	e091      	b.n	8007fda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	da0b      	bge.n	8007ed6 <USBD_StdEPReq+0x212>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	3310      	adds	r3, #16
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	e00b      	b.n	8007eee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4413      	add	r3, r2
 8007eec:	3304      	adds	r3, #4
 8007eee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fc37 	bl	8008770 <USBD_CtlSendData>
              break;
 8007f02:	e06a      	b.n	8007fda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da11      	bge.n	8007f30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	f003 020f 	and.w	r2, r3, #15
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3324      	adds	r3, #36	; 0x24
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d117      	bne.n	8007f56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fbb0 	bl	800868e <USBD_CtlError>
                  break;
 8007f2e:	e054      	b.n	8007fda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	f003 020f 	and.w	r2, r3, #15
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fb9d 	bl	800868e <USBD_CtlError>
                  break;
 8007f54:	e041      	b.n	8007fda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da0b      	bge.n	8007f76 <USBD_StdEPReq+0x2b2>
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	3310      	adds	r3, #16
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	e00b      	b.n	8007f8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <USBD_StdEPReq+0x2d8>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d103      	bne.n	8007fa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e00e      	b.n	8007fc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f004 fa37 	bl	800c41c <USBD_LL_IsStallEP>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fbd1 	bl	8008770 <USBD_CtlSendData>
              break;
 8007fce:	e004      	b.n	8007fda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fb5b 	bl	800868e <USBD_CtlError>
              break;
 8007fd8:	bf00      	nop
          }
          break;
 8007fda:	e004      	b.n	8007fe6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb55 	bl	800868e <USBD_CtlError>
          break;
 8007fe4:	bf00      	nop
      }
      break;
 8007fe6:	e005      	b.n	8007ff4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb4f 	bl	800868e <USBD_CtlError>
      break;
 8007ff0:	e000      	b.n	8007ff4 <USBD_StdEPReq+0x330>
      break;
 8007ff2:	bf00      	nop
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b06      	cmp	r3, #6
 8008022:	f200 8128 	bhi.w	8008276 <USBD_GetDescriptor+0x276>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_GetDescriptor+0x2c>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008049 	.word	0x08008049
 8008030:	08008061 	.word	0x08008061
 8008034:	080080a1 	.word	0x080080a1
 8008038:	08008277 	.word	0x08008277
 800803c:	08008277 	.word	0x08008277
 8008040:	08008217 	.word	0x08008217
 8008044:	08008243 	.word	0x08008243
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
      break;
 800805e:	e112      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008082:	e100      	b.n	8008286 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	f107 0208 	add.w	r2, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
      break;
 800809e:	e0f2      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	f200 80ac 	bhi.w	8008204 <USBD_GetDescriptor+0x204>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBD_GetDescriptor+0xb4>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	08008101 	.word	0x08008101
 80080bc:	08008135 	.word	0x08008135
 80080c0:	08008169 	.word	0x08008169
 80080c4:	0800819d 	.word	0x0800819d
 80080c8:	080081d1 	.word	0x080081d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e091      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 facb 	bl	800868e <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e089      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008122:	e077      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fab1 	bl	800868e <USBD_CtlError>
            err++;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	72fb      	strb	r3, [r7, #11]
          break;
 8008132:	e06f      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	7c12      	ldrb	r2, [r2, #16]
 800814c:	f107 0108 	add.w	r1, r7, #8
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
 8008154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008156:	e05d      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa97 	bl	800868e <USBD_CtlError>
            err++;
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	3301      	adds	r3, #1
 8008164:	72fb      	strb	r3, [r7, #11]
          break;
 8008166:	e055      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7c12      	ldrb	r2, [r2, #16]
 8008180:	f107 0108 	add.w	r1, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818a:	e043      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa7d 	bl	800868e <USBD_CtlError>
            err++;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	3301      	adds	r3, #1
 8008198:	72fb      	strb	r3, [r7, #11]
          break;
 800819a:	e03b      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081be:	e029      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa63 	bl	800868e <USBD_CtlError>
            err++;
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	3301      	adds	r3, #1
 80081cc:	72fb      	strb	r3, [r7, #11]
          break;
 80081ce:	e021      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f2:	e00f      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa49 	bl	800868e <USBD_CtlError>
            err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
          break;
 8008202:	e007      	b.n	8008214 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa41 	bl	800868e <USBD_CtlError>
          err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008212:	bf00      	nop
      }
      break;
 8008214:	e037      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7c1b      	ldrb	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
 800822e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008230:	e029      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa2a 	bl	800868e <USBD_CtlError>
        err++;
 800823a:	7afb      	ldrb	r3, [r7, #11]
 800823c:	3301      	adds	r3, #1
 800823e:	72fb      	strb	r3, [r7, #11]
      break;
 8008240:	e021      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1b      	ldrb	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f107 0208 	add.w	r2, r7, #8
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
 800825a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	2207      	movs	r2, #7
 8008262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008264:	e00f      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fa10 	bl	800868e <USBD_CtlError>
        err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	e007      	b.n	8008286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fa08 	bl	800868e <USBD_CtlError>
      err++;
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	3301      	adds	r3, #1
 8008282:	72fb      	strb	r3, [r7, #11]
      break;
 8008284:	bf00      	nop
  }

  if (err != 0U)
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11e      	bne.n	80082ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	88db      	ldrh	r3, [r3, #6]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d016      	beq.n	80082c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008294:	893b      	ldrh	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88da      	ldrh	r2, [r3, #6]
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bf28      	it	cs
 80082a4:	4613      	movcs	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	461a      	mov	r2, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa5d 	bl	8008770 <USBD_CtlSendData>
 80082b6:	e009      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f9e7 	bl	800868e <USBD_CtlError>
 80082c0:	e004      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 faae 	bl	8008824 <USBD_CtlSendStatus>
 80082c8:	e000      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    return;
 80082ca:	bf00      	nop
  }
}
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	889b      	ldrh	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d131      	bne.n	800834a <USBD_SetAddress+0x76>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	88db      	ldrh	r3, [r3, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d12d      	bne.n	800834a <USBD_SetAddress+0x76>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b7f      	cmp	r3, #127	; 0x7f
 80082f4:	d829      	bhi.n	800834a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d104      	bne.n	8008318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9bc 	bl	800868e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008316:	e01d      	b.n	8008354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7bfa      	ldrb	r2, [r7, #15]
 800831c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f004 f8a5 	bl	800c474 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa7a 	bl	8008824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	e009      	b.n	8008354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008348:	e004      	b.n	8008354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f99e 	bl	800868e <USBD_CtlError>
  }
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	4b4e      	ldr	r3, [pc, #312]	; (80084ac <USBD_SetConfig+0x150>)
 8008372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008374:	4b4d      	ldr	r3, [pc, #308]	; (80084ac <USBD_SetConfig+0x150>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d905      	bls.n	8008388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f985 	bl	800868e <USBD_CtlError>
    return USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e08c      	b.n	80084a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d002      	beq.n	800839a <USBD_SetConfig+0x3e>
 8008394:	2b03      	cmp	r3, #3
 8008396:	d029      	beq.n	80083ec <USBD_SetConfig+0x90>
 8008398:	e075      	b.n	8008486 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800839a:	4b44      	ldr	r3, [pc, #272]	; (80084ac <USBD_SetConfig+0x150>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d020      	beq.n	80083e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083a2:	4b42      	ldr	r3, [pc, #264]	; (80084ac <USBD_SetConfig+0x150>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083ac:	4b3f      	ldr	r3, [pc, #252]	; (80084ac <USBD_SetConfig+0x150>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fe ffe7 	bl	8007386 <USBD_SetClassConfig>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f962 	bl	800868e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083d2:	e065      	b.n	80084a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa25 	bl	8008824 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2203      	movs	r2, #3
 80083de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083e2:	e05d      	b.n	80084a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa1d 	bl	8008824 <USBD_CtlSendStatus>
      break;
 80083ea:	e059      	b.n	80084a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083ec:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d112      	bne.n	800841a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80083fc:	4b2b      	ldr	r3, [pc, #172]	; (80084ac <USBD_SetConfig+0x150>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008406:	4b29      	ldr	r3, [pc, #164]	; (80084ac <USBD_SetConfig+0x150>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7fe ffd6 	bl	80073be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa06 	bl	8008824 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008418:	e042      	b.n	80084a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <USBD_SetConfig+0x150>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	d02a      	beq.n	800847e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe ffc4 	bl	80073be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <USBD_SetConfig+0x150>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <USBD_SetConfig+0x150>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fe ff9d 	bl	8007386 <USBD_SetClassConfig>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f918 	bl	800868e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fe ffa9 	bl	80073be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008474:	e014      	b.n	80084a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9d4 	bl	8008824 <USBD_CtlSendStatus>
      break;
 800847c:	e010      	b.n	80084a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9d0 	bl	8008824 <USBD_CtlSendStatus>
      break;
 8008484:	e00c      	b.n	80084a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f900 	bl	800868e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <USBD_SetConfig+0x150>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7fe ff92 	bl	80073be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800849a:	2303      	movs	r3, #3
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	bf00      	nop
  }

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200007d8 	.word	0x200007d8

080084b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	88db      	ldrh	r3, [r3, #6]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d004      	beq.n	80084cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8e2 	bl	800868e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ca:	e023      	b.n	8008514 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	dc02      	bgt.n	80084de <USBD_GetConfig+0x2e>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dc03      	bgt.n	80084e4 <USBD_GetConfig+0x34>
 80084dc:	e015      	b.n	800850a <USBD_GetConfig+0x5a>
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d00b      	beq.n	80084fa <USBD_GetConfig+0x4a>
 80084e2:	e012      	b.n	800850a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3308      	adds	r3, #8
 80084ee:	2201      	movs	r2, #1
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f93c 	bl	8008770 <USBD_CtlSendData>
        break;
 80084f8:	e00c      	b.n	8008514 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3304      	adds	r3, #4
 80084fe:	2201      	movs	r2, #1
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f934 	bl	8008770 <USBD_CtlSendData>
        break;
 8008508:	e004      	b.n	8008514 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8be 	bl	800868e <USBD_CtlError>
        break;
 8008512:	bf00      	nop
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	2b02      	cmp	r3, #2
 8008532:	d81e      	bhi.n	8008572 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	88db      	ldrh	r3, [r3, #6]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d004      	beq.n	8008546 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8a5 	bl	800868e <USBD_CtlError>
        break;
 8008544:	e01a      	b.n	800857c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f043 0202 	orr.w	r2, r3, #2
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	330c      	adds	r3, #12
 8008566:	2202      	movs	r2, #2
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f900 	bl	8008770 <USBD_CtlSendData>
      break;
 8008570:	e004      	b.n	800857c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f88a 	bl	800868e <USBD_CtlError>
      break;
 800857a:	bf00      	nop
  }
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d107      	bne.n	80085a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f940 	bl	8008824 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085a4:	e013      	b.n	80085ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	885b      	ldrh	r3, [r3, #2]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d10b      	bne.n	80085c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	889b      	ldrh	r3, [r3, #4]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f930 	bl	8008824 <USBD_CtlSendStatus>
}
 80085c4:	e003      	b.n	80085ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f860 	bl	800868e <USBD_CtlError>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d80b      	bhi.n	8008606 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d10c      	bne.n	8008610 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f910 	bl	8008824 <USBD_CtlSendStatus>
      }
      break;
 8008604:	e004      	b.n	8008610 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f840 	bl	800868e <USBD_CtlError>
      break;
 800860e:	e000      	b.n	8008612 <USBD_ClrFeature+0x3c>
      break;
 8008610:	bf00      	nop
  }
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3301      	adds	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7ff fa41 	bl	8007acc <SWAPBYTE>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fa34 	bl	8007acc <SWAPBYTE>
 8008664:	4603      	mov	r3, r0
 8008666:	461a      	mov	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff fa27 	bl	8007acc <SWAPBYTE>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	80da      	strh	r2, [r3, #6]
}
 8008686:	bf00      	nop
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008698:	2180      	movs	r1, #128	; 0x80
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f003 fe80 	bl	800c3a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f003 fe7c 	bl	800c3a0 <USBD_LL_StallEP>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d036      	beq.n	8008734 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f000 f836 	bl	800873c <USBD_GetLen>
 80086d0:	4603      	mov	r3, r0
 80086d2:	3301      	adds	r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	4413      	add	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	3301      	adds	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	4413      	add	r3, r2
 80086f6:	2203      	movs	r2, #3
 80086f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	3301      	adds	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008700:	e013      	b.n	800872a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	4413      	add	r3, r2
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	7812      	ldrb	r2, [r2, #0]
 800870c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]
    idx++;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	3301      	adds	r3, #1
 8008718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	4413      	add	r3, r2
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
    idx++;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	3301      	adds	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e7      	bne.n	8008702 <USBD_GetString+0x52>
 8008732:	e000      	b.n	8008736 <USBD_GetString+0x86>
    return;
 8008734:	bf00      	nop
  }
}
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800874c:	e005      	b.n	800875a <USBD_GetLen+0x1e>
  {
    len++;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	3301      	adds	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3301      	adds	r3, #1
 8008758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f5      	bne.n	800874e <USBD_GetLen+0x12>
  }

  return len;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2202      	movs	r2, #2
 8008780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	2100      	movs	r1, #0
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f003 fe8b 	bl	800c4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f003 fe7a 	bl	800c4b2 <USBD_LL_Transmit>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2203      	movs	r2, #3
 80087d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f003 fe7e 	bl	800c4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	2100      	movs	r1, #0
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f003 fe6d 	bl	800c4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2204      	movs	r2, #4
 8008830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008834:	2300      	movs	r3, #0
 8008836:	2200      	movs	r2, #0
 8008838:	2100      	movs	r1, #0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f003 fe39 	bl	800c4b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2205      	movs	r2, #5
 8008856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800885a:	2300      	movs	r3, #0
 800885c:	2200      	movs	r2, #0
 800885e:	2100      	movs	r1, #0
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f003 fe47 	bl	800c4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <__NVIC_SetPriority>:
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800887c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008880:	2b00      	cmp	r3, #0
 8008882:	db0a      	blt.n	800889a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	490c      	ldr	r1, [pc, #48]	; (80088bc <__NVIC_SetPriority+0x4c>)
 800888a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800888e:	0112      	lsls	r2, r2, #4
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	440b      	add	r3, r1
 8008894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008898:	e00a      	b.n	80088b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	b2da      	uxtb	r2, r3
 800889e:	4908      	ldr	r1, [pc, #32]	; (80088c0 <__NVIC_SetPriority+0x50>)
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	3b04      	subs	r3, #4
 80088a8:	0112      	lsls	r2, r2, #4
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	440b      	add	r3, r1
 80088ae:	761a      	strb	r2, [r3, #24]
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	e000e100 	.word	0xe000e100
 80088c0:	e000ed00 	.word	0xe000ed00

080088c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <SysTick_Handler+0x1c>)
 80088ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088cc:	f002 f830 	bl	800a930 <xTaskGetSchedulerState>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d001      	beq.n	80088da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088d6:	f002 ff17 	bl	800b708 <xPortSysTickHandler>
  }
}
 80088da:	bf00      	nop
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	e000e010 	.word	0xe000e010

080088e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088e8:	2100      	movs	r1, #0
 80088ea:	f06f 0004 	mvn.w	r0, #4
 80088ee:	f7ff ffbf 	bl	8008870 <__NVIC_SetPriority>
#endif
}
 80088f2:	bf00      	nop
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088fe:	f3ef 8305 	mrs	r3, IPSR
 8008902:	603b      	str	r3, [r7, #0]
  return(result);
 8008904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800890a:	f06f 0305 	mvn.w	r3, #5
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	e00c      	b.n	800892c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008912:	4b0a      	ldr	r3, [pc, #40]	; (800893c <osKernelInitialize+0x44>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <osKernelInitialize+0x44>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008920:	2300      	movs	r3, #0
 8008922:	607b      	str	r3, [r7, #4]
 8008924:	e002      	b.n	800892c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008926:	f04f 33ff 	mov.w	r3, #4294967295
 800892a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800892c:	687b      	ldr	r3, [r7, #4]
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	200007dc 	.word	0x200007dc

08008940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008946:	f3ef 8305 	mrs	r3, IPSR
 800894a:	603b      	str	r3, [r7, #0]
  return(result);
 800894c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008952:	f06f 0305 	mvn.w	r3, #5
 8008956:	607b      	str	r3, [r7, #4]
 8008958:	e010      	b.n	800897c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800895a:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <osKernelStart+0x48>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d109      	bne.n	8008976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008962:	f7ff ffbf 	bl	80088e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <osKernelStart+0x48>)
 8008968:	2202      	movs	r2, #2
 800896a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800896c:	f001 fb88 	bl	800a080 <vTaskStartScheduler>
      stat = osOK;
 8008970:	2300      	movs	r3, #0
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	e002      	b.n	800897c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800897c:	687b      	ldr	r3, [r7, #4]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	200007dc 	.word	0x200007dc

0800898c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b08e      	sub	sp, #56	; 0x38
 8008990:	af04      	add	r7, sp, #16
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008998:	2300      	movs	r3, #0
 800899a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800899c:	f3ef 8305 	mrs	r3, IPSR
 80089a0:	617b      	str	r3, [r7, #20]
  return(result);
 80089a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d17e      	bne.n	8008aa6 <osThreadNew+0x11a>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d07b      	beq.n	8008aa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089b2:	2318      	movs	r3, #24
 80089b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295
 80089be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d045      	beq.n	8008a52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <osThreadNew+0x48>
        name = attr->name;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <osThreadNew+0x6e>
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b38      	cmp	r3, #56	; 0x38
 80089ec:	d805      	bhi.n	80089fa <osThreadNew+0x6e>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <osThreadNew+0x72>
        return (NULL);
 80089fa:	2300      	movs	r3, #0
 80089fc:	e054      	b.n	8008aa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	089b      	lsrs	r3, r3, #2
 8008a0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00e      	beq.n	8008a34 <osThreadNew+0xa8>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	2b5b      	cmp	r3, #91	; 0x5b
 8008a1c:	d90a      	bls.n	8008a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d006      	beq.n	8008a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <osThreadNew+0xa8>
        mem = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	e010      	b.n	8008a56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10c      	bne.n	8008a56 <osThreadNew+0xca>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d108      	bne.n	8008a56 <osThreadNew+0xca>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <osThreadNew+0xca>
          mem = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	e001      	b.n	8008a56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d110      	bne.n	8008a7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a64:	9202      	str	r2, [sp, #8]
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6a3a      	ldr	r2, [r7, #32]
 8008a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f001 f92e 	bl	8009cd4 <xTaskCreateStatic>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	e013      	b.n	8008aa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d110      	bne.n	8008aa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f107 0310 	add.w	r3, r7, #16
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f001 f979 	bl	8009d8e <xTaskCreate>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d001      	beq.n	8008aa6 <osThreadNew+0x11a>
            hTask = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008aa6:	693b      	ldr	r3, [r7, #16]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3728      	adds	r7, #40	; 0x28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab8:	f3ef 8305 	mrs	r3, IPSR
 8008abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008abe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <osDelay+0x1c>
    stat = osErrorISR;
 8008ac4:	f06f 0305 	mvn.w	r3, #5
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e007      	b.n	8008adc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fa9e 	bl	800a018 <vTaskDelay>
    }
  }

  return (stat);
 8008adc:	68fb      	ldr	r3, [r7, #12]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008af2:	f3ef 8305 	mrs	r3, IPSR
 8008af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008af8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d174      	bne.n	8008be8 <osMutexNew+0x102>
    if (attr != NULL) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <osMutexNew+0x26>
      type = attr->attr_bits;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e001      	b.n	8008b10 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <osMutexNew+0x3a>
      rmtx = 1U;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	617b      	str	r3, [r7, #20]
 8008b1e:	e001      	b.n	8008b24 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d15c      	bne.n	8008be8 <osMutexNew+0x102>
      mem = -1;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d015      	beq.n	8008b66 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <osMutexNew+0x6a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b4f      	cmp	r3, #79	; 0x4f
 8008b48:	d902      	bls.n	8008b50 <osMutexNew+0x6a>
          mem = 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	e00c      	b.n	8008b6a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <osMutexNew+0x84>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <osMutexNew+0x84>
            mem = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	e001      	b.n	8008b6a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d112      	bne.n	8008b96 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	2004      	movs	r0, #4
 8008b7e:	f000 fb18 	bl	80091b2 <xQueueCreateMutexStatic>
 8008b82:	61f8      	str	r0, [r7, #28]
 8008b84:	e016      	b.n	8008bb4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	f000 fb10 	bl	80091b2 <xQueueCreateMutexStatic>
 8008b92:	61f8      	str	r0, [r7, #28]
 8008b94:	e00e      	b.n	8008bb4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008ba2:	2004      	movs	r0, #4
 8008ba4:	f000 faed 	bl	8009182 <xQueueCreateMutex>
 8008ba8:	61f8      	str	r0, [r7, #28]
 8008baa:	e003      	b.n	8008bb4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008bac:	2001      	movs	r0, #1
 8008bae:	f000 fae8 	bl	8009182 <xQueueCreateMutex>
 8008bb2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <osMutexNew+0xee>
        if (attr != NULL) {
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <osMutexNew+0xe2>
          name = attr->name;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e001      	b.n	8008bcc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008bcc:	68f9      	ldr	r1, [r7, #12]
 8008bce:	69f8      	ldr	r0, [r7, #28]
 8008bd0:	f001 f822 	bl	8009c18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <osMutexNew+0x102>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008be8:	69fb      	ldr	r3, [r7, #28]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c10:	f3ef 8305 	mrs	r3, IPSR
 8008c14:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c16:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008c1c:	f06f 0305 	mvn.w	r3, #5
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e02c      	b.n	8008c7e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008c2a:	f06f 0303 	mvn.w	r3, #3
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	e025      	b.n	8008c7e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d011      	beq.n	8008c5c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6938      	ldr	r0, [r7, #16]
 8008c3c:	f000 fb08 	bl	8009250 <xQueueTakeMutexRecursive>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d01b      	beq.n	8008c7e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008c4c:	f06f 0301 	mvn.w	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	e014      	b.n	8008c7e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c54:	f06f 0302 	mvn.w	r3, #2
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e010      	b.n	8008c7e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6938      	ldr	r0, [r7, #16]
 8008c60:	f000 fda6 	bl	80097b0 <xQueueSemaphoreTake>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d009      	beq.n	8008c7e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008c70:	f06f 0301 	mvn.w	r3, #1
 8008c74:	617b      	str	r3, [r7, #20]
 8008c76:	e002      	b.n	8008c7e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c78:	f06f 0302 	mvn.w	r3, #2
 8008c7c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca4:	f3ef 8305 	mrs	r3, IPSR
 8008ca8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008caa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008cb0:	f06f 0305 	mvn.w	r3, #5
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e01f      	b.n	8008cf8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008cbe:	f06f 0303 	mvn.w	r3, #3
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e018      	b.n	8008cf8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008ccc:	6938      	ldr	r0, [r7, #16]
 8008cce:	f000 fa8b 	bl	80091e8 <xQueueGiveMutexRecursive>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d00f      	beq.n	8008cf8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008cd8:	f06f 0302 	mvn.w	r3, #2
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e00b      	b.n	8008cf8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6938      	ldr	r0, [r7, #16]
 8008ce8:	f000 fae8 	bl	80092bc <xQueueGenericSend>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d002      	beq.n	8008cf8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008cf2:	f06f 0302 	mvn.w	r3, #2
 8008cf6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008cf8:	697b      	ldr	r3, [r7, #20]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4a06      	ldr	r2, [pc, #24]	; (8008d34 <vApplicationGetIdleTaskMemory+0x30>)
 8008d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2280      	movs	r2, #128	; 0x80
 8008d20:	601a      	str	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	200007e0 	.word	0x200007e0
 8008d34:	2000083c 	.word	0x2000083c

08008d38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4a07      	ldr	r2, [pc, #28]	; (8008d64 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4a06      	ldr	r2, [pc, #24]	; (8008d68 <vApplicationGetTimerTaskMemory+0x30>)
 8008d4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d56:	601a      	str	r2, [r3, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	20000a3c 	.word	0x20000a3c
 8008d68:	20000a98 	.word	0x20000a98

08008d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f103 0208 	add.w	r2, r3, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f103 0208 	add.w	r2, r3, #8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f103 0208 	add.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d103      	bne.n	8008e2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e00c      	b.n	8008e48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3308      	adds	r3, #8
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <vListInsert+0x2e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d2f6      	bcs.n	8008e36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6892      	ldr	r2, [r2, #8]
 8008e96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6852      	ldr	r2, [r2, #4]
 8008ea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d103      	bne.n	8008eb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008efe:	f002 fb71 	bl	800b5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	441a      	add	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	68f9      	ldr	r1, [r7, #12]
 8008f32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	22ff      	movs	r2, #255	; 0xff
 8008f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	22ff      	movs	r2, #255	; 0xff
 8008f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d114      	bne.n	8008f7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01a      	beq.n	8008f92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3310      	adds	r3, #16
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fb17 	bl	800a594 <xTaskRemoveFromEventList>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d012      	beq.n	8008f92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <xQueueGenericReset+0xcc>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	e009      	b.n	8008f92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3310      	adds	r3, #16
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fef2 	bl	8008d6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff feed 	bl	8008d6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f92:	f002 fb57 	bl	800b644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f96:	2301      	movs	r3, #1
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <xQueueGenericCreateStatic+0x52>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <xQueueGenericCreateStatic+0x56>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericCreateStatic+0x58>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	623b      	str	r3, [r7, #32]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <xQueueGenericCreateStatic+0x7e>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <xQueueGenericCreateStatic+0x82>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueGenericCreateStatic+0x84>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61fb      	str	r3, [r7, #28]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009042:	2350      	movs	r3, #80	; 0x50
 8009044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b50      	cmp	r3, #80	; 0x50
 800904a:	d00a      	beq.n	8009062 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	61bb      	str	r3, [r7, #24]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009062:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00d      	beq.n	800908a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009076:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	4613      	mov	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 f83f 	bl	8009108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	; 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08a      	sub	sp, #40	; 0x28
 8009098:	af02      	add	r7, sp, #8
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xQueueGenericCreate+0x2a>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	613b      	str	r3, [r7, #16]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	fb02 f303 	mul.w	r3, r2, r3
 80090c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3350      	adds	r3, #80	; 0x50
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 fbab 	bl	800b828 <pvPortMalloc>
 80090d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d011      	beq.n	80090fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3350      	adds	r3, #80	; 0x50
 80090e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ec:	79fa      	ldrb	r2, [r7, #7]
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	4613      	mov	r3, r2
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f805 	bl	8009108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090fe:	69bb      	ldr	r3, [r7, #24]
	}
 8009100:	4618      	mov	r0, r3
 8009102:	3720      	adds	r7, #32
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d103      	bne.n	8009124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	e002      	b.n	800912a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009136:	2101      	movs	r1, #1
 8009138:	69b8      	ldr	r0, [r7, #24]
 800913a:	f7ff fecb 	bl	8008ed4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800916e:	2300      	movs	r3, #0
 8009170:	2200      	movs	r2, #0
 8009172:	2100      	movs	r1, #0
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f8a1 	bl	80092bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	4603      	mov	r3, r0
 800918a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800918c:	2301      	movs	r3, #1
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	2300      	movs	r3, #0
 8009192:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	461a      	mov	r2, r3
 8009198:	6939      	ldr	r1, [r7, #16]
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f7ff ff7a 	bl	8009094 <xQueueGenericCreate>
 80091a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff ffd3 	bl	800914e <prvInitialiseMutex>

		return xNewQueue;
 80091a8:	68fb      	ldr	r3, [r7, #12]
	}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af02      	add	r7, sp, #8
 80091b8:	4603      	mov	r3, r0
 80091ba:	6039      	str	r1, [r7, #0]
 80091bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091be:	2301      	movs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	6939      	ldr	r1, [r7, #16]
 80091d0:	6978      	ldr	r0, [r7, #20]
 80091d2:	f7ff fee7 	bl	8008fa4 <xQueueGenericCreateStatic>
 80091d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff ffb8 	bl	800914e <prvInitialiseMutex>

		return xNewQueue;
 80091de:	68fb      	ldr	r3, [r7, #12]
	}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80091e8:	b590      	push	{r4, r7, lr}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60fb      	str	r3, [r7, #12]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	689c      	ldr	r4, [r3, #8]
 8009214:	f001 fb7c 	bl	800a910 <xTaskGetCurrentTaskHandle>
 8009218:	4603      	mov	r3, r0
 800921a:	429c      	cmp	r4, r3
 800921c:	d111      	bne.n	8009242 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	1e5a      	subs	r2, r3, #1
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009230:	2300      	movs	r3, #0
 8009232:	2200      	movs	r2, #0
 8009234:	2100      	movs	r1, #0
 8009236:	6938      	ldr	r0, [r7, #16]
 8009238:	f000 f840 	bl	80092bc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e001      	b.n	8009246 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009242:	2300      	movs	r3, #0
 8009244:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009246:	697b      	ldr	r3, [r7, #20]
	}
 8009248:	4618      	mov	r0, r3
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	689c      	ldr	r4, [r3, #8]
 800927e:	f001 fb47 	bl	800a910 <xTaskGetCurrentTaskHandle>
 8009282:	4603      	mov	r3, r0
 8009284:	429c      	cmp	r4, r3
 8009286:	d107      	bne.n	8009298 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009292:	2301      	movs	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	e00c      	b.n	80092b2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f000 fa88 	bl	80097b0 <xQueueSemaphoreTake>
 80092a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d004      	beq.n	80092b2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80092b2:	697b      	ldr	r3, [r7, #20]
	}
 80092b4:	4618      	mov	r0, r3
 80092b6:	371c      	adds	r7, #28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd90      	pop	{r4, r7, pc}

080092bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	; 0x38
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092ca:	2300      	movs	r3, #0
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericSend+0x32>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <xQueueGenericSend+0x40>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <xQueueGenericSend+0x44>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <xQueueGenericSend+0x46>
 8009300:	2300      	movs	r3, #0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <xQueueGenericSend+0x60>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d103      	bne.n	800932a <xQueueGenericSend+0x6e>
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <xQueueGenericSend+0x72>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <xQueueGenericSend+0x74>
 800932e:	2300      	movs	r3, #0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10a      	bne.n	800934a <xQueueGenericSend+0x8e>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	623b      	str	r3, [r7, #32]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800934a:	f001 faf1 	bl	800a930 <xTaskGetSchedulerState>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <xQueueGenericSend+0x9e>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <xQueueGenericSend+0xa2>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <xQueueGenericSend+0xa4>
 800935e:	2300      	movs	r3, #0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xQueueGenericSend+0xbe>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61fb      	str	r3, [r7, #28]
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800937a:	f002 f933 	bl	800b5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <xQueueGenericSend+0xd4>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d129      	bne.n	80093e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009396:	f000 fb2f 	bl	80099f8 <prvCopyDataToQueue>
 800939a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d010      	beq.n	80093c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	3324      	adds	r3, #36	; 0x24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 f8f3 	bl	800a594 <xTaskRemoveFromEventList>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d013      	beq.n	80093dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093b4:	4b3f      	ldr	r3, [pc, #252]	; (80094b4 <xQueueGenericSend+0x1f8>)
 80093b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	e00a      	b.n	80093dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093cc:	4b39      	ldr	r3, [pc, #228]	; (80094b4 <xQueueGenericSend+0x1f8>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093dc:	f002 f932 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e063      	b.n	80094ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093ea:	f002 f92b 	bl	800b644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	e05c      	b.n	80094ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d106      	bne.n	8009406 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093f8:	f107 0314 	add.w	r3, r7, #20
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 f92d 	bl	800a65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009406:	f002 f91d 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800940a:	f000 fe9f 	bl	800a14c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800940e:	f002 f8e9 	bl	800b5e4 <vPortEnterCritical>
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009418:	b25b      	sxtb	r3, r3
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941e:	d103      	bne.n	8009428 <xQueueGenericSend+0x16c>
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800942e:	b25b      	sxtb	r3, r3
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009434:	d103      	bne.n	800943e <xQueueGenericSend+0x182>
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800943e:	f002 f901 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009442:	1d3a      	adds	r2, r7, #4
 8009444:	f107 0314 	add.w	r3, r7, #20
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f001 f91c 	bl	800a688 <xTaskCheckForTimeOut>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d124      	bne.n	80094a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009458:	f000 fbc6 	bl	8009be8 <prvIsQueueFull>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	3310      	adds	r3, #16
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f001 f842 	bl	800a4f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009472:	f000 fb51 	bl	8009b18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009476:	f000 fe77 	bl	800a168 <xTaskResumeAll>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f af7c 	bne.w	800937a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <xQueueGenericSend+0x1f8>)
 8009484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	e772      	b.n	800937a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009496:	f000 fb3f 	bl	8009b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800949a:	f000 fe65 	bl	800a168 <xTaskResumeAll>
 800949e:	e76c      	b.n	800937a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a2:	f000 fb39 	bl	8009b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094a6:	f000 fe5f 	bl	800a168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3738      	adds	r7, #56	; 0x38
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b090      	sub	sp, #64	; 0x40
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d103      	bne.n	80094f4 <xQueueGenericSendFromISR+0x3c>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <xQueueGenericSendFromISR+0x40>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <xQueueGenericSendFromISR+0x42>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d103      	bne.n	8009522 <xQueueGenericSendFromISR+0x6a>
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <xQueueGenericSendFromISR+0x6e>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <xQueueGenericSendFromISR+0x70>
 8009526:	2300      	movs	r3, #0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009542:	f002 f931 	bl	800b7a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009546:	f3ef 8211 	mrs	r2, BASEPRI
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	61fa      	str	r2, [r7, #28]
 800955c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800955e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	429a      	cmp	r2, r3
 800956c:	d302      	bcc.n	8009574 <xQueueGenericSendFromISR+0xbc>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d12f      	bne.n	80095d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800958a:	f000 fa35 	bl	80099f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800958e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d112      	bne.n	80095be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d016      	beq.n	80095ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	3324      	adds	r3, #36	; 0x24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fff5 	bl	800a594 <xTaskRemoveFromEventList>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e007      	b.n	80095ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095c2:	3301      	adds	r3, #1
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	b25a      	sxtb	r2, r3
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80095ce:	2301      	movs	r3, #1
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80095d2:	e001      	b.n	80095d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3740      	adds	r7, #64	; 0x40
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08c      	sub	sp, #48	; 0x30
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095fc:	2300      	movs	r3, #0
 80095fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <xQueueReceive+0x30>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	623b      	str	r3, [r7, #32]
}
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <xQueueReceive+0x3e>
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <xQueueReceive+0x42>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <xQueueReceive+0x44>
 8009632:	2300      	movs	r3, #0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <xQueueReceive+0x5e>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	61fb      	str	r3, [r7, #28]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800964e:	f001 f96f 	bl	800a930 <xTaskGetSchedulerState>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <xQueueReceive+0x6e>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <xQueueReceive+0x72>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <xQueueReceive+0x74>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xQueueReceive+0x8e>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	61bb      	str	r3, [r7, #24]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800967e:	f001 ffb1 	bl	800b5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01f      	beq.n	80096ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f000 fa1b 	bl	8009acc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	1e5a      	subs	r2, r3, #1
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00f      	beq.n	80096c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	3310      	adds	r3, #16
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 ff72 	bl	800a594 <xTaskRemoveFromEventList>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096b6:	4b3d      	ldr	r3, [pc, #244]	; (80097ac <xQueueReceive+0x1bc>)
 80096b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096c6:	f001 ffbd 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e069      	b.n	80097a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d103      	bne.n	80096dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096d4:	f001 ffb6 	bl	800b644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096d8:	2300      	movs	r3, #0
 80096da:	e062      	b.n	80097a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096e2:	f107 0310 	add.w	r3, r7, #16
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 ffb8 	bl	800a65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096f0:	f001 ffa8 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096f4:	f000 fd2a 	bl	800a14c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096f8:	f001 ff74 	bl	800b5e4 <vPortEnterCritical>
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009702:	b25b      	sxtb	r3, r3
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d103      	bne.n	8009712 <xQueueReceive+0x122>
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009718:	b25b      	sxtb	r3, r3
 800971a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971e:	d103      	bne.n	8009728 <xQueueReceive+0x138>
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009728:	f001 ff8c 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800972c:	1d3a      	adds	r2, r7, #4
 800972e:	f107 0310 	add.w	r3, r7, #16
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f000 ffa7 	bl	800a688 <xTaskCheckForTimeOut>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d123      	bne.n	8009788 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009742:	f000 fa3b 	bl	8009bbc <prvIsQueueEmpty>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d017      	beq.n	800977c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	3324      	adds	r3, #36	; 0x24
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fecd 	bl	800a4f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800975a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975c:	f000 f9dc 	bl	8009b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009760:	f000 fd02 	bl	800a168 <xTaskResumeAll>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d189      	bne.n	800967e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <xQueueReceive+0x1bc>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	e780      	b.n	800967e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800977c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977e:	f000 f9cb 	bl	8009b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009782:	f000 fcf1 	bl	800a168 <xTaskResumeAll>
 8009786:	e77a      	b.n	800967e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800978a:	f000 f9c5 	bl	8009b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800978e:	f000 fceb 	bl	800a168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009794:	f000 fa12 	bl	8009bbc <prvIsQueueEmpty>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	f43f af6f 	beq.w	800967e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3730      	adds	r7, #48	; 0x30
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08e      	sub	sp, #56	; 0x38
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	623b      	str	r3, [r7, #32]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	61fb      	str	r3, [r7, #28]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009800:	f001 f896 	bl	800a930 <xTaskGetSchedulerState>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <xQueueSemaphoreTake+0x60>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <xQueueSemaphoreTake+0x64>
 8009810:	2301      	movs	r3, #1
 8009812:	e000      	b.n	8009816 <xQueueSemaphoreTake+0x66>
 8009814:	2300      	movs	r3, #0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	61bb      	str	r3, [r7, #24]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009830:	f001 fed8 	bl	800b5e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d024      	beq.n	800988a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	1e5a      	subs	r2, r3, #1
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009850:	f001 f9e4 	bl	800ac1c <pvTaskIncrementMutexHeldCount>
 8009854:	4602      	mov	r2, r0
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00f      	beq.n	8009882 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009864:	3310      	adds	r3, #16
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fe94 	bl	800a594 <xTaskRemoveFromEventList>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d007      	beq.n	8009882 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009872:	4b54      	ldr	r3, [pc, #336]	; (80099c4 <xQueueSemaphoreTake+0x214>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009882:	f001 fedf 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 8009886:	2301      	movs	r3, #1
 8009888:	e097      	b.n	80099ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d111      	bne.n	80098b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	617b      	str	r3, [r7, #20]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80098ac:	f001 feca 	bl	800b644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e082      	b.n	80099ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ba:	f107 030c 	add.w	r3, r7, #12
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fecc 	bl	800a65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098c8:	f001 febc 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098cc:	f000 fc3e 	bl	800a14c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098d0:	f001 fe88 	bl	800b5e4 <vPortEnterCritical>
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d103      	bne.n	80098ea <xQueueSemaphoreTake+0x13a>
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098f0:	b25b      	sxtb	r3, r3
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d103      	bne.n	8009900 <xQueueSemaphoreTake+0x150>
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009900:	f001 fea0 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009904:	463a      	mov	r2, r7
 8009906:	f107 030c 	add.w	r3, r7, #12
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f000 febb 	bl	800a688 <xTaskCheckForTimeOut>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d132      	bne.n	800997e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800991a:	f000 f94f 	bl	8009bbc <prvIsQueueEmpty>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d026      	beq.n	8009972 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800992c:	f001 fe5a 	bl	800b5e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4618      	mov	r0, r3
 8009936:	f001 f819 	bl	800a96c <xTaskPriorityInherit>
 800993a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800993c:	f001 fe82 	bl	800b644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	3324      	adds	r3, #36	; 0x24
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fdd3 	bl	800a4f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800994e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009950:	f000 f8e2 	bl	8009b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009954:	f000 fc08 	bl	800a168 <xTaskResumeAll>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	f47f af68 	bne.w	8009830 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009960:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <xQueueSemaphoreTake+0x214>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	e75e      	b.n	8009830 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009974:	f000 f8d0 	bl	8009b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009978:	f000 fbf6 	bl	800a168 <xTaskResumeAll>
 800997c:	e758      	b.n	8009830 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800997e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009980:	f000 f8ca 	bl	8009b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009984:	f000 fbf0 	bl	800a168 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998a:	f000 f917 	bl	8009bbc <prvIsQueueEmpty>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	f43f af4d 	beq.w	8009830 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00d      	beq.n	80099b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800999c:	f001 fe22 	bl	800b5e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80099a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099a2:	f000 f811 	bl	80099c8 <prvGetDisinheritPriorityAfterTimeout>
 80099a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 f8b2 	bl	800ab18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80099b4:	f001 fe46 	bl	800b644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3738      	adds	r7, #56	; 0x38
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d006      	beq.n	80099e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e001      	b.n	80099ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099ea:	68fb      	ldr	r3, [r7, #12]
	}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10d      	bne.n	8009a32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d14d      	bne.n	8009aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 f80a 	bl	800aa3c <xTaskPriorityDisinherit>
 8009a28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	e043      	b.n	8009aba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d119      	bne.n	8009a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6858      	ldr	r0, [r3, #4]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a40:	461a      	mov	r2, r3
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	f002 fdf2 	bl	800c62c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	441a      	add	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d32b      	bcc.n	8009aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	e026      	b.n	8009aba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68d8      	ldr	r0, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	461a      	mov	r2, r3
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	f002 fdd8 	bl	800c62c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a84:	425b      	negs	r3, r3
 8009a86:	441a      	add	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d207      	bcs.n	8009aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	425b      	negs	r3, r3
 8009aa2:	441a      	add	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d105      	bne.n	8009aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d018      	beq.n	8009b10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	441a      	add	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d303      	bcc.n	8009b00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68d9      	ldr	r1, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6838      	ldr	r0, [r7, #0]
 8009b0c:	f002 fd8e 	bl	800c62c <memcpy>
	}
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b20:	f001 fd60 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b2c:	e011      	b.n	8009b52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d012      	beq.n	8009b5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3324      	adds	r3, #36	; 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fd2a 	bl	800a594 <xTaskRemoveFromEventList>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b46:	f000 fe01 	bl	800a74c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dce9      	bgt.n	8009b2e <prvUnlockQueue+0x16>
 8009b5a:	e000      	b.n	8009b5e <prvUnlockQueue+0x46>
					break;
 8009b5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	22ff      	movs	r2, #255	; 0xff
 8009b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b66:	f001 fd6d 	bl	800b644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b6a:	f001 fd3b 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b76:	e011      	b.n	8009b9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3310      	adds	r3, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fd05 	bl	800a594 <xTaskRemoveFromEventList>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b90:	f000 fddc 	bl	800a74c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dce9      	bgt.n	8009b78 <prvUnlockQueue+0x60>
 8009ba4:	e000      	b.n	8009ba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	22ff      	movs	r2, #255	; 0xff
 8009bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009bb0:	f001 fd48 	bl	800b644 <vPortExitCritical>
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc4:	f001 fd0e 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e001      	b.n	8009bda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bda:	f001 fd33 	bl	800b644 <vPortExitCritical>

	return xReturn;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bf0:	f001 fcf8 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d102      	bne.n	8009c06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c00:	2301      	movs	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e001      	b.n	8009c0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f001 fd1b 	bl	800b644 <vPortExitCritical>

	return xReturn;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e014      	b.n	8009c52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c28:	4a0f      	ldr	r2, [pc, #60]	; (8009c68 <vQueueAddToRegistry+0x50>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c34:	490c      	ldr	r1, [pc, #48]	; (8009c68 <vQueueAddToRegistry+0x50>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c3e:	4a0a      	ldr	r2, [pc, #40]	; (8009c68 <vQueueAddToRegistry+0x50>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c4a:	e006      	b.n	8009c5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b07      	cmp	r3, #7
 8009c56:	d9e7      	bls.n	8009c28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	20000e98 	.word	0x20000e98

08009c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c7c:	f001 fcb2 	bl	800b5e4 <vPortEnterCritical>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <vQueueWaitForMessageRestricted+0x2a>
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d103      	bne.n	8009cac <vQueueWaitForMessageRestricted+0x40>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cac:	f001 fcca 	bl	800b644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fc3b 	bl	800a53c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cc6:	6978      	ldr	r0, [r7, #20]
 8009cc8:	f7ff ff26 	bl	8009b18 <prvUnlockQueue>
	}
 8009ccc:	bf00      	nop
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08e      	sub	sp, #56	; 0x38
 8009cd8:	af04      	add	r7, sp, #16
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <xTaskCreateStatic+0x46>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	61fb      	str	r3, [r7, #28]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d1a:	235c      	movs	r3, #92	; 0x5c
 8009d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b5c      	cmp	r3, #92	; 0x5c
 8009d22:	d00a      	beq.n	8009d3a <xTaskCreateStatic+0x66>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	61bb      	str	r3, [r7, #24]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01e      	beq.n	8009d80 <xTaskCreateStatic+0xac>
 8009d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01b      	beq.n	8009d80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	f107 0314 	add.w	r3, r7, #20
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f850 	bl	8009e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d7a:	f000 f8dd 	bl	8009f38 <prvAddNewTaskToReadyList>
 8009d7e:	e001      	b.n	8009d84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d84:	697b      	ldr	r3, [r7, #20]
	}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3728      	adds	r7, #40	; 0x28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08c      	sub	sp, #48	; 0x30
 8009d92:	af04      	add	r7, sp, #16
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fd40 	bl	800b828 <pvPortMalloc>
 8009da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00e      	beq.n	8009dce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009db0:	205c      	movs	r0, #92	; 0x5c
 8009db2:	f001 fd39 	bl	800b828 <pvPortMalloc>
 8009db6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8009dc4:	e005      	b.n	8009dd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dc6:	6978      	ldr	r0, [r7, #20]
 8009dc8:	f001 fdfa 	bl	800b9c0 <vPortFree>
 8009dcc:	e001      	b.n	8009dd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d017      	beq.n	8009e08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009de0:	88fa      	ldrh	r2, [r7, #6]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f80e 	bl	8009e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dfc:	69f8      	ldr	r0, [r7, #28]
 8009dfe:	f000 f89b 	bl	8009f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e02:	2301      	movs	r3, #1
 8009e04:	61bb      	str	r3, [r7, #24]
 8009e06:	e002      	b.n	8009e0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	21a5      	movs	r1, #165	; 0xa5
 8009e32:	f002 fc09 	bl	800c648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e40:	3b01      	subs	r3, #1
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	617b      	str	r3, [r7, #20]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01f      	beq.n	8009eb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e012      	b.n	8009ea2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	4413      	add	r3, r2
 8009e82:	7819      	ldrb	r1, [r3, #0]
 8009e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	3334      	adds	r3, #52	; 0x34
 8009e8c:	460a      	mov	r2, r1
 8009e8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d006      	beq.n	8009eaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b0f      	cmp	r3, #15
 8009ea6:	d9e9      	bls.n	8009e7c <prvInitialiseNewTask+0x64>
 8009ea8:	e000      	b.n	8009eac <prvInitialiseNewTask+0x94>
			{
				break;
 8009eaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eb4:	e003      	b.n	8009ebe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	2b37      	cmp	r3, #55	; 0x37
 8009ec2:	d901      	bls.n	8009ec8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ec4:	2337      	movs	r3, #55	; 0x37
 8009ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ed2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	3304      	adds	r3, #4
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe ff64 	bl	8008dac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	3318      	adds	r3, #24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe ff5f 	bl	8008dac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	2200      	movs	r2, #0
 8009f08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	68f9      	ldr	r1, [r7, #12]
 8009f16:	69b8      	ldr	r0, [r7, #24]
 8009f18:	f001 fa36 	bl	800b388 <pxPortInitialiseStack>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f2e:	bf00      	nop
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f40:	f001 fb50 	bl	800b5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f44:	4b2d      	ldr	r3, [pc, #180]	; (8009ffc <prvAddNewTaskToReadyList+0xc4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	4a2c      	ldr	r2, [pc, #176]	; (8009ffc <prvAddNewTaskToReadyList+0xc4>)
 8009f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f4e:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <prvAddNewTaskToReadyList+0xc8>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f56:	4a2a      	ldr	r2, [pc, #168]	; (800a000 <prvAddNewTaskToReadyList+0xc8>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f5c:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <prvAddNewTaskToReadyList+0xc4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d110      	bne.n	8009f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f64:	f000 fc16 	bl	800a794 <prvInitialiseTaskLists>
 8009f68:	e00d      	b.n	8009f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f6a:	4b26      	ldr	r3, [pc, #152]	; (800a004 <prvAddNewTaskToReadyList+0xcc>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f72:	4b23      	ldr	r3, [pc, #140]	; (800a000 <prvAddNewTaskToReadyList+0xc8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d802      	bhi.n	8009f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f80:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <prvAddNewTaskToReadyList+0xc8>)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f86:	4b20      	ldr	r3, [pc, #128]	; (800a008 <prvAddNewTaskToReadyList+0xd0>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <prvAddNewTaskToReadyList+0xd0>)
 8009f8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f90:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <prvAddNewTaskToReadyList+0xd0>)
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <prvAddNewTaskToReadyList+0xd4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d903      	bls.n	8009fac <prvAddNewTaskToReadyList+0x74>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	4a18      	ldr	r2, [pc, #96]	; (800a00c <prvAddNewTaskToReadyList+0xd4>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4a15      	ldr	r2, [pc, #84]	; (800a010 <prvAddNewTaskToReadyList+0xd8>)
 8009fba:	441a      	add	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe feff 	bl	8008dc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fc8:	f001 fb3c 	bl	800b644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fcc:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <prvAddNewTaskToReadyList+0xcc>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00e      	beq.n	8009ff2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <prvAddNewTaskToReadyList+0xc8>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d207      	bcs.n	8009ff2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <prvAddNewTaskToReadyList+0xdc>)
 8009fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200013ac 	.word	0x200013ac
 800a000:	20000ed8 	.word	0x20000ed8
 800a004:	200013b8 	.word	0x200013b8
 800a008:	200013c8 	.word	0x200013c8
 800a00c:	200013b4 	.word	0x200013b4
 800a010:	20000edc 	.word	0x20000edc
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d017      	beq.n	800a05a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <vTaskDelay+0x60>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <vTaskDelay+0x30>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	60bb      	str	r3, [r7, #8]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a048:	f000 f880 	bl	800a14c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a04c:	2100      	movs	r1, #0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fdf8 	bl	800ac44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a054:	f000 f888 	bl	800a168 <xTaskResumeAll>
 800a058:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d107      	bne.n	800a070 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a060:	4b06      	ldr	r3, [pc, #24]	; (800a07c <vTaskDelay+0x64>)
 800a062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	200013d4 	.word	0x200013d4
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08a      	sub	sp, #40	; 0x28
 800a084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a08e:	463a      	mov	r2, r7
 800a090:	1d39      	adds	r1, r7, #4
 800a092:	f107 0308 	add.w	r3, r7, #8
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fe34 	bl	8008d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	9202      	str	r2, [sp, #8]
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	4921      	ldr	r1, [pc, #132]	; (800a134 <vTaskStartScheduler+0xb4>)
 800a0b0:	4821      	ldr	r0, [pc, #132]	; (800a138 <vTaskStartScheduler+0xb8>)
 800a0b2:	f7ff fe0f 	bl	8009cd4 <xTaskCreateStatic>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4a20      	ldr	r2, [pc, #128]	; (800a13c <vTaskStartScheduler+0xbc>)
 800a0ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0bc:	4b1f      	ldr	r3, [pc, #124]	; (800a13c <vTaskStartScheduler+0xbc>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
 800a0c8:	e001      	b.n	800a0ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d102      	bne.n	800a0da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0d4:	f000 fe0a 	bl	800acec <xTimerCreateTimerTask>
 800a0d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d116      	bne.n	800a10e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	613b      	str	r3, [r7, #16]
}
 800a0f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0f4:	4b12      	ldr	r3, [pc, #72]	; (800a140 <vTaskStartScheduler+0xc0>)
 800a0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0fc:	4b11      	ldr	r3, [pc, #68]	; (800a144 <vTaskStartScheduler+0xc4>)
 800a0fe:	2201      	movs	r2, #1
 800a100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <vTaskStartScheduler+0xc8>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a108:	f001 f9ca 	bl	800b4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a10c:	e00e      	b.n	800a12c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a114:	d10a      	bne.n	800a12c <vTaskStartScheduler+0xac>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <vTaskStartScheduler+0xaa>
}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	0800c728 	.word	0x0800c728
 800a138:	0800a765 	.word	0x0800a765
 800a13c:	200013d0 	.word	0x200013d0
 800a140:	200013cc 	.word	0x200013cc
 800a144:	200013b8 	.word	0x200013b8
 800a148:	200013b0 	.word	0x200013b0

0800a14c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a150:	4b04      	ldr	r3, [pc, #16]	; (800a164 <vTaskSuspendAll+0x18>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3301      	adds	r3, #1
 800a156:	4a03      	ldr	r2, [pc, #12]	; (800a164 <vTaskSuspendAll+0x18>)
 800a158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a15a:	bf00      	nop
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	200013d4 	.word	0x200013d4

0800a168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a176:	4b42      	ldr	r3, [pc, #264]	; (800a280 <xTaskResumeAll+0x118>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <xTaskResumeAll+0x2c>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	603b      	str	r3, [r7, #0]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a194:	f001 fa26 	bl	800b5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a198:	4b39      	ldr	r3, [pc, #228]	; (800a280 <xTaskResumeAll+0x118>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4a38      	ldr	r2, [pc, #224]	; (800a280 <xTaskResumeAll+0x118>)
 800a1a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1a2:	4b37      	ldr	r3, [pc, #220]	; (800a280 <xTaskResumeAll+0x118>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d162      	bne.n	800a270 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1aa:	4b36      	ldr	r3, [pc, #216]	; (800a284 <xTaskResumeAll+0x11c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d05e      	beq.n	800a270 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1b2:	e02f      	b.n	800a214 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b4:	4b34      	ldr	r3, [pc, #208]	; (800a288 <xTaskResumeAll+0x120>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3318      	adds	r3, #24
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe fe5d 	bl	8008e80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fe58 	bl	8008e80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b2d      	ldr	r3, [pc, #180]	; (800a28c <xTaskResumeAll+0x124>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d903      	bls.n	800a1e4 <xTaskResumeAll+0x7c>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a2a      	ldr	r2, [pc, #168]	; (800a28c <xTaskResumeAll+0x124>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a27      	ldr	r2, [pc, #156]	; (800a290 <xTaskResumeAll+0x128>)
 800a1f2:	441a      	add	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fe fde3 	bl	8008dc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	4b23      	ldr	r3, [pc, #140]	; (800a294 <xTaskResumeAll+0x12c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d302      	bcc.n	800a214 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a20e:	4b22      	ldr	r3, [pc, #136]	; (800a298 <xTaskResumeAll+0x130>)
 800a210:	2201      	movs	r2, #1
 800a212:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a214:	4b1c      	ldr	r3, [pc, #112]	; (800a288 <xTaskResumeAll+0x120>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1cb      	bne.n	800a1b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a222:	f000 fb55 	bl	800a8d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a226:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <xTaskResumeAll+0x134>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d010      	beq.n	800a254 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a232:	f000 f847 	bl	800a2c4 <xTaskIncrementTick>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a23c:	4b16      	ldr	r3, [pc, #88]	; (800a298 <xTaskResumeAll+0x130>)
 800a23e:	2201      	movs	r2, #1
 800a240:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3b01      	subs	r3, #1
 800a246:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1f1      	bne.n	800a232 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <xTaskResumeAll+0x134>)
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a254:	4b10      	ldr	r3, [pc, #64]	; (800a298 <xTaskResumeAll+0x130>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a260:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <xTaskResumeAll+0x138>)
 800a262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a270:	f001 f9e8 	bl	800b644 <vPortExitCritical>

	return xAlreadyYielded;
 800a274:	68bb      	ldr	r3, [r7, #8]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	200013d4 	.word	0x200013d4
 800a284:	200013ac 	.word	0x200013ac
 800a288:	2000136c 	.word	0x2000136c
 800a28c:	200013b4 	.word	0x200013b4
 800a290:	20000edc 	.word	0x20000edc
 800a294:	20000ed8 	.word	0x20000ed8
 800a298:	200013c0 	.word	0x200013c0
 800a29c:	200013bc 	.word	0x200013bc
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <xTaskGetTickCount+0x1c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2b0:	687b      	ldr	r3, [r7, #4]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	200013b0 	.word	0x200013b0

0800a2c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ce:	4b4f      	ldr	r3, [pc, #316]	; (800a40c <xTaskIncrementTick+0x148>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f040 808f 	bne.w	800a3f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2d8:	4b4d      	ldr	r3, [pc, #308]	; (800a410 <xTaskIncrementTick+0x14c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2e0:	4a4b      	ldr	r2, [pc, #300]	; (800a410 <xTaskIncrementTick+0x14c>)
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d120      	bne.n	800a32e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2ec:	4b49      	ldr	r3, [pc, #292]	; (800a414 <xTaskIncrementTick+0x150>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <xTaskIncrementTick+0x48>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	603b      	str	r3, [r7, #0]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xTaskIncrementTick+0x46>
 800a30c:	4b41      	ldr	r3, [pc, #260]	; (800a414 <xTaskIncrementTick+0x150>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	4b41      	ldr	r3, [pc, #260]	; (800a418 <xTaskIncrementTick+0x154>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a3f      	ldr	r2, [pc, #252]	; (800a414 <xTaskIncrementTick+0x150>)
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	4a3f      	ldr	r2, [pc, #252]	; (800a418 <xTaskIncrementTick+0x154>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	4b3e      	ldr	r3, [pc, #248]	; (800a41c <xTaskIncrementTick+0x158>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <xTaskIncrementTick+0x158>)
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	f000 fad1 	bl	800a8d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a32e:	4b3c      	ldr	r3, [pc, #240]	; (800a420 <xTaskIncrementTick+0x15c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d349      	bcc.n	800a3cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a338:	4b36      	ldr	r3, [pc, #216]	; (800a414 <xTaskIncrementTick+0x150>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d104      	bne.n	800a34c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a342:	4b37      	ldr	r3, [pc, #220]	; (800a420 <xTaskIncrementTick+0x15c>)
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	601a      	str	r2, [r3, #0]
					break;
 800a34a:	e03f      	b.n	800a3cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34c:	4b31      	ldr	r3, [pc, #196]	; (800a414 <xTaskIncrementTick+0x150>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d203      	bcs.n	800a36c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a364:	4a2e      	ldr	r2, [pc, #184]	; (800a420 <xTaskIncrementTick+0x15c>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a36a:	e02f      	b.n	800a3cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3304      	adds	r3, #4
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fd85 	bl	8008e80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3318      	adds	r3, #24
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fd7c 	bl	8008e80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4b25      	ldr	r3, [pc, #148]	; (800a424 <xTaskIncrementTick+0x160>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d903      	bls.n	800a39c <xTaskIncrementTick+0xd8>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	4a22      	ldr	r2, [pc, #136]	; (800a424 <xTaskIncrementTick+0x160>)
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <xTaskIncrementTick+0x164>)
 800a3aa:	441a      	add	r2, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	f7fe fd07 	bl	8008dc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3bc:	4b1b      	ldr	r3, [pc, #108]	; (800a42c <xTaskIncrementTick+0x168>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d3b8      	bcc.n	800a338 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ca:	e7b5      	b.n	800a338 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3cc:	4b17      	ldr	r3, [pc, #92]	; (800a42c <xTaskIncrementTick+0x168>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	4915      	ldr	r1, [pc, #84]	; (800a428 <xTaskIncrementTick+0x164>)
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d901      	bls.n	800a3e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3e8:	4b11      	ldr	r3, [pc, #68]	; (800a430 <xTaskIncrementTick+0x16c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e004      	b.n	800a400 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <xTaskIncrementTick+0x170>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	4a0d      	ldr	r2, [pc, #52]	; (800a434 <xTaskIncrementTick+0x170>)
 800a3fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a400:	697b      	ldr	r3, [r7, #20]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200013d4 	.word	0x200013d4
 800a410:	200013b0 	.word	0x200013b0
 800a414:	20001364 	.word	0x20001364
 800a418:	20001368 	.word	0x20001368
 800a41c:	200013c4 	.word	0x200013c4
 800a420:	200013cc 	.word	0x200013cc
 800a424:	200013b4 	.word	0x200013b4
 800a428:	20000edc 	.word	0x20000edc
 800a42c:	20000ed8 	.word	0x20000ed8
 800a430:	200013c0 	.word	0x200013c0
 800a434:	200013bc 	.word	0x200013bc

0800a438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a43e:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <vTaskSwitchContext+0xa8>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a446:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <vTaskSwitchContext+0xac>)
 800a448:	2201      	movs	r2, #1
 800a44a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a44c:	e041      	b.n	800a4d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a44e:	4b25      	ldr	r3, [pc, #148]	; (800a4e4 <vTaskSwitchContext+0xac>)
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a454:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <vTaskSwitchContext+0xb0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	e010      	b.n	800a47e <vTaskSwitchContext+0x46>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <vTaskSwitchContext+0x40>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	607b      	str	r3, [r7, #4]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <vTaskSwitchContext+0x3e>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	491b      	ldr	r1, [pc, #108]	; (800a4ec <vTaskSwitchContext+0xb4>)
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	440b      	add	r3, r1
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0e4      	beq.n	800a45c <vTaskSwitchContext+0x24>
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <vTaskSwitchContext+0xb4>)
 800a49e:	4413      	add	r3, r2
 800a4a0:	60bb      	str	r3, [r7, #8]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	605a      	str	r2, [r3, #4]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d104      	bne.n	800a4c2 <vTaskSwitchContext+0x8a>
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	605a      	str	r2, [r3, #4]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <vTaskSwitchContext+0xb8>)
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	4a06      	ldr	r2, [pc, #24]	; (800a4e8 <vTaskSwitchContext+0xb0>)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6013      	str	r3, [r2, #0]
}
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	200013d4 	.word	0x200013d4
 800a4e4:	200013c0 	.word	0x200013c0
 800a4e8:	200013b4 	.word	0x200013b4
 800a4ec:	20000edc 	.word	0x20000edc
 800a4f0:	20000ed8 	.word	0x20000ed8

0800a4f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60fb      	str	r3, [r7, #12]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <vTaskPlaceOnEventList+0x44>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3318      	adds	r3, #24
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fe fc73 	bl	8008e0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a528:	2101      	movs	r1, #1
 800a52a:	6838      	ldr	r0, [r7, #0]
 800a52c:	f000 fb8a 	bl	800ac44 <prvAddCurrentTaskToDelayedList>
}
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20000ed8 	.word	0x20000ed8

0800a53c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	617b      	str	r3, [r7, #20]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <vTaskPlaceOnEventListRestricted+0x54>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3318      	adds	r3, #24
 800a56a:	4619      	mov	r1, r3
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7fe fc2a 	bl	8008dc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a578:	f04f 33ff 	mov.w	r3, #4294967295
 800a57c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	68b8      	ldr	r0, [r7, #8]
 800a582:	f000 fb5f 	bl	800ac44 <prvAddCurrentTaskToDelayedList>
	}
 800a586:	bf00      	nop
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000ed8 	.word	0x20000ed8

0800a594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10a      	bne.n	800a5c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	60fb      	str	r3, [r7, #12]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fc5b 	bl	8008e80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ca:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <xTaskRemoveFromEventList+0xb0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d11d      	bne.n	800a60e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fc52 	bl	8008e80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4b19      	ldr	r3, [pc, #100]	; (800a648 <xTaskRemoveFromEventList+0xb4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d903      	bls.n	800a5f0 <xTaskRemoveFromEventList+0x5c>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	4a16      	ldr	r2, [pc, #88]	; (800a648 <xTaskRemoveFromEventList+0xb4>)
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <xTaskRemoveFromEventList+0xb8>)
 800a5fe:	441a      	add	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7fe fbdd 	bl	8008dc6 <vListInsertEnd>
 800a60c:	e005      	b.n	800a61a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3318      	adds	r3, #24
 800a612:	4619      	mov	r1, r3
 800a614:	480e      	ldr	r0, [pc, #56]	; (800a650 <xTaskRemoveFromEventList+0xbc>)
 800a616:	f7fe fbd6 	bl	8008dc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61e:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <xTaskRemoveFromEventList+0xc0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	429a      	cmp	r2, r3
 800a626:	d905      	bls.n	800a634 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a628:	2301      	movs	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a62c:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <xTaskRemoveFromEventList+0xc4>)
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e001      	b.n	800a638 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a638:	697b      	ldr	r3, [r7, #20]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	200013d4 	.word	0x200013d4
 800a648:	200013b4 	.word	0x200013b4
 800a64c:	20000edc 	.word	0x20000edc
 800a650:	2000136c 	.word	0x2000136c
 800a654:	20000ed8 	.word	0x20000ed8
 800a658:	200013c0 	.word	0x200013c0

0800a65c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a664:	4b06      	ldr	r3, [pc, #24]	; (800a680 <vTaskInternalSetTimeOutState+0x24>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <vTaskInternalSetTimeOutState+0x28>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	605a      	str	r2, [r3, #4]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	200013c4 	.word	0x200013c4
 800a684:	200013b0 	.word	0x200013b0

0800a688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	613b      	str	r3, [r7, #16]
}
 800a6aa:	bf00      	nop
 800a6ac:	e7fe      	b.n	800a6ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6ca:	f000 ff8b 	bl	800b5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <xTaskCheckForTimeOut+0xbc>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d102      	bne.n	800a6ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e023      	b.n	800a736 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xTaskCheckForTimeOut+0xc0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d007      	beq.n	800a70a <xTaskCheckForTimeOut+0x82>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	429a      	cmp	r2, r3
 800a702:	d302      	bcc.n	800a70a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	e015      	b.n	800a736 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	429a      	cmp	r2, r3
 800a712:	d20b      	bcs.n	800a72c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	1ad2      	subs	r2, r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff ff9b 	bl	800a65c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	e004      	b.n	800a736 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a736:	f000 ff85 	bl	800b644 <vPortExitCritical>

	return xReturn;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200013b0 	.word	0x200013b0
 800a748:	200013c4 	.word	0x200013c4

0800a74c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <vTaskMissedYield+0x14>)
 800a752:	2201      	movs	r2, #1
 800a754:	601a      	str	r2, [r3, #0]
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	200013c0 	.word	0x200013c0

0800a764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a76c:	f000 f852 	bl	800a814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <prvIdleTask+0x28>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d9f9      	bls.n	800a76c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <prvIdleTask+0x2c>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a788:	e7f0      	b.n	800a76c <prvIdleTask+0x8>
 800a78a:	bf00      	nop
 800a78c:	20000edc 	.word	0x20000edc
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	e00c      	b.n	800a7ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4a12      	ldr	r2, [pc, #72]	; (800a7f4 <prvInitialiseTaskLists+0x60>)
 800a7ac:	4413      	add	r3, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fadc 	bl	8008d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b37      	cmp	r3, #55	; 0x37
 800a7be:	d9ef      	bls.n	800a7a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7c0:	480d      	ldr	r0, [pc, #52]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7c2:	f7fe fad3 	bl	8008d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7c6:	480d      	ldr	r0, [pc, #52]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7c8:	f7fe fad0 	bl	8008d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7cc:	480c      	ldr	r0, [pc, #48]	; (800a800 <prvInitialiseTaskLists+0x6c>)
 800a7ce:	f7fe facd 	bl	8008d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7d2:	480c      	ldr	r0, [pc, #48]	; (800a804 <prvInitialiseTaskLists+0x70>)
 800a7d4:	f7fe faca 	bl	8008d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7d8:	480b      	ldr	r0, [pc, #44]	; (800a808 <prvInitialiseTaskLists+0x74>)
 800a7da:	f7fe fac7 	bl	8008d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <prvInitialiseTaskLists+0x78>)
 800a7e0:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <prvInitialiseTaskLists+0x7c>)
 800a7e6:	4a05      	ldr	r2, [pc, #20]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7e8:	601a      	str	r2, [r3, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000edc 	.word	0x20000edc
 800a7f8:	2000133c 	.word	0x2000133c
 800a7fc:	20001350 	.word	0x20001350
 800a800:	2000136c 	.word	0x2000136c
 800a804:	20001380 	.word	0x20001380
 800a808:	20001398 	.word	0x20001398
 800a80c:	20001364 	.word	0x20001364
 800a810:	20001368 	.word	0x20001368

0800a814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a81a:	e019      	b.n	800a850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a81c:	f000 fee2 	bl	800b5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a820:	4b10      	ldr	r3, [pc, #64]	; (800a864 <prvCheckTasksWaitingTermination+0x50>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fb27 	bl	8008e80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a832:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a0b      	ldr	r2, [pc, #44]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a83a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a83c:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a846:	f000 fefd 	bl	800b644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f810 	bl	800a870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e1      	bne.n	800a81c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20001380 	.word	0x20001380
 800a868:	200013ac 	.word	0x200013ac
 800a86c:	20001394 	.word	0x20001394

0800a870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d108      	bne.n	800a894 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	4618      	mov	r0, r3
 800a888:	f001 f89a 	bl	800b9c0 <vPortFree>
				vPortFree( pxTCB );
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 f897 	bl	800b9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a892:	e018      	b.n	800a8c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d103      	bne.n	800a8a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 f88e 	bl	800b9c0 <vPortFree>
	}
 800a8a4:	e00f      	b.n	800a8c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d00a      	beq.n	800a8c6 <prvDeleteTCB+0x56>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	60fb      	str	r3, [r7, #12]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <prvDeleteTCB+0x54>
	}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <prvResetNextTaskUnblockTime+0x38>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <prvResetNextTaskUnblockTime+0x3c>)
 800a8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8e8:	e008      	b.n	800a8fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ea:	4b07      	ldr	r3, [pc, #28]	; (800a908 <prvResetNextTaskUnblockTime+0x38>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	4a04      	ldr	r2, [pc, #16]	; (800a90c <prvResetNextTaskUnblockTime+0x3c>)
 800a8fa:	6013      	str	r3, [r2, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20001364 	.word	0x20001364
 800a90c:	200013cc 	.word	0x200013cc

0800a910 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a916:	4b05      	ldr	r3, [pc, #20]	; (800a92c <xTaskGetCurrentTaskHandle+0x1c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a91c:	687b      	ldr	r3, [r7, #4]
	}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000ed8 	.word	0x20000ed8

0800a930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a936:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <xTaskGetSchedulerState+0x34>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a93e:	2301      	movs	r3, #1
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	e008      	b.n	800a956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a944:	4b08      	ldr	r3, [pc, #32]	; (800a968 <xTaskGetSchedulerState+0x38>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a94c:	2302      	movs	r3, #2
 800a94e:	607b      	str	r3, [r7, #4]
 800a950:	e001      	b.n	800a956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a952:	2300      	movs	r3, #0
 800a954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a956:	687b      	ldr	r3, [r7, #4]
	}
 800a958:	4618      	mov	r0, r3
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	200013b8 	.word	0x200013b8
 800a968:	200013d4 	.word	0x200013d4

0800a96c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d051      	beq.n	800aa26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a986:	4b2a      	ldr	r3, [pc, #168]	; (800aa30 <xTaskPriorityInherit+0xc4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d241      	bcs.n	800aa14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	db06      	blt.n	800a9a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a998:	4b25      	ldr	r3, [pc, #148]	; (800aa30 <xTaskPriorityInherit+0xc4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6959      	ldr	r1, [r3, #20]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a1f      	ldr	r2, [pc, #124]	; (800aa34 <xTaskPriorityInherit+0xc8>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4299      	cmp	r1, r3
 800a9bc:	d122      	bne.n	800aa04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fa5c 	bl	8008e80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9c8:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <xTaskPriorityInherit+0xc4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	4b18      	ldr	r3, [pc, #96]	; (800aa38 <xTaskPriorityInherit+0xcc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d903      	bls.n	800a9e6 <xTaskPriorityInherit+0x7a>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e2:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <xTaskPriorityInherit+0xcc>)
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4a10      	ldr	r2, [pc, #64]	; (800aa34 <xTaskPriorityInherit+0xc8>)
 800a9f4:	441a      	add	r2, r3
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	f7fe f9e2 	bl	8008dc6 <vListInsertEnd>
 800aa02:	e004      	b.n	800aa0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <xTaskPriorityInherit+0xc4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	e008      	b.n	800aa26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <xTaskPriorityInherit+0xc4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d201      	bcs.n	800aa26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa26:	68fb      	ldr	r3, [r7, #12]
	}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000ed8 	.word	0x20000ed8
 800aa34:	20000edc 	.word	0x20000edc
 800aa38:	200013b4 	.word	0x200013b4

0800aa3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d056      	beq.n	800ab00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa52:	4b2e      	ldr	r3, [pc, #184]	; (800ab0c <xTaskPriorityDisinherit+0xd0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d00a      	beq.n	800aa72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	60fb      	str	r3, [r7, #12]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	60bb      	str	r3, [r7, #8]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa94:	1e5a      	subs	r2, r3, #1
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d02c      	beq.n	800ab00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d128      	bne.n	800ab00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	3304      	adds	r3, #4
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe f9e4 	bl	8008e80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <xTaskPriorityDisinherit+0xd4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d903      	bls.n	800aae0 <xTaskPriorityDisinherit+0xa4>
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	4a0c      	ldr	r2, [pc, #48]	; (800ab10 <xTaskPriorityDisinherit+0xd4>)
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4a09      	ldr	r2, [pc, #36]	; (800ab14 <xTaskPriorityDisinherit+0xd8>)
 800aaee:	441a      	add	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f7fe f965 	bl	8008dc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab00:	697b      	ldr	r3, [r7, #20]
	}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000ed8 	.word	0x20000ed8
 800ab10:	200013b4 	.word	0x200013b4
 800ab14:	20000edc 	.word	0x20000edc

0800ab18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab26:	2301      	movs	r3, #1
 800ab28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d06a      	beq.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d902      	bls.n	800ab5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e002      	b.n	800ab64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d04b      	beq.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d146      	bne.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab78:	4b25      	ldr	r3, [pc, #148]	; (800ac10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d10a      	bne.n	800ab98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	60bb      	str	r3, [r7, #8]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	db04      	blt.n	800abb6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	6959      	ldr	r1, [r3, #20]
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4a13      	ldr	r2, [pc, #76]	; (800ac14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abc6:	4413      	add	r3, r2
 800abc8:	4299      	cmp	r1, r3
 800abca:	d11c      	bne.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	3304      	adds	r3, #4
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe f955 	bl	8008e80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d903      	bls.n	800abea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	4a0c      	ldr	r2, [pc, #48]	; (800ac18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abf8:	441a      	add	r2, r3
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fe f8e0 	bl	8008dc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac06:	bf00      	nop
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000ed8 	.word	0x20000ed8
 800ac14:	20000edc 	.word	0x20000edc
 800ac18:	200013b4 	.word	0x200013b4

0800ac1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac20:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac28:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac2e:	3201      	adds	r2, #1
 800ac30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac34:	681b      	ldr	r3, [r3, #0]
	}
 800ac36:	4618      	mov	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000ed8 	.word	0x20000ed8

0800ac44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac4e:	4b21      	ldr	r3, [pc, #132]	; (800acd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac54:	4b20      	ldr	r3, [pc, #128]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe f910 	bl	8008e80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac66:	d10a      	bne.n	800ac7e <prvAddCurrentTaskToDelayedList+0x3a>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3304      	adds	r3, #4
 800ac74:	4619      	mov	r1, r3
 800ac76:	4819      	ldr	r0, [pc, #100]	; (800acdc <prvAddCurrentTaskToDelayedList+0x98>)
 800ac78:	f7fe f8a5 	bl	8008dc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac7c:	e026      	b.n	800accc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac86:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d209      	bcs.n	800acaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac96:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fe f8b3 	bl	8008e0e <vListInsert>
}
 800aca8:	e010      	b.n	800accc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acaa:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe f8a9 	bl	8008e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d202      	bcs.n	800accc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acc6:	4a08      	ldr	r2, [pc, #32]	; (800ace8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	200013b0 	.word	0x200013b0
 800acd8:	20000ed8 	.word	0x20000ed8
 800acdc:	20001398 	.word	0x20001398
 800ace0:	20001368 	.word	0x20001368
 800ace4:	20001364 	.word	0x20001364
 800ace8:	200013cc 	.word	0x200013cc

0800acec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	; 0x28
 800acf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acf6:	f000 fb07 	bl	800b308 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acfa:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <xTimerCreateTimerTask+0x80>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d021      	beq.n	800ad46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad0a:	1d3a      	adds	r2, r7, #4
 800ad0c:	f107 0108 	add.w	r1, r7, #8
 800ad10:	f107 030c 	add.w	r3, r7, #12
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe f80f 	bl	8008d38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	9202      	str	r2, [sp, #8]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	2302      	movs	r3, #2
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	460a      	mov	r2, r1
 800ad2c:	4910      	ldr	r1, [pc, #64]	; (800ad70 <xTimerCreateTimerTask+0x84>)
 800ad2e:	4811      	ldr	r0, [pc, #68]	; (800ad74 <xTimerCreateTimerTask+0x88>)
 800ad30:	f7fe ffd0 	bl	8009cd4 <xTaskCreateStatic>
 800ad34:	4603      	mov	r3, r0
 800ad36:	4a10      	ldr	r2, [pc, #64]	; (800ad78 <xTimerCreateTimerTask+0x8c>)
 800ad38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <xTimerCreateTimerTask+0x8c>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad42:	2301      	movs	r3, #1
 800ad44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10a      	bne.n	800ad62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	613b      	str	r3, [r7, #16]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad62:	697b      	ldr	r3, [r7, #20]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20001408 	.word	0x20001408
 800ad70:	0800c730 	.word	0x0800c730
 800ad74:	0800aeb1 	.word	0x0800aeb1
 800ad78:	2000140c 	.word	0x2000140c

0800ad7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	; 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	623b      	str	r3, [r7, #32]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adaa:	4b1a      	ldr	r3, [pc, #104]	; (800ae14 <xTimerGenericCommand+0x98>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d02a      	beq.n	800ae08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b05      	cmp	r3, #5
 800adc2:	dc18      	bgt.n	800adf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adc4:	f7ff fdb4 	bl	800a930 <xTaskGetSchedulerState>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d109      	bne.n	800ade2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adce:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <xTimerGenericCommand+0x98>)
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	f107 0110 	add.w	r1, r7, #16
 800add6:	2300      	movs	r3, #0
 800add8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adda:	f7fe fa6f 	bl	80092bc <xQueueGenericSend>
 800adde:	6278      	str	r0, [r7, #36]	; 0x24
 800ade0:	e012      	b.n	800ae08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ade2:	4b0c      	ldr	r3, [pc, #48]	; (800ae14 <xTimerGenericCommand+0x98>)
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f107 0110 	add.w	r1, r7, #16
 800adea:	2300      	movs	r3, #0
 800adec:	2200      	movs	r2, #0
 800adee:	f7fe fa65 	bl	80092bc <xQueueGenericSend>
 800adf2:	6278      	str	r0, [r7, #36]	; 0x24
 800adf4:	e008      	b.n	800ae08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adf6:	4b07      	ldr	r3, [pc, #28]	; (800ae14 <xTimerGenericCommand+0x98>)
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f107 0110 	add.w	r1, r7, #16
 800adfe:	2300      	movs	r3, #0
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	f7fe fb59 	bl	80094b8 <xQueueGenericSendFromISR>
 800ae06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3728      	adds	r7, #40	; 0x28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20001408 	.word	0x20001408

0800ae18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af02      	add	r7, sp, #8
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae22:	4b22      	ldr	r3, [pc, #136]	; (800aeac <prvProcessExpiredTimer+0x94>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fe f825 	bl	8008e80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d022      	beq.n	800ae8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	699a      	ldr	r2, [r3, #24]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	18d1      	adds	r1, r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	6978      	ldr	r0, [r7, #20]
 800ae52:	f000 f8d1 	bl	800aff8 <prvInsertTimerInActiveList>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01f      	beq.n	800ae9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	2300      	movs	r3, #0
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	2100      	movs	r1, #0
 800ae66:	6978      	ldr	r0, [r7, #20]
 800ae68:	f7ff ff88 	bl	800ad7c <xTimerGenericCommand>
 800ae6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d113      	bne.n	800ae9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	6978      	ldr	r0, [r7, #20]
 800aea2:	4798      	blx	r3
}
 800aea4:	bf00      	nop
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20001400 	.word	0x20001400

0800aeb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeb8:	f107 0308 	add.w	r3, r7, #8
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f857 	bl	800af70 <prvGetNextExpireTime>
 800aec2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4619      	mov	r1, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f803 	bl	800aed4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aece:	f000 f8d5 	bl	800b07c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aed2:	e7f1      	b.n	800aeb8 <prvTimerTask+0x8>

0800aed4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aede:	f7ff f935 	bl	800a14c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee2:	f107 0308 	add.w	r3, r7, #8
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 f866 	bl	800afb8 <prvSampleTimeNow>
 800aeec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d130      	bne.n	800af56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10a      	bne.n	800af10 <prvProcessTimerOrBlockTask+0x3c>
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d806      	bhi.n	800af10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af02:	f7ff f931 	bl	800a168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af06:	68f9      	ldr	r1, [r7, #12]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ff85 	bl	800ae18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af0e:	e024      	b.n	800af5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d008      	beq.n	800af28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af16:	4b13      	ldr	r3, [pc, #76]	; (800af64 <prvProcessTimerOrBlockTask+0x90>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <prvProcessTimerOrBlockTask+0x50>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <prvProcessTimerOrBlockTask+0x52>
 800af24:	2300      	movs	r3, #0
 800af26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af28:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <prvProcessTimerOrBlockTask+0x94>)
 800af2a:	6818      	ldr	r0, [r3, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	4619      	mov	r1, r3
 800af36:	f7fe fe99 	bl	8009c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af3a:	f7ff f915 	bl	800a168 <xTaskResumeAll>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <prvProcessTimerOrBlockTask+0x98>)
 800af46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	f3bf 8f6f 	isb	sy
}
 800af54:	e001      	b.n	800af5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af56:	f7ff f907 	bl	800a168 <xTaskResumeAll>
}
 800af5a:	bf00      	nop
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20001404 	.word	0x20001404
 800af68:	20001408 	.word	0x20001408
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <prvGetNextExpireTime+0x44>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <prvGetNextExpireTime+0x16>
 800af82:	2201      	movs	r2, #1
 800af84:	e000      	b.n	800af88 <prvGetNextExpireTime+0x18>
 800af86:	2200      	movs	r2, #0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d105      	bne.n	800afa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af94:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <prvGetNextExpireTime+0x44>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e001      	b.n	800afa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afa4:	68fb      	ldr	r3, [r7, #12]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	20001400 	.word	0x20001400

0800afb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afc0:	f7ff f970 	bl	800a2a4 <xTaskGetTickCount>
 800afc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afc6:	4b0b      	ldr	r3, [pc, #44]	; (800aff4 <prvSampleTimeNow+0x3c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d205      	bcs.n	800afdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afd0:	f000 f936 	bl	800b240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e002      	b.n	800afe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afe2:	4a04      	ldr	r2, [pc, #16]	; (800aff4 <prvSampleTimeNow+0x3c>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afe8:	68fb      	ldr	r3, [r7, #12]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20001410 	.word	0x20001410

0800aff8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d812      	bhi.n	800b044 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	e01b      	b.n	800b06a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <prvInsertTimerInActiveList+0x7c>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fd fee6 	bl	8008e0e <vListInsert>
 800b042:	e012      	b.n	800b06a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d206      	bcs.n	800b05a <prvInsertTimerInActiveList+0x62>
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d302      	bcc.n	800b05a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	e007      	b.n	800b06a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <prvInsertTimerInActiveList+0x80>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3304      	adds	r3, #4
 800b062:	4619      	mov	r1, r3
 800b064:	4610      	mov	r0, r2
 800b066:	f7fd fed2 	bl	8008e0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b06a:	697b      	ldr	r3, [r7, #20]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	20001404 	.word	0x20001404
 800b078:	20001400 	.word	0x20001400

0800b07c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08e      	sub	sp, #56	; 0x38
 800b080:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b082:	e0ca      	b.n	800b21a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	da18      	bge.n	800b0bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b08a:	1d3b      	adds	r3, r7, #4
 800b08c:	3304      	adds	r3, #4
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	61fb      	str	r3, [r7, #28]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b2:	6850      	ldr	r0, [r2, #4]
 800b0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b6:	6892      	ldr	r2, [r2, #8]
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f2c0 80aa 	blt.w	800b218 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d004      	beq.n	800b0da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fd fed3 	bl	8008e80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0da:	463b      	mov	r3, r7
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ff6b 	bl	800afb8 <prvSampleTimeNow>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	f200 8097 	bhi.w	800b21a <prvProcessReceivedCommands+0x19e>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <prvProcessReceivedCommands+0x78>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b11d 	.word	0x0800b11d
 800b0f8:	0800b11d 	.word	0x0800b11d
 800b0fc:	0800b11d 	.word	0x0800b11d
 800b100:	0800b191 	.word	0x0800b191
 800b104:	0800b1a5 	.word	0x0800b1a5
 800b108:	0800b1ef 	.word	0x0800b1ef
 800b10c:	0800b11d 	.word	0x0800b11d
 800b110:	0800b11d 	.word	0x0800b11d
 800b114:	0800b191 	.word	0x0800b191
 800b118:	0800b1a5 	.word	0x0800b1a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b122:	f043 0301 	orr.w	r3, r3, #1
 800b126:	b2da      	uxtb	r2, r3
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	18d1      	adds	r1, r2, r3
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13c:	f7ff ff5c 	bl	800aff8 <prvInsertTimerInActiveList>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d069      	beq.n	800b21a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b14c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d05e      	beq.n	800b21a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	441a      	add	r2, r3
 800b164:	2300      	movs	r3, #0
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	2300      	movs	r3, #0
 800b16a:	2100      	movs	r1, #0
 800b16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b16e:	f7ff fe05 	bl	800ad7c <xTimerGenericCommand>
 800b172:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d14f      	bne.n	800b21a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	61bb      	str	r3, [r7, #24]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b196:	f023 0301 	bic.w	r3, r3, #1
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1a2:	e03a      	b.n	800b21a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1aa:	f043 0301 	orr.w	r3, r3, #1
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	617b      	str	r3, [r7, #20]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	699a      	ldr	r2, [r3, #24]
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	18d1      	adds	r1, r2, r3
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e8:	f7ff ff06 	bl	800aff8 <prvInsertTimerInActiveList>
					break;
 800b1ec:	e015      	b.n	800b21a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fe:	f000 fbdf 	bl	800b9c0 <vPortFree>
 800b202:	e00a      	b.n	800b21a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b20a:	f023 0301 	bic.w	r3, r3, #1
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b216:	e000      	b.n	800b21a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b218:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b21a:	4b08      	ldr	r3, [pc, #32]	; (800b23c <prvProcessReceivedCommands+0x1c0>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	1d39      	adds	r1, r7, #4
 800b220:	2200      	movs	r2, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe f9e4 	bl	80095f0 <xQueueReceive>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f47f af2a 	bne.w	800b084 <prvProcessReceivedCommands+0x8>
	}
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	3730      	adds	r7, #48	; 0x30
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20001408 	.word	0x20001408

0800b240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b088      	sub	sp, #32
 800b244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b246:	e048      	b.n	800b2da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b248:	4b2d      	ldr	r3, [pc, #180]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b252:	4b2b      	ldr	r3, [pc, #172]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3304      	adds	r3, #4
 800b260:	4618      	mov	r0, r3
 800b262:	f7fd fe0d 	bl	8008e80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d02e      	beq.n	800b2da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	4413      	add	r3, r2
 800b284:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d90e      	bls.n	800b2ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b29a:	4b19      	ldr	r3, [pc, #100]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7fd fdb2 	bl	8008e0e <vListInsert>
 800b2aa:	e016      	b.n	800b2da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fd60 	bl	800ad7c <xTimerGenericCommand>
 800b2bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10a      	bne.n	800b2da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	603b      	str	r3, [r7, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2da:	4b09      	ldr	r3, [pc, #36]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1b1      	bne.n	800b248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2ea:	4b06      	ldr	r3, [pc, #24]	; (800b304 <prvSwitchTimerLists+0xc4>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a04      	ldr	r2, [pc, #16]	; (800b300 <prvSwitchTimerLists+0xc0>)
 800b2f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2f2:	4a04      	ldr	r2, [pc, #16]	; (800b304 <prvSwitchTimerLists+0xc4>)
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	6013      	str	r3, [r2, #0]
}
 800b2f8:	bf00      	nop
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20001400 	.word	0x20001400
 800b304:	20001404 	.word	0x20001404

0800b308 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b30e:	f000 f969 	bl	800b5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b312:	4b15      	ldr	r3, [pc, #84]	; (800b368 <prvCheckForValidListAndQueue+0x60>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d120      	bne.n	800b35c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b31a:	4814      	ldr	r0, [pc, #80]	; (800b36c <prvCheckForValidListAndQueue+0x64>)
 800b31c:	f7fd fd26 	bl	8008d6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b320:	4813      	ldr	r0, [pc, #76]	; (800b370 <prvCheckForValidListAndQueue+0x68>)
 800b322:	f7fd fd23 	bl	8008d6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b326:	4b13      	ldr	r3, [pc, #76]	; (800b374 <prvCheckForValidListAndQueue+0x6c>)
 800b328:	4a10      	ldr	r2, [pc, #64]	; (800b36c <prvCheckForValidListAndQueue+0x64>)
 800b32a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b32c:	4b12      	ldr	r3, [pc, #72]	; (800b378 <prvCheckForValidListAndQueue+0x70>)
 800b32e:	4a10      	ldr	r2, [pc, #64]	; (800b370 <prvCheckForValidListAndQueue+0x68>)
 800b330:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b332:	2300      	movs	r3, #0
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4b11      	ldr	r3, [pc, #68]	; (800b37c <prvCheckForValidListAndQueue+0x74>)
 800b338:	4a11      	ldr	r2, [pc, #68]	; (800b380 <prvCheckForValidListAndQueue+0x78>)
 800b33a:	2110      	movs	r1, #16
 800b33c:	200a      	movs	r0, #10
 800b33e:	f7fd fe31 	bl	8008fa4 <xQueueGenericCreateStatic>
 800b342:	4603      	mov	r3, r0
 800b344:	4a08      	ldr	r2, [pc, #32]	; (800b368 <prvCheckForValidListAndQueue+0x60>)
 800b346:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <prvCheckForValidListAndQueue+0x60>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <prvCheckForValidListAndQueue+0x60>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	490b      	ldr	r1, [pc, #44]	; (800b384 <prvCheckForValidListAndQueue+0x7c>)
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fc5e 	bl	8009c18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b35c:	f000 f972 	bl	800b644 <vPortExitCritical>
}
 800b360:	bf00      	nop
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20001408 	.word	0x20001408
 800b36c:	200013d8 	.word	0x200013d8
 800b370:	200013ec 	.word	0x200013ec
 800b374:	20001400 	.word	0x20001400
 800b378:	20001404 	.word	0x20001404
 800b37c:	200014b4 	.word	0x200014b4
 800b380:	20001414 	.word	0x20001414
 800b384:	0800c738 	.word	0x0800c738

0800b388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3b04      	subs	r3, #4
 800b398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3b04      	subs	r3, #4
 800b3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f023 0201 	bic.w	r2, r3, #1
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3b04      	subs	r3, #4
 800b3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3b8:	4a0c      	ldr	r2, [pc, #48]	; (800b3ec <pxPortInitialiseStack+0x64>)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3b14      	subs	r3, #20
 800b3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3b04      	subs	r3, #4
 800b3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f06f 0202 	mvn.w	r2, #2
 800b3d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3b20      	subs	r3, #32
 800b3dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3de:	68fb      	ldr	r3, [r7, #12]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	0800b3f1 	.word	0x0800b3f1

0800b3f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <prvTaskExitError+0x54>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d00a      	beq.n	800b41a <prvTaskExitError+0x2a>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <prvTaskExitError+0x28>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	60bb      	str	r3, [r7, #8]
}
 800b42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b42e:	bf00      	nop
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0fc      	beq.n	800b430 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	20000098 	.word	0x20000098
	...

0800b450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <pxCurrentTCBConst2>)
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	6808      	ldr	r0, [r1, #0]
 800b456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	f380 8809 	msr	PSP, r0
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f04f 0000 	mov.w	r0, #0
 800b466:	f380 8811 	msr	BASEPRI, r0
 800b46a:	4770      	bx	lr
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst2>:
 800b470:	20000ed8 	.word	0x20000ed8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop

0800b478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b478:	4808      	ldr	r0, [pc, #32]	; (800b49c <prvPortStartFirstTask+0x24>)
 800b47a:	6800      	ldr	r0, [r0, #0]
 800b47c:	6800      	ldr	r0, [r0, #0]
 800b47e:	f380 8808 	msr	MSP, r0
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f380 8814 	msr	CONTROL, r0
 800b48a:	b662      	cpsie	i
 800b48c:	b661      	cpsie	f
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	df00      	svc	0
 800b498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b49a:	bf00      	nop
 800b49c:	e000ed08 	.word	0xe000ed08

0800b4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4a6:	4b46      	ldr	r3, [pc, #280]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a46      	ldr	r2, [pc, #280]	; (800b5c4 <xPortStartScheduler+0x124>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d10a      	bne.n	800b4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a3f      	ldr	r2, [pc, #252]	; (800b5c8 <xPortStartScheduler+0x128>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10a      	bne.n	800b4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4e6:	4b39      	ldr	r3, [pc, #228]	; (800b5cc <xPortStartScheduler+0x12c>)
 800b4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	22ff      	movs	r2, #255	; 0xff
 800b4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <xPortStartScheduler+0x130>)
 800b50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b50e:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b510:	2207      	movs	r2, #7
 800b512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b514:	e009      	b.n	800b52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b516:	4b2f      	ldr	r3, [pc, #188]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4a2d      	ldr	r2, [pc, #180]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	b2db      	uxtb	r3, r3
 800b528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b532:	2b80      	cmp	r3, #128	; 0x80
 800b534:	d0ef      	beq.n	800b516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b536:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1c3 0307 	rsb	r3, r3, #7
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d00a      	beq.n	800b558 <xPortStartScheduler+0xb8>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60bb      	str	r3, [r7, #8]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b558:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b56a:	4a1a      	ldr	r2, [pc, #104]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	b2da      	uxtb	r2, r3
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b576:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b58e:	f000 f8dd 	bl	800b74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b592:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <xPortStartScheduler+0x13c>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b598:	f000 f8fc 	bl	800b794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0f      	ldr	r2, [pc, #60]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5a8:	f7ff ff66 	bl	800b478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ac:	f7fe ff44 	bl	800a438 <vTaskSwitchContext>
	prvTaskExitError();
 800b5b0:	f7ff ff1e 	bl	800b3f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	e000ed00 	.word	0xe000ed00
 800b5c4:	410fc271 	.word	0x410fc271
 800b5c8:	410fc270 	.word	0x410fc270
 800b5cc:	e000e400 	.word	0xe000e400
 800b5d0:	20001504 	.word	0x20001504
 800b5d4:	20001508 	.word	0x20001508
 800b5d8:	e000ed20 	.word	0xe000ed20
 800b5dc:	20000098 	.word	0x20000098
 800b5e0:	e000ef34 	.word	0xe000ef34

0800b5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	607b      	str	r3, [r7, #4]
}
 800b5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <vPortEnterCritical+0x58>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <vPortEnterCritical+0x58>)
 800b606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b608:	4b0c      	ldr	r3, [pc, #48]	; (800b63c <vPortEnterCritical+0x58>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d10f      	bne.n	800b630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <vPortEnterCritical+0x5c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <vPortEnterCritical+0x4c>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	603b      	str	r3, [r7, #0]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <vPortEnterCritical+0x4a>
	}
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	20000098 	.word	0x20000098
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b64a:	4b12      	ldr	r3, [pc, #72]	; (800b694 <vPortExitCritical+0x50>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <vPortExitCritical+0x24>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	607b      	str	r3, [r7, #4]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <vPortExitCritical+0x50>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <vPortExitCritical+0x50>)
 800b670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b672:	4b08      	ldr	r3, [pc, #32]	; (800b694 <vPortExitCritical+0x50>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d105      	bne.n	800b686 <vPortExitCritical+0x42>
 800b67a:	2300      	movs	r3, #0
 800b67c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	f383 8811 	msr	BASEPRI, r3
}
 800b684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000098 	.word	0x20000098
	...

0800b6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6a0:	f3ef 8009 	mrs	r0, PSP
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	4b15      	ldr	r3, [pc, #84]	; (800b700 <pxCurrentTCBConst>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	f01e 0f10 	tst.w	lr, #16
 800b6b0:	bf08      	it	eq
 800b6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	6010      	str	r0, [r2, #0]
 800b6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6c4:	f380 8811 	msr	BASEPRI, r0
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f7fe feb2 	bl	800a438 <vTaskSwitchContext>
 800b6d4:	f04f 0000 	mov.w	r0, #0
 800b6d8:	f380 8811 	msr	BASEPRI, r0
 800b6dc:	bc09      	pop	{r0, r3}
 800b6de:	6819      	ldr	r1, [r3, #0]
 800b6e0:	6808      	ldr	r0, [r1, #0]
 800b6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e6:	f01e 0f10 	tst.w	lr, #16
 800b6ea:	bf08      	it	eq
 800b6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6f0:	f380 8809 	msr	PSP, r0
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w

0800b700 <pxCurrentTCBConst>:
 800b700:	20000ed8 	.word	0x20000ed8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop

0800b708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b722:	f7fe fdcf 	bl	800a2c4 <xTaskIncrementTick>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <xPortSysTickHandler+0x40>)
 800b72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f383 8811 	msr	BASEPRI, r3
}
 800b73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <vPortSetupTimerInterrupt+0x38>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <vPortSetupTimerInterrupt+0x3c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <vPortSetupTimerInterrupt+0x40>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	099b      	lsrs	r3, r3, #6
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <vPortSetupTimerInterrupt+0x44>)
 800b76a:	3b01      	subs	r3, #1
 800b76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b770:	2207      	movs	r2, #7
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	e000e010 	.word	0xe000e010
 800b784:	e000e018 	.word	0xe000e018
 800b788:	20000000 	.word	0x20000000
 800b78c:	10624dd3 	.word	0x10624dd3
 800b790:	e000e014 	.word	0xe000e014

0800b794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7a4 <vPortEnableVFP+0x10>
 800b798:	6801      	ldr	r1, [r0, #0]
 800b79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b79e:	6001      	str	r1, [r0, #0]
 800b7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7a2:	bf00      	nop
 800b7a4:	e000ed88 	.word	0xe000ed88

0800b7a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7ae:	f3ef 8305 	mrs	r3, IPSR
 800b7b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	d914      	bls.n	800b7e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ba:	4a17      	ldr	r2, [pc, #92]	; (800b818 <vPortValidateInterruptPriority+0x70>)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <vPortValidateInterruptPriority+0x74>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	7afa      	ldrb	r2, [r7, #11]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d20a      	bcs.n	800b7e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	607b      	str	r3, [r7, #4]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <vPortValidateInterruptPriority+0x78>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <vPortValidateInterruptPriority+0x7c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d90a      	bls.n	800b80a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	603b      	str	r3, [r7, #0]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <vPortValidateInterruptPriority+0x60>
	}
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	e000e3f0 	.word	0xe000e3f0
 800b81c:	20001504 	.word	0x20001504
 800b820:	e000ed0c 	.word	0xe000ed0c
 800b824:	20001508 	.word	0x20001508

0800b828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b830:	2300      	movs	r3, #0
 800b832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b834:	f7fe fc8a 	bl	800a14c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b838:	4b5b      	ldr	r3, [pc, #364]	; (800b9a8 <pvPortMalloc+0x180>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d101      	bne.n	800b844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b840:	f000 f920 	bl	800ba84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b844:	4b59      	ldr	r3, [pc, #356]	; (800b9ac <pvPortMalloc+0x184>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4013      	ands	r3, r2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f040 8093 	bne.w	800b978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01d      	beq.n	800b894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b858:	2208      	movs	r2, #8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4413      	add	r3, r2
 800b85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	2b00      	cmp	r3, #0
 800b868:	d014      	beq.n	800b894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f023 0307 	bic.w	r3, r3, #7
 800b870:	3308      	adds	r3, #8
 800b872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <pvPortMalloc+0x6c>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	617b      	str	r3, [r7, #20]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d06e      	beq.n	800b978 <pvPortMalloc+0x150>
 800b89a:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <pvPortMalloc+0x188>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d869      	bhi.n	800b978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8a4:	4b43      	ldr	r3, [pc, #268]	; (800b9b4 <pvPortMalloc+0x18c>)
 800b8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8a8:	4b42      	ldr	r3, [pc, #264]	; (800b9b4 <pvPortMalloc+0x18c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ae:	e004      	b.n	800b8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d903      	bls.n	800b8cc <pvPortMalloc+0xa4>
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f1      	bne.n	800b8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8cc:	4b36      	ldr	r3, [pc, #216]	; (800b9a8 <pvPortMalloc+0x180>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d050      	beq.n	800b978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2208      	movs	r2, #8
 800b8dc:	4413      	add	r3, r2
 800b8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	2308      	movs	r3, #8
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d91f      	bls.n	800b938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <pvPortMalloc+0xf8>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	613b      	str	r3, [r7, #16]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	1ad2      	subs	r2, r2, r3
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b932:	69b8      	ldr	r0, [r7, #24]
 800b934:	f000 f908 	bl	800bb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b938:	4b1d      	ldr	r3, [pc, #116]	; (800b9b0 <pvPortMalloc+0x188>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	4a1b      	ldr	r2, [pc, #108]	; (800b9b0 <pvPortMalloc+0x188>)
 800b944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b946:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <pvPortMalloc+0x188>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	4b1b      	ldr	r3, [pc, #108]	; (800b9b8 <pvPortMalloc+0x190>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d203      	bcs.n	800b95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b952:	4b17      	ldr	r3, [pc, #92]	; (800b9b0 <pvPortMalloc+0x188>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <pvPortMalloc+0x190>)
 800b958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <pvPortMalloc+0x184>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	431a      	orrs	r2, r3
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <pvPortMalloc+0x194>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3301      	adds	r3, #1
 800b974:	4a11      	ldr	r2, [pc, #68]	; (800b9bc <pvPortMalloc+0x194>)
 800b976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b978:	f7fe fbf6 	bl	800a168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <pvPortMalloc+0x174>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	60fb      	str	r3, [r7, #12]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <pvPortMalloc+0x172>
	return pvReturn;
 800b99c:	69fb      	ldr	r3, [r7, #28]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3728      	adds	r7, #40	; 0x28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20005114 	.word	0x20005114
 800b9ac:	20005128 	.word	0x20005128
 800b9b0:	20005118 	.word	0x20005118
 800b9b4:	2000510c 	.word	0x2000510c
 800b9b8:	2000511c 	.word	0x2000511c
 800b9bc:	20005120 	.word	0x20005120

0800b9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d04d      	beq.n	800ba6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9d2:	2308      	movs	r3, #8
 800b9d4:	425b      	negs	r3, r3
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	4413      	add	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <vPortFree+0xb8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <vPortFree+0x44>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	60fb      	str	r3, [r7, #12]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <vPortFree+0x62>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	60bb      	str	r3, [r7, #8]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <vPortFree+0xb8>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01e      	beq.n	800ba6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11a      	bne.n	800ba6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <vPortFree+0xb8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	401a      	ands	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba48:	f7fe fb80 	bl	800a14c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <vPortFree+0xbc>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4413      	add	r3, r2
 800ba56:	4a09      	ldr	r2, [pc, #36]	; (800ba7c <vPortFree+0xbc>)
 800ba58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f000 f874 	bl	800bb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <vPortFree+0xc0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	4a06      	ldr	r2, [pc, #24]	; (800ba80 <vPortFree+0xc0>)
 800ba68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba6a:	f7fe fb7d 	bl	800a168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba6e:	bf00      	nop
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20005128 	.word	0x20005128
 800ba7c:	20005118 	.word	0x20005118
 800ba80:	20005124 	.word	0x20005124

0800ba84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba90:	4b27      	ldr	r3, [pc, #156]	; (800bb30 <prvHeapInit+0xac>)
 800ba92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00c      	beq.n	800bab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0307 	bic.w	r3, r3, #7
 800baaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	4a1f      	ldr	r2, [pc, #124]	; (800bb30 <prvHeapInit+0xac>)
 800bab4:	4413      	add	r3, r2
 800bab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800babc:	4a1d      	ldr	r2, [pc, #116]	; (800bb34 <prvHeapInit+0xb0>)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <prvHeapInit+0xb0>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bad0:	2208      	movs	r2, #8
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0307 	bic.w	r3, r3, #7
 800bade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a15      	ldr	r2, [pc, #84]	; (800bb38 <prvHeapInit+0xb4>)
 800bae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bae6:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <prvHeapInit+0xb4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2200      	movs	r2, #0
 800baec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800baee:	4b12      	ldr	r3, [pc, #72]	; (800bb38 <prvHeapInit+0xb4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	1ad2      	subs	r2, r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvHeapInit+0xb4>)
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	4a0a      	ldr	r2, [pc, #40]	; (800bb3c <prvHeapInit+0xb8>)
 800bb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <prvHeapInit+0xbc>)
 800bb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <prvHeapInit+0xc0>)
 800bb1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	bf00      	nop
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	2000150c 	.word	0x2000150c
 800bb34:	2000510c 	.word	0x2000510c
 800bb38:	20005114 	.word	0x20005114
 800bb3c:	2000511c 	.word	0x2000511c
 800bb40:	20005118 	.word	0x20005118
 800bb44:	20005128 	.word	0x20005128

0800bb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb50:	4b28      	ldr	r3, [pc, #160]	; (800bbf4 <prvInsertBlockIntoFreeList+0xac>)
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	e002      	b.n	800bb5c <prvInsertBlockIntoFreeList+0x14>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d8f7      	bhi.n	800bb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d108      	bne.n	800bb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	441a      	add	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	441a      	add	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d118      	bne.n	800bbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b15      	ldr	r3, [pc, #84]	; (800bbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d00d      	beq.n	800bbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	441a      	add	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	e008      	b.n	800bbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	e003      	b.n	800bbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d002      	beq.n	800bbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	2000510c 	.word	0x2000510c
 800bbf8:	20005114 	.word	0x20005114

0800bbfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4912      	ldr	r1, [pc, #72]	; (800bc4c <MX_USB_DEVICE_Init+0x50>)
 800bc04:	4812      	ldr	r0, [pc, #72]	; (800bc50 <MX_USB_DEVICE_Init+0x54>)
 800bc06:	f7fb fb41 	bl	800728c <USBD_Init>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc10:	f7f5 f8cc 	bl	8000dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc14:	490f      	ldr	r1, [pc, #60]	; (800bc54 <MX_USB_DEVICE_Init+0x58>)
 800bc16:	480e      	ldr	r0, [pc, #56]	; (800bc50 <MX_USB_DEVICE_Init+0x54>)
 800bc18:	f7fb fb68 	bl	80072ec <USBD_RegisterClass>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc22:	f7f5 f8c3 	bl	8000dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc26:	490c      	ldr	r1, [pc, #48]	; (800bc58 <MX_USB_DEVICE_Init+0x5c>)
 800bc28:	4809      	ldr	r0, [pc, #36]	; (800bc50 <MX_USB_DEVICE_Init+0x54>)
 800bc2a:	f7fb fa9f 	bl	800716c <USBD_CDC_RegisterInterface>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc34:	f7f5 f8ba 	bl	8000dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc38:	4805      	ldr	r0, [pc, #20]	; (800bc50 <MX_USB_DEVICE_Init+0x54>)
 800bc3a:	f7fb fb8d 	bl	8007358 <USBD_Start>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc44:	f7f5 f8b2 	bl	8000dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc48:	bf00      	nop
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	200000b0 	.word	0x200000b0
 800bc50:	2000512c 	.word	0x2000512c
 800bc54:	20000018 	.word	0x20000018
 800bc58:	2000009c 	.word	0x2000009c

0800bc5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc60:	2200      	movs	r2, #0
 800bc62:	4905      	ldr	r1, [pc, #20]	; (800bc78 <CDC_Init_FS+0x1c>)
 800bc64:	4805      	ldr	r0, [pc, #20]	; (800bc7c <CDC_Init_FS+0x20>)
 800bc66:	f7fb fa9b 	bl	80071a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc6a:	4905      	ldr	r1, [pc, #20]	; (800bc80 <CDC_Init_FS+0x24>)
 800bc6c:	4803      	ldr	r0, [pc, #12]	; (800bc7c <CDC_Init_FS+0x20>)
 800bc6e:	f7fb fab9 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20005c08 	.word	0x20005c08
 800bc7c:	2000512c 	.word	0x2000512c
 800bc80:	20005408 	.word	0x20005408

0800bc84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
 800bca0:	4613      	mov	r3, r2
 800bca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b23      	cmp	r3, #35	; 0x23
 800bca8:	d84a      	bhi.n	800bd40 <CDC_Control_FS+0xac>
 800bcaa:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <CDC_Control_FS+0x1c>)
 800bcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb0:	0800bd41 	.word	0x0800bd41
 800bcb4:	0800bd41 	.word	0x0800bd41
 800bcb8:	0800bd41 	.word	0x0800bd41
 800bcbc:	0800bd41 	.word	0x0800bd41
 800bcc0:	0800bd41 	.word	0x0800bd41
 800bcc4:	0800bd41 	.word	0x0800bd41
 800bcc8:	0800bd41 	.word	0x0800bd41
 800bccc:	0800bd41 	.word	0x0800bd41
 800bcd0:	0800bd41 	.word	0x0800bd41
 800bcd4:	0800bd41 	.word	0x0800bd41
 800bcd8:	0800bd41 	.word	0x0800bd41
 800bcdc:	0800bd41 	.word	0x0800bd41
 800bce0:	0800bd41 	.word	0x0800bd41
 800bce4:	0800bd41 	.word	0x0800bd41
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd41 	.word	0x0800bd41
 800bcf0:	0800bd41 	.word	0x0800bd41
 800bcf4:	0800bd41 	.word	0x0800bd41
 800bcf8:	0800bd41 	.word	0x0800bd41
 800bcfc:	0800bd41 	.word	0x0800bd41
 800bd00:	0800bd41 	.word	0x0800bd41
 800bd04:	0800bd41 	.word	0x0800bd41
 800bd08:	0800bd41 	.word	0x0800bd41
 800bd0c:	0800bd41 	.word	0x0800bd41
 800bd10:	0800bd41 	.word	0x0800bd41
 800bd14:	0800bd41 	.word	0x0800bd41
 800bd18:	0800bd41 	.word	0x0800bd41
 800bd1c:	0800bd41 	.word	0x0800bd41
 800bd20:	0800bd41 	.word	0x0800bd41
 800bd24:	0800bd41 	.word	0x0800bd41
 800bd28:	0800bd41 	.word	0x0800bd41
 800bd2c:	0800bd41 	.word	0x0800bd41
 800bd30:	0800bd41 	.word	0x0800bd41
 800bd34:	0800bd41 	.word	0x0800bd41
 800bd38:	0800bd41 	.word	0x0800bd41
 800bd3c:	0800bd41 	.word	0x0800bd41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd40:	bf00      	nop
  }

  return (USBD_OK);
 800bd42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	4805      	ldr	r0, [pc, #20]	; (800bd74 <CDC_Receive_FS+0x24>)
 800bd5e:	f7fb fa41 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd62:	4804      	ldr	r0, [pc, #16]	; (800bd74 <CDC_Receive_FS+0x24>)
 800bd64:	f7fb fa5c 	bl	8007220 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	2000512c 	.word	0x2000512c

0800bd78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
	...

0800bd9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	4603      	mov	r3, r0
 800bda4:	6039      	str	r1, [r7, #0]
 800bda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2212      	movs	r2, #18
 800bdac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	200000cc 	.word	0x200000cc

0800bdc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2204      	movs	r2, #4
 800bdd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdd2:	4b03      	ldr	r3, [pc, #12]	; (800bde0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	200000e0 	.word	0x200000e0

0800bde4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4907      	ldr	r1, [pc, #28]	; (800be18 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdfa:	4808      	ldr	r0, [pc, #32]	; (800be1c <USBD_FS_ProductStrDescriptor+0x38>)
 800bdfc:	f7fc fc58 	bl	80086b0 <USBD_GetString>
 800be00:	e004      	b.n	800be0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4904      	ldr	r1, [pc, #16]	; (800be18 <USBD_FS_ProductStrDescriptor+0x34>)
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <USBD_FS_ProductStrDescriptor+0x38>)
 800be08:	f7fc fc52 	bl	80086b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20006408 	.word	0x20006408
 800be1c:	0800c740 	.word	0x0800c740

0800be20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be2c:	683a      	ldr	r2, [r7, #0]
 800be2e:	4904      	ldr	r1, [pc, #16]	; (800be40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be30:	4804      	ldr	r0, [pc, #16]	; (800be44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be32:	f7fc fc3d 	bl	80086b0 <USBD_GetString>
  return USBD_StrDesc;
 800be36:	4b02      	ldr	r3, [pc, #8]	; (800be40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20006408 	.word	0x20006408
 800be44:	0800c758 	.word	0x0800c758

0800be48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	221a      	movs	r2, #26
 800be58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be5a:	f000 f843 	bl	800bee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be5e:	4b02      	ldr	r3, [pc, #8]	; (800be68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	200000e4 	.word	0x200000e4

0800be6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	6039      	str	r1, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d105      	bne.n	800be8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4907      	ldr	r1, [pc, #28]	; (800bea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be82:	4808      	ldr	r0, [pc, #32]	; (800bea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be84:	f7fc fc14 	bl	80086b0 <USBD_GetString>
 800be88:	e004      	b.n	800be94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	4904      	ldr	r1, [pc, #16]	; (800bea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be8e:	4805      	ldr	r0, [pc, #20]	; (800bea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be90:	f7fc fc0e 	bl	80086b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be94:	4b02      	ldr	r3, [pc, #8]	; (800bea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20006408 	.word	0x20006408
 800bea4:	0800c76c 	.word	0x0800c76c

0800bea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bebe:	4808      	ldr	r0, [pc, #32]	; (800bee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bec0:	f7fc fbf6 	bl	80086b0 <USBD_GetString>
 800bec4:	e004      	b.n	800bed0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4904      	ldr	r1, [pc, #16]	; (800bedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beca:	4805      	ldr	r0, [pc, #20]	; (800bee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800becc:	f7fc fbf0 	bl	80086b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20006408 	.word	0x20006408
 800bee0:	0800c778 	.word	0x0800c778

0800bee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <Get_SerialNum+0x44>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bef0:	4b0e      	ldr	r3, [pc, #56]	; (800bf2c <Get_SerialNum+0x48>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bef6:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <Get_SerialNum+0x4c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4413      	add	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf0a:	2208      	movs	r2, #8
 800bf0c:	4909      	ldr	r1, [pc, #36]	; (800bf34 <Get_SerialNum+0x50>)
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f814 	bl	800bf3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf14:	2204      	movs	r2, #4
 800bf16:	4908      	ldr	r1, [pc, #32]	; (800bf38 <Get_SerialNum+0x54>)
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	f000 f80f 	bl	800bf3c <IntToUnicode>
  }
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	1fff7a10 	.word	0x1fff7a10
 800bf2c:	1fff7a14 	.word	0x1fff7a14
 800bf30:	1fff7a18 	.word	0x1fff7a18
 800bf34:	200000e6 	.word	0x200000e6
 800bf38:	200000f6 	.word	0x200000f6

0800bf3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
 800bf52:	e027      	b.n	800bfa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	0f1b      	lsrs	r3, r3, #28
 800bf58:	2b09      	cmp	r3, #9
 800bf5a:	d80b      	bhi.n	800bf74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	0f1b      	lsrs	r3, r3, #28
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	4619      	mov	r1, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3230      	adds	r2, #48	; 0x30
 800bf6e:	b2d2      	uxtb	r2, r2
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	e00a      	b.n	800bf8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	440b      	add	r3, r1
 800bf84:	3237      	adds	r2, #55	; 0x37
 800bf86:	b2d2      	uxtb	r2, r2
 800bf88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	011b      	lsls	r3, r3, #4
 800bf8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	3301      	adds	r3, #1
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	75fb      	strb	r3, [r7, #23]
 800bfa4:	7dfa      	ldrb	r2, [r7, #23]
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d3d3      	bcc.n	800bf54 <IntToUnicode+0x18>
  }
}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08a      	sub	sp, #40	; 0x28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc4:	f107 0314 	add.w	r3, r7, #20
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	605a      	str	r2, [r3, #4]
 800bfce:	609a      	str	r2, [r3, #8]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfdc:	d13a      	bne.n	800c054 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfde:	2300      	movs	r3, #0
 800bfe0:	613b      	str	r3, [r7, #16]
 800bfe2:	4b1e      	ldr	r3, [pc, #120]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe6:	4a1d      	ldr	r2, [pc, #116]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800bfe8:	f043 0301 	orr.w	r3, r3, #1
 800bfec:	6313      	str	r3, [r2, #48]	; 0x30
 800bfee:	4b1b      	ldr	r3, [pc, #108]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bffa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c000:	2302      	movs	r3, #2
 800c002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c004:	2300      	movs	r3, #0
 800c006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c008:	2303      	movs	r3, #3
 800c00a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c00c:	230a      	movs	r3, #10
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c010:	f107 0314 	add.w	r3, r7, #20
 800c014:	4619      	mov	r1, r3
 800c016:	4812      	ldr	r0, [pc, #72]	; (800c060 <HAL_PCD_MspInit+0xa4>)
 800c018:	f7f5 fd80 	bl	8001b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800c01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c020:	4a0e      	ldr	r2, [pc, #56]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800c022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c026:	6353      	str	r3, [r2, #52]	; 0x34
 800c028:	2300      	movs	r3, #0
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	4b0b      	ldr	r3, [pc, #44]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800c02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c030:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800c032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c036:	6453      	str	r3, [r2, #68]	; 0x44
 800c038:	4b08      	ldr	r3, [pc, #32]	; (800c05c <HAL_PCD_MspInit+0xa0>)
 800c03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c044:	2200      	movs	r2, #0
 800c046:	2105      	movs	r1, #5
 800c048:	2043      	movs	r0, #67	; 0x43
 800c04a:	f7f5 fd3d 	bl	8001ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c04e:	2043      	movs	r0, #67	; 0x43
 800c050:	f7f5 fd56 	bl	8001b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c054:	bf00      	nop
 800c056:	3728      	adds	r7, #40	; 0x28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	40023800 	.word	0x40023800
 800c060:	40020000 	.word	0x40020000

0800c064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f7fb f9b9 	bl	80073f2 <USBD_LL_SetupStage>
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f7fb f9f3 	bl	800749c <USBD_LL_DataOutStage>
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	334c      	adds	r3, #76	; 0x4c
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f7fb fa8c 	bl	8007602 <USBD_LL_DataInStage>
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c100:	4618      	mov	r0, r3
 800c102:	f7fb fbc0 	bl	8007886 <USBD_LL_SOF>
}
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c116:	2301      	movs	r3, #1
 800c118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
 800c126:	e008      	b.n	800c13a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d102      	bne.n	800c136 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
 800c134:	e001      	b.n	800c13a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c136:	f7f4 fe39 	bl	8000dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f7fb fb60 	bl	800780a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c150:	4618      	mov	r0, r3
 800c152:	f7fb fb08 	bl	8007766 <USBD_LL_Reset>
}
 800c156:	bf00      	nop
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb fb5b 	bl	800782a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	6812      	ldr	r2, [r2, #0]
 800c182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c186:	f043 0301 	orr.w	r3, r3, #1
 800c18a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d005      	beq.n	800c1a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <HAL_PCD_SuspendCallback+0x48>)
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	4a03      	ldr	r2, [pc, #12]	; (800c1a8 <HAL_PCD_SuspendCallback+0x48>)
 800c19a:	f043 0306 	orr.w	r3, r3, #6
 800c19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	e000ed00 	.word	0xe000ed00

0800c1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fb fb4b 	bl	8007856 <USBD_LL_Resume>
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fb fba3 	bl	800792a <USBD_LL_IsoOUTIncomplete>
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7fb fb5f 	bl	80078c6 <USBD_LL_IsoINIncomplete>
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fb fbb5 	bl	800798e <USBD_LL_DevConnected>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fb fbb2 	bl	80079a4 <USBD_LL_DevDisconnected>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d13c      	bne.n	800c2d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c258:	4a20      	ldr	r2, [pc, #128]	; (800c2dc <USBD_LL_Init+0x94>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a1e      	ldr	r2, [pc, #120]	; (800c2dc <USBD_LL_Init+0x94>)
 800c264:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c268:	4b1c      	ldr	r3, [pc, #112]	; (800c2dc <USBD_LL_Init+0x94>)
 800c26a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c26e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c270:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <USBD_LL_Init+0x94>)
 800c272:	2204      	movs	r2, #4
 800c274:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <USBD_LL_Init+0x94>)
 800c278:	2202      	movs	r2, #2
 800c27a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c27c:	4b17      	ldr	r3, [pc, #92]	; (800c2dc <USBD_LL_Init+0x94>)
 800c27e:	2200      	movs	r2, #0
 800c280:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c282:	4b16      	ldr	r3, [pc, #88]	; (800c2dc <USBD_LL_Init+0x94>)
 800c284:	2202      	movs	r2, #2
 800c286:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c288:	4b14      	ldr	r3, [pc, #80]	; (800c2dc <USBD_LL_Init+0x94>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c28e:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <USBD_LL_Init+0x94>)
 800c290:	2200      	movs	r2, #0
 800c292:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c294:	4b11      	ldr	r3, [pc, #68]	; (800c2dc <USBD_LL_Init+0x94>)
 800c296:	2200      	movs	r2, #0
 800c298:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <USBD_LL_Init+0x94>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2a0:	4b0e      	ldr	r3, [pc, #56]	; (800c2dc <USBD_LL_Init+0x94>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2a6:	480d      	ldr	r0, [pc, #52]	; (800c2dc <USBD_LL_Init+0x94>)
 800c2a8:	f7f5 fded 	bl	8001e86 <HAL_PCD_Init>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2b2:	f7f4 fd7b 	bl	8000dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2b6:	2180      	movs	r1, #128	; 0x80
 800c2b8:	4808      	ldr	r0, [pc, #32]	; (800c2dc <USBD_LL_Init+0x94>)
 800c2ba:	f7f7 f844 	bl	8003346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2be:	2240      	movs	r2, #64	; 0x40
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	4806      	ldr	r0, [pc, #24]	; (800c2dc <USBD_LL_Init+0x94>)
 800c2c4:	f7f6 fff8 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2c8:	2280      	movs	r2, #128	; 0x80
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	4803      	ldr	r0, [pc, #12]	; (800c2dc <USBD_LL_Init+0x94>)
 800c2ce:	f7f6 fff3 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20006608 	.word	0x20006608

0800c2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7f5 fee2 	bl	80020c0 <HAL_PCD_Start>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f942 	bl	800c58c <USBD_Get_USB_Status>
 800c308:	4603      	mov	r3, r0
 800c30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	4608      	mov	r0, r1
 800c320:	4611      	mov	r1, r2
 800c322:	461a      	mov	r2, r3
 800c324:	4603      	mov	r3, r0
 800c326:	70fb      	strb	r3, [r7, #3]
 800c328:	460b      	mov	r3, r1
 800c32a:	70bb      	strb	r3, [r7, #2]
 800c32c:	4613      	mov	r3, r2
 800c32e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c33e:	78bb      	ldrb	r3, [r7, #2]
 800c340:	883a      	ldrh	r2, [r7, #0]
 800c342:	78f9      	ldrb	r1, [r7, #3]
 800c344:	f7f6 fbb3 	bl	8002aae <HAL_PCD_EP_Open>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f91c 	bl	800c58c <USBD_Get_USB_Status>
 800c354:	4603      	mov	r3, r0
 800c356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c358:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c37c:	78fa      	ldrb	r2, [r7, #3]
 800c37e:	4611      	mov	r1, r2
 800c380:	4618      	mov	r0, r3
 800c382:	f7f6 fbfc 	bl	8002b7e <HAL_PCD_EP_Close>
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 f8fd 	bl	800c58c <USBD_Get_USB_Status>
 800c392:	4603      	mov	r3, r0
 800c394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c396:	7bbb      	ldrb	r3, [r7, #14]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ba:	78fa      	ldrb	r2, [r7, #3]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f6 fcd4 	bl	8002d6c <HAL_PCD_EP_SetStall>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 f8de 	bl	800c58c <USBD_Get_USB_Status>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3f8:	78fa      	ldrb	r2, [r7, #3]
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7f6 fd19 	bl	8002e34 <HAL_PCD_EP_ClrStall>
 800c402:	4603      	mov	r3, r0
 800c404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 f8bf 	bl	800c58c <USBD_Get_USB_Status>
 800c40e:	4603      	mov	r3, r0
 800c410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c412:	7bbb      	ldrb	r3, [r7, #14]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	460b      	mov	r3, r1
 800c426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c434:	2b00      	cmp	r3, #0
 800c436:	da0b      	bge.n	800c450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c43e:	68f9      	ldr	r1, [r7, #12]
 800c440:	4613      	mov	r3, r2
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	4413      	add	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	440b      	add	r3, r1
 800c44a:	333e      	adds	r3, #62	; 0x3e
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	e00b      	b.n	800c468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c456:	68f9      	ldr	r1, [r7, #12]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	460b      	mov	r3, r1
 800c47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c48e:	78fa      	ldrb	r2, [r7, #3]
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f7f6 fae6 	bl	8002a64 <HAL_PCD_SetAddress>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 f874 	bl	800c58c <USBD_Get_USB_Status>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b086      	sub	sp, #24
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	603b      	str	r3, [r7, #0]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4d0:	7af9      	ldrb	r1, [r7, #11]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	f7f6 fbff 	bl	8002cd8 <HAL_PCD_EP_Transmit>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f853 	bl	800c58c <USBD_Get_USB_Status>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	460b      	mov	r3, r1
 800c502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c512:	7af9      	ldrb	r1, [r7, #11]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	f7f6 fb7b 	bl	8002c12 <HAL_PCD_EP_Receive>
 800c51c:	4603      	mov	r3, r0
 800c51e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c520:	7dfb      	ldrb	r3, [r7, #23]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f832 	bl	800c58c <USBD_Get_USB_Status>
 800c528:	4603      	mov	r3, r0
 800c52a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c52c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	460b      	mov	r3, r1
 800c540:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c548:	78fa      	ldrb	r2, [r7, #3]
 800c54a:	4611      	mov	r1, r2
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7f6 fbab 	bl	8002ca8 <HAL_PCD_EP_GetRxCount>
 800c552:	4603      	mov	r3, r0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c564:	4b03      	ldr	r3, [pc, #12]	; (800c574 <USBD_static_malloc+0x18>)
}
 800c566:	4618      	mov	r0, r3
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	20006b14 	.word	0x20006b14

0800c578 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]

}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	4603      	mov	r3, r0
 800c594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c59a:	79fb      	ldrb	r3, [r7, #7]
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d817      	bhi.n	800c5d0 <USBD_Get_USB_Status+0x44>
 800c5a0:	a201      	add	r2, pc, #4	; (adr r2, 800c5a8 <USBD_Get_USB_Status+0x1c>)
 800c5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a6:	bf00      	nop
 800c5a8:	0800c5b9 	.word	0x0800c5b9
 800c5ac:	0800c5bf 	.word	0x0800c5bf
 800c5b0:	0800c5c5 	.word	0x0800c5c5
 800c5b4:	0800c5cb 	.word	0x0800c5cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c5bc:	e00b      	b.n	800c5d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c2:	e008      	b.n	800c5d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c8:	e005      	b.n	800c5d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ce:	e002      	b.n	800c5d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d4:	bf00      	nop
  }
  return usb_status;
 800c5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <__libc_init_array>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4d0d      	ldr	r5, [pc, #52]	; (800c61c <__libc_init_array+0x38>)
 800c5e8:	4c0d      	ldr	r4, [pc, #52]	; (800c620 <__libc_init_array+0x3c>)
 800c5ea:	1b64      	subs	r4, r4, r5
 800c5ec:	10a4      	asrs	r4, r4, #2
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	42a6      	cmp	r6, r4
 800c5f2:	d109      	bne.n	800c608 <__libc_init_array+0x24>
 800c5f4:	4d0b      	ldr	r5, [pc, #44]	; (800c624 <__libc_init_array+0x40>)
 800c5f6:	4c0c      	ldr	r4, [pc, #48]	; (800c628 <__libc_init_array+0x44>)
 800c5f8:	f000 f82e 	bl	800c658 <_init>
 800c5fc:	1b64      	subs	r4, r4, r5
 800c5fe:	10a4      	asrs	r4, r4, #2
 800c600:	2600      	movs	r6, #0
 800c602:	42a6      	cmp	r6, r4
 800c604:	d105      	bne.n	800c612 <__libc_init_array+0x2e>
 800c606:	bd70      	pop	{r4, r5, r6, pc}
 800c608:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60c:	4798      	blx	r3
 800c60e:	3601      	adds	r6, #1
 800c610:	e7ee      	b.n	800c5f0 <__libc_init_array+0xc>
 800c612:	f855 3b04 	ldr.w	r3, [r5], #4
 800c616:	4798      	blx	r3
 800c618:	3601      	adds	r6, #1
 800c61a:	e7f2      	b.n	800c602 <__libc_init_array+0x1e>
 800c61c:	0800c8ec 	.word	0x0800c8ec
 800c620:	0800c8ec 	.word	0x0800c8ec
 800c624:	0800c8ec 	.word	0x0800c8ec
 800c628:	0800c8f0 	.word	0x0800c8f0

0800c62c <memcpy>:
 800c62c:	440a      	add	r2, r1
 800c62e:	4291      	cmp	r1, r2
 800c630:	f100 33ff 	add.w	r3, r0, #4294967295
 800c634:	d100      	bne.n	800c638 <memcpy+0xc>
 800c636:	4770      	bx	lr
 800c638:	b510      	push	{r4, lr}
 800c63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c642:	4291      	cmp	r1, r2
 800c644:	d1f9      	bne.n	800c63a <memcpy+0xe>
 800c646:	bd10      	pop	{r4, pc}

0800c648 <memset>:
 800c648:	4402      	add	r2, r0
 800c64a:	4603      	mov	r3, r0
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d100      	bne.n	800c652 <memset+0xa>
 800c650:	4770      	bx	lr
 800c652:	f803 1b01 	strb.w	r1, [r3], #1
 800c656:	e7f9      	b.n	800c64c <memset+0x4>

0800c658 <_init>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	bf00      	nop
 800c65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65e:	bc08      	pop	{r3}
 800c660:	469e      	mov	lr, r3
 800c662:	4770      	bx	lr

0800c664 <_fini>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	bf00      	nop
 800c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66a:	bc08      	pop	{r3}
 800c66c:	469e      	mov	lr, r3
 800c66e:	4770      	bx	lr
